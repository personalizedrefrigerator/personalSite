/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../lib/string-utils-common.js":
/*!*************************************!*\
  !*** ../lib/string-utils-common.js ***!
  \*************************************/
/***/ (function(module) {

	function pregQuote(str){var delimiter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return(""+str).replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\"+(delimiter||'')+"-]",'g'),'\\$&');}function replaceRegexDiacritics(regexString){if(!regexString)return'';var diacriticReplacements={a:'[aàáâãäåāą]',A:'[AÀÁÂÃÄÅĀĄ]',c:'[cçćč]',C:'[CÇĆČ]',d:'[dđď]',D:'[DĐĎ]',e:'[eèéêëěēę]',E:'[EÈÉÊËĚĒĘ]',i:'[iìíîïī]',I:'[IÌÍÎÏĪ]',l:'[lł]',L:'[LŁ]',n:'[nñňń]',N:'[NÑŇŃ]',o:'[oòóôõöøō]',O:'[OÒÓÔÕÖØŌ]',r:'[rř]',R:'[RŘ]',s:'[sšś]',S:'[SŠŚ]',t:'[tť]',T:'[TŤ]',u:'[uùúûüůū]',U:'[UÙÚÛÜŮŪ]',y:'[yÿý]',Y:'[YŸÝ]',z:'[zžżź]',Z:'[ZŽŻŹ]'};var output='';for(var i=0;i<regexString.length;i++){var c=regexString[i];var r=diacriticReplacements[c];if(r){output+=r;}else{output+=c;}}return output;}if(true){module.exports={pregQuote:pregQuote,replaceRegexDiacritics:replaceRegexDiacritics};}

	/***/ }),
	
	/***/ "./components/NoteEditor/CodeMirror/webviewLogger.ts":
	/*!***********************************************************!*\
	  !*** ./components/NoteEditor/CodeMirror/webviewLogger.ts ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	// Handle logging strings when running in a WebView.
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.logMessage = exports.postMessage = void 0;
	// Because this will be running both in a WebView and in nodeJS, we need to use
	// globalThis in place of window. We need to tell ESLint that we're doing this:
	// /* global globalThis*/
	function postMessage(name, data) {
		// Only call postMessage if we're running in a WebView (this code may be called
		// in integration tests).
		var _a;
		// globalThis doesn't seem to be defined as of RN 69 or 70, so use `window` instead.
		// 	(globalThis as any).ReactNativeWebView?.postMessage(JSON.stringify({
		// 		data,
		// 		name,
		// 	}));
		(_a = window.ReactNativeWebView) === null || _a === void 0 ? void 0 : _a.postMessage(JSON.stringify({
			data,
			name,
		}));
	}
	exports.postMessage = postMessage;
	function logMessage(...msg) {
		postMessage('onLog', { value: msg });
	}
	exports.logMessage = logMessage;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/CodeMirror5Emulation/CodeMirror5Emulation.ts":
	/*!*************************************************************************!*\
	  !*** ../editor/CodeMirror/CodeMirror5Emulation/CodeMirror5Emulation.ts ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const getScrollFraction_1 = __webpack_require__(/*! ../getScrollFraction */ "../editor/CodeMirror/getScrollFraction.ts");
	const codemirror_vim_1 = __webpack_require__(/*! @replit/codemirror-vim */ "../editor/node_modules/@replit/codemirror-vim/dist/index.cjs");
	const editorCommands_1 = __webpack_require__(/*! ../editorCommands/editorCommands */ "../editor/CodeMirror/editorCommands/editorCommands.ts");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const Decorator_1 = __webpack_require__(/*! ./Decorator */ "../editor/CodeMirror/CodeMirror5Emulation/Decorator.ts");
	const insertLineAfter_1 = __webpack_require__(/*! ../editorCommands/insertLineAfter */ "../editor/CodeMirror/editorCommands/insertLineAfter.ts");
	const { pregQuote } = __webpack_require__(/*! @joplin/lib/string-utils-common */ "../lib/string-utils-common.js");
	const documentPositionFromPos = (doc, pos) => {
		const line = doc.lineAt(pos);
		return {
			// CM 5 uses 0-based line numbering
			line: line.number - 1,
			ch: pos - line.from,
		};
	};
	class CodeMirror5Emulation extends codemirror_vim_1.CodeMirror {
		constructor(editor, logMessage) {
			super(editor);
			this.editor = editor;
			this.logMessage = logMessage;
			this._events = {};
			this._options = Object.create(null);
			// Used by some plugins to store state.
			this.state = Object.create(null);
			this.Vim = codemirror_vim_1.Vim;
			// Passed as initial state to plugins
			this.Init = { toString: () => 'CodeMirror.Init' };
			this.commands = CodeMirror5Emulation.commands;
			const { decorator, extension: decoratorExtension } = Decorator_1.default.create(editor);
			this._decorator = decorator;
			this._decoratorExtension = decoratorExtension;
			editor.dispatch({
				effects: state_1.StateEffect.appendConfig.of(this.makeCM6Extensions()),
			});
		}
		makeCM6Extensions() {
			const cm5 = this;
			const editor = this.editor;
			return [
				// Fires events
				view_1.EditorView.domEventHandlers({
					scroll: () => CodeMirror5Emulation.signal(this, 'scroll'),
					focus: () => CodeMirror5Emulation.signal(this, 'focus'),
					paste: event => CodeMirror5Emulation.signal(this, 'paste', event),
					blur: () => CodeMirror5Emulation.signal(this, 'blur'),
					mousedown: event => CodeMirror5Emulation.signal(this, 'mousedown', event),
				}),
				view_1.ViewPlugin.fromClass(class {
					update(update) {
						try {
							if (update.viewportChanged) {
								CodeMirror5Emulation.signal(cm5, 'viewportChange', editor.viewport.from, editor.viewport.to);
							}
							if (update.docChanged) {
								cm5.fireChangeEvents(update);
								cm5.onChange(update);
							}
							if (update.selectionSet) {
								cm5.onSelectionChange();
							}
							CodeMirror5Emulation.signal(cm5, 'update');
							// Catch the error -- otherwise, CodeMirror will de-register the update listener.
						}
						catch (error) {
							cm5.logMessage(`Error dispatching update: ${error}`);
						}
					}
				}),
				// Decorations
				this._decoratorExtension,
				// Some plugins rely on a CodeMirror-measure element
				// to store temporary content.
				view_1.showPanel.of(() => {
					const dom = document.createElement('div');
					dom.classList.add('CodeMirror-measure');
					return { dom };
				}),
				// Note: We can allow legacy CM5 CSS to apply to the editor
				// with a line similar to the following:
				//    EditorView.editorAttributes.of({ class: 'CodeMirror' }),
				// Many of these styles, however, don't work well with CodeMirror 6.
			];
		}
		isEventHandledBySuperclass(eventName) {
			return ['beforeSelectionChange'].includes(eventName);
		}
		on(eventName, callback) {
			var _a;
			var _b;
			if (this.isEventHandledBySuperclass(eventName)) {
				return super.on(eventName, callback);
			}
			(_a = (_b = this._events)[eventName]) !== null && _a !== void 0 ? _a : (_b[eventName] = []);
			this._events[eventName].push(callback);
		}
		off(eventName, callback) {
			if (!(eventName in this._events)) {
				return;
			}
			this._events[eventName] = this._events[eventName].filter(otherCallback => otherCallback !== callback);
		}
		static signal(target, eventName, ...args) {
			var _a;
			const listeners = (_a = target._events[eventName]) !== null && _a !== void 0 ? _a : [];
			for (const listener of listeners) {
				listener(target, ...args);
			}
			super.signal(target, eventName, ...args);
		}
		fireChangeEvents(update) {
			const changes = [];
			const origDoc = update.startState.doc;
			for (const transaction of update.transactions) {
				transaction.changes.iterChanges((fromA, toA, _fromB, _toB, inserted) => {
					changes.push({
						from: documentPositionFromPos(origDoc, fromA),
						to: documentPositionFromPos(origDoc, toA),
						text: inserted.sliceString(0).split('\n'),
						removed: origDoc.sliceString(fromA, toA).split('\n'),
						transaction,
					});
				});
			}
			// Delay firing events -- event listeners may try to create transactions.
			// (this is done by the rich markdown plugin).
			setTimeout(() => {
				for (const change of changes) {
					CodeMirror5Emulation.signal(this, 'change', change);
					// If triggered by a user, also send the inputRead event
					if (change.transaction.isUserEvent('input')) {
						CodeMirror5Emulation.signal(this, 'inputRead', change);
					}
				}
				CodeMirror5Emulation.signal(this, 'changes', changes);
			}, 0);
		}
		// codemirror-vim's adapter doesn't match the CM5 docs -- wrap it.
		getCursor(mode) {
			if (mode === 'from') {
				mode = 'start';
			}
			if (mode === 'to') {
				mode = 'end';
			}
			return super.getCursor(mode);
		}
		getSearchCursor(query, pos) {
			// The superclass CodeMirror adapter only supports regular expression
			// arguments.
			if (typeof query === 'string') {
				query = new RegExp(pregQuote(query));
			}
			return super.getSearchCursor(query, pos || { line: 0, ch: 0 });
		}
		lineAtHeight(height, _mode) {
			const lineInfo = this.editor.lineBlockAtHeight(height);
			// - 1: Convert to zero-based.
			const lineNumber = this.editor.state.doc.lineAt(lineInfo.to).number - 1;
			return lineNumber;
		}
		heightAtLine(lineNumber, mode) {
			// CodeMirror 5 uses 0-based line numbers. CM6 uses 1-based
			// line numbers.
			const doc = this.editor.state.doc;
			const lineInfo = doc.line(Math.min(lineNumber + 1, doc.lines));
			const lineBlock = this.editor.lineBlockAt(lineInfo.from);
			const height = lineBlock.top;
			if (mode === 'local') {
				const editorTop = this.editor.lineBlockAt(0).top;
				return height - editorTop;
			}
			else {
				return height;
			}
		}
		lineInfo(lineNumber) {
			const line = this.editor.state.doc.line(lineNumber + 1);
			const result = {
				line: lineNumber,
				// Note: In CM5, a line handle is not just a line number
				handle: lineNumber,
				text: line.text,
				gutterMarkers: [],
				textClass: ['cm-line', ...this._decorator.getLineClasses(lineNumber)],
				bgClass: '',
				wrapClass: '',
				widgets: this._decorator.getLineWidgets(lineNumber),
			};
			return result;
		}
		getStateAfter(_line) {
			// TODO: Should return parser state. Returning an empty object
			//       allows some plugins to run without crashing, however.
			return {};
		}
		getScrollPercent() {
			return (0, getScrollFraction_1.default)(this.editor);
		}
		defineExtension(name, value) {
			var _a;
			var _b;
			(_a = (_b = CodeMirror5Emulation.prototype)[name]) !== null && _a !== void 0 ? _a : (_b[name] = value);
		}
		defineOption(name, defaultValue, onUpdate) {
			this._options[name] = {
				value: defaultValue,
				onUpdate,
			};
			onUpdate(this, defaultValue, this.Init);
		}
		// Override codemirror-vim's setOption to allow user-defined options
		setOption(name, value) {
			if (name in this._options) {
				const oldValue = this._options[name].value;
				this._options[name].value = value;
				this._options[name].onUpdate(this, value, oldValue);
			}
			else {
				super.setOption(name, value);
			}
		}
		getOption(name) {
			if (name in this._options) {
				return this._options[name].value;
			}
			else {
				return super.getOption(name);
			}
		}
		// codemirror-vim's API doesn't match the API docs here -- it expects addOverlay
		// to return a SearchQuery. As such, this override returns "any".
		addOverlay(modeObject) {
			if ('query' in modeObject) {
				return super.addOverlay(modeObject);
			}
			this._decorator.addOverlay(modeObject);
		}
		addLineClass(lineNumber, where, className) {
			this._decorator.addLineClass(lineNumber, where, className);
		}
		removeLineClass(lineNumber, where, className) {
			this._decorator.removeLineClass(lineNumber, where, className);
		}
		addLineWidget(lineNumber, node, options) {
			this._decorator.addLineWidget(lineNumber, node, options);
		}
		// TODO: Currently copied from useCursorUtils.ts.
		// TODO: Remove the duplicate code when CodeMirror 5 is eventually removed.
		wrapSelections(string1, string2) {
			const selectedStrings = this.getSelections();
			// Batches the insert operations, if this wasn't done the inserts
			// could potentially overwrite one another
			this.operation(() => {
				for (let i = 0; i < selectedStrings.length; i++) {
					const selected = selectedStrings[i];
					// Remove white space on either side of selection
					const start = selected.search(/[^\s]/);
					const end = selected.search(/[^\s](?=[\s]*$)/);
					const core = selected.substring(start, end - start + 1);
					// If selection can be toggled do that
					if (core.startsWith(string1) && core.endsWith(string2)) {
						const inside = core.substring(string1.length, core.length - string1.length - string2.length);
						selectedStrings[i] = selected.substring(0, start) + inside + selected.substring(end + 1);
					}
					else {
						selectedStrings[i] = selected.substring(0, start) + string1 + core + string2 + selected.substring(end + 1);
					}
				}
				this.replaceSelections(selectedStrings);
			});
		}
		joplinCommandToCodeMirrorCommand(commandName) {
			const match = /^editor\.(.*)$/g.exec(commandName);
			if (!match || !(match[1] in CodeMirror5Emulation.commands)) {
				return null;
			}
			return match[1];
		}
		supportsJoplinCommand(commandName) {
			return this.joplinCommandToCodeMirrorCommand(commandName) in CodeMirror5Emulation.commands;
		}
		execJoplinCommand(joplinCommandName) {
			const commandName = this.joplinCommandToCodeMirrorCommand(joplinCommandName);
			if (commandName === null) {
				this.logMessage(`Unsupported Joplin command, ${joplinCommandName}`);
				return;
			}
			return this.execCommand(commandName);
		}
		commandExists(commandName) {
			return commandName in CodeMirror5Emulation.commands;
		}
		execCommand(name) {
			if (!this.commandExists(name)) {
				this.logMessage(`Unsupported CodeMirror command, ${name}`);
				return;
			}
			return CodeMirror5Emulation.commands[name](this);
		}
	}
	CodeMirror5Emulation.commands = (() => {
		const commands = Object.assign(Object.assign({}, codemirror_vim_1.CodeMirror.commands), { vimInsertListElement: (codeMirror) => {
				(0, insertLineAfter_1.default)(codeMirror.cm6);
				codemirror_vim_1.Vim.handleKey(codeMirror, 'i', 'macro');
			} });
		for (const commandName in editorCommands_1.default) {
			const command = editorCommands_1.default[commandName];
			commands[commandName] = (codeMirror) => command(codeMirror.cm6);
		}
		// as any: Required to properly extend the base class -- without this,
		// the commands dictionary isn't known (by TypeScript) to have the same
		// properties as the commands dictionary in the parent class.
		return commands;
	})();
	exports["default"] = CodeMirror5Emulation;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/CodeMirror5Emulation/Decorator.ts":
	/*!**************************************************************!*\
	  !*** ../editor/CodeMirror/CodeMirror5Emulation/Decorator.ts ***!
	  \**************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	// Handles adding decorations to the CodeMirror editor -- converts CodeMirror5-style calls
	// to input accepted by CodeMirror 6
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const mapRangeConfig = {
		// Updates a range based on some change to the document
		map: (range, change) => {
			const from = change.mapPos(range.from);
			const to = change.mapPos(range.to);
			return Object.assign(Object.assign({}, range), { from: Math.min(from, to), to: Math.max(from, to) });
		},
	};
	const addLineDecorationEffect = state_1.StateEffect.define(mapRangeConfig);
	const removeLineDecorationEffect = state_1.StateEffect.define(mapRangeConfig);
	const addMarkDecorationEffect = state_1.StateEffect.define(mapRangeConfig);
	const addLineWidgetEffect = state_1.StateEffect.define(mapRangeConfig);
	const removeLineWidgetEffect = state_1.StateEffect.define();
	class WidgetDecorationWrapper extends view_1.WidgetType {
		constructor(element, options) {
			super();
			this.element = element;
			this.options = options;
		}
		toDOM() {
			const container = document.createElement('div');
			this.element.remove();
			container.appendChild(this.element);
			if (this.options.className) {
				container.classList.add(this.options.className);
			}
			return container;
		}
	}
	class Decorator {
		constructor(editor) {
			this.editor = editor;
			this._effectDecorations = view_1.Decoration.none;
			this._decorationCache = Object.create(null);
			this._overlays = [];
			const decorator = this;
			this._extension = [
				// Overlay decorations -- recreate all decorations when the editor changes
				// (overlay decorations require parsing the document and may change output
				// when the editor/view changes.)
				view_1.ViewPlugin.fromClass(class {
					constructor(view) {
						this.decorations = decorator.createOverlayDecorations(view);
					}
					update(update) {
						if (update.viewportChanged || update.docChanged) {
							this.decorations = decorator.createOverlayDecorations(update.view);
						}
					}
				}, {
					decorations: v => v.decorations,
				}),
				// Other decorations based on effects. See the decoration examples: https://codemirror.net/examples/decoration/
				// Note that EditorView.decorations.from is required for block widgets.
				state_1.StateField.define({
					create: () => view_1.Decoration.none,
					update: (_, viewUpdate) => decorator.updateEffectDecorations([viewUpdate]),
					provide: field => view_1.EditorView.decorations.from(field),
				}),
			];
		}
		static create(editor) {
			const decorator = new Decorator(editor);
			return { decorator, extension: decorator._extension };
		}
		classNameToCssDecoration(className, isLineDecoration) {
			let decoration;
			if (className in this._decorationCache) {
				decoration = this._decorationCache[className];
			}
			else {
				const attributes = { class: className };
				if (isLineDecoration) {
					decoration = view_1.Decoration.line({ attributes });
				}
				else {
					decoration = view_1.Decoration.mark({ attributes });
				}
				this._decorationCache[className] = decoration;
			}
			return decoration;
		}
		updateEffectDecorations(transactions) {
			let decorations = this._effectDecorations;
			// Update decoration positions
			for (const transaction of transactions) {
				decorations = decorations.map(transaction.changes);
				// Add or remove decorations
				for (const effect of transaction.effects) {
					const isMarkDecoration = effect.is(addMarkDecorationEffect);
					const isLineDecoration = effect.is(addLineDecorationEffect);
					if (isMarkDecoration || isLineDecoration) {
						const decoration = this.classNameToCssDecoration(effect.value.cssClass, isLineDecoration);
						const value = effect.value;
						const from = effect.value.from;
						// Line decorations are specified to have a size-zero range.
						const to = isLineDecoration ? from : value.to;
						decorations = decorations.update({
							add: [decoration.range(from, to)],
						});
					}
					else if (effect.is(removeLineDecorationEffect)) {
						const doc = transaction.state.doc;
						const targetFrom = doc.lineAt(effect.value.from).from;
						const targetTo = doc.lineAt(effect.value.to).to;
						const targetDecoration = this.classNameToCssDecoration(effect.value.cssClass, true);
						decorations = decorations.update({
							// Returns true only for decorations that should be kept.
							filter: (from, to, value) => {
								if (from >= targetFrom && to <= targetTo && value.eq(targetDecoration)) {
									return false;
								}
								return true;
							},
						});
					}
					else if (effect.is(addLineWidgetEffect)) {
						const options = effect.value.options;
						const decoration = view_1.Decoration.widget({
							widget: new WidgetDecorationWrapper(effect.value.element, options),
							side: options.above ? -1 : 1,
							block: true,
						});
						decorations = decorations.update({
							add: [decoration.range(options.above ? effect.value.from : effect.value.to)],
						});
					}
					else if (effect.is(removeLineWidgetEffect)) {
						decorations = decorations.update({
							// Returns true only for decorations that should be kept.
							filter: (_from, _to, value) => {
								var _a;
								return ((_a = value.spec.widget) === null || _a === void 0 ? void 0 : _a.element) !== effect.value.element;
							},
						});
					}
				}
			}
			this._effectDecorations = decorations;
			return decorations;
		}
		createOverlayDecorations(view) {
			var _a, _b, _c;
			var _d;
			const makeDecoration = (tokenName, start, stop) => {
				const isLineDecoration = tokenName.startsWith('line-');
				// CM5 prefixes class names with cm-
				tokenName = `cm-${tokenName}`;
				const decoration = this.classNameToCssDecoration(tokenName, isLineDecoration);
				return decoration.range(start, stop);
			};
			const indentSize = view.state.facet(language_1.indentUnit).length;
			const newDecorations = [];
			for (const overlay of this._overlays) {
				const state = (_b = (_a = overlay.startState) === null || _a === void 0 ? void 0 : _a.call(overlay, indentSize)) !== null && _b !== void 0 ? _b : {};
				for (const { from, to } of view.visibleRanges) {
					const fromLine = view.state.doc.lineAt(from);
					const toLine = view.state.doc.lineAt(to);
					const fromLineNumber = fromLine.number;
					const toLineNumber = toLine.number;
					for (let i = fromLineNumber; i <= toLineNumber; i++) {
						const line = view.state.doc.line(i);
						const reader = new language_1.StringStream(line.text, view.state.tabSize, indentSize);
						let lastPos = 0;
						(_c = (_d = reader).baseToken) !== null && _c !== void 0 ? _c : (_d.baseToken = () => null);
						while (!reader.eol()) {
							const token = overlay.token(reader, state);
							if (token) {
								for (const className of token.split(/\s+/)) {
									if (className.startsWith('line-')) {
										newDecorations.push(makeDecoration(className, line.from, line.from));
									}
									else {
										const from = lastPos + line.from;
										const to = reader.pos + line.from;
										newDecorations.push(makeDecoration(className, from, to));
									}
								}
							}
							if (reader.pos === lastPos) {
								throw new Error('Mark decoration position did not increase -- overlays must advance with each call to .token()');
							}
							lastPos = reader.pos;
						}
					}
				}
			}
			// Required by CodeMirror:
			// Should be sorted by from position, then by length.
			newDecorations.sort((a, b) => {
				if (a.from !== b.from) {
					return a.from - b.from;
				}
				return a.to - b.to;
			});
			// Per the documentation, new tokens should be added in
			// increasing order.
			const decorations = new state_1.RangeSetBuilder();
			for (const decoration of newDecorations) {
				decorations.add(decoration.from, decoration.to, decoration.value);
			}
			return decorations.finish();
		}
		addOverlay(modeObject) {
			this._overlays.push(modeObject);
		}
		addRemoveLineClass(lineNumber, className, add) {
			// + 1: Convert from zero-indexed to one-indexed
			const line = this.editor.state.doc.line(lineNumber + 1);
			const effect = add ? addLineDecorationEffect : removeLineDecorationEffect;
			this.editor.dispatch({
				effects: effect.of({
					cssClass: className,
					from: line.from,
					to: line.to,
				}),
			});
		}
		addLineClass(lineNumber, _where, className) {
			this.addRemoveLineClass(lineNumber, className, true);
		}
		removeLineClass(lineNumber, _where, className) {
			this.addRemoveLineClass(lineNumber, className, false);
		}
		getLineClasses(lineNumber) {
			const line = this.editor.state.doc.line(lineNumber + 1);
			const lineClasses = [];
			this._effectDecorations.between(line.from, line.to, (from, to, decoration) => {
				var _a;
				if (from === line.from && to === line.to) {
					const className = (_a = decoration.spec) === null || _a === void 0 ? void 0 : _a.class;
					if (typeof className === 'string') {
						lineClasses.push(className);
					}
				}
			});
			return lineClasses;
		}
		createLineWidgetControl(node, options) {
			return {
				node,
				clear: () => {
					this.editor.dispatch({
						effects: removeLineWidgetEffect.of({ element: node }),
					});
				},
				changed: () => {
					this.editor.requestMeasure();
				},
				className: options.className,
			};
		}
		getLineWidgets(lineNumber) {
			const line = this.editor.state.doc.line(lineNumber + 1);
			const lineWidgets = [];
			this._effectDecorations.between(line.from, line.to, (from, to, decoration) => {
				var _a;
				if (from >= line.from && from <= line.to && from === to) {
					const widget = (_a = decoration.spec) === null || _a === void 0 ? void 0 : _a.widget;
					if (widget && widget instanceof WidgetDecorationWrapper) {
						lineWidgets.push(this.createLineWidgetControl(widget.element, widget.options));
					}
				}
			});
			return lineWidgets;
		}
		addLineWidget(lineNumber, node, options) {
			const line = this.editor.state.doc.line(lineNumber + 1);
			const lineWidgetOptions = {
				from: line.from,
				to: line.to,
				element: node,
				options,
			};
			this.editor.dispatch({
				effects: addLineWidgetEffect.of(lineWidgetOptions),
			});
			return this.createLineWidgetControl(node, options);
		}
	}
	exports["default"] = Decorator;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/CodeMirrorControl.ts":
	/*!*************************************************!*\
	  !*** ../editor/CodeMirror/CodeMirrorControl.ts ***!
	  \*************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const types_1 = __webpack_require__(/*! ../types */ "../editor/types.ts");
	const CodeMirror5Emulation_1 = __webpack_require__(/*! ./CodeMirror5Emulation/CodeMirror5Emulation */ "../editor/CodeMirror/CodeMirror5Emulation/CodeMirror5Emulation.ts");
	const editorCommands_1 = __webpack_require__(/*! ./editorCommands/editorCommands */ "../editor/CodeMirror/editorCommands/editorCommands.ts");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const markdownCommands_1 = __webpack_require__(/*! ./markdown/markdownCommands */ "../editor/CodeMirror/markdown/markdownCommands.ts");
	const search_1 = __webpack_require__(/*! @codemirror/search */ "../editor/node_modules/@codemirror/search/dist/index.cjs");
	const PluginLoader_1 = __webpack_require__(/*! ./pluginApi/PluginLoader */ "../editor/CodeMirror/pluginApi/PluginLoader.ts");
	const customEditorCompletion_1 = __webpack_require__(/*! ./pluginApi/customEditorCompletion */ "../editor/CodeMirror/pluginApi/customEditorCompletion.ts");
	class CodeMirrorControl extends CodeMirror5Emulation_1.default {
		constructor(editor, _callbacks) {
			super(editor, _callbacks.onLogMessage);
			this._callbacks = _callbacks;
			this._userCommands = new Map();
			//
			// CodeMirror-specific methods
			//
			this.joplinExtensions = {
				// Some plugins want to enable autocompletion from *just* that plugin, without also
				// enabling autocompletion for text within code blocks (and other built-in completion
				// sources).
				// To support this, we need to provide extensions that wrap the built-in autocomplete.
				// See https://discuss.codemirror.net/t/autocompletion-merging-override-in-config/7853
				completionSource: (completionSource) => customEditorCompletion_1.editorCompletionSource.of(completionSource),
				enableLanguageDataAutocomplete: customEditorCompletion_1.enableLanguageDataAutocomplete,
			};
			this._pluginControl = new PluginLoader_1.default(this, _callbacks.onLogMessage);
			this.addExtension((0, customEditorCompletion_1.default)());
		}
		supportsCommand(name) {
			return name in editorCommands_1.default || this._userCommands.has(name) || super.commandExists(name);
		}
		execCommand(name, ...args) {
			let commandOutput;
			if (this._userCommands.has(name)) {
				commandOutput = this._userCommands.get(name)(...args);
			}
			else if (name in editorCommands_1.default) {
				commandOutput = editorCommands_1.default[name](this.editor);
			}
			else if (super.commandExists(name)) {
				commandOutput = super.execCommand(name);
			}
			if (name === types_1.EditorCommandType.Undo || name === types_1.EditorCommandType.Redo) {
				this._callbacks.onUndoRedo();
			}
			return commandOutput;
		}
		registerCommand(name, command) {
			this._userCommands.set(name, command);
		}
		undo() {
			this.execCommand(types_1.EditorCommandType.Undo);
			this._callbacks.onUndoRedo();
		}
		redo() {
			this.execCommand(types_1.EditorCommandType.Redo);
			this._callbacks.onUndoRedo();
		}
		select(anchor, head) {
			this.editor.dispatch(this.editor.state.update({
				selection: { anchor, head },
				scrollIntoView: true,
			}));
		}
		clearHistory() {
			this._callbacks.onClearHistory();
		}
		setScrollPercent(fraction) {
			const maxScroll = this.editor.scrollDOM.scrollHeight - this.editor.scrollDOM.clientHeight;
			this.editor.scrollDOM.scrollTop = fraction * maxScroll;
		}
		insertText(text) {
			this.editor.dispatch(this.editor.state.replaceSelection(text));
		}
		updateBody(newBody) {
			// TODO: doc.toString() can be slow for large documents.
			const currentBody = this.editor.state.doc.toString();
			if (newBody !== currentBody) {
				// For now, collapse the selection to a single cursor
				// to ensure that the selection stays within the document
				// (and thus avoids an exception).
				const mainCursorPosition = this.editor.state.selection.main.anchor;
				const newCursorPosition = Math.min(mainCursorPosition, newBody.length);
				this.editor.dispatch(this.editor.state.update({
					changes: {
						from: 0,
						to: this.editor.state.doc.length,
						insert: newBody,
					},
					selection: state_1.EditorSelection.cursor(newCursorPosition),
					scrollIntoView: true,
				}));
				return true;
			}
			return false;
		}
		updateLink(newLabel, newUrl) {
			(0, markdownCommands_1.updateLink)(newLabel, newUrl)(this.editor);
		}
		updateSettings(newSettings) {
			this._callbacks.onSettingsChange(newSettings);
		}
		setSearchState(newState) {
			const query = new search_1.SearchQuery({
				search: newState.searchText,
				caseSensitive: newState.caseSensitive,
				regexp: newState.useRegex,
				replace: newState.replaceText,
			});
			this.editor.dispatch({
				effects: search_1.setSearchQuery.of(query),
			});
		}
		addStyles(...styles) {
			this.editor.dispatch({
				effects: state_1.StateEffect.appendConfig.of(view_1.EditorView.theme(...styles)),
			});
		}
		setContentScripts(plugins) {
			return this._pluginControl.setPlugins(plugins);
		}
		remove() {
			this._pluginControl.remove();
			this._callbacks.onRemove();
		}
		addExtension(extension) {
			this.editor.dispatch({
				effects: state_1.StateEffect.appendConfig.of([extension]),
			});
		}
	}
	exports["default"] = CodeMirrorControl;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/configFromSettings.ts":
	/*!**************************************************!*\
	  !*** ../editor/CodeMirror/configFromSettings.ts ***!
	  \**************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const autocomplete_1 = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	const types_1 = __webpack_require__(/*! ../types */ "../editor/types.ts");
	const theme_1 = __webpack_require__(/*! ./theme */ "../editor/CodeMirror/theme.ts");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const lang_markdown_1 = __webpack_require__(/*! @codemirror/lang-markdown */ "../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs");
	const markdown_1 = __webpack_require__(/*! @lezer/markdown */ "../editor/node_modules/@lezer/markdown/dist/index.cjs");
	const markdownMathParser_1 = __webpack_require__(/*! ./markdown/markdownMathParser */ "../editor/CodeMirror/markdown/markdownMathParser.ts");
	const lookUpLanguage_1 = __webpack_require__(/*! ./markdown/codeBlockLanguages/lookUpLanguage */ "../editor/CodeMirror/markdown/codeBlockLanguages/lookUpLanguage.ts");
	const lang_html_1 = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	const commands_1 = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const codemirror_vim_1 = __webpack_require__(/*! @replit/codemirror-vim */ "../editor/node_modules/@replit/codemirror-vim/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const configFromSettings = (settings) => {
		const languageExtension = (() => {
			const openingBrackets = '`([{\'"‘“（《「『【〔〖〘〚'.split('');
			const language = settings.language;
			if (language === types_1.EditorLanguageType.Markdown) {
				return [
					(0, lang_markdown_1.markdown)({
						extensions: [
							markdown_1.GFM,
							// Don't highlight KaTeX if the user disabled it
							settings.katexEnabled ? markdownMathParser_1.MarkdownMathExtension : [],
						],
						codeLanguages: lookUpLanguage_1.default,
					}),
					lang_markdown_1.markdownLanguage.data.of({ closeBrackets: openingBrackets }),
				];
			}
			else if (language === types_1.EditorLanguageType.Html) {
				return (0, lang_html_1.html)();
			}
			else {
				const exhaustivenessCheck = language;
				return exhaustivenessCheck;
			}
		})();
		const extensions = [
			languageExtension,
			(0, theme_1.default)(settings.themeData),
			view_1.EditorView.contentAttributes.of({
				autocapitalize: 'sentence',
				autocorrect: settings.spellcheckEnabled ? 'true' : 'false',
				spellcheck: settings.spellcheckEnabled ? 'true' : 'false',
			}),
			state_1.EditorState.readOnly.of(settings.readOnly),
			language_1.indentUnit.of(settings.indentWithTabs ? '\t' : '    '),
		];
		if (settings.automatchBraces) {
			extensions.push((0, autocomplete_1.closeBrackets)());
			extensions.push(view_1.keymap.of(autocomplete_1.closeBracketsKeymap));
		}
		if (settings.keymap === types_1.EditorKeymap.Vim) {
			extensions.push((0, codemirror_vim_1.vim)());
		}
		else if (settings.keymap === types_1.EditorKeymap.Emacs) {
			extensions.push(view_1.keymap.of(commands_1.emacsStyleKeymap));
		}
		if (!settings.ignoreModifiers) {
			extensions.push(view_1.keymap.of(commands_1.defaultKeymap));
		}
		return extensions;
	};
	exports["default"] = configFromSettings;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/createEditor.ts":
	/*!********************************************!*\
	  !*** ../editor/CodeMirror/createEditor.ts ***!
	  \********************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const search_1 = __webpack_require__(/*! @codemirror/search */ "../editor/node_modules/@codemirror/search/dist/index.cjs");
	const highlight_1 = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const commands_1 = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const view_2 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const search_2 = __webpack_require__(/*! @codemirror/search */ "../editor/node_modules/@codemirror/search/dist/index.cjs");
	const commands_2 = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const events_1 = __webpack_require__(/*! ../events */ "../editor/events.ts");
	const markdownCommands_1 = __webpack_require__(/*! ./markdown/markdownCommands */ "../editor/CodeMirror/markdown/markdownCommands.ts");
	const decoratorExtension_1 = __webpack_require__(/*! ./markdown/decoratorExtension */ "../editor/CodeMirror/markdown/decoratorExtension.ts");
	const computeSelectionFormatting_1 = __webpack_require__(/*! ./markdown/computeSelectionFormatting */ "../editor/CodeMirror/markdown/computeSelectionFormatting.ts");
	const SelectionFormatting_1 = __webpack_require__(/*! ../SelectionFormatting */ "../editor/SelectionFormatting.ts");
	const configFromSettings_1 = __webpack_require__(/*! ./configFromSettings */ "../editor/CodeMirror/configFromSettings.ts");
	const getScrollFraction_1 = __webpack_require__(/*! ./getScrollFraction */ "../editor/CodeMirror/getScrollFraction.ts");
	const CodeMirrorControl_1 = __webpack_require__(/*! ./CodeMirrorControl */ "../editor/CodeMirror/CodeMirrorControl.ts");
	const createEditor = (parentElement, props) => {
		const initialText = props.initialText;
		let settings = props.settings;
		props.onLogMessage('Initializing CodeMirror...');
		let searchVisible = false;
		// Handles firing an event when the undo/redo stack changes
		let schedulePostUndoRedoDepthChangeId_ = null;
		let lastUndoDepth = 0;
		let lastRedoDepth = 0;
		const schedulePostUndoRedoDepthChange = (editor, doItNow = false) => {
			if (schedulePostUndoRedoDepthChangeId_ !== null) {
				if (doItNow) {
					clearTimeout(schedulePostUndoRedoDepthChangeId_);
				}
				else {
					return;
				}
			}
			schedulePostUndoRedoDepthChangeId_ = setTimeout(() => {
				schedulePostUndoRedoDepthChangeId_ = null;
				const newUndoDepth = (0, commands_1.undoDepth)(editor.state);
				const newRedoDepth = (0, commands_1.redoDepth)(editor.state);
				if (newUndoDepth !== lastUndoDepth || newRedoDepth !== lastRedoDepth) {
					props.onEvent({
						kind: events_1.EditorEventType.UndoRedoDepthChange,
						undoDepth: newUndoDepth,
						redoDepth: newRedoDepth,
					});
					lastUndoDepth = newUndoDepth;
					lastRedoDepth = newRedoDepth;
				}
			}, doItNow ? 0 : 1000);
		};
		let currentDocText = props.initialText;
		const notifyDocChanged = (viewUpdate) => {
			if (viewUpdate.docChanged) {
				currentDocText = editor.state.doc.toString();
				props.onEvent({
					kind: events_1.EditorEventType.Change,
					value: currentDocText,
				});
				schedulePostUndoRedoDepthChange(editor);
			}
		};
		const notifyLinkEditRequest = () => {
			props.onEvent({
				kind: events_1.EditorEventType.EditLink,
			});
		};
		const onSearchDialogUpdate = () => {
			const query = (0, search_1.getSearchQuery)(editor.state);
			const searchState = {
				searchText: query.search,
				replaceText: query.replace,
				useRegex: query.regexp,
				caseSensitive: query.caseSensitive,
				dialogVisible: searchVisible,
			};
			props.onEvent({
				kind: events_1.EditorEventType.UpdateSearchDialog,
				searchState,
			});
		};
		const showSearchDialog = () => {
			if (!searchVisible) {
				(0, search_1.openSearchPanel)(editor);
			}
			searchVisible = true;
			onSearchDialogUpdate();
		};
		const hideSearchDialog = () => {
			if (searchVisible) {
				(0, search_1.closeSearchPanel)(editor);
			}
			searchVisible = false;
			onSearchDialogUpdate();
		};
		const globalSpellcheckEnabled = () => {
			return editor.contentDOM.spellcheck;
		};
		const notifySelectionChange = (viewUpdate) => {
			if (!viewUpdate.state.selection.eq(viewUpdate.startState.selection)) {
				const mainRange = viewUpdate.state.selection.main;
				const event = {
					kind: events_1.EditorEventType.SelectionRangeChange,
					anchor: mainRange.anchor,
					head: mainRange.head,
					from: mainRange.from,
					to: mainRange.to,
				};
				props.onEvent(event);
			}
		};
		const notifySelectionFormattingChange = (viewUpdate) => {
			const spellcheck = globalSpellcheckEnabled();
			// If we can't determine the previous formatting, post the update regardless
			if (!viewUpdate) {
				const formatting = (0, computeSelectionFormatting_1.default)(editor.state, spellcheck);
				props.onEvent({
					kind: events_1.EditorEventType.SelectionFormattingChange,
					formatting,
				});
			}
			else if (viewUpdate.docChanged || !viewUpdate.state.selection.eq(viewUpdate.startState.selection)) {
				// Only post the update if something changed
				const oldFormatting = (0, computeSelectionFormatting_1.default)(viewUpdate.startState, spellcheck);
				const newFormatting = (0, computeSelectionFormatting_1.default)(viewUpdate.state, spellcheck);
				if (!(0, SelectionFormatting_1.selectionFormattingEqual)(oldFormatting, newFormatting)) {
					props.onEvent({
						kind: events_1.EditorEventType.SelectionFormattingChange,
						formatting: newFormatting,
					});
				}
			}
		};
		// Returns a keyboard command that returns true (so accepts the keybind)
		// alwaysActive: true if this command should be registered even if ignoreModifiers is given.
		const keyCommand = (key, run, alwaysActive) => {
			return {
				key,
				run: editor => {
					if (settings.ignoreModifiers && !alwaysActive)
						return false;
					return run(editor);
				},
			};
		};
		const historyCompartment = new state_1.Compartment();
		const dynamicConfig = new state_1.Compartment();
		const editor = new view_1.EditorView({
			state: state_1.EditorState.create({
				// See https://github.com/codemirror/basic-setup/blob/main/src/codemirror.ts
				// for a sample configuration.
				extensions: [
					dynamicConfig.of((0, configFromSettings_1.default)(props.settings)),
					historyCompartment.of((0, commands_1.history)()),
					(0, search_1.search)(settings.useExternalSearch ? {
						createPanel(_) {
							return {
								// The actual search dialog is implemented with react native,
								// use a dummy element.
								dom: document.createElement('div'),
								mount() {
									showSearchDialog();
								},
								destroy() {
									hideSearchDialog();
								},
							};
						},
					} : undefined),
					// Allows multiple selections and allows selecting a rectangle
					// with ctrl (as in CodeMirror 5)
					state_1.EditorState.allowMultipleSelections.of(true),
					(0, view_1.rectangularSelection)(),
					(0, view_1.drawSelection)(),
					(0, view_1.highlightSpecialChars)(),
					(0, language_1.indentOnInput)(),
					view_1.EditorView.domEventHandlers({
						scroll: (_event, view) => {
							props.onEvent({
								kind: events_1.EditorEventType.Scroll,
								fraction: (0, getScrollFraction_1.default)(view),
							});
						},
					}),
					state_1.EditorState.tabSize.of(4),
					// Apply styles to entire lines (block-display decorations)
					decoratorExtension_1.default,
					// Adds additional CSS classes to tokens (the default CSS classes are
					// auto-generated and thus unstable).
					(0, language_1.syntaxHighlighting)(highlight_1.classHighlighter),
					view_1.EditorView.lineWrapping,
					view_1.EditorView.updateListener.of((viewUpdate) => {
						notifyDocChanged(viewUpdate);
						notifySelectionChange(viewUpdate);
						notifySelectionFormattingChange(viewUpdate);
					}),
					view_2.keymap.of([
						// Custom mod-f binding: Toggle the external dialog implementation
						// (don't show/hide the Panel dialog).
						keyCommand('Mod-f', (_) => {
							if (searchVisible) {
								hideSearchDialog();
							}
							else {
								showSearchDialog();
							}
							return true;
						}),
						// Markdown formatting keyboard shortcuts
						keyCommand('Mod-b', markdownCommands_1.toggleBolded),
						keyCommand('Mod-i', markdownCommands_1.toggleItalicized),
						keyCommand('Mod-$', markdownCommands_1.toggleMath),
						keyCommand('Mod-`', markdownCommands_1.toggleCode),
						keyCommand('Mod-[', markdownCommands_1.decreaseIndent),
						keyCommand('Mod-]', markdownCommands_1.increaseIndent),
						keyCommand('Mod-k', (_) => {
							notifyLinkEditRequest();
							return true;
						}),
						keyCommand('Tab', markdownCommands_1.insertOrIncreaseIndent, true),
						keyCommand('Shift-Tab', markdownCommands_1.decreaseIndent, true),
						...commands_1.standardKeymap, ...commands_2.historyKeymap, ...search_2.searchKeymap,
					]),
				],
				doc: initialText,
			}),
			parent: parentElement,
		});
		const editorControls = new CodeMirrorControl_1.default(editor, {
			onClearHistory: () => {
				// Clear history by removing then re-add the history extension.
				// Just re-adding the history extension isn't enough.
				editor.dispatch({
					effects: historyCompartment.reconfigure([]),
				});
				editor.dispatch({
					effects: historyCompartment.reconfigure((0, commands_1.history)()),
				});
			},
			onSettingsChange: (newSettings) => {
				settings = newSettings;
				editor.dispatch({
					effects: dynamicConfig.reconfigure((0, configFromSettings_1.default)(newSettings)),
				});
			},
			onUndoRedo: () => {
				// This callback is triggered when undo/redo is called
				// directly. Show visual feedback immediately.
				schedulePostUndoRedoDepthChange(editor, true);
			},
			onLogMessage: props.onLogMessage,
			onRemove: () => {
				editor.destroy();
			},
		});
		return editorControls;
	};
	exports["default"] = createEditor;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/editorCommands/editorCommands.ts":
	/*!*************************************************************!*\
	  !*** ../editor/CodeMirror/editorCommands/editorCommands.ts ***!
	  \*************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const types_1 = __webpack_require__(/*! ../../types */ "../editor/types.ts");
	const commands_1 = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const markdownCommands_1 = __webpack_require__(/*! ../markdown/markdownCommands */ "../editor/CodeMirror/markdown/markdownCommands.ts");
	const swapLine_1 = __webpack_require__(/*! ./swapLine */ "../editor/CodeMirror/editorCommands/swapLine.ts");
	const search_1 = __webpack_require__(/*! @codemirror/search */ "../editor/node_modules/@codemirror/search/dist/index.cjs");
	const editorCommands = {
		[types_1.EditorCommandType.Undo]: commands_1.undo,
		[types_1.EditorCommandType.Redo]: commands_1.redo,
		[types_1.EditorCommandType.SelectAll]: commands_1.selectAll,
		[types_1.EditorCommandType.Focus]: editor => editor.focus(),
		[types_1.EditorCommandType.ToggleBolded]: markdownCommands_1.toggleBolded,
		[types_1.EditorCommandType.ToggleItalicized]: markdownCommands_1.toggleItalicized,
		[types_1.EditorCommandType.ToggleCode]: markdownCommands_1.toggleCode,
		[types_1.EditorCommandType.ToggleMath]: markdownCommands_1.toggleMath,
		[types_1.EditorCommandType.ToggleNumberedList]: (0, markdownCommands_1.toggleList)(types_1.ListType.OrderedList),
		[types_1.EditorCommandType.ToggleBulletedList]: (0, markdownCommands_1.toggleList)(types_1.ListType.UnorderedList),
		[types_1.EditorCommandType.ToggleCheckList]: (0, markdownCommands_1.toggleList)(types_1.ListType.CheckList),
		[types_1.EditorCommandType.ToggleHeading]: (0, markdownCommands_1.toggleHeaderLevel)(2),
		[types_1.EditorCommandType.ToggleHeading1]: (0, markdownCommands_1.toggleHeaderLevel)(1),
		[types_1.EditorCommandType.ToggleHeading2]: (0, markdownCommands_1.toggleHeaderLevel)(2),
		[types_1.EditorCommandType.ToggleHeading3]: (0, markdownCommands_1.toggleHeaderLevel)(3),
		[types_1.EditorCommandType.ToggleHeading4]: (0, markdownCommands_1.toggleHeaderLevel)(4),
		[types_1.EditorCommandType.ToggleHeading5]: (0, markdownCommands_1.toggleHeaderLevel)(5),
		[types_1.EditorCommandType.ScrollSelectionIntoView]: editor => {
			editor.dispatch(editor.state.update({
				scrollIntoView: true,
			}));
		},
		[types_1.EditorCommandType.DeleteToLineEnd]: commands_1.deleteToLineEnd,
		[types_1.EditorCommandType.DeleteToLineStart]: commands_1.deleteToLineStart,
		[types_1.EditorCommandType.IndentMore]: markdownCommands_1.increaseIndent,
		[types_1.EditorCommandType.IndentLess]: markdownCommands_1.decreaseIndent,
		[types_1.EditorCommandType.IndentAuto]: commands_1.indentSelection,
		[types_1.EditorCommandType.InsertNewlineAndIndent]: commands_1.insertNewlineAndIndent,
		[types_1.EditorCommandType.SwapLineUp]: (0, swapLine_1.default)(swapLine_1.SwapLineDirection.Up),
		[types_1.EditorCommandType.SwapLineDown]: (0, swapLine_1.default)(swapLine_1.SwapLineDirection.Down),
		[types_1.EditorCommandType.GoDocEnd]: commands_1.cursorDocEnd,
		[types_1.EditorCommandType.GoDocStart]: commands_1.cursorDocStart,
		[types_1.EditorCommandType.GoLineStart]: commands_1.cursorLineStart,
		[types_1.EditorCommandType.GoLineEnd]: commands_1.cursorLineEnd,
		[types_1.EditorCommandType.GoLineUp]: commands_1.cursorLineUp,
		[types_1.EditorCommandType.GoLineDown]: commands_1.cursorLineDown,
		[types_1.EditorCommandType.GoPageUp]: commands_1.cursorPageUp,
		[types_1.EditorCommandType.GoPageDown]: commands_1.cursorPageDown,
		[types_1.EditorCommandType.GoCharLeft]: commands_1.cursorCharLeft,
		[types_1.EditorCommandType.GoCharRight]: commands_1.cursorCharRight,
		[types_1.EditorCommandType.UndoSelection]: commands_1.undoSelection,
		[types_1.EditorCommandType.RedoSelection]: commands_1.redoSelection,
		[types_1.EditorCommandType.ShowSearch]: search_1.openSearchPanel,
		[types_1.EditorCommandType.HideSearch]: search_1.closeSearchPanel,
		[types_1.EditorCommandType.FindNext]: search_1.findNext,
		[types_1.EditorCommandType.FindPrevious]: search_1.findPrevious,
		[types_1.EditorCommandType.ReplaceNext]: search_1.replaceNext,
		[types_1.EditorCommandType.ReplaceAll]: search_1.replaceAll,
	};
	exports["default"] = editorCommands;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/editorCommands/insertLineAfter.ts":
	/*!**************************************************************!*\
	  !*** ../editor/CodeMirror/editorCommands/insertLineAfter.ts ***!
	  \**************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const commands_1 = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const lang_markdown_1 = __webpack_require__(/*! @codemirror/lang-markdown */ "../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const insertLineAfter = (view) => {
		const state = view.state;
		view.dispatch(state.changeByRange((sel) => {
			const line = state.doc.lineAt(sel.anchor);
			return {
				range: state_1.EditorSelection.cursor(line.to),
			};
		}));
		// insertNewlineContinueMarkup does nothing if not in markdown -- we thus
		// need a fallback case
		const addedNewLine = (0, lang_markdown_1.insertNewlineContinueMarkup)(view);
		if (!addedNewLine) {
			(0, commands_1.insertNewlineAndIndent)(view);
		}
	};
	exports["default"] = insertLineAfter;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/editorCommands/swapLine.ts":
	/*!*******************************************************!*\
	  !*** ../editor/CodeMirror/editorCommands/swapLine.ts ***!
	  \*******************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.SwapLineDirection = void 0;
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var SwapLineDirection;
	(function (SwapLineDirection) {
		SwapLineDirection[SwapLineDirection["Up"] = -1] = "Up";
		SwapLineDirection[SwapLineDirection["Down"] = 1] = "Down";
	})(SwapLineDirection || (exports.SwapLineDirection = SwapLineDirection = {}));
	const swapLine = (direction) => (editor) => {
		const state = editor.state;
		const doc = state.doc;
		const transaction = state.changeByRange(range => {
			const currentLine = doc.lineAt(range.anchor);
			const otherLineNumber = currentLine.number + direction;
			// Out of range? No changes.
			if (otherLineNumber <= 0 || otherLineNumber > doc.lines) {
				return { range };
			}
			const otherLine = doc.line(otherLineNumber);
			let deltaPos;
			if (direction === SwapLineDirection.Down) {
				// +1: include newline
				deltaPos = otherLine.length + 1;
			}
			else {
				deltaPos = otherLine.from - currentLine.from;
			}
			return {
				range: state_1.EditorSelection.range(range.anchor + deltaPos, range.head + deltaPos),
				changes: [{
						from: currentLine.from,
						to: currentLine.to,
						insert: otherLine.text,
					}, {
						from: otherLine.from,
						to: otherLine.to,
						insert: currentLine.text,
					}],
			};
		});
		editor.dispatch(transaction);
		return true;
	};
	exports["default"] = swapLine;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/getScrollFraction.ts":
	/*!*************************************************!*\
	  !*** ../editor/CodeMirror/getScrollFraction.ts ***!
	  \*************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const getScrollFraction = (view) => {
		const maxScroll = view.scrollDOM.scrollHeight - view.scrollDOM.clientHeight;
		// Prevent division by zero
		return maxScroll > 0 ? view.scrollDOM.scrollTop / maxScroll : 0;
	};
	exports["default"] = getScrollFraction;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/codeBlockLanguages/defaultLanguage.ts":
	/*!***************************************************************************!*\
	  !*** ../editor/CodeMirror/markdown/codeBlockLanguages/defaultLanguage.ts ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	// To allow auto-indent to work in an unrecognised language, we define an
	// empty language. Doing so seems to enable auto-indent in code blocks with
	// that language.
	const defaultLangauge = language_1.StreamLanguage.define({
		token: (stream) => {
			stream.next();
			return null;
		},
	});
	const defaultLanguageDescription = language_1.LanguageDescription.of({
		name: 'default',
		support: new language_1.LanguageSupport(defaultLangauge),
	});
	exports["default"] = defaultLanguageDescription;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/codeBlockLanguages/lookUpLanguage.ts":
	/*!**************************************************************************!*\
	  !*** ../editor/CodeMirror/markdown/codeBlockLanguages/lookUpLanguage.ts ***!
	  \**************************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const language_data_1 = __webpack_require__(/*! @codemirror/language-data */ "../editor/node_modules/@codemirror/language-data/dist/index.cjs");
	const defaultLanguage_1 = __webpack_require__(/*! ./defaultLanguage */ "../editor/CodeMirror/markdown/codeBlockLanguages/defaultLanguage.ts");
	// Intended for use by the `markdown({ ... })` extension.
	const lookUpLanguage = (languageInfo) => {
		var _a;
		return (_a = language_1.LanguageDescription.matchLanguageName(language_data_1.languages, languageInfo)) !== null && _a !== void 0 ? _a : defaultLanguage_1.default;
	};
	exports["default"] = lookUpLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/computeSelectionFormatting.ts":
	/*!*******************************************************************!*\
	  !*** ../editor/CodeMirror/markdown/computeSelectionFormatting.ts ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const SelectionFormatting_1 = __webpack_require__(/*! ../../SelectionFormatting */ "../editor/SelectionFormatting.ts");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const computeSelectionFormatting = (state, globalSpellcheck) => {
		const range = state.selection.main;
		const formatting = Object.assign(Object.assign({}, SelectionFormatting_1.defaultSelectionFormatting), { selectedText: state.doc.sliceString(range.from, range.to), spellChecking: globalSpellcheck });
		const parseLinkData = (nodeText) => {
			const linkMatch = nodeText.match(/\[([^\]]*)\]\(([^)]*)\)/);
			if (linkMatch) {
				return {
					linkText: linkMatch[1],
					linkURL: linkMatch[2],
				};
			}
			return {
				linkText: null,
				linkURL: null,
			};
		};
		// Find nodes that overlap/are within the selected region
		(0, language_1.syntaxTree)(state).iterate({
			from: range.from, to: range.to,
			enter: node => {
				// Checklists don't have a specific containing node. As such,
				// we're in a checklist if we've selected a 'Task' node.
				if (node.name === 'Task') {
					formatting.inChecklist = true;
				}
				// Only handle notes that contain the entire range.
				if (node.from > range.from || node.to < range.to) {
					return;
				}
				// Lazily compute the node's text
				const nodeText = () => state.doc.sliceString(node.from, node.to);
				switch (node.name) {
					case 'StrongEmphasis':
						formatting.bolded = true;
						break;
					case 'Emphasis':
						formatting.italicized = true;
						break;
					case 'ListItem':
						formatting.listLevel += 1;
						break;
					case 'BulletList':
						formatting.inUnorderedList = true;
						break;
					case 'OrderedList':
						formatting.inOrderedList = true;
						break;
					case 'TaskList':
						formatting.inChecklist = true;
						break;
					case 'InlineCode':
					case 'FencedCode':
						formatting.inCode = true;
						formatting.unspellCheckableRegion = true;
						break;
					case 'InlineMath':
					case 'BlockMath':
						formatting.inMath = true;
						formatting.unspellCheckableRegion = true;
						break;
					case 'ATXHeading1':
						formatting.headerLevel = 1;
						break;
					case 'ATXHeading2':
						formatting.headerLevel = 2;
						break;
					case 'ATXHeading3':
						formatting.headerLevel = 3;
						break;
					case 'ATXHeading4':
						formatting.headerLevel = 4;
						break;
					case 'ATXHeading5':
						formatting.headerLevel = 5;
						break;
					case 'URL':
						formatting.inLink = true;
						formatting.linkData = Object.assign(Object.assign({}, formatting.linkData), { linkURL: nodeText() });
						formatting.unspellCheckableRegion = true;
						break;
					case 'Link':
						formatting.inLink = true;
						formatting.linkData = parseLinkData(nodeText());
						break;
				}
			},
		});
		// The markdown parser marks checklists as unordered lists. Ensure
		// that they aren't marked as such.
		if (formatting.inChecklist) {
			if (!formatting.inUnorderedList) {
				// Even if the selection contains a Task, because an unordered list node
				// must contain a valid Task node, we're only in a checklist if we're also in
				// an unordered list.
				formatting.inChecklist = false;
			}
			else {
				formatting.inUnorderedList = false;
			}
		}
		if (formatting.unspellCheckableRegion) {
			formatting.spellChecking = false;
		}
		return formatting;
	};
	exports["default"] = computeSelectionFormatting;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/decoratorExtension.ts":
	/*!***********************************************************!*\
	  !*** ../editor/CodeMirror/markdown/decoratorExtension.ts ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	//
	// Exports an editor plugin that creates multi-line decorations based on the
	// editor's syntax tree (assumes markdown).
	//
	// For more about creating decorations, see https://codemirror.net/examples/zebra/
	//
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const view_2 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const regionStartDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-regionFirstLine' },
	});
	const regionStopDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-regionLastLine' },
	});
	const noSpellCheckAttrs = { spellcheck: 'false', autocorrect: 'false' };
	const codeBlockDecoration = view_1.Decoration.line({
		attributes: Object.assign({ class: 'cm-codeBlock' }, noSpellCheckAttrs),
	});
	const inlineCodeDecoration = view_1.Decoration.mark({
		attributes: Object.assign({ class: 'cm-inlineCode' }, noSpellCheckAttrs),
	});
	const mathBlockDecoration = view_1.Decoration.line({
		attributes: Object.assign({ class: 'cm-mathBlock' }, noSpellCheckAttrs),
	});
	const inlineMathDecoration = view_1.Decoration.mark({
		attributes: Object.assign({ class: 'cm-inlineMath' }, noSpellCheckAttrs),
	});
	const urlDecoration = view_1.Decoration.mark({
		attributes: Object.assign({ class: 'cm-url' }, noSpellCheckAttrs),
	});
	const htmlTagNameDecoration = view_1.Decoration.mark({
		attributes: Object.assign({ class: 'cm-htmlTag' }, noSpellCheckAttrs),
	});
	const blockQuoteDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-blockQuote' },
	});
	const header1LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h1 cm-headerLine' },
	});
	const header2LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h2 cm-headerLine' },
	});
	const header3LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h3 cm-headerLine' },
	});
	const header4LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h4 cm-headerLine' },
	});
	const header5LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h5 cm-headerLine' },
	});
	const header6LineDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-h6 cm-headerLine' },
	});
	const tableHeaderDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-tableHeader' },
	});
	const tableBodyDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-tableRow' },
	});
	const tableDelimiterDecoration = view_1.Decoration.line({
		attributes: { class: 'cm-tableDelimiter' },
	});
	const horizontalRuleDecoration = view_1.Decoration.mark({
		attributes: { class: 'cm-hr' },
	});
	const taskMarkerDecoration = view_1.Decoration.mark({
		attributes: { class: 'cm-taskMarker' },
	});
	const nodeNameToLineDecoration = {
		'FencedCode': codeBlockDecoration,
		'CodeBlock': codeBlockDecoration,
		'BlockMath': mathBlockDecoration,
		'Blockquote': blockQuoteDecoration,
		'SetextHeading1': header1LineDecoration,
		'ATXHeading1': header1LineDecoration,
		'SetextHeading2': header2LineDecoration,
		'ATXHeading2': header2LineDecoration,
		'ATXHeading3': header3LineDecoration,
		'ATXHeading4': header4LineDecoration,
		'ATXHeading5': header5LineDecoration,
		'ATXHeading6': header6LineDecoration,
		'TableHeader': tableHeaderDecoration,
		'TableDelimiter': tableDelimiterDecoration,
		'TableRow': tableBodyDecoration,
	};
	const nodeNameToMarkDecoration = {
		'InlineCode': inlineCodeDecoration,
		'URL': urlDecoration,
		'InlineMath': inlineMathDecoration,
		'HTMLTag': htmlTagNameDecoration,
		'TagName': htmlTagNameDecoration,
		'HorizontalRule': horizontalRuleDecoration,
		'TaskMarker': taskMarkerDecoration,
	};
	// Returns a set of [Decoration]s, associated with block syntax groups that require
	// full-line styling.
	const computeDecorations = (view) => {
		var _a;
		const decorations = [];
		// Add a decoration to all lines between the document position [from] up to
		// and includeing the position [to].
		const addDecorationToLines = (from, to, decoration) => {
			let pos = from;
			while (pos <= to) {
				const line = view.state.doc.lineAt(pos);
				decorations.push({
					pos: line.from,
					length: 0,
					decoration,
				});
				// Move to the next line
				pos = line.to + 1;
			}
		};
		const addDecorationToRange = (from, to, decoration) => {
			decorations.push({
				pos: from,
				length: to - from,
				decoration,
			});
		};
		for (const { from, to } of view.visibleRanges) {
			(_a = (0, language_1.ensureSyntaxTree)(view.state, to)) === null || _a === void 0 ? void 0 : _a.iterate({
				from, to,
				enter: node => {
					let blockDecorated = false;
					// Compute the visible region of the node.
					const viewFrom = Math.max(from, node.from);
					const viewTo = Math.min(to, node.to);
					if (nodeNameToLineDecoration.hasOwnProperty(node.name)) {
						const decoration = nodeNameToLineDecoration[node.name];
						addDecorationToLines(viewFrom, viewTo, decoration);
						blockDecorated = true;
					}
					if (nodeNameToMarkDecoration.hasOwnProperty(node.name)) {
						const decoration = nodeNameToMarkDecoration[node.name];
						addDecorationToRange(viewFrom, viewTo, decoration);
					}
					// Only block decorations will have differing first and last lines
					if (blockDecorated) {
						// Allow different styles for the first, last lines in a block.
						if (viewFrom === node.from) {
							addDecorationToLines(viewFrom, viewFrom, regionStartDecoration);
						}
						if (viewTo === node.to) {
							addDecorationToLines(viewTo, viewTo, regionStopDecoration);
						}
					}
				},
			});
		}
		// Decorations need to be sorted in ascending order first by start position,
		// then by length. Adding items to the RangeSetBuilder in an incorrect order
		// causes an exception to be thrown.
		decorations.sort((a, b) => {
			const posComparison = a.pos - b.pos;
			if (posComparison !== 0) {
				return posComparison;
			}
			const lengthComparison = a.length - b.length;
			return lengthComparison;
		});
		const decorationBuilder = new state_1.RangeSetBuilder();
		for (const { pos, length, decoration } of decorations) {
			// Zero length => entire line
			decorationBuilder.add(pos, pos + length, decoration);
		}
		return decorationBuilder.finish();
	};
	const decoratorExtension = view_2.ViewPlugin.fromClass(class {
		constructor(view) {
			this.decorations = computeDecorations(view);
		}
		update(viewUpdate) {
			if (viewUpdate.docChanged || viewUpdate.viewportChanged) {
				this.decorations = computeDecorations(viewUpdate.view);
			}
		}
	}, {
		decorations: pluginVal => pluginVal.decorations,
	});
	exports["default"] = decoratorExtension;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/markdownCommands.ts":
	/*!*********************************************************!*\
	  !*** ../editor/CodeMirror/markdown/markdownCommands.ts ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	// CodeMirror 6 commands that modify markdown formatting (e.g. toggleBold).
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.updateLink = exports.decreaseIndent = exports.insertOrIncreaseIndent = exports.increaseIndent = exports.toggleHeaderLevel = exports.toggleList = exports.toggleMath = exports.toggleCode = exports.toggleItalicized = exports.toggleBolded = void 0;
	const types_1 = __webpack_require__(/*! ../../types */ "../editor/types.ts");
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const markdownReformatter_1 = __webpack_require__(/*! ./markdownReformatter */ "../editor/CodeMirror/markdown/markdownReformatter.ts");
	const isInSyntaxNode_1 = __webpack_require__(/*! ../util/isInSyntaxNode */ "../editor/CodeMirror/util/isInSyntaxNode.ts");
	const startingSpaceRegex = /^(\s*)/;
	const toggleBolded = (view) => {
		const spec = markdownReformatter_1.RegionSpec.of({ template: '**', nodeName: 'StrongEmphasis' });
		const changes = (0, markdownReformatter_1.toggleInlineFormatGlobally)(view.state, spec);
		view.dispatch(changes);
		return true;
	};
	exports.toggleBolded = toggleBolded;
	const toggleItalicized = (view) => {
		let handledBoldItalicRegion = false;
		// Bold-italic regions' starting and ending patterns are similar to italicized regions.
		// Thus, we need additional logic to convert bold regions to bold-italic regions.
		view.dispatch(view.state.changeByRange((sel) => {
			const changes = [];
			// Only handle cursors (empty selections)
			if (sel.empty) {
				const doc = view.state.doc;
				const selLine = doc.lineAt(sel.from);
				const selStartLineIdx = sel.from - selLine.from;
				const selEndLineIdx = sel.to - selLine.from;
				const beforeSel = selLine.text.substring(0, selStartLineIdx);
				const afterSel = selLine.text.substring(selEndLineIdx);
				const isBolded = beforeSel.endsWith('**') && afterSel.startsWith('**');
				// If at the end of a bold-italic region, exit the region.
				if (afterSel.startsWith('***')) {
					sel = state_1.EditorSelection.cursor(sel.to + 3);
					handledBoldItalicRegion = true;
				}
				else if (isBolded) {
					// Create a bold-italic region.
					changes.push({
						from: sel.from,
						to: sel.to,
						insert: '**',
					});
					// Move to the center of the bold-italic region (**|**** -> ***|***)
					sel = state_1.EditorSelection.cursor(sel.to + 1);
					handledBoldItalicRegion = true;
				}
			}
			return {
				changes,
				range: sel,
			};
		}));
		if (!handledBoldItalicRegion) {
			const changes = (0, markdownReformatter_1.toggleInlineFormatGlobally)(view.state, {
				nodeName: 'Emphasis',
				template: { start: '*', end: '*' },
				matcher: { start: /[_*]/g, end: /[_*]/g },
			});
			view.dispatch(changes);
		}
		return true;
	};
	exports.toggleItalicized = toggleItalicized;
	// If the selected region is an empty inline code block, it will be converted to
	// a block (fenced) code block.
	const toggleCode = (view) => {
		const codeFenceRegex = /^```\w*\s*$/;
		const inlineRegionSpec = markdownReformatter_1.RegionSpec.of({ template: '`', nodeName: 'InlineCode' });
		const blockRegionSpec = {
			nodeName: 'FencedCode',
			template: { start: '```', end: '```' },
			matcher: { start: codeFenceRegex, end: codeFenceRegex },
		};
		const changes = (0, markdownReformatter_1.toggleRegionFormatGlobally)(view.state, inlineRegionSpec, blockRegionSpec);
		view.dispatch(changes);
		return true;
	};
	exports.toggleCode = toggleCode;
	const toggleMath = (view) => {
		const blockStartRegex = /^\$\$/;
		const blockEndRegex = /\$\$\s*$/;
		const inlineRegionSpec = markdownReformatter_1.RegionSpec.of({ nodeName: 'InlineMath', template: '$' });
		const blockRegionSpec = markdownReformatter_1.RegionSpec.of({
			nodeName: 'BlockMath',
			template: '$$',
			matcher: {
				start: blockStartRegex,
				end: blockEndRegex,
			},
		});
		const changes = (0, markdownReformatter_1.toggleRegionFormatGlobally)(view.state, inlineRegionSpec, blockRegionSpec);
		view.dispatch(changes);
		return true;
	};
	exports.toggleMath = toggleMath;
	const toggleList = (listType) => {
		return (view) => {
			let state = view.state;
			let doc = state.doc;
			const orderedListTag = 'OrderedList';
			const unorderedListTag = 'BulletList';
			// RegExps for different list types. The regular expressions MUST
			// be mutually exclusive.
			// `(?!\[[ xX]+\]\s?)` means "not followed by [x] or [ ]".
			const bulletedRegex = /^\s*([-*])(?!\s\[[ xX]+\])\s?/;
			const checklistRegex = /^\s*[-*]\s\[[ xX]+\]\s?/;
			const numberedRegex = /^\s*\d+\.\s?/;
			const listRegexes = {
				[types_1.ListType.OrderedList]: numberedRegex,
				[types_1.ListType.CheckList]: checklistRegex,
				[types_1.ListType.UnorderedList]: bulletedRegex,
			};
			const getContainerType = (line) => {
				const lineContent = (0, markdownReformatter_1.stripBlockquote)(line);
				// Determine the container's type.
				const checklistMatch = lineContent.match(checklistRegex);
				const bulletListMatch = lineContent.match(bulletedRegex);
				const orderedListMatch = lineContent.match(numberedRegex);
				if (checklistMatch) {
					return types_1.ListType.CheckList;
				}
				else if (bulletListMatch) {
					return types_1.ListType.UnorderedList;
				}
				else if (orderedListMatch) {
					return types_1.ListType.OrderedList;
				}
				return null;
			};
			const changes = state.changeByRange((sel) => {
				const changes = [];
				let containerType = null;
				// Total number of characters added (deleted if negative)
				let charsAdded = 0;
				const originalSel = sel;
				let fromLine;
				let toLine;
				let firstLineIndentation;
				let firstLineInBlockQuote;
				let fromLineContent;
				const computeSelectionProps = () => {
					fromLine = doc.lineAt(sel.from);
					toLine = doc.lineAt(sel.to);
					fromLineContent = (0, markdownReformatter_1.stripBlockquote)(fromLine);
					firstLineIndentation = fromLineContent.match(startingSpaceRegex)[0];
					firstLineInBlockQuote = (fromLineContent !== fromLine.text);
					containerType = getContainerType(fromLine);
				};
				computeSelectionProps();
				const origFirstLineIndentation = firstLineIndentation;
				const origContainerType = containerType;
				// Grow `sel` to the smallest containing list, unless the
				// cursor is on an empty line, in which case, the user
				// probably wants to add a list item (and not select the entire
				// list).
				if (sel.empty && fromLine.text.trim() !== '') {
					sel = (0, markdownReformatter_1.growSelectionToNode)(state, sel, [orderedListTag, unorderedListTag]);
					computeSelectionProps();
				}
				// Reset the selection if it seems likely the user didn't want the selection
				// to be expanded
				const isIndentationDiff = !(0, markdownReformatter_1.isIndentationEquivalent)(state, firstLineIndentation, origFirstLineIndentation);
				if (isIndentationDiff) {
					const expandedRegionIndentation = firstLineIndentation;
					sel = originalSel;
					computeSelectionProps();
					// Use the indentation level of the expanded region if it's greater.
					// This makes sense in the case where unindented text is being converted to
					// the same type of list as its container. For example,
					//     1. Foobar
					// unindented text
					// that should be made a part of the above list.
					//
					// becoming
					//
					//     1. Foobar
					//     2. unindented text
					//     3. that should be made a part of the above list.
					const wasGreaterIndentation = ((0, markdownReformatter_1.tabsToSpaces)(state, expandedRegionIndentation).length
						> (0, markdownReformatter_1.tabsToSpaces)(state, firstLineIndentation).length);
					if (wasGreaterIndentation) {
						firstLineIndentation = expandedRegionIndentation;
					}
				}
				else if ((origContainerType !== containerType && (origContainerType !== null && origContainerType !== void 0 ? origContainerType : null) !== null)
					|| containerType !== getContainerType(toLine)) {
					// If the container type changed, this could be an artifact of checklists/bulleted
					// lists sharing the same node type.
					// Find the closest range of the same type of list to the original selection
					let newFromLineNo = doc.lineAt(originalSel.from).number;
					let newToLineNo = doc.lineAt(originalSel.to).number;
					let lastFromLineNo;
					let lastToLineNo;
					while (newFromLineNo !== lastFromLineNo || newToLineNo !== lastToLineNo) {
						lastFromLineNo = newFromLineNo;
						lastToLineNo = newToLineNo;
						if (lastFromLineNo - 1 >= 1) {
							const testFromLine = doc.line(lastFromLineNo - 1);
							if (getContainerType(testFromLine) === origContainerType) {
								newFromLineNo--;
							}
						}
						if (lastToLineNo + 1 <= doc.lines) {
							const testToLine = doc.line(lastToLineNo + 1);
							if (getContainerType(testToLine) === origContainerType) {
								newToLineNo++;
							}
						}
					}
					sel = state_1.EditorSelection.range(doc.line(newFromLineNo).from, doc.line(newToLineNo).to);
					computeSelectionProps();
				}
				// Determine whether the expanded selection should be empty
				if (originalSel.empty && fromLine.number === toLine.number) {
					sel = state_1.EditorSelection.cursor(toLine.to);
				}
				// Select entire lines (if not just a cursor)
				if (!sel.empty) {
					sel = state_1.EditorSelection.range(fromLine.from, toLine.to);
				}
				// Number of the item in the list (e.g. 2 for the 2nd item in the list)
				let listItemCounter = 1;
				for (let lineNum = fromLine.number; lineNum <= toLine.number; lineNum++) {
					const line = doc.line(lineNum);
					const lineContent = (0, markdownReformatter_1.stripBlockquote)(line);
					const lineContentFrom = line.to - lineContent.length;
					const inBlockQuote = (lineContent !== line.text);
					const indentation = lineContent.match(startingSpaceRegex)[0];
					const wrongIndentaton = !(0, markdownReformatter_1.isIndentationEquivalent)(state, indentation, firstLineIndentation);
					// If not the right list level,
					if (inBlockQuote !== firstLineInBlockQuote || wrongIndentaton) {
						// We'll be starting a new list
						listItemCounter = 1;
						continue;
					}
					// Don't add list numbers to otherwise empty lines (unless it's the first line)
					if (lineNum !== fromLine.number && line.text.trim().length === 0) {
						// Do not reset the counter -- the markdown renderer doesn't!
						continue;
					}
					const deleteFrom = lineContentFrom;
					let deleteTo = deleteFrom + indentation.length;
					// If we need to remove an existing list,
					const currentContainer = getContainerType(line);
					if (currentContainer !== null) {
						const containerRegex = listRegexes[currentContainer];
						const containerMatch = lineContent.match(containerRegex);
						if (!containerMatch) {
							throw new Error('Assertion failed: container regex does not match line content.');
						}
						deleteTo = lineContentFrom + containerMatch[0].length;
					}
					let replacementString;
					if (listType === containerType) {
						// Delete the existing list if it's the same type as the current
						replacementString = '';
					}
					else if (listType === types_1.ListType.OrderedList) {
						replacementString = `${firstLineIndentation}${listItemCounter}. `;
					}
					else if (listType === types_1.ListType.CheckList) {
						replacementString = `${firstLineIndentation}- [ ] `;
					}
					else {
						replacementString = `${firstLineIndentation}- `;
					}
					changes.push({
						from: deleteFrom,
						to: deleteTo,
						insert: replacementString,
					});
					charsAdded -= deleteTo - deleteFrom;
					charsAdded += replacementString.length;
					listItemCounter++;
				}
				// Don't change cursors to selections
				if (sel.empty) {
					// Position the cursor at the end of the last line modified
					sel = state_1.EditorSelection.cursor(toLine.to + charsAdded);
				}
				else {
					sel = state_1.EditorSelection.range(sel.from, sel.to + charsAdded);
				}
				return {
					changes,
					range: sel,
				};
			});
			view.dispatch(changes);
			state = view.state;
			doc = state.doc;
			// Renumber the list
			view.dispatch((0, markdownReformatter_1.renumberSelectedLists)(state));
			return true;
		};
	};
	exports.toggleList = toggleList;
	const toggleHeaderLevel = (level) => {
		return (view) => {
			let headerStr = '';
			for (let i = 0; i < level; i++) {
				headerStr += '#';
			}
			const matchEmpty = true;
			// Remove header formatting for any other level
			let changes = (0, markdownReformatter_1.toggleSelectedLinesStartWith)(view.state, new RegExp(
			// Check all numbers of #s lower than [level]
			`${level - 1 >= 1 ? `(?:^[#]{1,${level - 1}}\\s)|` : ''
			// Check all number of #s higher than [level]
			}(?:^[#]{${level + 1},}\\s)`), '', matchEmpty);
			view.dispatch(changes);
			// Set to the proper header level
			changes = (0, markdownReformatter_1.toggleSelectedLinesStartWith)(view.state, 
			// We want exactly [level] '#' characters.
			new RegExp(`^[#]{${level}} `), `${headerStr} `, matchEmpty);
			view.dispatch(changes);
			return true;
		};
	};
	exports.toggleHeaderLevel = toggleHeaderLevel;
	// Prepends the given editor's indentUnit to all lines of the current selection
	// and re-numbers modified ordered lists (if any).
	const increaseIndent = (view) => {
		const matchEmpty = true;
		const matchNothing = /$ ^/;
		const indentUnit = (0, language_1.indentString)(view.state, (0, language_1.getIndentUnit)(view.state));
		const changes = (0, markdownReformatter_1.toggleSelectedLinesStartWith)(view.state, 
		// Delete nothing
		matchNothing, 
		// ...and thus always add indentUnit.
		indentUnit, matchEmpty);
		view.dispatch(changes);
		// Fix any lists
		view.dispatch((0, markdownReformatter_1.renumberSelectedLists)(view.state));
		return true;
	};
	exports.increaseIndent = increaseIndent;
	// Like `increaseIndent`, but may insert tabs, rather than
	// indenting, in some instances.
	const insertOrIncreaseIndent = (view) => {
		const selection = view.state.selection;
		const mainSelection = selection.main;
		if (selection.ranges.length !== 1 || !mainSelection.empty) {
			return (0, exports.increaseIndent)(view);
		}
		if ((0, isInSyntaxNode_1.default)(view.state, mainSelection, 'ListItem')) {
			return (0, exports.increaseIndent)(view);
		}
		const indentUnit = (0, language_1.indentString)(view.state, (0, language_1.getIndentUnit)(view.state));
		view.dispatch(view.state.changeByRange(selection => {
			return {
				// Move the selection to after the inserted text
				range: state_1.EditorSelection.cursor(selection.from + indentUnit.length),
				changes: {
					from: selection.from,
					insert: indentUnit,
				},
			};
		}));
		return true;
	};
	exports.insertOrIncreaseIndent = insertOrIncreaseIndent;
	const decreaseIndent = (view) => {
		const matchEmpty = true;
		const changes = (0, markdownReformatter_1.toggleSelectedLinesStartWith)(view.state, 
		// Assume indentation is either a tab or in units
		// of n spaces.
		new RegExp(`^(?:[\\t]|[ ]{1,${(0, language_1.getIndentUnit)(view.state)}})`), 
		// Don't add new text
		'', matchEmpty);
		view.dispatch(changes);
		// Fix any lists
		view.dispatch((0, markdownReformatter_1.renumberSelectedLists)(view.state));
		return true;
	};
	exports.decreaseIndent = decreaseIndent;
	const updateLink = (label, url) => {
		// Empty label? Just include the URL.
		const linkText = label === '' ? url : `[${label}](${url})`;
		return (editor) => {
			const transaction = editor.state.changeByRange((sel) => {
				const changes = [];
				// Search for a link that overlaps [sel]
				let linkFrom = null;
				let linkTo = null;
				(0, language_1.syntaxTree)(editor.state).iterate({
					from: sel.from, to: sel.to,
					enter: node => {
						const haveFoundLink = (linkFrom !== null && linkTo !== null);
						if (node.name === 'Link' || (node.name === 'URL' && !haveFoundLink)) {
							linkFrom = node.from;
							linkTo = node.to;
						}
					},
				});
				linkFrom !== null && linkFrom !== void 0 ? linkFrom : (linkFrom = sel.from);
				linkTo !== null && linkTo !== void 0 ? linkTo : (linkTo = sel.to);
				changes.push({
					from: linkFrom, to: linkTo,
					insert: linkText,
				});
				return {
					changes,
					range: state_1.EditorSelection.range(linkFrom, linkFrom + linkText.length),
				};
			});
			editor.dispatch(transaction);
			return true;
		};
	};
	exports.updateLink = updateLink;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/markdownMathParser.ts":
	/*!***********************************************************!*\
	  !*** ../editor/CodeMirror/markdown/markdownMathParser.ts ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	// Search for $s and $$s in markdown and mark the regions between them as math.
	//
	// Text between single $s is marked as InlineMath and text between $$s is marked
	// as BlockMath.
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.MarkdownMathExtension = exports.inlineMathTag = exports.mathTag = exports.inlineMathContentTagName = exports.inlineMathTagName = exports.blockMathContentTagName = exports.blockMathTagName = void 0;
	const highlight_1 = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	const common_1 = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	// The existing stexMath parser is used to parse the text between the $s
	const stex_1 = __webpack_require__(/*! @codemirror/legacy-modes/mode/stex */ "../editor/node_modules/@codemirror/legacy-modes/mode/stex.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const dollarSignCharcode = 36;
	const backslashCharcode = 92;
	// (?:[>]\s*)?: Optionally allow block math lines to start with '> '
	const mathBlockStartRegex = /^(?:\s*[>]\s*)?\$\$/;
	const mathBlockEndRegex = /\$\$\s*$/;
	const texLanguage = language_1.StreamLanguage.define(stex_1.stexMath);
	exports.blockMathTagName = 'BlockMath';
	exports.blockMathContentTagName = 'BlockMathContent';
	exports.inlineMathTagName = 'InlineMath';
	exports.inlineMathContentTagName = 'InlineMathContent';
	exports.mathTag = highlight_1.Tag.define(highlight_1.tags.monospace);
	exports.inlineMathTag = highlight_1.Tag.define(exports.mathTag);
	// Wraps a TeX math-mode parser. This removes [nodeTag] from the syntax tree
	// and replaces it with a region handled by the sTeXMath parser.
	//
	// @param nodeTag Name of the nodes to replace with regions parsed by the sTeX parser.
	// @returns a wrapped sTeX parser.
	const wrappedTeXParser = (nodeTag) => {
		return (0, common_1.parseMixed)((node, _input) => {
			if (node.name !== nodeTag) {
				return null;
			}
			return {
				parser: texLanguage.parser,
			};
		});
	};
	// Markdown extension for recognizing inline code
	const InlineMathConfig = {
		defineNodes: [
			{
				name: exports.inlineMathTagName,
				style: exports.inlineMathTag,
			},
			{
				name: exports.inlineMathContentTagName,
			},
		],
		parseInline: [{
				name: exports.inlineMathTagName,
				after: 'InlineCode',
				parse(cx, current, pos) {
					const prevCharCode = pos - 1 >= 0 ? cx.char(pos - 1) : -1;
					const nextCharCode = cx.char(pos + 1);
					if (current !== dollarSignCharcode
						|| prevCharCode === dollarSignCharcode
						|| nextCharCode === dollarSignCharcode) {
						return -1;
					}
					// Don't match if there's a space directly after the '$'
					if (/\s/.exec(String.fromCharCode(nextCharCode))) {
						return -1;
					}
					const start = pos;
					const end = cx.end;
					let escaped = false;
					pos++;
					// Scan ahead for the next '$' symbol
					for (; pos < end && (escaped || cx.char(pos) !== dollarSignCharcode); pos++) {
						if (!escaped && cx.char(pos) === backslashCharcode) {
							escaped = true;
						}
						else {
							escaped = false;
						}
					}
					// Don't match if the ending '$' is preceded by a space.
					const prevChar = String.fromCharCode(cx.char(pos - 1));
					if (/\s/.exec(prevChar)) {
						return -1;
					}
					// It isn't a math region if there is no ending '$'
					if (pos === end) {
						return -1;
					}
					// Advance to just after the ending '$'
					pos++;
					// Add a wraping inlineMathTagName node that contains an inlineMathContentTagName.
					// The inlineMathContentTagName node can thus be safely removed and the region
					// will still be marked as a math region.
					const contentElem = cx.elt(exports.inlineMathContentTagName, start + 1, pos - 1);
					cx.addElement(cx.elt(exports.inlineMathTagName, start, pos, [contentElem]));
					return pos + 1;
				},
			}],
		wrap: wrappedTeXParser(exports.inlineMathContentTagName),
	};
	// Extension for recognising block code
	const BlockMathConfig = {
		defineNodes: [
			{
				name: exports.blockMathTagName,
				style: exports.mathTag,
			},
			{
				name: exports.blockMathContentTagName,
			},
		],
		parseBlock: [{
				name: exports.blockMathTagName,
				before: 'Blockquote',
				parse(cx, line) {
					const delimLen = 2;
					// $$ delimiter? Start math!
					const mathStartMatch = mathBlockStartRegex.exec(line.text);
					if (mathStartMatch) {
						const start = cx.lineStart + mathStartMatch[0].length;
						let stop;
						let endMatch = mathBlockEndRegex.exec(line.text.substring(mathStartMatch[0].length));
						// If the math region ends immediately (on the same line),
						if (endMatch) {
							const lineLength = line.text.length;
							stop = cx.lineStart + lineLength - endMatch[0].length;
						}
						else {
							let hadNextLine = false;
							// Otherwise, it's a multi-line block display.
							// Consume lines until we reach the end.
							do {
								hadNextLine = cx.nextLine();
								endMatch = hadNextLine ? mathBlockEndRegex.exec(line.text) : null;
							} while (hadNextLine && endMatch === null);
							if (hadNextLine && endMatch) {
								const lineLength = line.text.length;
								// Remove the ending delimiter
								stop = cx.lineStart + lineLength - endMatch[0].length;
							}
							else {
								stop = cx.lineStart;
							}
						}
						const lineEnd = cx.lineStart + line.text.length;
						// Label the region. Add two labels so that one can be removed.
						const contentElem = cx.elt(exports.blockMathContentTagName, start, stop);
						const containerElement = cx.elt(exports.blockMathTagName, start - delimLen, 
						// Math blocks don't need ending delimiters, so ensure we don't
						// include text that doesn't exist.
						Math.min(lineEnd, stop + delimLen), 
						// The child of the container element should be the content element
						[contentElem]);
						cx.addElement(containerElement);
						// Don't re-process the ending delimiter (it may look the same
						// as the starting delimiter).
						cx.nextLine();
						return true;
					}
					return false;
				},
				// End paragraph-like blocks
				endLeaf(_cx, line, _leaf) {
					// Leaf blocks (e.g. block quotes) end early if math starts.
					return mathBlockStartRegex.exec(line.text) !== null;
				},
			}],
		wrap: wrappedTeXParser(exports.blockMathContentTagName),
	};
	/** Markdown configuration for block and inline math support. */
	exports.MarkdownMathExtension = [
		InlineMathConfig,
		BlockMathConfig,
	];
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/markdown/markdownReformatter.ts":
	/*!************************************************************!*\
	  !*** ../editor/CodeMirror/markdown/markdownReformatter.ts ***!
	  \************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.renumberSelectedLists = exports.toggleSelectedLinesStartWith = exports.toggleRegionFormatGlobally = exports.toggleInlineFormatGlobally = exports.toggleInlineSelectionFormat = exports.growSelectionToNode = exports.isIndentationEquivalent = exports.tabsToSpaces = exports.stripBlockquote = exports.findInlineMatch = exports.MatchSide = exports.RegionSpec = void 0;
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	// pregQuote escapes text for usage in regular expressions
	const { pregQuote } = __webpack_require__(/*! @joplin/lib/string-utils-common */ "../lib/string-utils-common.js");
	// Length of the symbol that starts a block quote
	const blockQuoteStartLen = '> '.length;
	const blockQuoteRegex = /^>\s/;
	var RegionSpec;
	(function (RegionSpec) {
		// Creates a new RegionSpec, given a simplified set of options.
		// If [config.template] is a string, it is used as both the starting and ending
		// templates.
		// Similarly, if [config.matcher] is not given, a matcher is created based on
		// [config.template].
		RegionSpec.of = (config) => {
			var _a;
			let templateStart, templateEnd;
			if (typeof config.template === 'string') {
				templateStart = config.template;
				templateEnd = config.template;
			}
			else {
				templateStart = config.template.start;
				templateEnd = config.template.end;
			}
			const matcher = (_a = config.matcher) !== null && _a !== void 0 ? _a : matcherFromTemplate(templateStart, templateEnd);
			return {
				nodeName: config.nodeName,
				template: { start: templateStart, end: templateEnd },
				matcher,
			};
		};
		const matcherFromTemplate = (start, end) => {
			// See https://stackoverflow.com/a/30851002
			const escapedStart = pregQuote(start);
			const escapedEnd = pregQuote(end);
			return {
				start: new RegExp(escapedStart, 'g'),
				end: new RegExp(escapedEnd, 'g'),
			};
		};
	})(RegionSpec || (exports.RegionSpec = RegionSpec = {}));
	var MatchSide;
	(function (MatchSide) {
		MatchSide[MatchSide["Start"] = 0] = "Start";
		MatchSide[MatchSide["End"] = 1] = "End";
	})(MatchSide || (exports.MatchSide = MatchSide = {}));
	// Returns the length of a match for this in the given selection,
	// -1 if no match is found.
	const findInlineMatch = (doc, spec, sel, side) => {
		const [regex, template] = (() => {
			if (side === MatchSide.Start) {
				return [spec.matcher.start, spec.template.start];
			}
			else {
				return [spec.matcher.end, spec.template.end];
			}
		})();
		const [startIndex, endIndex] = (() => {
			if (!sel.empty) {
				return [sel.from, sel.to];
			}
			const bufferSize = template.length;
			if (side === MatchSide.Start) {
				return [sel.from - bufferSize, sel.to];
			}
			else {
				return [sel.from, sel.to + bufferSize];
			}
		})();
		const searchText = doc.sliceString(startIndex, endIndex);
		// Returns true if [idx] is in the right place (the match is at
		// the end of the string or the beginning based on startIndex/endIndex).
		const indexSatisfies = (idx, len) => {
			idx += startIndex;
			if (side === MatchSide.Start) {
				return idx === startIndex;
			}
			else {
				return idx + len === endIndex;
			}
		};
		// Enforce 'g' flag.
		if (!regex.global) {
			throw new Error('Regular expressions used by RegionSpec must have the global flag!');
		}
		// Search from the beginning.
		regex.lastIndex = 0;
		let foundMatch = null;
		let match;
		while ((match = regex.exec(searchText)) !== null) {
			if (indexSatisfies(match.index, match[0].length)) {
				foundMatch = match;
				break;
			}
		}
		if (foundMatch) {
			const matchLength = foundMatch[0].length;
			const matchIndex = foundMatch.index;
			// If the match isn't in the right place,
			if (indexSatisfies(matchIndex, matchLength)) {
				return matchLength;
			}
		}
		return -1;
	};
	exports.findInlineMatch = findInlineMatch;
	const stripBlockquote = (line) => {
		const match = line.text.match(blockQuoteRegex);
		if (match) {
			return line.text.substring(match[0].length);
		}
		return line.text;
	};
	exports.stripBlockquote = stripBlockquote;
	const tabsToSpaces = (state, text) => {
		const chunks = text.split('\t');
		const spaceLen = (0, language_1.getIndentUnit)(state);
		let result = chunks[0];
		for (let i = 1; i < chunks.length; i++) {
			for (let j = result.length % spaceLen; j < spaceLen; j++) {
				result += ' ';
			}
			result += chunks[i];
		}
		return result;
	};
	exports.tabsToSpaces = tabsToSpaces;
	// Returns true iff [a] (an indentation string) is roughly equivalent to [b].
	const isIndentationEquivalent = (state, a, b) => {
		// Consider sublists to be the same as their parent list if they have the same
		// label plus or minus 1 space.
		return Math.abs((0, exports.tabsToSpaces)(state, a).length - (0, exports.tabsToSpaces)(state, b).length) <= 1;
	};
	exports.isIndentationEquivalent = isIndentationEquivalent;
	// Expands and returns a copy of [sel] to the smallest container node with name in [nodeNames].
	const growSelectionToNode = (state, sel, nodeNames) => {
		if (!nodeNames) {
			return sel;
		}
		const isAcceptableNode = (name) => {
			if (typeof nodeNames === 'string') {
				return name === nodeNames;
			}
			for (const otherName of nodeNames) {
				if (otherName === name) {
					return true;
				}
			}
			return false;
		};
		let newFrom = null;
		let newTo = null;
		let smallestLen = Infinity;
		// Find the smallest range.
		(0, language_1.syntaxTree)(state).iterate({
			from: sel.from, to: sel.to,
			enter: node => {
				if (isAcceptableNode(node.name)) {
					if (node.to - node.from < smallestLen) {
						newFrom = node.from;
						newTo = node.to;
						smallestLen = newTo - newFrom;
					}
				}
			},
		});
		// If it's in such a node,
		if (newFrom !== null && newTo !== null) {
			return state_1.EditorSelection.range(newFrom, newTo);
		}
		else {
			return sel;
		}
	};
	exports.growSelectionToNode = growSelectionToNode;
	// Toggles whether the given selection matches the inline region specified by [spec].
	//
	// For example, something similar to toggleSurrounded('**', '**') would surround
	// every selection range with asterisks (including the caret).
	// If the selection is already surrounded by these characters, they are
	// removed.
	const toggleInlineRegionSurrounded = (doc, sel, spec) => {
		let content = doc.sliceString(sel.from, sel.to);
		const startMatchLen = (0, exports.findInlineMatch)(doc, spec, sel, MatchSide.Start);
		const endMatchLen = (0, exports.findInlineMatch)(doc, spec, sel, MatchSide.End);
		const startsWithBefore = startMatchLen >= 0;
		const endsWithAfter = endMatchLen >= 0;
		const changes = [];
		let finalSelStart = sel.from;
		let finalSelEnd = sel.to;
		if (startsWithBefore && endsWithAfter) {
			// Remove the before and after.
			content = content.substring(startMatchLen);
			content = content.substring(0, content.length - endMatchLen);
			finalSelEnd -= startMatchLen + endMatchLen;
			changes.push({
				from: sel.from,
				to: sel.to,
				insert: content,
			});
		}
		else {
			changes.push({
				from: sel.from,
				insert: spec.template.start,
			});
			changes.push({
				from: sel.to,
				insert: spec.template.start,
			});
			// If not a caret,
			if (!sel.empty) {
				// Select the surrounding chars.
				finalSelEnd += spec.template.start.length + spec.template.end.length;
			}
			else {
				// Position the caret within the added content.
				finalSelStart = sel.from + spec.template.start.length;
				finalSelEnd = finalSelStart;
			}
		}
		return {
			changes,
			range: state_1.EditorSelection.range(finalSelStart, finalSelEnd),
		};
	};
	// Returns updated selections: For all selections in the given `EditorState`, toggles
	// whether each is contained in an inline region of type [spec].
	const toggleInlineSelectionFormat = (state, spec, sel) => {
		const endMatchLen = (0, exports.findInlineMatch)(state.doc, spec, sel, MatchSide.End);
		// If at the end of the region, move the
		// caret to the end.
		// E.g.
		//   **foobar|**
		//   **foobar**|
		if (sel.empty && endMatchLen > -1) {
			const newCursorPos = sel.from + endMatchLen;
			return {
				range: state_1.EditorSelection.cursor(newCursorPos),
			};
		}
		// Grow the selection to encompass the entire node.
		const newRange = (0, exports.growSelectionToNode)(state, sel, spec.nodeName);
		return toggleInlineRegionSurrounded(state.doc, newRange, spec);
	};
	exports.toggleInlineSelectionFormat = toggleInlineSelectionFormat;
	// Like toggleInlineSelectionFormat, but for all selections in [state].
	const toggleInlineFormatGlobally = (state, spec) => {
		const changes = state.changeByRange((sel) => {
			return (0, exports.toggleInlineSelectionFormat)(state, spec, sel);
		});
		return changes;
	};
	exports.toggleInlineFormatGlobally = toggleInlineFormatGlobally;
	// Toggle formatting in a region, applying block formatting
	const toggleRegionFormatGlobally = (state, inlineSpec, blockSpec) => {
		const doc = state.doc;
		const preserveBlockQuotes = true;
		const getMatchEndPoints = (match, line, inBlockQuote) => {
			const startIdx = line.from + match.index;
			let stopIdx;
			// Don't treat '> ' as part of the line's content if we're in a blockquote.
			let contentLength = line.text.length;
			if (inBlockQuote && preserveBlockQuotes) {
				contentLength -= blockQuoteStartLen;
			}
			// If it matches the entire line, remove the newline character.
			if (match[0].length === contentLength) {
				stopIdx = line.to + 1;
			}
			else {
				stopIdx = startIdx + match[0].length;
				// Take into account the extra '> ' characters, if necessary
				if (inBlockQuote && preserveBlockQuotes) {
					stopIdx += blockQuoteStartLen;
				}
			}
			stopIdx = Math.min(stopIdx, doc.length);
			return [startIdx, stopIdx];
		};
		// Returns a change spec that converts an inline region to a block region
		// only if the user's cursor is in an empty inline region.
		// For example,
		//    $|$ -> $$\n|\n$$ where | represents the cursor.
		const handleInlineToBlockConversion = (sel) => {
			if (!sel.empty) {
				return null;
			}
			const startMatchLen = (0, exports.findInlineMatch)(doc, inlineSpec, sel, MatchSide.Start);
			const stopMatchLen = (0, exports.findInlineMatch)(doc, inlineSpec, sel, MatchSide.End);
			if (startMatchLen >= 0 && stopMatchLen >= 0) {
				const fromLine = doc.lineAt(sel.from);
				const inBlockQuote = fromLine.text.match(blockQuoteRegex);
				let lineStartStr = '\n';
				if (inBlockQuote && preserveBlockQuotes) {
					lineStartStr = '\n> ';
				}
				const inlineStart = sel.from - startMatchLen;
				const inlineStop = sel.from + stopMatchLen;
				// Determine the text that starts the new block (e.g. \n$$\n for
				// a math block).
				let blockStart = `${blockSpec.template.start}${lineStartStr}`;
				if (fromLine.from !== inlineStart) {
					// Add a line before to put the start of the block
					// on its own line.
					blockStart = lineStartStr + blockStart;
				}
				return {
					changes: [
						{
							from: inlineStart,
							to: inlineStop,
							insert: `${blockStart}${lineStartStr}${blockSpec.template.end}`,
						},
					],
					range: state_1.EditorSelection.cursor(inlineStart + blockStart.length),
				};
			}
			return null;
		};
		const changes = state.changeByRange((sel) => {
			const blockConversion = handleInlineToBlockConversion(sel);
			if (blockConversion) {
				return blockConversion;
			}
			// If we're in the block version, grow the selection to cover the entire region.
			sel = (0, exports.growSelectionToNode)(state, sel, blockSpec.nodeName);
			const fromLine = doc.lineAt(sel.from);
			const toLine = doc.lineAt(sel.to);
			let fromLineText = fromLine.text;
			let toLineText = toLine.text;
			let charsAdded = 0;
			const changes = [];
			// Single line: Inline toggle.
			if (fromLine.number === toLine.number) {
				return (0, exports.toggleInlineSelectionFormat)(state, inlineSpec, sel);
			}
			// Are all lines in a block quote?
			let inBlockQuote = true;
			for (let i = fromLine.number; i <= toLine.number; i++) {
				const line = doc.line(i);
				if (!line.text.match(blockQuoteRegex)) {
					inBlockQuote = false;
					break;
				}
			}
			// Ignore block quote characters if in a block quote.
			if (inBlockQuote && preserveBlockQuotes) {
				fromLineText = fromLineText.substring(blockQuoteStartLen);
				toLineText = toLineText.substring(blockQuoteStartLen);
			}
			// Otherwise, we're toggling the block version
			const startMatch = blockSpec.matcher.start.exec(fromLineText);
			const stopMatch = blockSpec.matcher.end.exec(toLineText);
			if (startMatch && stopMatch) {
				// Get start and stop indicies for the starting and ending matches
				const [fromMatchFrom, fromMatchTo] = getMatchEndPoints(startMatch, fromLine, inBlockQuote);
				const [toMatchFrom, toMatchTo] = getMatchEndPoints(stopMatch, toLine, inBlockQuote);
				// Delete content of the first line
				changes.push({
					from: fromMatchFrom,
					to: fromMatchTo,
				});
				charsAdded -= fromMatchTo - fromMatchFrom;
				// Delete content of the last line
				changes.push({
					from: toMatchFrom,
					to: toMatchTo,
				});
				charsAdded -= toMatchTo - toMatchFrom;
			}
			else {
				let insertBefore, insertAfter;
				if (inBlockQuote && preserveBlockQuotes) {
					insertBefore = `> ${blockSpec.template.start}\n`;
					insertAfter = `\n> ${blockSpec.template.end}`;
				}
				else {
					insertBefore = `${blockSpec.template.start}\n`;
					insertAfter = `\n${blockSpec.template.end}`;
				}
				changes.push({
					from: fromLine.from,
					insert: insertBefore,
				});
				changes.push({
					from: toLine.to,
					insert: insertAfter,
				});
				charsAdded += insertBefore.length + insertAfter.length;
			}
			return {
				changes,
				// Selection should now encompass all lines that were changed.
				range: state_1.EditorSelection.range(fromLine.from, toLine.to + charsAdded),
			};
		});
		return changes;
	};
	exports.toggleRegionFormatGlobally = toggleRegionFormatGlobally;
	// Toggles whether all lines in the user's selection start with [regex].
	const toggleSelectedLinesStartWith = (state, regex, template, matchEmpty, 
	// Name associated with what [regex] matches (e.g. FencedCode)
	nodeName) => {
		const ignoreBlockQuotes = true;
		const getLineContentStart = (line) => {
			if (!ignoreBlockQuotes) {
				return line.from;
			}
			const blockQuoteMatch = line.text.match(blockQuoteRegex);
			if (blockQuoteMatch) {
				return line.from + blockQuoteMatch[0].length;
			}
			return line.from;
		};
		const getLineContent = (line) => {
			const contentStart = getLineContentStart(line);
			return line.text.substring(contentStart - line.from);
		};
		const changes = state.changeByRange((sel) => {
			// Attempt to select all lines in the region
			if (nodeName && sel.empty) {
				sel = (0, exports.growSelectionToNode)(state, sel, nodeName);
			}
			const doc = state.doc;
			const fromLine = doc.lineAt(sel.from);
			const toLine = doc.lineAt(sel.to);
			let hasProp = false;
			let charsAdded = 0;
			const changes = [];
			const lines = [];
			for (let i = fromLine.number; i <= toLine.number; i++) {
				const line = doc.line(i);
				const text = getLineContent(line);
				// If already matching [regex],
				if (text.search(regex) === 0) {
					hasProp = true;
				}
				lines.push(line);
			}
			for (const line of lines) {
				const text = getLineContent(line);
				const contentFrom = getLineContentStart(line);
				// Only process if the line is non-empty.
				if (!matchEmpty && text.trim().length === 0
					// Treat the first line differently
					&& fromLine.number < line.number) {
					continue;
				}
				if (hasProp) {
					const match = text.match(regex);
					if (!match) {
						continue;
					}
					changes.push({
						from: contentFrom,
						to: contentFrom + match[0].length,
						insert: '',
					});
					charsAdded -= match[0].length;
				}
				else {
					changes.push({
						from: contentFrom,
						insert: template,
					});
					charsAdded += template.length;
				}
			}
			// If the selection is empty and a single line was changed, don't grow it.
			// (user might be adding a list/header, in which case, selecting the just
			// added text isn't helpful)
			let newSel;
			if (sel.empty && fromLine.number === toLine.number) {
				const regionEnd = toLine.to + charsAdded;
				newSel = state_1.EditorSelection.cursor(regionEnd);
			}
			else {
				newSel = state_1.EditorSelection.range(fromLine.from, toLine.to + charsAdded);
			}
			return {
				changes,
				// Selection should now encompass all lines that were changed.
				range: newSel,
			};
		});
		return changes;
	};
	exports.toggleSelectedLinesStartWith = toggleSelectedLinesStartWith;
	// Ensures that ordered lists within [sel] are numbered in ascending order.
	const renumberSelectedLists = (state) => {
		const doc = state.doc;
		const listItemRegex = /^(\s*)(\d+)\.\s?/;
		// Re-numbers ordered lists and sublists with numbers on each line in [linesToHandle]
		const handleLines = (linesToHandle) => {
			const changes = [];
			const listNumberStack = [];
			let currentGroupIndentation = '';
			let nextListNumber = 1;
			let prevLineNumber;
			for (const line of linesToHandle) {
				// Don't re-handle lines.
				if (line.number === prevLineNumber) {
					continue;
				}
				prevLineNumber = line.number;
				const filteredText = (0, exports.stripBlockquote)(line);
				const match = filteredText.match(listItemRegex);
				// Skip lines that aren't the correct type (e.g. blank lines)
				if (!match) {
					continue;
				}
				const indentation = match[1];
				const indentationLen = (0, exports.tabsToSpaces)(state, indentation).length;
				let targetIndentLen = (0, exports.tabsToSpaces)(state, currentGroupIndentation).length;
				if (targetIndentLen < indentationLen) {
					listNumberStack.push({ nextListNumber, indentationLength: indentationLen });
					nextListNumber = 1;
				}
				else if (targetIndentLen > indentationLen) {
					nextListNumber = parseInt(match[2], 10);
					// Handle the case where we deindent multiple times. For example,
					// 1. test
					//    1. test
					//      1. test
					// 2. test
					while (targetIndentLen > indentationLen) {
						const listNumberRecord = listNumberStack.pop();
						if (!listNumberRecord) {
							break;
						}
						else {
							targetIndentLen = listNumberRecord.indentationLength;
							nextListNumber = listNumberRecord.nextListNumber;
						}
					}
				}
				if (targetIndentLen !== indentationLen) {
					currentGroupIndentation = indentation;
				}
				const from = line.to - filteredText.length;
				const to = from + match[0].length;
				const inserted = `${indentation}${nextListNumber}. `;
				nextListNumber++;
				changes.push({
					from,
					to,
					insert: inserted,
				});
			}
			return changes;
		};
		// Find all selected lists
		const selectedListRanges = [];
		for (const selection of state.selection.ranges) {
			const listLines = [];
			(0, language_1.syntaxTree)(state).iterate({
				from: selection.from,
				to: selection.to,
				enter: (nodeRef) => {
					if (nodeRef.name === 'ListItem') {
						for (const node of nodeRef.node.parent.getChildren('ListItem')) {
							const line = doc.lineAt(node.from);
							const filteredText = (0, exports.stripBlockquote)(line);
							const match = filteredText.match(listItemRegex);
							if (match) {
								listLines.push(line);
							}
						}
					}
				},
			});
			listLines.sort((a, b) => a.number - b.number);
			if (listLines.length > 0) {
				const fromLine = listLines[0];
				const toLine = listLines[listLines.length - 1];
				selectedListRanges.push(state_1.EditorSelection.range(fromLine.from, toLine.to));
			}
		}
		const changes = [];
		if (selectedListRanges.length > 0) {
			// Use EditorSelection.create to merge overlapping lists
			const listsToHandle = state_1.EditorSelection.create(selectedListRanges).ranges;
			for (const listSelection of listsToHandle) {
				const lines = [];
				const startLine = doc.lineAt(listSelection.from);
				const endLine = doc.lineAt(listSelection.to);
				for (let i = startLine.number; i <= endLine.number; i++) {
					lines.push(doc.line(i));
				}
				changes.push(...handleLines(lines));
			}
		}
		return {
			changes,
		};
	};
	exports.renumberSelectedLists = renumberSelectedLists;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/pluginApi/PluginLoader.ts":
	/*!******************************************************!*\
	  !*** ../editor/CodeMirror/pluginApi/PluginLoader.ts ***!
	  \******************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
		function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
			function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
			function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const codeMirrorRequire_1 = __webpack_require__(/*! ./codeMirrorRequire */ "../editor/CodeMirror/pluginApi/codeMirrorRequire.ts");
	let pluginScriptIdCounter = 0;
	let pluginLoaderCounter = 0;
	const contentScriptToId = (contentScript) => `${contentScript.pluginId}--${contentScript.contentScriptId}`;
	class PluginLoader {
		constructor(editor, logMessage) {
			var _a, _b;
			var _c, _d;
			this.editor = editor;
			this.logMessage = logMessage;
			this.loadedContentScriptIds = [];
			this.pluginRemovalCallbacks = {};
			this.pluginScriptsContainer = document.createElement('div');
			this.pluginScriptsContainer.style.display = 'none';
			// For testing
			this.pluginScriptsContainer.id = 'joplin-plugin-scripts-container';
			document.body.appendChild(this.pluginScriptsContainer);
			// addPlugin works by creating <script> elements with the plugin's content. To pass
			// information to this <script>, we use global objects:
			(_a = (_c = window).__pluginLoaderScriptLoadCallbacks) !== null && _a !== void 0 ? _a : (_c.__pluginLoaderScriptLoadCallbacks = Object.create(null));
			(_b = (_d = window).__pluginLoaderRequireFunctions) !== null && _b !== void 0 ? _b : (_d.__pluginLoaderRequireFunctions = Object.create(null));
			this.pluginLoaderId = pluginLoaderCounter++;
			window.__pluginLoaderRequireFunctions[this.pluginLoaderId] = codeMirrorRequire_1.default;
		}
		setPlugins(contentScripts) {
			return __awaiter(this, void 0, void 0, function* () {
				for (const contentScript of contentScripts) {
					const id = contentScriptToId(contentScript);
					if (!this.loadedContentScriptIds.includes(id)) {
						this.addPlugin(contentScript);
					}
				}
				// Remove old plugins
				const contentScriptIds = contentScripts.map(contentScriptToId);
				const removedIds = this.loadedContentScriptIds
					.filter(id => !contentScriptIds.includes(id));
				for (const id of removedIds) {
					if (id in this.pluginRemovalCallbacks) {
						this.pluginRemovalCallbacks[id]();
					}
				}
			});
		}
		addPlugin(plugin) {
			const onRemoveCallbacks = [];
			this.logMessage(`Loading plugin ${plugin.pluginId}, content script ${plugin.contentScriptId}`);
			const addScript = (onLoad) => {
				const scriptElement = document.createElement('script');
				onRemoveCallbacks.push(() => {
					scriptElement.remove();
				});
				void (() => __awaiter(this, void 0, void 0, function* () {
					const scriptId = pluginScriptIdCounter++;
					const js = yield plugin.contentScriptJs();
					// Stop if cancelled
					if (!this.loadedContentScriptIds.includes(contentScriptToId(plugin))) {
						return;
					}
					scriptElement.appendChild(document.createTextNode(`
					(async () => {
						const exports = {};
						const require = window.__pluginLoaderRequireFunctions[${JSON.stringify(this.pluginLoaderId)}];
						const joplin = {
							require,
						};
			
						${js};
			
						window.__pluginLoaderScriptLoadCallbacks[${JSON.stringify(scriptId)}](exports);
					})();
					`));
					window.__pluginLoaderScriptLoadCallbacks[scriptId] = onLoad;
					this.pluginScriptsContainer.appendChild(scriptElement);
				}))();
			};
			const addStyles = (cssStrings) => {
				// A container for style elements
				const styleContainer = document.createElement('div');
				onRemoveCallbacks.push(() => {
					styleContainer.remove();
				});
				for (const cssText of cssStrings) {
					const style = document.createElement('style');
					style.innerText = cssText;
					styleContainer.appendChild(style);
				}
				this.pluginScriptsContainer.appendChild(styleContainer);
			};
			this.pluginRemovalCallbacks[contentScriptToId(plugin)] = () => {
				for (const callback of onRemoveCallbacks) {
					callback();
				}
				this.loadedContentScriptIds = this.loadedContentScriptIds.filter(id => {
					return id !== contentScriptToId(plugin);
				});
			};
			addScript((exports) => __awaiter(this, void 0, void 0, function* () {
				var _a;
				if (!(exports === null || exports === void 0 ? void 0 : exports.default) || !(typeof exports.default === 'function')) {
					throw new Error('All plugins must have a function default export');
				}
				const context = {
					postMessage: plugin.postMessageHandler,
					pluginId: plugin.pluginId,
					contentScriptId: plugin.contentScriptId,
				};
				const loadedPlugin = exports.default(context);
				(_a = loadedPlugin.plugin) === null || _a === void 0 ? void 0 : _a.call(loadedPlugin, this.editor);
				if (loadedPlugin.codeMirrorOptions) {
					for (const key in loadedPlugin.codeMirrorOptions) {
						this.editor.setOption(key, loadedPlugin.codeMirrorOptions[key]);
					}
				}
				if (loadedPlugin.assets) {
					const cssStrings = [];
					for (const asset of loadedPlugin.assets()) {
						let assetText = asset.text;
						let assetMime = asset.mime;
						if (!asset.inline) {
							if (!asset.name) {
								throw new Error('Non-inline asset missing required property "name"');
							}
							if (assetMime !== 'text/css' && !asset.name.endsWith('.css')) {
								throw new Error(`Non-css assets are not supported by the CodeMirror 6 editor. (Asset path: ${asset.name})`);
							}
							assetText = yield plugin.loadCssAsset(asset.name);
							assetMime = 'text/css';
						}
						if (assetMime !== 'text/css') {
							throw new Error('Plugin assets must have property "mime" set to "text/css" or have a filename ending with ".css"');
						}
						cssStrings.push(assetText);
					}
					addStyles(cssStrings);
				}
			}));
			this.loadedContentScriptIds.push(contentScriptToId(plugin));
		}
		remove() {
			this.pluginScriptsContainer.remove();
		}
	}
	exports["default"] = PluginLoader;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/pluginApi/codeMirrorRequire.ts":
	/*!***********************************************************!*\
	  !*** ../editor/CodeMirror/pluginApi/codeMirrorRequire.ts ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const codeMirrorView = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const codeMirrorState = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const codeMirrorLanguage = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const codeMirrorAutocomplete = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	const codeMirrorCommands = __webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");
	const codeMirrorLint = __webpack_require__(/*! @codemirror/lint */ "../editor/node_modules/@codemirror/lint/dist/index.cjs");
	const codeMirrorLangHtml = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	const codeMirrorLangMarkdown = __webpack_require__(/*! @codemirror/lang-markdown */ "../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs");
	const codeMirrorLanguageData = __webpack_require__(/*! @codemirror/language-data */ "../editor/node_modules/@codemirror/language-data/dist/index.cjs");
	const lezerHighlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	const lezerCommon = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	const lezerMarkdown = __webpack_require__(/*! @lezer/markdown */ "../editor/node_modules/@lezer/markdown/dist/index.cjs");
	// Exposes CodeMirror libraries to plugins.
	//
	// Plugins can't bundle their own copies of the CodeMirror libraries, as multiple
	// copies of some libraries can cause issues.
	const libraryNameToPackage = {
		'@codemirror/view': codeMirrorView,
		'@codemirror/state': codeMirrorState,
		'@codemirror/language': codeMirrorLanguage,
		'@codemirror/autocomplete': codeMirrorAutocomplete,
		'@codemirror/commands': codeMirrorCommands,
		'@codemirror/lint': codeMirrorLint,
		'@codemirror/lang-html': codeMirrorLangHtml,
		'@codemirror/lang-markdown': codeMirrorLangMarkdown,
		'@codemirror/language-data': codeMirrorLanguageData,
		'@lezer/common': lezerCommon,
		'@lezer/markdown': lezerMarkdown,
		'@lezer/highlight': lezerHighlight,
	};
	const codeMirrorRequire = (library) => {
		// Here, we use hasOwnProperty instead of "in" to prevent
		// require("constructor") or require("__proto__") from returning
		// a constructor or prototype object.
		if (libraryNameToPackage.hasOwnProperty(library)) {
			return libraryNameToPackage[library];
		}
		// Although window.require doesn't work on mobile, some desktop-only plugins
		// originally developed for CodeMirror 5 rely on it.
		if (typeof window.require === 'function') {
			return window.require(library);
		}
		throw new Error(`Cannot find library ${library}`);
	};
	exports["default"] = codeMirrorRequire;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/pluginApi/customEditorCompletion.ts":
	/*!****************************************************************!*\
	  !*** ../editor/CodeMirror/pluginApi/customEditorCompletion.ts ***!
	  \****************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.enableLanguageDataAutocomplete = exports.editorCompletionSource = void 0;
	const state_1 = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	const autocomplete_1 = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	// CodeMirror 6's built-in autocomplete functionality is difficult to work with
	// unless you want to enable languageData-based autocompletion.
	//
	// This file wraps CodeMirror's built-in `autocompletion` extension and allows plugins
	// to provide completions that work regardless of whether languageData-based autocomplete
	// is enabled.
	//
	// See https://discuss.codemirror.net/t/autocompletion-merging-override-in-config/7853
	exports.editorCompletionSource = state_1.Facet.define();
	exports.enableLanguageDataAutocomplete = state_1.Facet.define();
	// Provides languageData OR override autocompletions based on the value of
	// the enableLanguageDataAutocomplete facet.
	const customEditorCompletion = () => {
		const compartment = new state_1.Compartment();
		return [
			compartment.of([]),
			state_1.EditorState.transactionExtender.of(transaction => {
				var _a, _b;
				const lastCompletions = (_a = transaction.startState.facet(exports.editorCompletionSource)) !== null && _a !== void 0 ? _a : [];
				const completions = (_b = transaction.state.facet(exports.editorCompletionSource)) !== null && _b !== void 0 ? _b : [];
				const currentExtension = compartment.get(transaction.state);
				const missingExtension = currentExtension.length === 0 && completions.length > 0;
				const lastEnableLangDataComplete = transaction.startState.facet(exports.enableLanguageDataAutocomplete)[0];
				const enableLangDataComplete = transaction.state.facet(exports.enableLanguageDataAutocomplete)[0];
				const completionsChanged = lastCompletions.length !== completions.length || completions.some((val, idx) => lastCompletions[idx] !== val);
				const useLangDataChanged = lastEnableLangDataComplete !== enableLangDataComplete;
				// Update the autocompletion extension based on the editorCompletionSource
				// facet.
				if (missingExtension || completionsChanged || useLangDataChanged) {
					if (completions.length > 0 || enableLangDataComplete) {
						return {
							effects: compartment.reconfigure([
								completions.map(completion => state_1.EditorState.languageData.of(() => [{ autocomplete: completion }])),
								(0, autocomplete_1.autocompletion)(enableLangDataComplete ? {} : {
									override: [...completions],
								}),
							]),
						};
					}
					else if (!missingExtension) {
						return {
							effects: compartment.reconfigure([]),
						};
					}
				}
				return null;
			}),
		];
	};
	exports["default"] = customEditorCompletion;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/theme.ts":
	/*!*************************************!*\
	  !*** ../editor/CodeMirror/theme.ts ***!
	  \*************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	//
	// Create a set of Extensions that provide syntax highlighting.
	//
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const highlight_1 = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	const view_1 = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	const markdownMathParser_1 = __webpack_require__(/*! ./markdown/markdownMathParser */ "../editor/CodeMirror/markdown/markdownMathParser.ts");
	// For an example on how to customize the theme, see:
	//
	// https://github.com/codemirror/theme-one-dark/blob/main/src/one-dark.ts
	//
	// For a tutorial, see:
	//
	// https://codemirror.net/6/examples/styling/#themes
	//
	// Use Safari developer tools to view the content of the CodeMirror iframe while
	// the app is running. It seems that what appears as ".ͼ1" in the CSS is the
	// equivalent of "&" in the theme object. So to target ".ͼ1.cm-focused", you'd
	// use '&.cm-focused' in the theme.
	//
	// [theme] should be a joplin theme (see @joplin/lib/theme)
	const createTheme = (theme) => {
		var _a;
		// If the theme hasn't loaded yet, return nothing.
		// (createTheme should be called again after the theme has loaded).
		if (!theme) {
			return [];
		}
		const isDarkTheme = theme.appearance === 'dark';
		const baseGlobalStyle = {
			color: theme.color,
			backgroundColor: theme.backgroundColor,
			// On iOS, apply system font scaling (e.g. font scaling
			// set in accessibility settings).
			font: '-apple-system-body',
			// Fill container horizontally
			width: '100%',
			boxSizing: 'border-box',
		};
		const baseCursorStyle = {};
		const baseContentStyle = {
			fontFamily: theme.fontFamily,
			fontSize: `${theme.fontSize}${(_a = theme.fontSizeUnits) !== null && _a !== void 0 ? _a : 'px'}`,
			// Avoid using units here -- 1.55em, for example, can cause lines to overlap
			// if some lines contain text with a large enough font size.
			lineHeight: theme.isDesktop ? '1.55' : undefined,
		};
		const baseSelectionStyle = {};
		const blurredSelectionStyle = {};
		// If we're in dark mode, the caret and selection are difficult to see.
		// Adjust them appropriately
		if (isDarkTheme) {
			// Styling the caret requires styling both the caret itself
			// and the CodeMirror caret.
			// See https://codemirror.net/6/examples/styling/#themes
			baseContentStyle.caretColor = 'white';
			baseCursorStyle.borderLeftColor = 'white';
			baseSelectionStyle.backgroundColor = '#6b6b6b';
			blurredSelectionStyle.backgroundColor = '#444';
		}
		const monospaceStyle = {
			fontFamily: theme.monospaceFont || 'monospace',
		};
		// This is equivalent to the default selection style -- our styling must
		// be at least this specific.
		const selectionBackgroundSelector = '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground';
		const baseHeadingStyle = {
			fontWeight: 'bold',
			fontFamily: theme.fontFamily,
		};
		const codeMirrorTheme = view_1.EditorView.theme({
			'&': baseGlobalStyle,
			// These must be !important or more specific than CodeMirror's built-ins
			'.cm-content': Object.assign(Object.assign({ fontFamily: theme.fontFamily }, baseContentStyle), { paddingBottom: theme.isDesktop ? '400px' : undefined }),
			'&.cm-focused .cm-cursor': baseCursorStyle,
			// The desktop app sets the font for these elements to a specific font.
			// Override this.
			'& div, & span, & a': {
				fontFamily: 'inherit',
			},
			// Override the default border around CodeMirror panels
			'& > .cm-panels': {
				border: 'none',
			},
			// &.cm-focused is used to give these styles higher specificity
			// than the defaults.
			[selectionBackgroundSelector]: baseSelectionStyle,
			'&.cm-focused ::selection': baseSelectionStyle,
			'& ::selection': blurredSelectionStyle,
			'& .cm-selectionLayer .cm-selectionBackground': blurredSelectionStyle,
			'&.cm-editor.cm-focused': {
				outline: 'none !important',
			},
			'& .cm-blockQuote': {
				borderLeft: `4px solid ${theme.colorFaded}`,
				opacity: theme.blockQuoteOpacity,
				paddingLeft: '4px',
			},
			'& .cm-codeBlock': Object.assign({ '&.cm-regionFirstLine, &.cm-regionLastLine': {
					borderRadius: '3px',
				}, '&:not(.cm-regionFirstLine)': {
					borderTop: 'none',
					borderTopLeftRadius: 0,
					borderTopRightRadius: 0,
				}, '&:not(.cm-regionLastLine)': {
					borderBottom: 'none',
					borderBottomLeftRadius: 0,
					borderBottomRightRadius: 0,
				}, borderWidth: '1px', borderStyle: 'solid', borderColor: theme.colorFaded, backgroundColor: 'rgba(155, 155, 155, 0.1)' }, (theme.isDesktop ? monospaceStyle : {})),
			// CodeMirror wraps the existing inline span in an additional element.
			// Due to a Chrome rendering bug, because the .cm-inlineCode wraps a
			// span with a larger font-size, the .cm-inlineCode's bounding box won't
			// be big enough for its content.
			// As such, we need to style whichever element directly wraps its content.
			'& .cm-inlineCode': Object.assign({ borderWidth: '1px', borderStyle: 'solid', borderColor: isDarkTheme ? 'rgba(200, 200, 200, 0.5)' : 'rgba(100, 100, 100, 0.5)', borderRadius: '4px' }, (theme.isDesktop ? monospaceStyle : {})),
			'& .cm-mathBlock, & .cm-inlineMath': {
				color: isDarkTheme ? '#9fa' : '#276',
			},
			'& .cm-tableHeader, & .cm-tableRow, & .cm-tableDelimiter': monospaceStyle,
			'& .cm-taskMarker': monospaceStyle,
			// Applies maximum width styles to individual lines.
			'& .cm-line': theme.contentMaxWidth ? {
				maxWidth: theme.contentMaxWidth,
				// Center
				marginLeft: 'auto',
				marginRight: 'auto',
			} : undefined,
			// Override the default URL style when the URL is within a link
			'& .tok-url.tok-link, & .tok-link.tok-meta, & .tok-link.tok-string': {
				opacity: theme.isDesktop ? 0.6 : 1,
			},
			// Applying font size changes with CSS rather than the theme below works
			// around an issue where the border for code blocks in headings was too
			// small.
			'& .cm-h1': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.6em' }),
			'& .cm-h2': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.4em' }),
			'& .cm-h3': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.3em' }),
			'& .cm-h4': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.2em' }),
			'& .cm-h5': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.1em' }),
			'& .cm-h6': Object.assign(Object.assign({}, baseHeadingStyle), { fontSize: '1.0em' }),
			// Style the search widget. Use ':root' to increase the selector's precedence
			// (override the existing preset styles).
			':root & .cm-panel.cm-search': {
				'& label, & button, & input': {
					fontSize: '1em',
					color: isDarkTheme ? 'white' : 'black',
				},
			},
		}, { dark: isDarkTheme });
		const highlightingStyle = language_1.HighlightStyle.define([
			{
				tag: highlight_1.tags.strong,
				fontWeight: 'bold',
			},
			{
				tag: highlight_1.tags.emphasis,
				fontStyle: 'italic',
			},
			{
				tag: highlight_1.tags.list,
				fontFamily: theme.fontFamily,
			},
			{
				tag: highlight_1.tags.comment,
				opacity: 0.9,
				fontStyle: 'italic',
			},
			{
				tag: highlight_1.tags.link,
				color: theme.urlColor,
				textDecoration: theme.isDesktop ? undefined : 'underline',
			},
			{
				tag: [markdownMathParser_1.mathTag, markdownMathParser_1.inlineMathTag],
				fontStyle: 'italic',
			},
			// Content of code blocks
			{
				tag: highlight_1.tags.keyword,
				color: isDarkTheme ? '#ff7' : '#740',
			},
			{
				tag: highlight_1.tags.operator,
				color: isDarkTheme ? '#f7f' : '#805',
			},
			{
				tag: highlight_1.tags.literal,
				color: isDarkTheme ? '#aaf' : '#037',
			},
			{
				tag: highlight_1.tags.operator,
				color: isDarkTheme ? '#fa9' : '#490',
			},
			{
				tag: highlight_1.tags.typeName,
				color: isDarkTheme ? '#7ff' : '#a00',
			},
			{
				tag: highlight_1.tags.inserted,
				color: isDarkTheme ? '#7f7' : '#471',
			},
			{
				tag: highlight_1.tags.deleted,
				color: isDarkTheme ? '#f96' : '#a21',
			},
			{
				tag: highlight_1.tags.propertyName,
				color: isDarkTheme ? '#d96' : '#940',
			},
			{
				// CSS class names (and class names in other languages)
				tag: highlight_1.tags.className,
				color: isDarkTheme ? '#d8a' : '#904',
			},
		]);
		return [
			codeMirrorTheme,
			(0, language_1.syntaxHighlighting)(highlightingStyle),
			// If we haven't defined highlighting for tags, fall back
			// to the default.
			(0, language_1.syntaxHighlighting)(language_1.defaultHighlightStyle, { fallback: true }),
		];
	};
	exports["default"] = createTheme;
	
	
	/***/ }),
	
	/***/ "../editor/CodeMirror/util/isInSyntaxNode.ts":
	/*!***************************************************!*\
	  !*** ../editor/CodeMirror/util/isInSyntaxNode.ts ***!
	  \***************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	const language_1 = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	const intersectsSyntaxNode = (state, range, nodeName) => {
		let foundNode = false;
		(0, language_1.syntaxTree)(state).iterate({
			from: range.from,
			to: range.to,
			enter: node => {
				if (node.name === nodeName) {
					foundNode = true;
					// Skip children
					return false;
				}
				// Search children if we haven't found a matching node yet.
				return !foundNode;
			},
		});
		return foundNode;
	};
	exports["default"] = intersectsSyntaxNode;
	
	
	/***/ }),
	
	/***/ "../editor/SelectionFormatting.ts":
	/*!****************************************!*\
	  !*** ../editor/SelectionFormatting.ts ***!
	  \****************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.selectionFormattingEqual = exports.defaultSelectionFormatting = void 0;
	exports.defaultSelectionFormatting = {
		bolded: false,
		italicized: false,
		inChecklist: false,
		inCode: false,
		inUnorderedList: false,
		inOrderedList: false,
		inMath: false,
		inLink: false,
		spellChecking: false,
		unspellCheckableRegion: false,
		linkData: {
			linkText: null,
			linkURL: null,
		},
		headerLevel: 0,
		listLevel: 0,
		selectedText: '',
	};
	const selectionFormattingEqual = (a, b) => {
		// Get keys from the default so that only SelectionFormatting key/value pairs are
		// considered. If a and/or b inherit from SelectionFormatting, we want to ignore
		// keys added by child interfaces.
		const keys = Object.keys(exports.defaultSelectionFormatting);
		for (const key of keys) {
			if (key === 'linkData') {
				// A deeper check is required for linkData
				if (a[key].linkText !== b[key].linkText || a[key].linkURL !== b[key].linkURL) {
					return false;
				}
			}
			else if (a[key] !== b[key]) {
				return false;
			}
		}
		return true;
	};
	exports.selectionFormattingEqual = selectionFormattingEqual;
	
	
	/***/ }),
	
	/***/ "../editor/events.ts":
	/*!***************************!*\
	  !*** ../editor/events.ts ***!
	  \***************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.EditorEventType = void 0;
	var EditorEventType;
	(function (EditorEventType) {
		EditorEventType[EditorEventType["Change"] = 0] = "Change";
		EditorEventType[EditorEventType["UndoRedoDepthChange"] = 1] = "UndoRedoDepthChange";
		EditorEventType[EditorEventType["SelectionRangeChange"] = 2] = "SelectionRangeChange";
		EditorEventType[EditorEventType["SelectionFormattingChange"] = 3] = "SelectionFormattingChange";
		EditorEventType[EditorEventType["UpdateSearchDialog"] = 4] = "UpdateSearchDialog";
		EditorEventType[EditorEventType["EditLink"] = 5] = "EditLink";
		EditorEventType[EditorEventType["Scroll"] = 6] = "Scroll";
	})(EditorEventType || (exports.EditorEventType = EditorEventType = {}));
	
	
	/***/ }),
	
	/***/ "../editor/types.ts":
	/*!**************************!*\
	  !*** ../editor/types.ts ***!
	  \**************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.ListType = exports.EditorKeymap = exports.EditorLanguageType = exports.EditorCommandType = void 0;
	// Editor commands. For compatibility, the string values of these commands
	// should correspond with the CodeMirror 5 commands:
	// https://codemirror.net/5/doc/manual.html#commands
	var EditorCommandType;
	(function (EditorCommandType) {
		EditorCommandType["Undo"] = "undo";
		EditorCommandType["Redo"] = "redo";
		EditorCommandType["SelectAll"] = "selectAll";
		EditorCommandType["Focus"] = "focus";
		// Formatting editor commands
		EditorCommandType["ToggleBolded"] = "textBold";
		EditorCommandType["ToggleItalicized"] = "textItalic";
		EditorCommandType["ToggleCode"] = "textCode";
		EditorCommandType["ToggleMath"] = "textMath";
		EditorCommandType["ToggleNumberedList"] = "textNumberedList";
		EditorCommandType["ToggleBulletedList"] = "textBulletedList";
		EditorCommandType["ToggleCheckList"] = "textCheckbox";
		EditorCommandType["ToggleHeading"] = "textHeading";
		EditorCommandType["ToggleHeading1"] = "textHeading1";
		EditorCommandType["ToggleHeading2"] = "textHeading2";
		EditorCommandType["ToggleHeading3"] = "textHeading3";
		EditorCommandType["ToggleHeading4"] = "textHeading4";
		EditorCommandType["ToggleHeading5"] = "textHeading5";
		// Find commands
		EditorCommandType["ShowSearch"] = "find";
		EditorCommandType["HideSearch"] = "hideSearchDialog";
		EditorCommandType["FindNext"] = "findNext";
		EditorCommandType["FindPrevious"] = "findPrev";
		EditorCommandType["ReplaceNext"] = "replace";
		EditorCommandType["ReplaceAll"] = "replaceAll";
		// Editing and navigation commands
		EditorCommandType["ScrollSelectionIntoView"] = "scrollSelectionIntoView";
		EditorCommandType["DeleteToLineEnd"] = "killLine";
		EditorCommandType["DeleteToLineStart"] = "delLineLeft";
		EditorCommandType["IndentMore"] = "indentMore";
		EditorCommandType["IndentLess"] = "indentLess";
		EditorCommandType["IndentAuto"] = "indentAuto";
		EditorCommandType["InsertNewlineAndIndent"] = "newlineAndIndent";
		EditorCommandType["SwapLineUp"] = "swapLineUp";
		EditorCommandType["SwapLineDown"] = "swapLineDown";
		EditorCommandType["GoDocEnd"] = "goDocEnd";
		EditorCommandType["GoDocStart"] = "goDocStart";
		EditorCommandType["GoLineStart"] = "goLineStart";
		EditorCommandType["GoLineEnd"] = "goLineEnd";
		EditorCommandType["GoLineUp"] = "goLineUp";
		EditorCommandType["GoLineDown"] = "goLineDown";
		EditorCommandType["GoPageUp"] = "goPageUp";
		EditorCommandType["GoPageDown"] = "goPageDown";
		EditorCommandType["GoCharLeft"] = "goCharLeft";
		EditorCommandType["GoCharRight"] = "goCharRight";
		EditorCommandType["UndoSelection"] = "undoSelection";
		EditorCommandType["RedoSelection"] = "redoSelection";
	})(EditorCommandType || (exports.EditorCommandType = EditorCommandType = {}));
	var EditorLanguageType;
	(function (EditorLanguageType) {
		EditorLanguageType["Markdown"] = "markdown";
		EditorLanguageType["Html"] = "html";
	})(EditorLanguageType || (exports.EditorLanguageType = EditorLanguageType = {}));
	var EditorKeymap;
	(function (EditorKeymap) {
		EditorKeymap["Default"] = "default";
		EditorKeymap["Vim"] = "vim";
		EditorKeymap["Emacs"] = "emacs";
	})(EditorKeymap || (exports.EditorKeymap = EditorKeymap = {}));
	// Possible types of lists in the editor
	var ListType;
	(function (ListType) {
		ListType[ListType["CheckList"] = 0] = "CheckList";
		ListType[ListType["OrderedList"] = 1] = "OrderedList";
		ListType[ListType["UnorderedList"] = 2] = "UnorderedList";
	})(ListType || (exports.ListType = ListType = {}));
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@replit/codemirror-vim/dist/index.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@replit/codemirror-vim/dist/index.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../editor/node_modules/@babel/runtime/helpers/interopRequireDefault.js");var _createClass2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "../editor/node_modules/@babel/runtime/helpers/createClass.js"));var _classCallCheck2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "../editor/node_modules/@babel/runtime/helpers/classCallCheck.js"));Object.defineProperty(exports, "__esModule", ({value:true}));var state=__webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");var language=__webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");var view=__webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");var search=__webpack_require__(/*! @codemirror/search */ "../editor/node_modules/@codemirror/search/dist/index.cjs");var commands=__webpack_require__(/*! @codemirror/commands */ "../editor/node_modules/@codemirror/commands/dist/index.cjs");function initVim(CodeMirror){var Pos=CodeMirror.Pos;function transformCursor(cm,range){var vim=cm.state.vim;if(!vim||vim.insertMode)return range.head;var head=vim.sel.head;if(!head)return range.head;if(vim.visualBlock){if(range.head.line!=head.line){return;}}if(range.from()==range.anchor&&!range.empty()){if(range.head.line==head.line&&range.head.ch!=head.ch)return new Pos(range.head.line,range.head.ch-1);}return range.head;}function updateSelectionForSurrogateCharacters(cm,curStart,curEnd){if(curStart.line===curEnd.line&&curStart.ch>=curEnd.ch-1){var text=cm.getLine(curStart.line);var charCode=text.charCodeAt(curStart.ch);if(0xD800<=charCode&&charCode<=0xD8FF){curEnd.ch+=1;}}return{start:curStart,end:curEnd};}var defaultKeymap=[{keys:'<Left>',type:'keyToKey',toKeys:'h'},{keys:'<Right>',type:'keyToKey',toKeys:'l'},{keys:'<Up>',type:'keyToKey',toKeys:'k'},{keys:'<Down>',type:'keyToKey',toKeys:'j'},{keys:'g<Up>',type:'keyToKey',toKeys:'gk'},{keys:'g<Down>',type:'keyToKey',toKeys:'gj'},{keys:'<Space>',type:'keyToKey',toKeys:'l'},{keys:'<BS>',type:'keyToKey',toKeys:'h',context:'normal'},{keys:'<Del>',type:'keyToKey',toKeys:'x',context:'normal'},{keys:'<C-Space>',type:'keyToKey',toKeys:'W'},{keys:'<C-BS>',type:'keyToKey',toKeys:'B',context:'normal'},{keys:'<S-Space>',type:'keyToKey',toKeys:'w'},{keys:'<S-BS>',type:'keyToKey',toKeys:'b',context:'normal'},{keys:'<C-n>',type:'keyToKey',toKeys:'j'},{keys:'<C-p>',type:'keyToKey',toKeys:'k'},{keys:'<C-[>',type:'keyToKey',toKeys:'<Esc>'},{keys:'<C-c>',type:'keyToKey',toKeys:'<Esc>'},{keys:'<C-[>',type:'keyToKey',toKeys:'<Esc>',context:'insert'},{keys:'<C-c>',type:'keyToKey',toKeys:'<Esc>',context:'insert'},{keys:'<C-Esc>',type:'keyToKey',toKeys:'<Esc>'},{keys:'<C-Esc>',type:'keyToKey',toKeys:'<Esc>',context:'insert'},{keys:'s',type:'keyToKey',toKeys:'cl',context:'normal'},{keys:'s',type:'keyToKey',toKeys:'c',context:'visual'},{keys:'S',type:'keyToKey',toKeys:'cc',context:'normal'},{keys:'S',type:'keyToKey',toKeys:'VdO',context:'visual'},{keys:'<Home>',type:'keyToKey',toKeys:'0'},{keys:'<End>',type:'keyToKey',toKeys:'$'},{keys:'<PageUp>',type:'keyToKey',toKeys:'<C-b>'},{keys:'<PageDown>',type:'keyToKey',toKeys:'<C-f>'},{keys:'<CR>',type:'keyToKey',toKeys:'j^',context:'normal'},{keys:'<Ins>',type:'keyToKey',toKeys:'i',context:'normal'},{keys:'<Ins>',type:'action',action:'toggleOverwrite',context:'insert'},{keys:'H',type:'motion',motion:'moveToTopLine',motionArgs:{linewise:true,toJumplist:true}},{keys:'M',type:'motion',motion:'moveToMiddleLine',motionArgs:{linewise:true,toJumplist:true}},{keys:'L',type:'motion',motion:'moveToBottomLine',motionArgs:{linewise:true,toJumplist:true}},{keys:'h',type:'motion',motion:'moveByCharacters',motionArgs:{forward:false}},{keys:'l',type:'motion',motion:'moveByCharacters',motionArgs:{forward:true}},{keys:'j',type:'motion',motion:'moveByLines',motionArgs:{forward:true,linewise:true}},{keys:'k',type:'motion',motion:'moveByLines',motionArgs:{forward:false,linewise:true}},{keys:'gj',type:'motion',motion:'moveByDisplayLines',motionArgs:{forward:true}},{keys:'gk',type:'motion',motion:'moveByDisplayLines',motionArgs:{forward:false}},{keys:'w',type:'motion',motion:'moveByWords',motionArgs:{forward:true,wordEnd:false}},{keys:'W',type:'motion',motion:'moveByWords',motionArgs:{forward:true,wordEnd:false,bigWord:true}},{keys:'e',type:'motion',motion:'moveByWords',motionArgs:{forward:true,wordEnd:true,inclusive:true}},{keys:'E',type:'motion',motion:'moveByWords',motionArgs:{forward:true,wordEnd:true,bigWord:true,inclusive:true}},{keys:'b',type:'motion',motion:'moveByWords',motionArgs:{forward:false,wordEnd:false}},{keys:'B',type:'motion',motion:'moveByWords',motionArgs:{forward:false,wordEnd:false,bigWord:true}},{keys:'ge',type:'motion',motion:'moveByWords',motionArgs:{forward:false,wordEnd:true,inclusive:true}},{keys:'gE',type:'motion',motion:'moveByWords',motionArgs:{forward:false,wordEnd:true,bigWord:true,inclusive:true}},{keys:'{',type:'motion',motion:'moveByParagraph',motionArgs:{forward:false,toJumplist:true}},{keys:'}',type:'motion',motion:'moveByParagraph',motionArgs:{forward:true,toJumplist:true}},{keys:'(',type:'motion',motion:'moveBySentence',motionArgs:{forward:false}},{keys:')',type:'motion',motion:'moveBySentence',motionArgs:{forward:true}},{keys:'<C-f>',type:'motion',motion:'moveByPage',motionArgs:{forward:true}},{keys:'<C-b>',type:'motion',motion:'moveByPage',motionArgs:{forward:false}},{keys:'<C-d>',type:'motion',motion:'moveByScroll',motionArgs:{forward:true,explicitRepeat:true}},{keys:'<C-u>',type:'motion',motion:'moveByScroll',motionArgs:{forward:false,explicitRepeat:true}},{keys:'gg',type:'motion',motion:'moveToLineOrEdgeOfDocument',motionArgs:{forward:false,explicitRepeat:true,linewise:true,toJumplist:true}},{keys:'G',type:'motion',motion:'moveToLineOrEdgeOfDocument',motionArgs:{forward:true,explicitRepeat:true,linewise:true,toJumplist:true}},{keys:"g$",type:"motion",motion:"moveToEndOfDisplayLine"},{keys:"g^",type:"motion",motion:"moveToStartOfDisplayLine"},{keys:"g0",type:"motion",motion:"moveToStartOfDisplayLine"},{keys:'0',type:'motion',motion:'moveToStartOfLine'},{keys:'^',type:'motion',motion:'moveToFirstNonWhiteSpaceCharacter'},{keys:'+',type:'motion',motion:'moveByLines',motionArgs:{forward:true,toFirstChar:true}},{keys:'-',type:'motion',motion:'moveByLines',motionArgs:{forward:false,toFirstChar:true}},{keys:'_',type:'motion',motion:'moveByLines',motionArgs:{forward:true,toFirstChar:true,repeatOffset:-1}},{keys:'$',type:'motion',motion:'moveToEol',motionArgs:{inclusive:true}},{keys:'%',type:'motion',motion:'moveToMatchedSymbol',motionArgs:{inclusive:true,toJumplist:true}},{keys:'f<character>',type:'motion',motion:'moveToCharacter',motionArgs:{forward:true,inclusive:true}},{keys:'F<character>',type:'motion',motion:'moveToCharacter',motionArgs:{forward:false}},{keys:'t<character>',type:'motion',motion:'moveTillCharacter',motionArgs:{forward:true,inclusive:true}},{keys:'T<character>',type:'motion',motion:'moveTillCharacter',motionArgs:{forward:false}},{keys:';',type:'motion',motion:'repeatLastCharacterSearch',motionArgs:{forward:true}},{keys:',',type:'motion',motion:'repeatLastCharacterSearch',motionArgs:{forward:false}},{keys:'\'<character>',type:'motion',motion:'goToMark',motionArgs:{toJumplist:true,linewise:true}},{keys:'`<character>',type:'motion',motion:'goToMark',motionArgs:{toJumplist:true}},{keys:']`',type:'motion',motion:'jumpToMark',motionArgs:{forward:true}},{keys:'[`',type:'motion',motion:'jumpToMark',motionArgs:{forward:false}},{keys:']\'',type:'motion',motion:'jumpToMark',motionArgs:{forward:true,linewise:true}},{keys:'[\'',type:'motion',motion:'jumpToMark',motionArgs:{forward:false,linewise:true}},{keys:']p',type:'action',action:'paste',isEdit:true,actionArgs:{after:true,isEdit:true,matchIndent:true}},{keys:'[p',type:'action',action:'paste',isEdit:true,actionArgs:{after:false,isEdit:true,matchIndent:true}},{keys:']<character>',type:'motion',motion:'moveToSymbol',motionArgs:{forward:true,toJumplist:true}},{keys:'[<character>',type:'motion',motion:'moveToSymbol',motionArgs:{forward:false,toJumplist:true}},{keys:'|',type:'motion',motion:'moveToColumn'},{keys:'o',type:'motion',motion:'moveToOtherHighlightedEnd',context:'visual'},{keys:'O',type:'motion',motion:'moveToOtherHighlightedEnd',motionArgs:{sameLine:true},context:'visual'},{keys:'d',type:'operator',operator:'delete'},{keys:'y',type:'operator',operator:'yank'},{keys:'c',type:'operator',operator:'change'},{keys:'=',type:'operator',operator:'indentAuto'},{keys:'>',type:'operator',operator:'indent',operatorArgs:{indentRight:true}},{keys:'<',type:'operator',operator:'indent',operatorArgs:{indentRight:false}},{keys:'g~',type:'operator',operator:'changeCase'},{keys:'gu',type:'operator',operator:'changeCase',operatorArgs:{toLower:true},isEdit:true},{keys:'gU',type:'operator',operator:'changeCase',operatorArgs:{toLower:false},isEdit:true},{keys:'n',type:'motion',motion:'findNext',motionArgs:{forward:true,toJumplist:true}},{keys:'N',type:'motion',motion:'findNext',motionArgs:{forward:false,toJumplist:true}},{keys:'gn',type:'motion',motion:'findAndSelectNextInclusive',motionArgs:{forward:true}},{keys:'gN',type:'motion',motion:'findAndSelectNextInclusive',motionArgs:{forward:false}},{keys:'x',type:'operatorMotion',operator:'delete',motion:'moveByCharacters',motionArgs:{forward:true},operatorMotionArgs:{visualLine:false}},{keys:'X',type:'operatorMotion',operator:'delete',motion:'moveByCharacters',motionArgs:{forward:false},operatorMotionArgs:{visualLine:true}},{keys:'D',type:'operatorMotion',operator:'delete',motion:'moveToEol',motionArgs:{inclusive:true},context:'normal'},{keys:'D',type:'operator',operator:'delete',operatorArgs:{linewise:true},context:'visual'},{keys:'Y',type:'operatorMotion',operator:'yank',motion:'expandToLine',motionArgs:{linewise:true},context:'normal'},{keys:'Y',type:'operator',operator:'yank',operatorArgs:{linewise:true},context:'visual'},{keys:'C',type:'operatorMotion',operator:'change',motion:'moveToEol',motionArgs:{inclusive:true},context:'normal'},{keys:'C',type:'operator',operator:'change',operatorArgs:{linewise:true},context:'visual'},{keys:'~',type:'operatorMotion',operator:'changeCase',motion:'moveByCharacters',motionArgs:{forward:true},operatorArgs:{shouldMoveCursor:true},context:'normal'},{keys:'~',type:'operator',operator:'changeCase',context:'visual'},{keys:'<C-u>',type:'operatorMotion',operator:'delete',motion:'moveToStartOfLine',context:'insert'},{keys:'<C-w>',type:'operatorMotion',operator:'delete',motion:'moveByWords',motionArgs:{forward:false,wordEnd:false},context:'insert'},{keys:'<C-w>',type:'idle',context:'normal'},{keys:'<C-i>',type:'action',action:'jumpListWalk',actionArgs:{forward:true}},{keys:'<C-o>',type:'action',action:'jumpListWalk',actionArgs:{forward:false}},{keys:'<C-e>',type:'action',action:'scroll',actionArgs:{forward:true,linewise:true}},{keys:'<C-y>',type:'action',action:'scroll',actionArgs:{forward:false,linewise:true}},{keys:'a',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'charAfter'},context:'normal'},{keys:'A',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'eol'},context:'normal'},{keys:'A',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'endOfSelectedArea'},context:'visual'},{keys:'i',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'inplace'},context:'normal'},{keys:'gi',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'lastEdit'},context:'normal'},{keys:'I',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'firstNonBlank'},context:'normal'},{keys:'gI',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'bol'},context:'normal'},{keys:'I',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{insertAt:'startOfSelectedArea'},context:'visual'},{keys:'o',type:'action',action:'newLineAndEnterInsertMode',isEdit:true,interlaceInsertRepeat:true,actionArgs:{after:true},context:'normal'},{keys:'O',type:'action',action:'newLineAndEnterInsertMode',isEdit:true,interlaceInsertRepeat:true,actionArgs:{after:false},context:'normal'},{keys:'v',type:'action',action:'toggleVisualMode'},{keys:'V',type:'action',action:'toggleVisualMode',actionArgs:{linewise:true}},{keys:'<C-v>',type:'action',action:'toggleVisualMode',actionArgs:{blockwise:true}},{keys:'<C-q>',type:'action',action:'toggleVisualMode',actionArgs:{blockwise:true}},{keys:'gv',type:'action',action:'reselectLastSelection'},{keys:'J',type:'action',action:'joinLines',isEdit:true},{keys:'gJ',type:'action',action:'joinLines',actionArgs:{keepSpaces:true},isEdit:true},{keys:'p',type:'action',action:'paste',isEdit:true,actionArgs:{after:true,isEdit:true}},{keys:'P',type:'action',action:'paste',isEdit:true,actionArgs:{after:false,isEdit:true}},{keys:'r<character>',type:'action',action:'replace',isEdit:true},{keys:'@<character>',type:'action',action:'replayMacro'},{keys:'q<character>',type:'action',action:'enterMacroRecordMode'},{keys:'R',type:'action',action:'enterInsertMode',isEdit:true,actionArgs:{replace:true},context:'normal'},{keys:'R',type:'operator',operator:'change',operatorArgs:{linewise:true,fullLine:true},context:'visual',exitVisualBlock:true},{keys:'u',type:'action',action:'undo',context:'normal'},{keys:'u',type:'operator',operator:'changeCase',operatorArgs:{toLower:true},context:'visual',isEdit:true},{keys:'U',type:'operator',operator:'changeCase',operatorArgs:{toLower:false},context:'visual',isEdit:true},{keys:'<C-r>',type:'action',action:'redo'},{keys:'m<character>',type:'action',action:'setMark'},{keys:'"<character>',type:'action',action:'setRegister'},{keys:'<C-r><character>',type:'action',action:'insertRegister',context:'insert',isEdit:true},{keys:'<C-o>',type:'action',action:'oneNormalCommand',context:'insert'},{keys:'zz',type:'action',action:'scrollToCursor',actionArgs:{position:'center'}},{keys:'z.',type:'action',action:'scrollToCursor',actionArgs:{position:'center'},motion:'moveToFirstNonWhiteSpaceCharacter'},{keys:'zt',type:'action',action:'scrollToCursor',actionArgs:{position:'top'}},{keys:'z<CR>',type:'action',action:'scrollToCursor',actionArgs:{position:'top'},motion:'moveToFirstNonWhiteSpaceCharacter'},{keys:'zb',type:'action',action:'scrollToCursor',actionArgs:{position:'bottom'}},{keys:'z-',type:'action',action:'scrollToCursor',actionArgs:{position:'bottom'},motion:'moveToFirstNonWhiteSpaceCharacter'},{keys:'.',type:'action',action:'repeatLastEdit'},{keys:'<C-a>',type:'action',action:'incrementNumberToken',isEdit:true,actionArgs:{increase:true,backtrack:false}},{keys:'<C-x>',type:'action',action:'incrementNumberToken',isEdit:true,actionArgs:{increase:false,backtrack:false}},{keys:'<C-t>',type:'action',action:'indent',actionArgs:{indentRight:true},context:'insert'},{keys:'<C-d>',type:'action',action:'indent',actionArgs:{indentRight:false},context:'insert'},{keys:'a<character>',type:'motion',motion:'textObjectManipulation'},{keys:'i<character>',type:'motion',motion:'textObjectManipulation',motionArgs:{textObjectInner:true}},{keys:'/',type:'search',searchArgs:{forward:true,querySrc:'prompt',toJumplist:true}},{keys:'?',type:'search',searchArgs:{forward:false,querySrc:'prompt',toJumplist:true}},{keys:'*',type:'search',searchArgs:{forward:true,querySrc:'wordUnderCursor',wholeWordOnly:true,toJumplist:true}},{keys:'#',type:'search',searchArgs:{forward:false,querySrc:'wordUnderCursor',wholeWordOnly:true,toJumplist:true}},{keys:'g*',type:'search',searchArgs:{forward:true,querySrc:'wordUnderCursor',toJumplist:true}},{keys:'g#',type:'search',searchArgs:{forward:false,querySrc:'wordUnderCursor',toJumplist:true}},{keys:':',type:'ex'}];var defaultKeymapLength=defaultKeymap.length;var defaultExCommandMap=[{name:'colorscheme',shortName:'colo'},{name:'map'},{name:'imap',shortName:'im'},{name:'nmap',shortName:'nm'},{name:'vmap',shortName:'vm'},{name:'omap',shortName:'om'},{name:'noremap',shortName:'no'},{name:'nnoremap',shortName:'nn'},{name:'vnoremap',shortName:'vn'},{name:'inoremap',shortName:'ino'},{name:'onoremap',shortName:'ono'},{name:'unmap'},{name:'mapclear',shortName:'mapc'},{name:'nmapclear',shortName:'nmapc'},{name:'vmapclear',shortName:'vmapc'},{name:'imapclear',shortName:'imapc'},{name:'omapclear',shortName:'omapc'},{name:'write',shortName:'w'},{name:'undo',shortName:'u'},{name:'redo',shortName:'red'},{name:'set',shortName:'se'},{name:'setlocal',shortName:'setl'},{name:'setglobal',shortName:'setg'},{name:'sort',shortName:'sor'},{name:'substitute',shortName:'s',possiblyAsync:true},{name:'nohlsearch',shortName:'noh'},{name:'yank',shortName:'y'},{name:'delmarks',shortName:'delm'},{name:'registers',shortName:'reg',excludeFromCommandHistory:true},{name:'vglobal',shortName:'v'},{name:'delete',shortName:'d'},{name:'join',shortName:'j'},{name:'normal',shortName:'norm'},{name:'global',shortName:'g'}];function enterVimMode(cm){cm.setOption('disableInput',true);cm.setOption('showCursorWhenSelecting',false);CodeMirror.signal(cm,"vim-mode-change",{mode:"normal"});cm.on('cursorActivity',onCursorActivity);maybeInitVimState(cm);CodeMirror.on(cm.getInputField(),'paste',getOnPasteFn(cm));}function leaveVimMode(cm){cm.setOption('disableInput',false);cm.off('cursorActivity',onCursorActivity);CodeMirror.off(cm.getInputField(),'paste',getOnPasteFn(cm));cm.state.vim=null;if(highlightTimeout)clearTimeout(highlightTimeout);}function detachVimMap(cm,next){if(this==CodeMirror.keyMap.vim){cm.options.$customCursor=null;CodeMirror.rmClass(cm.getWrapperElement(),"cm-fat-cursor");}if(!next||next.attach!=attachVimMap)leaveVimMode(cm);}function attachVimMap(cm,prev){if(this==CodeMirror.keyMap.vim){if(cm.curOp)cm.curOp.selectionChanged=true;cm.options.$customCursor=transformCursor;CodeMirror.addClass(cm.getWrapperElement(),"cm-fat-cursor");}if(!prev||prev.attach!=attachVimMap)enterVimMode(cm);}CodeMirror.defineOption('vimMode',false,function(cm,val,prev){if(val&&cm.getOption("keyMap")!="vim")cm.setOption("keyMap","vim");else if(!val&&prev!=CodeMirror.Init&&/^vim/.test(cm.getOption("keyMap")))cm.setOption("keyMap","default");});function cmKey(key,cm){if(!cm){return undefined;}if(this[key]){return this[key];}var vimKey=cmKeyToVimKey(key);if(!vimKey){return false;}var cmd=vimApi.findKey(cm,vimKey);if(typeof cmd=='function'){CodeMirror.signal(cm,'vim-keypress',vimKey);}return cmd;}var modifiers={Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};var specialKeys={Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};var vimToCmKeyMap={};'Left|Right|Up|Down|End|Home'.split('|').concat(Object.keys(specialKeys)).forEach(function(x){vimToCmKeyMap[(specialKeys[x]||'').toLowerCase()]=vimToCmKeyMap[x.toLowerCase()]=x;});function cmKeyToVimKey(key){if(key.charAt(0)=='\''){return key.charAt(1);}var pieces=key.split(/-(?!$)/);var lastPiece=pieces[pieces.length-1];if(pieces.length==1&&pieces[0].length==1){return false;}else if(pieces.length==2&&pieces[0]=='Shift'&&lastPiece.length==1){return false;}var hasCharacter=false;for(var i=0;i<pieces.length;i++){var piece=pieces[i];if(piece in modifiers){pieces[i]=modifiers[piece];}else{hasCharacter=true;}if(piece in specialKeys){pieces[i]=specialKeys[piece];}}if(!hasCharacter){return false;}if(isUpperCase(lastPiece)){pieces[pieces.length-1]=lastPiece.toLowerCase();}return'<'+pieces.join('-')+'>';}function getOnPasteFn(cm){var vim=cm.state.vim;if(!vim.onPasteFn){vim.onPasteFn=function(){if(!vim.insertMode){cm.setCursor(offsetCursor(cm.getCursor(),0,1));actions.enterInsertMode(cm,{},vim);}};}return vim.onPasteFn;}var numberRegex=/[\d]/;var wordCharTest=[CodeMirror.isWordChar,function(ch){return ch&&!CodeMirror.isWordChar(ch)&&!/\s/.test(ch);}],bigWordCharTest=[function(ch){return /\S/.test(ch);}];function makeKeyRange(start,size){var keys=[];for(var i=start;i<start+size;i++){keys.push(String.fromCharCode(i));}return keys;}var upperCaseAlphabet=makeKeyRange(65,26);var lowerCaseAlphabet=makeKeyRange(97,26);var numbers=makeKeyRange(48,10);var validMarks=[].concat(upperCaseAlphabet,lowerCaseAlphabet,numbers,['<','>']);var validRegisters=[].concat(upperCaseAlphabet,lowerCaseAlphabet,numbers,['-','"','.',':','_','/','+']);var upperCaseChars;try{upperCaseChars=new RegExp("^[\\p{Lu}]$","u");}catch(_){upperCaseChars=/^[A-Z]$/;}function isLine(cm,line){return line>=cm.firstLine()&&line<=cm.lastLine();}function isLowerCase(k){return /^[a-z]$/.test(k);}function isMatchableSymbol(k){return'()[]{}'.indexOf(k)!=-1;}function isNumber(k){return numberRegex.test(k);}function isUpperCase(k){return upperCaseChars.test(k);}function isWhiteSpaceString(k){return /^\s*$/.test(k);}function isEndOfSentenceSymbol(k){return'.?!'.indexOf(k)!=-1;}function inArray(val,arr){for(var i=0;i<arr.length;i++){if(arr[i]==val){return true;}}return false;}var options={};function defineOption(name,defaultValue,type,aliases,callback){if(defaultValue===undefined&&!callback){throw Error('defaultValue is required unless callback is provided');}if(!type){type='string';}options[name]={type:type,defaultValue:defaultValue,callback:callback};if(aliases){for(var i=0;i<aliases.length;i++){options[aliases[i]]=options[name];}}if(defaultValue){setOption(name,defaultValue);}}function setOption(name,value,cm,cfg){var option=options[name];cfg=cfg||{};var scope=cfg.scope;if(!option){return new Error('Unknown option: '+name);}if(option.type=='boolean'){if(value&&value!==true){return new Error('Invalid argument: '+name+'='+value);}else if(value!==false){value=true;}}if(option.callback){if(scope!=='local'){option.callback(value,undefined);}if(scope!=='global'&&cm){option.callback(value,cm);}}else{if(scope!=='local'){option.value=option.type=='boolean'?!!value:value;}if(scope!=='global'&&cm){cm.state.vim.options[name]={value:value};}}}function getOption(name,cm,cfg){var option=options[name];cfg=cfg||{};var scope=cfg.scope;if(!option){return new Error('Unknown option: '+name);}if(option.callback){var local=cm&&option.callback(undefined,cm);if(scope!=='global'&&local!==undefined){return local;}if(scope!=='local'){return option.callback();}return;}else{var local=scope!=='global'&&cm&&cm.state.vim.options[name];return(local||scope!=='local'&&option||{}).value;}}defineOption('filetype',undefined,'string',['ft'],function(name,cm){if(cm===undefined){return;}if(name===undefined){var mode=cm.getOption('mode');return mode=='null'?'':mode;}else{var mode=name==''?'null':name;cm.setOption('mode',mode);}});var createCircularJumpList=function createCircularJumpList(){var size=100;var pointer=-1;var head=0;var tail=0;var buffer=new Array(size);function add(cm,oldCur,newCur){var current=pointer%size;var curMark=buffer[current];function useNextSlot(cursor){var next=++pointer%size;var trashMark=buffer[next];if(trashMark){trashMark.clear();}buffer[next]=cm.setBookmark(cursor);}if(curMark){var markPos=curMark.find();if(markPos&&!cursorEqual(markPos,oldCur)){useNextSlot(oldCur);}}else{useNextSlot(oldCur);}useNextSlot(newCur);head=pointer;tail=pointer-size+1;if(tail<0){tail=0;}}function move(cm,offset){pointer+=offset;if(pointer>head){pointer=head;}else if(pointer<tail){pointer=tail;}var mark=buffer[(size+pointer)%size];if(mark&&!mark.find()){var inc=offset>0?1:-1;var newCur;var oldCur=cm.getCursor();do{pointer+=inc;mark=buffer[(size+pointer)%size];if(mark&&(newCur=mark.find())&&!cursorEqual(oldCur,newCur)){break;}}while(pointer<head&&pointer>tail);}return mark;}function find(cm,offset){var oldPointer=pointer;var mark=move(cm,offset);pointer=oldPointer;return mark&&mark.find();}return{cachedCursor:undefined,add:add,find:find,move:move};};var createInsertModeChanges=function createInsertModeChanges(c){if(c){return{changes:c.changes,expectCursorActivityForChange:c.expectCursorActivityForChange};}return{changes:[],expectCursorActivityForChange:false};};function MacroModeState(){this.latestRegister=undefined;this.isPlaying=false;this.isRecording=false;this.replaySearchQueries=[];this.onRecordingDone=undefined;this.lastInsertModeChanges=createInsertModeChanges();}MacroModeState.prototype={exitMacroRecordMode:function exitMacroRecordMode(){var macroModeState=vimGlobalState.macroModeState;if(macroModeState.onRecordingDone){macroModeState.onRecordingDone();}macroModeState.onRecordingDone=undefined;macroModeState.isRecording=false;},enterMacroRecordMode:function enterMacroRecordMode(cm,registerName){var register=vimGlobalState.registerController.getRegister(registerName);if(register){register.clear();this.latestRegister=registerName;if(cm.openDialog){var template=dom('span',{class:'cm-vim-message'},'recording @'+registerName);this.onRecordingDone=cm.openDialog(template,null,{bottom:true});}this.isRecording=true;}}};function maybeInitVimState(cm){if(!cm.state.vim){cm.state.vim={inputState:new InputState(),lastEditInputState:undefined,lastEditActionCommand:undefined,lastHPos:-1,lastHSPos:-1,lastMotion:null,marks:{},insertMode:false,insertModeReturn:false,insertModeRepeat:undefined,visualMode:false,visualLine:false,visualBlock:false,lastSelection:null,lastPastedText:null,sel:{},options:{}};}return cm.state.vim;}var vimGlobalState;function resetVimGlobalState(){vimGlobalState={searchQuery:null,searchIsReversed:false,lastSubstituteReplacePart:undefined,jumpList:createCircularJumpList(),macroModeState:new MacroModeState(),lastCharacterSearch:{increment:0,forward:true,selectedCharacter:''},registerController:new RegisterController({}),searchHistoryController:new HistoryController(),exCommandHistoryController:new HistoryController()};for(var optionName in options){var option=options[optionName];option.value=option.defaultValue;}}var lastInsertModeKeyTimer;var vimApi={enterVimMode:enterVimMode,leaveVimMode:leaveVimMode,buildKeyMap:function buildKeyMap(){},getRegisterController:function getRegisterController(){return vimGlobalState.registerController;},resetVimGlobalState_:resetVimGlobalState,getVimGlobalState_:function getVimGlobalState_(){return vimGlobalState;},maybeInitVimState_:maybeInitVimState,suppressErrorLogging:false,InsertModeKey:InsertModeKey,map:function map(lhs,rhs,ctx){exCommandDispatcher.map(lhs,rhs,ctx);},unmap:function unmap(lhs,ctx){return exCommandDispatcher.unmap(lhs,ctx);},noremap:function noremap(lhs,rhs,ctx){exCommandDispatcher.map(lhs,rhs,ctx,true);},mapclear:function mapclear(ctx){var actualLength=defaultKeymap.length,origLength=defaultKeymapLength;var userKeymap=defaultKeymap.slice(0,actualLength-origLength);defaultKeymap=defaultKeymap.slice(actualLength-origLength);if(ctx){for(var i=userKeymap.length-1;i>=0;i--){var mapping=userKeymap[i];if(ctx!==mapping.context){if(mapping.context){this._mapCommand(mapping);}else{var contexts=['normal','insert','visual'];for(var j in contexts){if(contexts[j]!==ctx){var newMapping={};for(var key in mapping){newMapping[key]=mapping[key];}newMapping.context=contexts[j];this._mapCommand(newMapping);}}}}}}},setOption:setOption,getOption:getOption,defineOption:defineOption,defineEx:function defineEx(name,prefix,func){if(!prefix){prefix=name;}else if(name.indexOf(prefix)!==0){throw new Error('(Vim.defineEx) "'+prefix+'" is not a prefix of "'+name+'", command not registered');}exCommands[name]=func;exCommandDispatcher.commandMap_[prefix]={name:name,shortName:prefix,type:'api'};},handleKey:function handleKey(cm,key,origin){var command=this.findKey(cm,key,origin);if(typeof command==='function'){return command();}},multiSelectHandleKey:multiSelectHandleKey,findKey:function findKey(cm,key,origin){var vim=maybeInitVimState(cm);function handleMacroRecording(){var macroModeState=vimGlobalState.macroModeState;if(macroModeState.isRecording){if(key=='q'){macroModeState.exitMacroRecordMode();clearInputState(cm);return true;}if(origin!='mapping'){logKey(macroModeState,key);}}}function handleEsc(){if(key=='<Esc>'){if(vim.visualMode){exitVisualMode(cm);}else if(vim.insertMode){exitInsertMode(cm);}else{return;}clearInputState(cm);return true;}}function handleKeyInsertMode(){if(handleEsc()){return true;}vim.inputState.keyBuffer.push(key);var keys=vim.inputState.keyBuffer.join("");var keysAreChars=key.length==1;var match=commandDispatcher.matchCommand(keys,defaultKeymap,vim.inputState,'insert');var changeQueue=vim.inputState.changeQueue;if(match.type=='none'){clearInputState(cm);return false;}else if(match.type=='partial'){if(lastInsertModeKeyTimer){window.clearTimeout(lastInsertModeKeyTimer);}lastInsertModeKeyTimer=keysAreChars&&window.setTimeout(function(){if(vim.insertMode&&vim.inputState.keyBuffer.length){clearInputState(cm);}},getOption('insertModeEscKeysTimeout'));if(keysAreChars){var selections=cm.listSelections();if(!changeQueue||changeQueue.removed.length!=selections.length)changeQueue=vim.inputState.changeQueue=new ChangeQueue();changeQueue.inserted+=key;for(var i=0;i<selections.length;i++){var from=cursorMin(selections[i].anchor,selections[i].head);var to=cursorMax(selections[i].anchor,selections[i].head);var text=cm.getRange(from,cm.state.overwrite?offsetCursor(to,0,1):to);changeQueue.removed[i]=(changeQueue.removed[i]||"")+text;}}return!keysAreChars;}if(lastInsertModeKeyTimer){window.clearTimeout(lastInsertModeKeyTimer);}if(match.command&&changeQueue){var selections=cm.listSelections();for(var i=0;i<selections.length;i++){var here=selections[i].head;cm.replaceRange(changeQueue.removed[i]||"",offsetCursor(here,0,-changeQueue.inserted.length),here,'+input');}vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();}if(!match.command)clearInputState(cm);return match.command;}function handleKeyNonInsertMode(){if(handleMacroRecording()||handleEsc()){return true;}vim.inputState.keyBuffer.push(key);var keys=vim.inputState.keyBuffer.join("");if(/^[1-9]\d*$/.test(keys)){return true;}var keysMatcher=/^(\d*)(.*)$/.exec(keys);if(!keysMatcher){clearInputState(cm);return false;}var context=vim.visualMode?'visual':'normal';var mainKey=keysMatcher[2]||keysMatcher[1];if(vim.inputState.operatorShortcut&&vim.inputState.operatorShortcut.slice(-1)==mainKey){mainKey=vim.inputState.operatorShortcut;}var match=commandDispatcher.matchCommand(mainKey,defaultKeymap,vim.inputState,context);if(match.type=='none'){clearInputState(cm);return false;}else if(match.type=='partial'){return true;}else if(match.type=='clear'){clearInputState(cm);return true;}vim.inputState.keyBuffer.length=0;keysMatcher=/^(\d*)(.*)$/.exec(keys);if(keysMatcher[1]&&keysMatcher[1]!='0'){vim.inputState.pushRepeatDigit(keysMatcher[1]);}return match.command;}var command;if(vim.insertMode){command=handleKeyInsertMode();}else{command=handleKeyNonInsertMode();}if(command===false){return!vim.insertMode&&key.length===1?function(){return true;}:undefined;}else if(command===true){return function(){return true;};}else{return function(){return cm.operation(function(){cm.curOp.isVimOp=true;try{if(command.type=='keyToKey'){doKeyToKey(cm,command.toKeys,command);}else{commandDispatcher.processCommand(cm,vim,command);}}catch(e){cm.state.vim=undefined;maybeInitVimState(cm);if(!vimApi.suppressErrorLogging){console['log'](e);}throw e;}return true;});};}},handleEx:function handleEx(cm,input){exCommandDispatcher.processCommand(cm,input);},defineMotion:defineMotion,defineAction:defineAction,defineOperator:defineOperator,mapCommand:mapCommand,_mapCommand:_mapCommand,defineRegister:defineRegister,exitVisualMode:exitVisualMode,exitInsertMode:exitInsertMode};var keyToKeyStack=[];var noremap=false;function doKeyToKey(cm,keys,fromKey){if(fromKey){if(keyToKeyStack.indexOf(fromKey)!=-1)return;keyToKeyStack.push(fromKey);noremap=fromKey.noremap;}try{var vim=maybeInitVimState(cm);var keyRe=/<(?:[CSMA]-)*\w+>|./gi;var match;while(match=keyRe.exec(keys)){var key=match[0];var wasInsert=vim.insertMode;var result=vimApi.handleKey(cm,key,'mapping');if(!result&&wasInsert&&vim.insertMode){if(key[0]=="<"){var lowerKey=key.toLowerCase().slice(1,-1);var parts=lowerKey.split('-');var lowerKey=parts.pop();if(lowerKey=='lt')key='<';else if(lowerKey=='space')key=' ';else if(lowerKey=='cr')key='\n';else if(vimToCmKeyMap.hasOwnProperty(lowerKey)){key=vimToCmKeyMap[lowerKey];sendCmKey(cm,key);continue;}else{key=key[0];keyRe.lastIndex=match.index+1;}}cm.replaceSelection(key);}}}finally{noremap=false;keyToKeyStack.length=0;}}function InputState(){this.prefixRepeat=[];this.motionRepeat=[];this.operator=null;this.operatorArgs=null;this.motion=null;this.motionArgs=null;this.keyBuffer=[];this.registerName=null;this.changeQueue=null;}InputState.prototype.pushRepeatDigit=function(n){if(!this.operator){this.prefixRepeat=this.prefixRepeat.concat(n);}else{this.motionRepeat=this.motionRepeat.concat(n);}};InputState.prototype.getRepeat=function(){var repeat=0;if(this.prefixRepeat.length>0||this.motionRepeat.length>0){repeat=1;if(this.prefixRepeat.length>0){repeat*=parseInt(this.prefixRepeat.join(''),10);}if(this.motionRepeat.length>0){repeat*=parseInt(this.motionRepeat.join(''),10);}}return repeat;};function clearInputState(cm,reason){cm.state.vim.inputState=new InputState();CodeMirror.signal(cm,'vim-command-done',reason);}function ChangeQueue(){this.removed=[];this.inserted="";}function Register(text,linewise,blockwise){this.clear();this.keyBuffer=[text||''];this.insertModeChanges=[];this.searchQueries=[];this.linewise=!!linewise;this.blockwise=!!blockwise;}Register.prototype={setText:function setText(text,linewise,blockwise){this.keyBuffer=[text||''];this.linewise=!!linewise;this.blockwise=!!blockwise;},pushText:function pushText(text,linewise){if(linewise){if(!this.linewise){this.keyBuffer.push('\n');}this.linewise=true;}this.keyBuffer.push(text);},pushInsertModeChanges:function pushInsertModeChanges(changes){this.insertModeChanges.push(createInsertModeChanges(changes));},pushSearchQuery:function pushSearchQuery(query){this.searchQueries.push(query);},clear:function clear(){this.keyBuffer=[];this.insertModeChanges=[];this.searchQueries=[];this.linewise=false;},toString:function toString(){return this.keyBuffer.join('');}};function defineRegister(name,register){var registers=vimGlobalState.registerController.registers;if(!name||name.length!=1){throw Error('Register name must be 1 character');}if(registers[name]){throw Error('Register already defined '+name);}registers[name]=register;validRegisters.push(name);}function RegisterController(registers){this.registers=registers;this.unnamedRegister=registers['"']=new Register();registers['.']=new Register();registers[':']=new Register();registers['/']=new Register();registers['+']=new Register();}RegisterController.prototype={pushText:function pushText(registerName,operator,text,linewise,blockwise){if(registerName==='_')return;if(linewise&&text.charAt(text.length-1)!=='\n'){text+='\n';}var register=this.isValidRegister(registerName)?this.getRegister(registerName):null;if(!register){switch(operator){case'yank':this.registers['0']=new Register(text,linewise,blockwise);break;case'delete':case'change':if(text.indexOf('\n')==-1){this.registers['-']=new Register(text,linewise);}else{this.shiftNumericRegisters_();this.registers['1']=new Register(text,linewise);}break;}this.unnamedRegister.setText(text,linewise,blockwise);return;}var append=isUpperCase(registerName);if(append){register.pushText(text,linewise);}else{register.setText(text,linewise,blockwise);}if(registerName==='+'){navigator.clipboard.writeText(text);}this.unnamedRegister.setText(register.toString(),linewise);},getRegister:function getRegister(name){if(!this.isValidRegister(name)){return this.unnamedRegister;}name=name.toLowerCase();if(!this.registers[name]){this.registers[name]=new Register();}return this.registers[name];},isValidRegister:function isValidRegister(name){return name&&inArray(name,validRegisters);},shiftNumericRegisters_:function shiftNumericRegisters_(){for(var i=9;i>=2;i--){this.registers[i]=this.getRegister(''+(i-1));}}};function HistoryController(){this.historyBuffer=[];this.iterator=0;this.initialPrefix=null;}HistoryController.prototype={nextMatch:function nextMatch(input,up){var historyBuffer=this.historyBuffer;var dir=up?-1:1;if(this.initialPrefix===null)this.initialPrefix=input;for(var i=this.iterator+dir;up?i>=0:i<historyBuffer.length;i+=dir){var element=historyBuffer[i];for(var j=0;j<=element.length;j++){if(this.initialPrefix==element.substring(0,j)){this.iterator=i;return element;}}}if(i>=historyBuffer.length){this.iterator=historyBuffer.length;return this.initialPrefix;}if(i<0)return input;},pushInput:function pushInput(input){var index=this.historyBuffer.indexOf(input);if(index>-1)this.historyBuffer.splice(index,1);if(input.length)this.historyBuffer.push(input);},reset:function reset(){this.initialPrefix=null;this.iterator=this.historyBuffer.length;}};var commandDispatcher={matchCommand:function matchCommand(keys,keyMap,inputState,context){var matches=commandMatches(keys,keyMap,context,inputState);if(!matches.full&&!matches.partial){return{type:'none'};}else if(!matches.full&&matches.partial){return{type:'partial'};}var bestMatch;for(var i=0;i<matches.full.length;i++){var match=matches.full[i];if(!bestMatch){bestMatch=match;}}if(bestMatch.keys.slice(-11)=='<character>'){var character=lastChar(keys);if(!character||character.length>1)return{type:'clear'};inputState.selectedCharacter=character;}return{type:'full',command:bestMatch};},processCommand:function processCommand(cm,vim,command){vim.inputState.repeatOverride=command.repeatOverride;switch(command.type){case'motion':this.processMotion(cm,vim,command);break;case'operator':this.processOperator(cm,vim,command);break;case'operatorMotion':this.processOperatorMotion(cm,vim,command);break;case'action':this.processAction(cm,vim,command);break;case'search':this.processSearch(cm,vim,command);break;case'ex':case'keyToEx':this.processEx(cm,vim,command);break;}},processMotion:function processMotion(cm,vim,command){vim.inputState.motion=command.motion;vim.inputState.motionArgs=copyArgs(command.motionArgs);this.evalInput(cm,vim);},processOperator:function processOperator(cm,vim,command){var inputState=vim.inputState;if(inputState.operator){if(inputState.operator==command.operator){inputState.motion='expandToLine';inputState.motionArgs={linewise:true};this.evalInput(cm,vim);return;}else{clearInputState(cm);}}inputState.operator=command.operator;inputState.operatorArgs=copyArgs(command.operatorArgs);if(command.keys.length>1){inputState.operatorShortcut=command.keys;}if(command.exitVisualBlock){vim.visualBlock=false;updateCmSelection(cm);}if(vim.visualMode){this.evalInput(cm,vim);}},processOperatorMotion:function processOperatorMotion(cm,vim,command){var visualMode=vim.visualMode;var operatorMotionArgs=copyArgs(command.operatorMotionArgs);if(operatorMotionArgs){if(visualMode&&operatorMotionArgs.visualLine){vim.visualLine=true;}}this.processOperator(cm,vim,command);if(!visualMode){this.processMotion(cm,vim,command);}},processAction:function processAction(cm,vim,command){var inputState=vim.inputState;var repeat=inputState.getRepeat();var repeatIsExplicit=!!repeat;var actionArgs=copyArgs(command.actionArgs)||{};if(inputState.selectedCharacter){actionArgs.selectedCharacter=inputState.selectedCharacter;}if(command.operator){this.processOperator(cm,vim,command);}if(command.motion){this.processMotion(cm,vim,command);}if(command.motion||command.operator){this.evalInput(cm,vim);}actionArgs.repeat=repeat||1;actionArgs.repeatIsExplicit=repeatIsExplicit;actionArgs.registerName=inputState.registerName;clearInputState(cm);vim.lastMotion=null;if(command.isEdit){this.recordLastEdit(vim,inputState,command);}actions[command.action](cm,actionArgs,vim);},processSearch:function processSearch(cm,vim,command){if(!cm.getSearchCursor){return;}var forward=command.searchArgs.forward;var wholeWordOnly=command.searchArgs.wholeWordOnly;getSearchState(cm).setReversed(!forward);var promptPrefix=forward?'/':'?';var originalQuery=getSearchState(cm).getQuery();var originalScrollPos=cm.getScrollInfo();function handleQuery(query,ignoreCase,smartCase){vimGlobalState.searchHistoryController.pushInput(query);vimGlobalState.searchHistoryController.reset();try{updateSearchQuery(cm,query,ignoreCase,smartCase);}catch(e){showConfirm(cm,'Invalid regex: '+query);clearInputState(cm);return;}commandDispatcher.processMotion(cm,vim,{type:'motion',motion:'findNext',motionArgs:{forward:true,toJumplist:command.searchArgs.toJumplist}});}function onPromptClose(query){cm.scrollTo(originalScrollPos.left,originalScrollPos.top);handleQuery(query,true,true);var macroModeState=vimGlobalState.macroModeState;if(macroModeState.isRecording){logSearchQuery(macroModeState,query);}}function onPromptKeyUp(e,query,close){var keyName=CodeMirror.keyName(e),up,offset;if(keyName=='Up'||keyName=='Down'){up=keyName=='Up'?true:false;offset=e.target?e.target.selectionEnd:0;query=vimGlobalState.searchHistoryController.nextMatch(query,up)||'';close(query);if(offset&&e.target)e.target.selectionEnd=e.target.selectionStart=Math.min(offset,e.target.value.length);}else{if(keyName!='Left'&&keyName!='Right'&&keyName!='Ctrl'&&keyName!='Alt'&&keyName!='Shift')vimGlobalState.searchHistoryController.reset();}var parsedQuery;try{parsedQuery=updateSearchQuery(cm,query,true,true);}catch(e){}if(parsedQuery){cm.scrollIntoView(_findNext(cm,!forward,parsedQuery),30);}else{clearSearchHighlight(cm);cm.scrollTo(originalScrollPos.left,originalScrollPos.top);}}function onPromptKeyDown(e,query,close){var keyName=CodeMirror.keyName(e);if(keyName=='Esc'||keyName=='Ctrl-C'||keyName=='Ctrl-['||keyName=='Backspace'&&query==''){vimGlobalState.searchHistoryController.pushInput(query);vimGlobalState.searchHistoryController.reset();updateSearchQuery(cm,originalQuery);clearSearchHighlight(cm);cm.scrollTo(originalScrollPos.left,originalScrollPos.top);CodeMirror.e_stop(e);clearInputState(cm);close();cm.focus();}else if(keyName=='Up'||keyName=='Down'){CodeMirror.e_stop(e);}else if(keyName=='Ctrl-U'){CodeMirror.e_stop(e);close('');}}switch(command.searchArgs.querySrc){case'prompt':var macroModeState=vimGlobalState.macroModeState;if(macroModeState.isPlaying){var query=macroModeState.replaySearchQueries.shift();handleQuery(query,true,false);}else{showPrompt(cm,{onClose:onPromptClose,prefix:promptPrefix,desc:'(JavaScript regexp)',onKeyUp:onPromptKeyUp,onKeyDown:onPromptKeyDown});}break;case'wordUnderCursor':var word=expandWordUnderCursor(cm,false,false,false,true);var isKeyword=true;if(!word){word=expandWordUnderCursor(cm,false,false,false,false);isKeyword=false;}if(!word){return;}var query=cm.getLine(word.start.line).substring(word.start.ch,word.end.ch);if(isKeyword&&wholeWordOnly){query='\\b'+query+'\\b';}else{query=escapeRegex(query);}vimGlobalState.jumpList.cachedCursor=cm.getCursor();cm.setCursor(word.start);handleQuery(query,true,false);break;}},processEx:function processEx(cm,vim,command){function onPromptClose(input){vimGlobalState.exCommandHistoryController.pushInput(input);vimGlobalState.exCommandHistoryController.reset();exCommandDispatcher.processCommand(cm,input);if(cm.state.vim)clearInputState(cm);}function onPromptKeyDown(e,input,close){var keyName=CodeMirror.keyName(e),up,offset;if(keyName=='Esc'||keyName=='Ctrl-C'||keyName=='Ctrl-['||keyName=='Backspace'&&input==''){vimGlobalState.exCommandHistoryController.pushInput(input);vimGlobalState.exCommandHistoryController.reset();CodeMirror.e_stop(e);clearInputState(cm);close();cm.focus();}if(keyName=='Up'||keyName=='Down'){CodeMirror.e_stop(e);up=keyName=='Up'?true:false;offset=e.target?e.target.selectionEnd:0;input=vimGlobalState.exCommandHistoryController.nextMatch(input,up)||'';close(input);if(offset&&e.target)e.target.selectionEnd=e.target.selectionStart=Math.min(offset,e.target.value.length);}else if(keyName=='Ctrl-U'){CodeMirror.e_stop(e);close('');}else{if(keyName!='Left'&&keyName!='Right'&&keyName!='Ctrl'&&keyName!='Alt'&&keyName!='Shift')vimGlobalState.exCommandHistoryController.reset();}}if(command.type=='keyToEx'){exCommandDispatcher.processCommand(cm,command.exArgs.input);}else{if(vim.visualMode){showPrompt(cm,{onClose:onPromptClose,prefix:':',value:'\'<,\'>',onKeyDown:onPromptKeyDown,selectValueOnOpen:false});}else{showPrompt(cm,{onClose:onPromptClose,prefix:':',onKeyDown:onPromptKeyDown});}}},evalInput:function evalInput(cm,vim){var inputState=vim.inputState;var motion=inputState.motion;var motionArgs=inputState.motionArgs||{};var operator=inputState.operator;var operatorArgs=inputState.operatorArgs||{};var registerName=inputState.registerName;var sel=vim.sel;var origHead=copyCursor(vim.visualMode?clipCursorToContent(cm,sel.head):cm.getCursor('head'));var origAnchor=copyCursor(vim.visualMode?clipCursorToContent(cm,sel.anchor):cm.getCursor('anchor'));var oldHead=copyCursor(origHead);var oldAnchor=copyCursor(origAnchor);var newHead,newAnchor;var repeat;if(operator){this.recordLastEdit(vim,inputState);}if(inputState.repeatOverride!==undefined){repeat=inputState.repeatOverride;}else{repeat=inputState.getRepeat();}if(repeat>0&&motionArgs.explicitRepeat){motionArgs.repeatIsExplicit=true;}else if(motionArgs.noRepeat||!motionArgs.explicitRepeat&&repeat===0){repeat=1;motionArgs.repeatIsExplicit=false;}if(inputState.selectedCharacter){motionArgs.selectedCharacter=operatorArgs.selectedCharacter=inputState.selectedCharacter;}motionArgs.repeat=repeat;clearInputState(cm);if(motion){var motionResult=motions[motion](cm,origHead,motionArgs,vim,inputState);vim.lastMotion=motions[motion];if(!motionResult){return;}if(motionArgs.toJumplist){var jumpList=vimGlobalState.jumpList;var cachedCursor=jumpList.cachedCursor;if(cachedCursor){recordJumpPosition(cm,cachedCursor,motionResult);delete jumpList.cachedCursor;}else{recordJumpPosition(cm,origHead,motionResult);}}if(motionResult instanceof Array){newAnchor=motionResult[0];newHead=motionResult[1];}else{newHead=motionResult;}if(!newHead){newHead=copyCursor(origHead);}if(vim.visualMode){if(!(vim.visualBlock&&newHead.ch===Infinity)){newHead=clipCursorToContent(cm,newHead,oldHead);}if(newAnchor){newAnchor=clipCursorToContent(cm,newAnchor);}newAnchor=newAnchor||oldAnchor;sel.anchor=newAnchor;sel.head=newHead;updateCmSelection(cm);updateMark(cm,vim,'<',cursorIsBefore(newAnchor,newHead)?newAnchor:newHead);updateMark(cm,vim,'>',cursorIsBefore(newAnchor,newHead)?newHead:newAnchor);}else if(!operator){newHead=clipCursorToContent(cm,newHead,oldHead);cm.setCursor(newHead.line,newHead.ch);}}if(operator){if(operatorArgs.lastSel){newAnchor=oldAnchor;var lastSel=operatorArgs.lastSel;var lineOffset=Math.abs(lastSel.head.line-lastSel.anchor.line);var chOffset=Math.abs(lastSel.head.ch-lastSel.anchor.ch);if(lastSel.visualLine){newHead=new Pos(oldAnchor.line+lineOffset,oldAnchor.ch);}else if(lastSel.visualBlock){newHead=new Pos(oldAnchor.line+lineOffset,oldAnchor.ch+chOffset);}else if(lastSel.head.line==lastSel.anchor.line){newHead=new Pos(oldAnchor.line,oldAnchor.ch+chOffset);}else{newHead=new Pos(oldAnchor.line+lineOffset,oldAnchor.ch);}vim.visualMode=true;vim.visualLine=lastSel.visualLine;vim.visualBlock=lastSel.visualBlock;sel=vim.sel={anchor:newAnchor,head:newHead};updateCmSelection(cm);}else if(vim.visualMode){operatorArgs.lastSel={anchor:copyCursor(sel.anchor),head:copyCursor(sel.head),visualBlock:vim.visualBlock,visualLine:vim.visualLine};}var curStart,curEnd,linewise,mode;var cmSel;if(vim.visualMode){curStart=cursorMin(sel.head,sel.anchor);curEnd=cursorMax(sel.head,sel.anchor);linewise=vim.visualLine||operatorArgs.linewise;mode=vim.visualBlock?'block':linewise?'line':'char';var newPositions=updateSelectionForSurrogateCharacters(cm,curStart,curEnd);cmSel=makeCmSelection(cm,{anchor:newPositions.start,head:newPositions.end},mode);if(linewise){var ranges=cmSel.ranges;if(mode=='block'){for(var i=0;i<ranges.length;i++){ranges[i].head.ch=lineLength(cm,ranges[i].head.line);}}else if(mode=='line'){ranges[0].head=new Pos(ranges[0].head.line+1,0);}}}else{curStart=copyCursor(newAnchor||oldAnchor);curEnd=copyCursor(newHead||oldHead);if(cursorIsBefore(curEnd,curStart)){var tmp=curStart;curStart=curEnd;curEnd=tmp;}linewise=motionArgs.linewise||operatorArgs.linewise;if(linewise){expandSelectionToLine(cm,curStart,curEnd);}else if(motionArgs.forward){clipToLine(cm,curStart,curEnd);}mode='char';var exclusive=!motionArgs.inclusive||linewise;var newPositions=updateSelectionForSurrogateCharacters(cm,curStart,curEnd);cmSel=makeCmSelection(cm,{anchor:newPositions.start,head:newPositions.end},mode,exclusive);}cm.setSelections(cmSel.ranges,cmSel.primary);vim.lastMotion=null;operatorArgs.repeat=repeat;operatorArgs.registerName=registerName;operatorArgs.linewise=linewise;var operatorMoveTo=operators[operator](cm,operatorArgs,cmSel.ranges,oldAnchor,newHead);if(vim.visualMode){exitVisualMode(cm,operatorMoveTo!=null);}if(operatorMoveTo){cm.setCursor(operatorMoveTo);}}},recordLastEdit:function recordLastEdit(vim,inputState,actionCommand){var macroModeState=vimGlobalState.macroModeState;if(macroModeState.isPlaying){return;}vim.lastEditInputState=inputState;vim.lastEditActionCommand=actionCommand;macroModeState.lastInsertModeChanges.changes=[];macroModeState.lastInsertModeChanges.expectCursorActivityForChange=false;macroModeState.lastInsertModeChanges.visualBlock=vim.visualBlock?vim.sel.head.line-vim.sel.anchor.line:0;}};var motions={moveToTopLine:function moveToTopLine(cm,_head,motionArgs){var line=getUserVisibleLines(cm).top+motionArgs.repeat-1;return new Pos(line,findFirstNonWhiteSpaceCharacter(cm.getLine(line)));},moveToMiddleLine:function moveToMiddleLine(cm){var range=getUserVisibleLines(cm);var line=Math.floor((range.top+range.bottom)*0.5);return new Pos(line,findFirstNonWhiteSpaceCharacter(cm.getLine(line)));},moveToBottomLine:function moveToBottomLine(cm,_head,motionArgs){var line=getUserVisibleLines(cm).bottom-motionArgs.repeat+1;return new Pos(line,findFirstNonWhiteSpaceCharacter(cm.getLine(line)));},expandToLine:function expandToLine(_cm,head,motionArgs){var cur=head;return new Pos(cur.line+motionArgs.repeat-1,Infinity);},findNext:function findNext(cm,_head,motionArgs){var state=getSearchState(cm);var query=state.getQuery();if(!query){return;}var prev=!motionArgs.forward;prev=state.isReversed()?!prev:prev;highlightSearchMatches(cm,query);return _findNext(cm,prev,query,motionArgs.repeat);},findAndSelectNextInclusive:function findAndSelectNextInclusive(cm,_head,motionArgs,vim,prevInputState){var state=getSearchState(cm);var query=state.getQuery();if(!query){return;}var prev=!motionArgs.forward;prev=state.isReversed()?!prev:prev;var next=findNextFromAndToInclusive(cm,prev,query,motionArgs.repeat,vim);if(!next){return;}if(prevInputState.operator){return next;}var from=next[0];var to=new Pos(next[1].line,next[1].ch-1);if(vim.visualMode){if(vim.visualLine||vim.visualBlock){vim.visualLine=false;vim.visualBlock=false;CodeMirror.signal(cm,"vim-mode-change",{mode:"visual",subMode:""});}var anchor=vim.sel.anchor;if(anchor){if(state.isReversed()){if(motionArgs.forward){return[anchor,from];}return[anchor,to];}else{if(motionArgs.forward){return[anchor,to];}return[anchor,from];}}}else{vim.visualMode=true;vim.visualLine=false;vim.visualBlock=false;CodeMirror.signal(cm,"vim-mode-change",{mode:"visual",subMode:""});}return prev?[to,from]:[from,to];},goToMark:function goToMark(cm,_head,motionArgs,vim){var pos=getMarkPos(cm,vim,motionArgs.selectedCharacter);if(pos){return motionArgs.linewise?{line:pos.line,ch:findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line))}:pos;}return null;},moveToOtherHighlightedEnd:function moveToOtherHighlightedEnd(cm,_head,motionArgs,vim){if(vim.visualBlock&&motionArgs.sameLine){var sel=vim.sel;return[clipCursorToContent(cm,new Pos(sel.anchor.line,sel.head.ch)),clipCursorToContent(cm,new Pos(sel.head.line,sel.anchor.ch))];}else{return[vim.sel.head,vim.sel.anchor];}},jumpToMark:function jumpToMark(cm,head,motionArgs,vim){var best=head;for(var i=0;i<motionArgs.repeat;i++){var cursor=best;for(var key in vim.marks){if(!isLowerCase(key)){continue;}var mark=vim.marks[key].find();var isWrongDirection=motionArgs.forward?cursorIsBefore(mark,cursor):cursorIsBefore(cursor,mark);if(isWrongDirection){continue;}if(motionArgs.linewise&&mark.line==cursor.line){continue;}var equal=cursorEqual(cursor,best);var between=motionArgs.forward?cursorIsBetween(cursor,mark,best):cursorIsBetween(best,mark,cursor);if(equal||between){best=mark;}}}if(motionArgs.linewise){best=new Pos(best.line,findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));}return best;},moveByCharacters:function moveByCharacters(_cm,head,motionArgs){var cur=head;var repeat=motionArgs.repeat;var ch=motionArgs.forward?cur.ch+repeat:cur.ch-repeat;return new Pos(cur.line,ch);},moveByLines:function moveByLines(cm,head,motionArgs,vim){var cur=head;var endCh=cur.ch;switch(vim.lastMotion){case this.moveByLines:case this.moveByDisplayLines:case this.moveByScroll:case this.moveToColumn:case this.moveToEol:endCh=vim.lastHPos;break;default:vim.lastHPos=endCh;}var repeat=motionArgs.repeat+(motionArgs.repeatOffset||0);var line=motionArgs.forward?cur.line+repeat:cur.line-repeat;var first=cm.firstLine();var last=cm.lastLine();var posV=cm.findPosV(cur,motionArgs.forward?repeat:-repeat,'line',vim.lastHSPos);var hasMarkedText=motionArgs.forward?posV.line>line:posV.line<line;if(hasMarkedText){line=posV.line;endCh=posV.ch;}if(line<first&&cur.line==first){return this.moveToStartOfLine(cm,head,motionArgs,vim);}else if(line>last&&cur.line==last){return _moveToEol(cm,head,motionArgs,vim,true);}if(motionArgs.toFirstChar){endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));vim.lastHPos=endCh;}vim.lastHSPos=cm.charCoords(new Pos(line,endCh),'div').left;return new Pos(line,endCh);},moveByDisplayLines:function moveByDisplayLines(cm,head,motionArgs,vim){var cur=head;switch(vim.lastMotion){case this.moveByDisplayLines:case this.moveByScroll:case this.moveByLines:case this.moveToColumn:case this.moveToEol:break;default:vim.lastHSPos=cm.charCoords(cur,'div').left;}var repeat=motionArgs.repeat;var res=cm.findPosV(cur,motionArgs.forward?repeat:-repeat,'line',vim.lastHSPos);if(res.hitSide){if(motionArgs.forward){var lastCharCoords=cm.charCoords(res,'div');var goalCoords={top:lastCharCoords.top+8,left:vim.lastHSPos};var res=cm.coordsChar(goalCoords,'div');}else{var resCoords=cm.charCoords(new Pos(cm.firstLine(),0),'div');resCoords.left=vim.lastHSPos;res=cm.coordsChar(resCoords,'div');}}vim.lastHPos=res.ch;return res;},moveByPage:function moveByPage(cm,head,motionArgs){var curStart=head;var repeat=motionArgs.repeat;return cm.findPosV(curStart,motionArgs.forward?repeat:-repeat,'page');},moveByParagraph:function moveByParagraph(cm,head,motionArgs){var dir=motionArgs.forward?1:-1;return findParagraph(cm,head,motionArgs.repeat,dir);},moveBySentence:function moveBySentence(cm,head,motionArgs){var dir=motionArgs.forward?1:-1;return findSentence(cm,head,motionArgs.repeat,dir);},moveByScroll:function moveByScroll(cm,head,motionArgs,vim){var scrollbox=cm.getScrollInfo();var curEnd=null;var repeat=motionArgs.repeat;if(!repeat){repeat=scrollbox.clientHeight/(2*cm.defaultTextHeight());}var orig=cm.charCoords(head,'local');motionArgs.repeat=repeat;curEnd=motions.moveByDisplayLines(cm,head,motionArgs,vim);if(!curEnd){return null;}var dest=cm.charCoords(curEnd,'local');cm.scrollTo(null,scrollbox.top+dest.top-orig.top);return curEnd;},moveByWords:function moveByWords(cm,head,motionArgs){return moveToWord(cm,head,motionArgs.repeat,!!motionArgs.forward,!!motionArgs.wordEnd,!!motionArgs.bigWord);},moveTillCharacter:function moveTillCharacter(cm,head,motionArgs){var repeat=motionArgs.repeat;var curEnd=_moveToCharacter(cm,repeat,motionArgs.forward,motionArgs.selectedCharacter,head);var increment=motionArgs.forward?-1:1;recordLastCharacterSearch(increment,motionArgs);if(!curEnd)return null;curEnd.ch+=increment;return curEnd;},moveToCharacter:function moveToCharacter(cm,head,motionArgs){var repeat=motionArgs.repeat;recordLastCharacterSearch(0,motionArgs);return _moveToCharacter(cm,repeat,motionArgs.forward,motionArgs.selectedCharacter,head)||head;},moveToSymbol:function moveToSymbol(cm,head,motionArgs){var repeat=motionArgs.repeat;return findSymbol(cm,repeat,motionArgs.forward,motionArgs.selectedCharacter)||head;},moveToColumn:function moveToColumn(cm,head,motionArgs,vim){var repeat=motionArgs.repeat;vim.lastHPos=repeat-1;vim.lastHSPos=cm.charCoords(head,'div').left;return _moveToColumn(cm,repeat);},moveToEol:function moveToEol(cm,head,motionArgs,vim){return _moveToEol(cm,head,motionArgs,vim,false);},moveToFirstNonWhiteSpaceCharacter:function moveToFirstNonWhiteSpaceCharacter(cm,head){var cursor=head;return new Pos(cursor.line,findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));},moveToMatchedSymbol:function moveToMatchedSymbol(cm,head){var cursor=head;var line=cursor.line;var ch=cursor.ch;var lineText=cm.getLine(line);var symbol;for(;ch<lineText.length;ch++){symbol=lineText.charAt(ch);if(symbol&&isMatchableSymbol(symbol)){var style=cm.getTokenTypeAt(new Pos(line,ch+1));if(style!=="string"&&style!=="comment"){break;}}}if(ch<lineText.length){var re=ch==='<'||ch==='>'?/[(){}[\]<>]/:/[(){}[\]]/;var matched=cm.findMatchingBracket(new Pos(line,ch),{bracketRegex:re});return matched.to;}else{return cursor;}},moveToStartOfLine:function moveToStartOfLine(_cm,head){return new Pos(head.line,0);},moveToLineOrEdgeOfDocument:function moveToLineOrEdgeOfDocument(cm,_head,motionArgs){var lineNum=motionArgs.forward?cm.lastLine():cm.firstLine();if(motionArgs.repeatIsExplicit){lineNum=motionArgs.repeat-cm.getOption('firstLineNumber');}return new Pos(lineNum,findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));},moveToStartOfDisplayLine:function moveToStartOfDisplayLine(cm){cm.execCommand("goLineLeft");return cm.getCursor();},moveToEndOfDisplayLine:function moveToEndOfDisplayLine(cm){cm.execCommand("goLineRight");var head=cm.getCursor();if(head.sticky=="before")head.ch--;return head;},textObjectManipulation:function textObjectManipulation(cm,head,motionArgs,vim){var mirroredPairs={'(':')',')':'(','{':'}','}':'{','[':']',']':'[','<':'>','>':'<'};var selfPaired={'\'':true,'"':true,'`':true};var character=motionArgs.selectedCharacter;if(character=='b'){character='(';}else if(character=='B'){character='{';}var inclusive=!motionArgs.textObjectInner;var tmp,move;if(mirroredPairs[character]){move=true;tmp=selectCompanionObject(cm,head,character,inclusive);if(!tmp){var sc=cm.getSearchCursor(new RegExp("\\"+character,"g"),head);if(sc.find()){tmp=selectCompanionObject(cm,sc.from(),character,inclusive);}}}else if(selfPaired[character]){move=true;tmp=findBeginningAndEnd(cm,head,character,inclusive);}else if(character==='W'){tmp=expandWordUnderCursor(cm,inclusive,!inclusive,true);}else if(character==='w'){tmp=expandWordUnderCursor(cm,inclusive,!inclusive,false);}else if(character==='p'){tmp=findParagraph(cm,head,motionArgs.repeat,0,inclusive);motionArgs.linewise=true;if(vim.visualMode){if(!vim.visualLine){vim.visualLine=true;}}else{var operatorArgs=vim.inputState.operatorArgs;if(operatorArgs){operatorArgs.linewise=true;}tmp.end.line--;}}else if(character==='t'){tmp=expandTagUnderCursor(cm,head,inclusive);}else if(character==='s'){var content=cm.getLine(head.line);if(head.ch>0&&isEndOfSentenceSymbol(content[head.ch])){head.ch-=1;}var end=getSentence(cm,head,motionArgs.repeat,1,inclusive);var start=getSentence(cm,head,motionArgs.repeat,-1,inclusive);if(isWhiteSpaceString(cm.getLine(start.line)[start.ch])&&isWhiteSpaceString(cm.getLine(end.line)[end.ch-1])){start={line:start.line,ch:start.ch+1};}tmp={start:start,end:end};}if(!tmp){return null;}if(!cm.state.vim.visualMode){return[tmp.start,tmp.end];}else{return expandSelection(cm,tmp.start,tmp.end,move);}},repeatLastCharacterSearch:function repeatLastCharacterSearch(cm,head,motionArgs){var lastSearch=vimGlobalState.lastCharacterSearch;var repeat=motionArgs.repeat;var forward=motionArgs.forward===lastSearch.forward;var increment=(lastSearch.increment?1:0)*(forward?-1:1);cm.moveH(-increment,'char');motionArgs.inclusive=forward?true:false;var curEnd=_moveToCharacter(cm,repeat,forward,lastSearch.selectedCharacter);if(!curEnd){cm.moveH(increment,'char');return head;}curEnd.ch+=increment;return curEnd;}};function defineMotion(name,fn){motions[name]=fn;}function fillArray(val,times){var arr=[];for(var i=0;i<times;i++){arr.push(val);}return arr;}var operators={change:function change(cm,args,ranges){var finalHead,text;var vim=cm.state.vim;var anchor=ranges[0].anchor,head=ranges[0].head;if(!vim.visualMode){text=cm.getRange(anchor,head);var lastState=vim.lastEditInputState||{};if(lastState.motion=="moveByWords"&&!isWhiteSpaceString(text)){var match=/\s+$/.exec(text);if(match&&lastState.motionArgs&&lastState.motionArgs.forward){head=offsetCursor(head,0,-match[0].length);text=text.slice(0,-match[0].length);}}var prevLineEnd=new Pos(anchor.line-1,Number.MAX_VALUE);var wasLastLine=cm.firstLine()==cm.lastLine();if(head.line>cm.lastLine()&&args.linewise&&!wasLastLine){cm.replaceRange('',prevLineEnd,head);}else{cm.replaceRange('',anchor,head);}if(args.linewise){if(!wasLastLine){cm.setCursor(prevLineEnd);CodeMirror.commands.newlineAndIndent(cm);}anchor.ch=Number.MAX_VALUE;}finalHead=anchor;}else if(args.fullLine){head.ch=Number.MAX_VALUE;head.line--;cm.setSelection(anchor,head);text=cm.getSelection();cm.replaceSelection("");finalHead=anchor;}else{text=cm.getSelection();var replacement=fillArray('',ranges.length);cm.replaceSelections(replacement);finalHead=cursorMin(ranges[0].head,ranges[0].anchor);}vimGlobalState.registerController.pushText(args.registerName,'change',text,args.linewise,ranges.length>1);actions.enterInsertMode(cm,{head:finalHead},cm.state.vim);},'delete':function _delete(cm,args,ranges){var finalHead,text;var vim=cm.state.vim;if(!vim.visualBlock){var anchor=ranges[0].anchor,head=ranges[0].head;if(args.linewise&&head.line!=cm.firstLine()&&anchor.line==cm.lastLine()&&anchor.line==head.line-1){if(anchor.line==cm.firstLine()){anchor.ch=0;}else{anchor=new Pos(anchor.line-1,lineLength(cm,anchor.line-1));}}text=cm.getRange(anchor,head);cm.replaceRange('',anchor,head);finalHead=anchor;if(args.linewise){finalHead=motions.moveToFirstNonWhiteSpaceCharacter(cm,anchor);}}else{text=cm.getSelection();var replacement=fillArray('',ranges.length);cm.replaceSelections(replacement);finalHead=cursorMin(ranges[0].head,ranges[0].anchor);}vimGlobalState.registerController.pushText(args.registerName,'delete',text,args.linewise,vim.visualBlock);return clipCursorToContent(cm,finalHead);},indent:function indent(cm,args,ranges){var vim=cm.state.vim;if(cm.indentMore){var repeat=vim.visualMode?args.repeat:1;for(var j=0;j<repeat;j++){if(args.indentRight)cm.indentMore();else cm.indentLess();}}else{var startLine=ranges[0].anchor.line;var endLine=vim.visualBlock?ranges[ranges.length-1].anchor.line:ranges[0].head.line;var repeat=vim.visualMode?args.repeat:1;if(args.linewise){endLine--;}for(var i=startLine;i<=endLine;i++){for(var j=0;j<repeat;j++){cm.indentLine(i,args.indentRight);}}}return motions.moveToFirstNonWhiteSpaceCharacter(cm,ranges[0].anchor);},indentAuto:function indentAuto(cm,_args,ranges){cm.execCommand("indentAuto");return motions.moveToFirstNonWhiteSpaceCharacter(cm,ranges[0].anchor);},changeCase:function changeCase(cm,args,ranges,oldAnchor,newHead){var selections=cm.getSelections();var swapped=[];var toLower=args.toLower;for(var j=0;j<selections.length;j++){var toSwap=selections[j];var text='';if(toLower===true){text=toSwap.toLowerCase();}else if(toLower===false){text=toSwap.toUpperCase();}else{for(var i=0;i<toSwap.length;i++){var character=toSwap.charAt(i);text+=isUpperCase(character)?character.toLowerCase():character.toUpperCase();}}swapped.push(text);}cm.replaceSelections(swapped);if(args.shouldMoveCursor){return newHead;}else if(!cm.state.vim.visualMode&&args.linewise&&ranges[0].anchor.line+1==ranges[0].head.line){return motions.moveToFirstNonWhiteSpaceCharacter(cm,oldAnchor);}else if(args.linewise){return oldAnchor;}else{return cursorMin(ranges[0].anchor,ranges[0].head);}},yank:function yank(cm,args,ranges,oldAnchor){var vim=cm.state.vim;var text=cm.getSelection();var endPos=vim.visualMode?cursorMin(vim.sel.anchor,vim.sel.head,ranges[0].head,ranges[0].anchor):oldAnchor;vimGlobalState.registerController.pushText(args.registerName,'yank',text,args.linewise,vim.visualBlock);return endPos;}};function defineOperator(name,fn){operators[name]=fn;}var actions={jumpListWalk:function jumpListWalk(cm,actionArgs,vim){if(vim.visualMode){return;}var repeat=actionArgs.repeat;var forward=actionArgs.forward;var jumpList=vimGlobalState.jumpList;var mark=jumpList.move(cm,forward?repeat:-repeat);var markPos=mark?mark.find():undefined;markPos=markPos?markPos:cm.getCursor();cm.setCursor(markPos);},scroll:function scroll(cm,actionArgs,vim){if(vim.visualMode){return;}var repeat=actionArgs.repeat||1;var lineHeight=cm.defaultTextHeight();var top=cm.getScrollInfo().top;var delta=lineHeight*repeat;var newPos=actionArgs.forward?top+delta:top-delta;var cursor=copyCursor(cm.getCursor());var cursorCoords=cm.charCoords(cursor,'local');if(actionArgs.forward){if(newPos>cursorCoords.top){cursor.line+=(newPos-cursorCoords.top)/lineHeight;cursor.line=Math.ceil(cursor.line);cm.setCursor(cursor);cursorCoords=cm.charCoords(cursor,'local');cm.scrollTo(null,cursorCoords.top);}else{cm.scrollTo(null,newPos);}}else{var newBottom=newPos+cm.getScrollInfo().clientHeight;if(newBottom<cursorCoords.bottom){cursor.line-=(cursorCoords.bottom-newBottom)/lineHeight;cursor.line=Math.floor(cursor.line);cm.setCursor(cursor);cursorCoords=cm.charCoords(cursor,'local');cm.scrollTo(null,cursorCoords.bottom-cm.getScrollInfo().clientHeight);}else{cm.scrollTo(null,newPos);}}},scrollToCursor:function scrollToCursor(cm,actionArgs){var lineNum=cm.getCursor().line;var charCoords=cm.charCoords(new Pos(lineNum,0),'local');var height=cm.getScrollInfo().clientHeight;var y=charCoords.top;switch(actionArgs.position){case'center':y=charCoords.bottom-height/2;break;case'bottom':var lineLastCharPos=new Pos(lineNum,cm.getLine(lineNum).length-1);var lineLastCharCoords=cm.charCoords(lineLastCharPos,'local');var lineHeight=lineLastCharCoords.bottom-y;y=y-height+lineHeight;break;}cm.scrollTo(null,y);},replayMacro:function replayMacro(cm,actionArgs,vim){var registerName=actionArgs.selectedCharacter;var repeat=actionArgs.repeat;var macroModeState=vimGlobalState.macroModeState;if(registerName=='@'){registerName=macroModeState.latestRegister;}else{macroModeState.latestRegister=registerName;}while(repeat--){executeMacroRegister(cm,vim,macroModeState,registerName);}},enterMacroRecordMode:function enterMacroRecordMode(cm,actionArgs){var macroModeState=vimGlobalState.macroModeState;var registerName=actionArgs.selectedCharacter;if(vimGlobalState.registerController.isValidRegister(registerName)){macroModeState.enterMacroRecordMode(cm,registerName);}},toggleOverwrite:function toggleOverwrite(cm){if(!cm.state.overwrite){cm.toggleOverwrite(true);cm.setOption('keyMap','vim-replace');CodeMirror.signal(cm,"vim-mode-change",{mode:"replace"});}else{cm.toggleOverwrite(false);cm.setOption('keyMap','vim-insert');CodeMirror.signal(cm,"vim-mode-change",{mode:"insert"});}},enterInsertMode:function enterInsertMode(cm,actionArgs,vim){if(cm.getOption('readOnly')){return;}vim.insertMode=true;vim.insertModeRepeat=actionArgs&&actionArgs.repeat||1;var insertAt=actionArgs?actionArgs.insertAt:null;var sel=vim.sel;var head=actionArgs.head||cm.getCursor('head');var height=cm.listSelections().length;if(insertAt=='eol'){head=new Pos(head.line,lineLength(cm,head.line));}else if(insertAt=='bol'){head=new Pos(head.line,0);}else if(insertAt=='charAfter'){var newPosition=updateSelectionForSurrogateCharacters(cm,head,offsetCursor(head,0,1));head=newPosition.end;}else if(insertAt=='firstNonBlank'){var newPosition=updateSelectionForSurrogateCharacters(cm,head,motions.moveToFirstNonWhiteSpaceCharacter(cm,head));head=newPosition.end;}else if(insertAt=='startOfSelectedArea'){if(!vim.visualMode)return;if(!vim.visualBlock){if(sel.head.line<sel.anchor.line){head=sel.head;}else{head=new Pos(sel.anchor.line,0);}}else{head=new Pos(Math.min(sel.head.line,sel.anchor.line),Math.min(sel.head.ch,sel.anchor.ch));height=Math.abs(sel.head.line-sel.anchor.line)+1;}}else if(insertAt=='endOfSelectedArea'){if(!vim.visualMode)return;if(!vim.visualBlock){if(sel.head.line>=sel.anchor.line){head=offsetCursor(sel.head,0,1);}else{head=new Pos(sel.anchor.line,0);}}else{head=new Pos(Math.min(sel.head.line,sel.anchor.line),Math.max(sel.head.ch,sel.anchor.ch)+1);height=Math.abs(sel.head.line-sel.anchor.line)+1;}}else if(insertAt=='inplace'){if(vim.visualMode){return;}}else if(insertAt=='lastEdit'){head=getLastEditPos(cm)||head;}cm.setOption('disableInput',false);if(actionArgs&&actionArgs.replace){cm.toggleOverwrite(true);cm.setOption('keyMap','vim-replace');CodeMirror.signal(cm,"vim-mode-change",{mode:"replace"});}else{cm.toggleOverwrite(false);cm.setOption('keyMap','vim-insert');CodeMirror.signal(cm,"vim-mode-change",{mode:"insert"});}if(!vimGlobalState.macroModeState.isPlaying){cm.on('change',onChange);if(vim.insertEnd)vim.insertEnd.clear();vim.insertEnd=cm.setBookmark(head,{insertLeft:true});CodeMirror.on(cm.getInputField(),'keydown',onKeyEventTargetKeyDown);}if(vim.visualMode){exitVisualMode(cm);}selectForInsert(cm,head,height);},toggleVisualMode:function toggleVisualMode(cm,actionArgs,vim){var repeat=actionArgs.repeat;var anchor=cm.getCursor();var head;if(!vim.visualMode){vim.visualMode=true;vim.visualLine=!!actionArgs.linewise;vim.visualBlock=!!actionArgs.blockwise;head=clipCursorToContent(cm,new Pos(anchor.line,anchor.ch+repeat-1));var newPosition=updateSelectionForSurrogateCharacters(cm,anchor,head);vim.sel={anchor:newPosition.start,head:newPosition.end};CodeMirror.signal(cm,"vim-mode-change",{mode:"visual",subMode:vim.visualLine?"linewise":vim.visualBlock?"blockwise":""});updateCmSelection(cm);updateMark(cm,vim,'<',cursorMin(anchor,head));updateMark(cm,vim,'>',cursorMax(anchor,head));}else if(vim.visualLine^actionArgs.linewise||vim.visualBlock^actionArgs.blockwise){vim.visualLine=!!actionArgs.linewise;vim.visualBlock=!!actionArgs.blockwise;CodeMirror.signal(cm,"vim-mode-change",{mode:"visual",subMode:vim.visualLine?"linewise":vim.visualBlock?"blockwise":""});updateCmSelection(cm);}else{exitVisualMode(cm);}},reselectLastSelection:function reselectLastSelection(cm,_actionArgs,vim){var lastSelection=vim.lastSelection;if(vim.visualMode){updateLastSelection(cm,vim);}if(lastSelection){var anchor=lastSelection.anchorMark.find();var head=lastSelection.headMark.find();if(!anchor||!head){return;}vim.sel={anchor:anchor,head:head};vim.visualMode=true;vim.visualLine=lastSelection.visualLine;vim.visualBlock=lastSelection.visualBlock;updateCmSelection(cm);updateMark(cm,vim,'<',cursorMin(anchor,head));updateMark(cm,vim,'>',cursorMax(anchor,head));CodeMirror.signal(cm,'vim-mode-change',{mode:'visual',subMode:vim.visualLine?'linewise':vim.visualBlock?'blockwise':''});}},joinLines:function joinLines(cm,actionArgs,vim){var curStart,curEnd;if(vim.visualMode){curStart=cm.getCursor('anchor');curEnd=cm.getCursor('head');if(cursorIsBefore(curEnd,curStart)){var tmp=curEnd;curEnd=curStart;curStart=tmp;}curEnd.ch=lineLength(cm,curEnd.line)-1;}else{var repeat=Math.max(actionArgs.repeat,2);curStart=cm.getCursor();curEnd=clipCursorToContent(cm,new Pos(curStart.line+repeat-1,Infinity));}var finalCh=0;for(var i=curStart.line;i<curEnd.line;i++){finalCh=lineLength(cm,curStart.line);var text='';var nextStartCh=0;if(!actionArgs.keepSpaces){var nextLine=cm.getLine(curStart.line+1);nextStartCh=nextLine.search(/\S/);if(nextStartCh==-1){nextStartCh=nextLine.length;}else{text=" ";}}cm.replaceRange(text,new Pos(curStart.line,finalCh),new Pos(curStart.line+1,nextStartCh));}var curFinalPos=clipCursorToContent(cm,new Pos(curStart.line,finalCh));if(vim.visualMode){exitVisualMode(cm,false);}cm.setCursor(curFinalPos);},newLineAndEnterInsertMode:function newLineAndEnterInsertMode(cm,actionArgs,vim){vim.insertMode=true;var insertAt=copyCursor(cm.getCursor());if(insertAt.line===cm.firstLine()&&!actionArgs.after){cm.replaceRange('\n',new Pos(cm.firstLine(),0));cm.setCursor(cm.firstLine(),0);}else{insertAt.line=actionArgs.after?insertAt.line:insertAt.line-1;insertAt.ch=lineLength(cm,insertAt.line);cm.setCursor(insertAt);var newlineFn=CodeMirror.commands.newlineAndIndentContinueComment||CodeMirror.commands.newlineAndIndent;newlineFn(cm);}this.enterInsertMode(cm,{repeat:actionArgs.repeat},vim);},paste:function paste(cm,actionArgs,vim){var _this=this;var register=vimGlobalState.registerController.getRegister(actionArgs.registerName);if(actionArgs.registerName==='+'){navigator.clipboard.readText().then(function(value){_this.continuePaste(cm,actionArgs,vim,value,register);});}else{var text=register.toString();this.continuePaste(cm,actionArgs,vim,text,register);}},continuePaste:function continuePaste(cm,actionArgs,vim,text,register){var cur=copyCursor(cm.getCursor());if(!text){return;}if(actionArgs.matchIndent){var tabSize=cm.getOption("tabSize");var whitespaceLength=function whitespaceLength(str){var tabs=str.split("\t").length-1;var spaces=str.split(" ").length-1;return tabs*tabSize+spaces*1;};var currentLine=cm.getLine(cm.getCursor().line);var indent=whitespaceLength(currentLine.match(/^\s*/)[0]);var chompedText=text.replace(/\n$/,'');var wasChomped=text!==chompedText;var firstIndent=whitespaceLength(text.match(/^\s*/)[0]);var text=chompedText.replace(/^\s*/gm,function(wspace){var newIndent=indent+(whitespaceLength(wspace)-firstIndent);if(newIndent<0){return"";}else if(cm.getOption("indentWithTabs")){var quotient=Math.floor(newIndent/tabSize);return Array(quotient+1).join('\t');}else{return Array(newIndent+1).join(' ');}});text+=wasChomped?"\n":"";}if(actionArgs.repeat>1){var text=Array(actionArgs.repeat+1).join(text);}var linewise=register.linewise;var blockwise=register.blockwise;if(blockwise){text=text.split('\n');if(linewise){text.pop();}for(var i=0;i<text.length;i++){text[i]=text[i]==''?' ':text[i];}cur.ch+=actionArgs.after?1:0;cur.ch=Math.min(lineLength(cm,cur.line),cur.ch);}else if(linewise){if(vim.visualMode){text=vim.visualLine?text.slice(0,-1):'\n'+text.slice(0,text.length-1)+'\n';}else if(actionArgs.after){text='\n'+text.slice(0,text.length-1);cur.ch=lineLength(cm,cur.line);}else{cur.ch=0;}}else{cur.ch+=actionArgs.after?1:0;}var curPosFinal;if(vim.visualMode){vim.lastPastedText=text;var lastSelectionCurEnd;var selectedArea=getSelectedAreaRange(cm,vim);var selectionStart=selectedArea[0];var selectionEnd=selectedArea[1];var selectedText=cm.getSelection();var selections=cm.listSelections();var emptyStrings=new Array(selections.length).join('1').split('1');if(vim.lastSelection){lastSelectionCurEnd=vim.lastSelection.headMark.find();}vimGlobalState.registerController.unnamedRegister.setText(selectedText);if(blockwise){cm.replaceSelections(emptyStrings);selectionEnd=new Pos(selectionStart.line+text.length-1,selectionStart.ch);cm.setCursor(selectionStart);selectBlock(cm,selectionEnd);cm.replaceSelections(text);curPosFinal=selectionStart;}else if(vim.visualBlock){cm.replaceSelections(emptyStrings);cm.setCursor(selectionStart);cm.replaceRange(text,selectionStart,selectionStart);curPosFinal=selectionStart;}else{cm.replaceRange(text,selectionStart,selectionEnd);curPosFinal=cm.posFromIndex(cm.indexFromPos(selectionStart)+text.length-1);}if(lastSelectionCurEnd){vim.lastSelection.headMark=cm.setBookmark(lastSelectionCurEnd);}if(linewise){curPosFinal.ch=0;}}else{if(blockwise){cm.setCursor(cur);for(var i=0;i<text.length;i++){var line=cur.line+i;if(line>cm.lastLine()){cm.replaceRange('\n',new Pos(line,0));}var lastCh=lineLength(cm,line);if(lastCh<cur.ch){extendLineToColumn(cm,line,cur.ch);}}cm.setCursor(cur);selectBlock(cm,new Pos(cur.line+text.length-1,cur.ch));cm.replaceSelections(text);curPosFinal=cur;}else{cm.replaceRange(text,cur);if(linewise){var line=actionArgs.after?cur.line+1:cur.line;curPosFinal=new Pos(line,findFirstNonWhiteSpaceCharacter(cm.getLine(line)));}else{curPosFinal=copyCursor(cur);if(!/\n/.test(text)){curPosFinal.ch+=text.length-(actionArgs.after?1:0);}}}}if(vim.visualMode){exitVisualMode(cm,false);}cm.setCursor(curPosFinal);},undo:function undo(cm,actionArgs){cm.operation(function(){repeatFn(cm,CodeMirror.commands.undo,actionArgs.repeat)();cm.setCursor(clipCursorToContent(cm,cm.getCursor('start')));});},redo:function redo(cm,actionArgs){repeatFn(cm,CodeMirror.commands.redo,actionArgs.repeat)();},setRegister:function setRegister(_cm,actionArgs,vim){vim.inputState.registerName=actionArgs.selectedCharacter;},insertRegister:function insertRegister(cm,actionArgs,vim){var registerName=actionArgs.selectedCharacter;var register=vimGlobalState.registerController.getRegister(registerName);var text=register&&register.toString();if(text){cm.replaceSelection(text);}},oneNormalCommand:function oneNormalCommand(cm,actionArgs,vim){exitInsertMode(cm,true);vim.insertModeReturn=true;CodeMirror.on(cm,'vim-command-done',function handler(){if(vim.visualMode)return;if(vim.insertModeReturn){vim.insertModeReturn=false;if(!vim.insertMode){actions.enterInsertMode(cm,{},vim);}}CodeMirror.off(cm,'vim-command-done',handler);});},setMark:function setMark(cm,actionArgs,vim){var markName=actionArgs.selectedCharacter;updateMark(cm,vim,markName,cm.getCursor());},replace:function replace(cm,actionArgs,vim){var replaceWith=actionArgs.selectedCharacter;var curStart=cm.getCursor();var replaceTo;var curEnd;var selections=cm.listSelections();if(vim.visualMode){curStart=cm.getCursor('start');curEnd=cm.getCursor('end');}else{var line=cm.getLine(curStart.line);replaceTo=curStart.ch+actionArgs.repeat;if(replaceTo>line.length){replaceTo=line.length;}curEnd=new Pos(curStart.line,replaceTo);}var newPositions=updateSelectionForSurrogateCharacters(cm,curStart,curEnd);curStart=newPositions.start;curEnd=newPositions.end;if(replaceWith=='\n'){if(!vim.visualMode)cm.replaceRange('',curStart,curEnd);(CodeMirror.commands.newlineAndIndentContinueComment||CodeMirror.commands.newlineAndIndent)(cm);}else{var replaceWithStr=cm.getRange(curStart,curEnd);replaceWithStr=replaceWithStr.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,replaceWith);replaceWithStr=replaceWithStr.replace(/[^\n]/g,replaceWith);if(vim.visualBlock){var spaces=new Array(cm.getOption("tabSize")+1).join(' ');replaceWithStr=cm.getSelection();replaceWithStr=replaceWithStr.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,replaceWith);replaceWithStr=replaceWithStr.replace(/\t/g,spaces).replace(/[^\n]/g,replaceWith).split('\n');cm.replaceSelections(replaceWithStr);}else{cm.replaceRange(replaceWithStr,curStart,curEnd);}if(vim.visualMode){curStart=cursorIsBefore(selections[0].anchor,selections[0].head)?selections[0].anchor:selections[0].head;cm.setCursor(curStart);exitVisualMode(cm,false);}else{cm.setCursor(offsetCursor(curEnd,0,-1));}}},incrementNumberToken:function incrementNumberToken(cm,actionArgs){var cur=cm.getCursor();var lineStr=cm.getLine(cur.line);var re=/(-?)(?:(0x)([\da-f]+)|(0b|0|)(\d+))/gi;var match;var start;var end;var numberStr;while((match=re.exec(lineStr))!==null){start=match.index;end=start+match[0].length;if(cur.ch<end)break;}if(!actionArgs.backtrack&&end<=cur.ch)return;if(match){var baseStr=match[2]||match[4];var digits=match[3]||match[5];var increment=actionArgs.increase?1:-1;var base={'0b':2,'0':8,'':10,'0x':16}[baseStr.toLowerCase()];var number=parseInt(match[1]+digits,base)+increment*actionArgs.repeat;numberStr=number.toString(base);var zeroPadding=baseStr?new Array(digits.length-numberStr.length+1+match[1].length).join('0'):'';if(numberStr.charAt(0)==='-'){numberStr='-'+baseStr+zeroPadding+numberStr.substr(1);}else{numberStr=baseStr+zeroPadding+numberStr;}var from=new Pos(cur.line,start);var to=new Pos(cur.line,end);cm.replaceRange(numberStr,from,to);}else{return;}cm.setCursor(new Pos(cur.line,start+numberStr.length-1));},repeatLastEdit:function repeatLastEdit(cm,actionArgs,vim){var lastEditInputState=vim.lastEditInputState;if(!lastEditInputState){return;}var repeat=actionArgs.repeat;if(repeat&&actionArgs.repeatIsExplicit){vim.lastEditInputState.repeatOverride=repeat;}else{repeat=vim.lastEditInputState.repeatOverride||repeat;}_repeatLastEdit(cm,vim,repeat,false);},indent:function indent(cm,actionArgs){cm.indentLine(cm.getCursor().line,actionArgs.indentRight);},exitInsertMode:exitInsertMode};function defineAction(name,fn){actions[name]=fn;}function clipCursorToContent(cm,cur,oldCur){var vim=cm.state.vim;var includeLineBreak=vim.insertMode||vim.visualMode;var line=Math.min(Math.max(cm.firstLine(),cur.line),cm.lastLine());var text=cm.getLine(line);var maxCh=text.length-1+Number(!!includeLineBreak);var ch=Math.min(Math.max(0,cur.ch),maxCh);var charCode=text.charCodeAt(ch);if(0xDC00<=charCode&&charCode<=0xDFFF){var direction=1;if(oldCur&&oldCur.line==line&&oldCur.ch>ch){direction=-1;}ch+=direction;if(ch>maxCh)ch-=2;}return new Pos(line,ch);}function copyArgs(args){var ret={};for(var prop in args){if(args.hasOwnProperty(prop)){ret[prop]=args[prop];}}return ret;}function offsetCursor(cur,offsetLine,offsetCh){if(typeof offsetLine==='object'){offsetCh=offsetLine.ch;offsetLine=offsetLine.line;}return new Pos(cur.line+offsetLine,cur.ch+offsetCh);}function commandMatches(keys,keyMap,context,inputState){var operatorPending=inputState.operator;var match,partial=[],full=[];var startIndex=noremap?keyMap.length-defaultKeymapLength:0;for(var i=startIndex;i<keyMap.length;i++){var command=keyMap[i];if(context=='insert'&&command.context!='insert'||(command.context=="operatorPending"?!operatorPending:command.context&&command.context!=context)||inputState.operator&&command.type=='action'||!(match=commandMatch(keys,command.keys))){continue;}if(match=='partial'){partial.push(command);}if(match=='full'){full.push(command);}}return{partial:partial.length&&partial,full:full.length&&full};}function commandMatch(pressed,mapped){if(mapped.slice(-11)=='<character>'){var prefixLen=mapped.length-11;var pressedPrefix=pressed.slice(0,prefixLen);var mappedPrefix=mapped.slice(0,prefixLen);return pressedPrefix==mappedPrefix&&pressed.length>prefixLen?'full':mappedPrefix.indexOf(pressedPrefix)==0?'partial':false;}else{return pressed==mapped?'full':mapped.indexOf(pressed)==0?'partial':false;}}function lastChar(keys){var match=/^.*(<[^>]+>)$/.exec(keys);var selectedCharacter=match?match[1]:keys.slice(-1);if(selectedCharacter.length>1){switch(selectedCharacter){case'<CR>':selectedCharacter='\n';break;case'<Space>':selectedCharacter=' ';break;default:selectedCharacter='';break;}}return selectedCharacter;}function repeatFn(cm,fn,repeat){return function(){for(var i=0;i<repeat;i++){fn(cm);}};}function copyCursor(cur){return new Pos(cur.line,cur.ch);}function cursorEqual(cur1,cur2){return cur1.ch==cur2.ch&&cur1.line==cur2.line;}function cursorIsBefore(cur1,cur2){if(cur1.line<cur2.line){return true;}if(cur1.line==cur2.line&&cur1.ch<cur2.ch){return true;}return false;}function cursorMin(cur1,cur2){if(arguments.length>2){cur2=cursorMin.apply(undefined,Array.prototype.slice.call(arguments,1));}return cursorIsBefore(cur1,cur2)?cur1:cur2;}function cursorMax(cur1,cur2){if(arguments.length>2){cur2=cursorMax.apply(undefined,Array.prototype.slice.call(arguments,1));}return cursorIsBefore(cur1,cur2)?cur2:cur1;}function cursorIsBetween(cur1,cur2,cur3){var cur1before2=cursorIsBefore(cur1,cur2);var cur2before3=cursorIsBefore(cur2,cur3);return cur1before2&&cur2before3;}function lineLength(cm,lineNum){return cm.getLine(lineNum).length;}function trim(s){if(s.trim){return s.trim();}return s.replace(/^\s+|\s+$/g,'');}function escapeRegex(s){return s.replace(/([.?*+$\[\]\/\\(){}|\-])/g,'\\$1');}function extendLineToColumn(cm,lineNum,column){var endCh=lineLength(cm,lineNum);var spaces=new Array(column-endCh+1).join(' ');cm.setCursor(new Pos(lineNum,endCh));cm.replaceRange(spaces,cm.getCursor());}function selectBlock(cm,selectionEnd){var selections=[],ranges=cm.listSelections();var head=copyCursor(cm.clipPos(selectionEnd));var isClipped=!cursorEqual(selectionEnd,head);var curHead=cm.getCursor('head');var primIndex=getIndex(ranges,curHead);var wasClipped=cursorEqual(ranges[primIndex].head,ranges[primIndex].anchor);var max=ranges.length-1;var index=max-primIndex>primIndex?max:0;var base=ranges[index].anchor;var firstLine=Math.min(base.line,head.line);var lastLine=Math.max(base.line,head.line);var baseCh=base.ch,headCh=head.ch;var dir=ranges[index].head.ch-baseCh;var newDir=headCh-baseCh;if(dir>0&&newDir<=0){baseCh++;if(!isClipped){headCh--;}}else if(dir<0&&newDir>=0){baseCh--;if(!wasClipped){headCh++;}}else if(dir<0&&newDir==-1){baseCh--;headCh++;}for(var line=firstLine;line<=lastLine;line++){var range={anchor:new Pos(line,baseCh),head:new Pos(line,headCh)};selections.push(range);}cm.setSelections(selections);selectionEnd.ch=headCh;base.ch=baseCh;return base;}function selectForInsert(cm,head,height){var sel=[];for(var i=0;i<height;i++){var lineHead=offsetCursor(head,i,0);sel.push({anchor:lineHead,head:lineHead});}cm.setSelections(sel,0);}function getIndex(ranges,cursor,end){for(var i=0;i<ranges.length;i++){var atAnchor=end!='head'&&cursorEqual(ranges[i].anchor,cursor);var atHead=end!='anchor'&&cursorEqual(ranges[i].head,cursor);if(atAnchor||atHead){return i;}}return-1;}function getSelectedAreaRange(cm,vim){var lastSelection=vim.lastSelection;var getCurrentSelectedAreaRange=function getCurrentSelectedAreaRange(){var selections=cm.listSelections();var start=selections[0];var end=selections[selections.length-1];var selectionStart=cursorIsBefore(start.anchor,start.head)?start.anchor:start.head;var selectionEnd=cursorIsBefore(end.anchor,end.head)?end.head:end.anchor;return[selectionStart,selectionEnd];};var getLastSelectedAreaRange=function getLastSelectedAreaRange(){var selectionStart=cm.getCursor();var selectionEnd=cm.getCursor();var block=lastSelection.visualBlock;if(block){var width=block.width;var height=block.height;selectionEnd=new Pos(selectionStart.line+height,selectionStart.ch+width);var selections=[];for(var i=selectionStart.line;i<selectionEnd.line;i++){var anchor=new Pos(i,selectionStart.ch);var head=new Pos(i,selectionEnd.ch);var range={anchor:anchor,head:head};selections.push(range);}cm.setSelections(selections);}else{var start=lastSelection.anchorMark.find();var end=lastSelection.headMark.find();var line=end.line-start.line;var ch=end.ch-start.ch;selectionEnd={line:selectionEnd.line+line,ch:line?selectionEnd.ch:ch+selectionEnd.ch};if(lastSelection.visualLine){selectionStart=new Pos(selectionStart.line,0);selectionEnd=new Pos(selectionEnd.line,lineLength(cm,selectionEnd.line));}cm.setSelection(selectionStart,selectionEnd);}return[selectionStart,selectionEnd];};if(!vim.visualMode){return getLastSelectedAreaRange();}else{return getCurrentSelectedAreaRange();}}function updateLastSelection(cm,vim){var anchor=vim.sel.anchor;var head=vim.sel.head;if(vim.lastPastedText){head=cm.posFromIndex(cm.indexFromPos(anchor)+vim.lastPastedText.length);vim.lastPastedText=null;}vim.lastSelection={'anchorMark':cm.setBookmark(anchor),'headMark':cm.setBookmark(head),'anchor':copyCursor(anchor),'head':copyCursor(head),'visualMode':vim.visualMode,'visualLine':vim.visualLine,'visualBlock':vim.visualBlock};}function expandSelection(cm,start,end,move){var sel=cm.state.vim.sel;var head=move?start:sel.head;var anchor=move?start:sel.anchor;var tmp;if(cursorIsBefore(end,start)){tmp=end;end=start;start=tmp;}if(cursorIsBefore(head,anchor)){head=cursorMin(start,head);anchor=cursorMax(anchor,end);}else{anchor=cursorMin(start,anchor);head=cursorMax(head,end);head=offsetCursor(head,0,-1);if(head.ch==-1&&head.line!=cm.firstLine()){head=new Pos(head.line-1,lineLength(cm,head.line-1));}}return[anchor,head];}function updateCmSelection(cm,sel,mode){var vim=cm.state.vim;sel=sel||vim.sel;var mode=mode||vim.visualLine?'line':vim.visualBlock?'block':'char';var cmSel=makeCmSelection(cm,sel,mode);cm.setSelections(cmSel.ranges,cmSel.primary);}function makeCmSelection(cm,sel,mode,exclusive){var head=copyCursor(sel.head);var anchor=copyCursor(sel.anchor);if(mode=='char'){var headOffset=!exclusive&&!cursorIsBefore(sel.head,sel.anchor)?1:0;var anchorOffset=cursorIsBefore(sel.head,sel.anchor)?1:0;head=offsetCursor(sel.head,0,headOffset);anchor=offsetCursor(sel.anchor,0,anchorOffset);return{ranges:[{anchor:anchor,head:head}],primary:0};}else if(mode=='line'){if(!cursorIsBefore(sel.head,sel.anchor)){anchor.ch=0;var lastLine=cm.lastLine();if(head.line>lastLine){head.line=lastLine;}head.ch=lineLength(cm,head.line);}else{head.ch=0;anchor.ch=lineLength(cm,anchor.line);}return{ranges:[{anchor:anchor,head:head}],primary:0};}else if(mode=='block'){var top=Math.min(anchor.line,head.line),fromCh=anchor.ch,bottom=Math.max(anchor.line,head.line),toCh=head.ch;if(fromCh<toCh){toCh+=1;}else{fromCh+=1;}var height=bottom-top+1;var primary=head.line==top?0:height-1;var ranges=[];for(var i=0;i<height;i++){ranges.push({anchor:new Pos(top+i,fromCh),head:new Pos(top+i,toCh)});}return{ranges:ranges,primary:primary};}}function getHead(cm){var cur=cm.getCursor('head');if(cm.getSelection().length==1){cur=cursorMin(cur,cm.getCursor('anchor'));}return cur;}function exitVisualMode(cm,moveHead){var vim=cm.state.vim;if(moveHead!==false){cm.setCursor(clipCursorToContent(cm,vim.sel.head));}updateLastSelection(cm,vim);vim.visualMode=false;vim.visualLine=false;vim.visualBlock=false;if(!vim.insertMode)CodeMirror.signal(cm,"vim-mode-change",{mode:"normal"});}function clipToLine(cm,curStart,curEnd){var selection=cm.getRange(curStart,curEnd);if(/\n\s*$/.test(selection)){var lines=selection.split('\n');lines.pop();var line;for(var line=lines.pop();lines.length>0&&line&&isWhiteSpaceString(line);line=lines.pop()){curEnd.line--;curEnd.ch=0;}if(line){curEnd.line--;curEnd.ch=lineLength(cm,curEnd.line);}else{curEnd.ch=0;}}}function expandSelectionToLine(_cm,curStart,curEnd){curStart.ch=0;curEnd.ch=0;curEnd.line++;}function findFirstNonWhiteSpaceCharacter(text){if(!text){return 0;}var firstNonWS=text.search(/\S/);return firstNonWS==-1?text.length:firstNonWS;}function expandWordUnderCursor(cm,inclusive,innerWord,bigWord,noSymbol){var cur=getHead(cm);var line=cm.getLine(cur.line);var idx=cur.ch;var test=noSymbol?wordCharTest[0]:bigWordCharTest[0];if(innerWord&&/\s/.test(line.charAt(idx))){test=function test(ch){return /\s/.test(ch);};}else{while(!test(line.charAt(idx))){idx++;if(idx>=line.length){return null;}}if(bigWord){test=bigWordCharTest[0];}else{test=wordCharTest[0];if(!test(line.charAt(idx))){test=wordCharTest[1];}}}var end=idx,start=idx;while(test(line.charAt(end))&&end<line.length){end++;}while(test(line.charAt(start))&&start>=0){start--;}start++;if(inclusive){var wordEnd=end;while(/\s/.test(line.charAt(end))&&end<line.length){end++;}if(wordEnd==end){var wordStart=start;while(/\s/.test(line.charAt(start-1))&&start>0){start--;}if(!start){start=wordStart;}}}return{start:new Pos(cur.line,start),end:new Pos(cur.line,end)};}function expandTagUnderCursor(cm,head,inclusive){var cur=head;if(!CodeMirror.findMatchingTag||!CodeMirror.findEnclosingTag){return{start:cur,end:cur};}var tags=CodeMirror.findMatchingTag(cm,head)||CodeMirror.findEnclosingTag(cm,head);if(!tags||!tags.open||!tags.close){return{start:cur,end:cur};}if(inclusive){return{start:tags.open.from,end:tags.close.to};}return{start:tags.open.to,end:tags.close.from};}function recordJumpPosition(cm,oldCur,newCur){if(!cursorEqual(oldCur,newCur)){vimGlobalState.jumpList.add(cm,oldCur,newCur);}}function recordLastCharacterSearch(increment,args){vimGlobalState.lastCharacterSearch.increment=increment;vimGlobalState.lastCharacterSearch.forward=args.forward;vimGlobalState.lastCharacterSearch.selectedCharacter=args.selectedCharacter;}var symbolToMode={'(':'bracket',')':'bracket','{':'bracket','}':'bracket','[':'section',']':'section','*':'comment','/':'comment','m':'method','M':'method','#':'preprocess'};var findSymbolModes={bracket:{isComplete:function isComplete(state){if(state.nextCh===state.symb){state.depth++;if(state.depth>=1)return true;}else if(state.nextCh===state.reverseSymb){state.depth--;}return false;}},section:{init:function init(state){state.curMoveThrough=true;state.symb=(state.forward?']':'[')===state.symb?'{':'}';},isComplete:function isComplete(state){return state.index===0&&state.nextCh===state.symb;}},comment:{isComplete:function isComplete(state){var found=state.lastCh==='*'&&state.nextCh==='/';state.lastCh=state.nextCh;return found;}},method:{init:function init(state){state.symb=state.symb==='m'?'{':'}';state.reverseSymb=state.symb==='{'?'}':'{';},isComplete:function isComplete(state){if(state.nextCh===state.symb)return true;return false;}},preprocess:{init:function init(state){state.index=0;},isComplete:function isComplete(state){if(state.nextCh==='#'){var token=state.lineText.match(/^#(\w+)/)[1];if(token==='endif'){if(state.forward&&state.depth===0){return true;}state.depth++;}else if(token==='if'){if(!state.forward&&state.depth===0){return true;}state.depth--;}if(token==='else'&&state.depth===0)return true;}return false;}}};function findSymbol(cm,repeat,forward,symb){var cur=copyCursor(cm.getCursor());var increment=forward?1:-1;var endLine=forward?cm.lineCount():-1;var curCh=cur.ch;var line=cur.line;var lineText=cm.getLine(line);var state={lineText:lineText,nextCh:lineText.charAt(curCh),lastCh:null,index:curCh,symb:symb,reverseSymb:(forward?{')':'(','}':'{'}:{'(':')','{':'}'})[symb],forward:forward,depth:0,curMoveThrough:false};var mode=symbolToMode[symb];if(!mode)return cur;var init=findSymbolModes[mode].init;var isComplete=findSymbolModes[mode].isComplete;if(init){init(state);}while(line!==endLine&&repeat){state.index+=increment;state.nextCh=state.lineText.charAt(state.index);if(!state.nextCh){line+=increment;state.lineText=cm.getLine(line)||'';if(increment>0){state.index=0;}else{var lineLen=state.lineText.length;state.index=lineLen>0?lineLen-1:0;}state.nextCh=state.lineText.charAt(state.index);}if(isComplete(state)){cur.line=line;cur.ch=state.index;repeat--;}}if(state.nextCh||state.curMoveThrough){return new Pos(line,state.index);}return cur;}function findWord(cm,cur,forward,bigWord,emptyLineIsWord){var lineNum=cur.line;var pos=cur.ch;var line=cm.getLine(lineNum);var dir=forward?1:-1;var charTests=bigWord?bigWordCharTest:wordCharTest;if(emptyLineIsWord&&line==''){lineNum+=dir;line=cm.getLine(lineNum);if(!isLine(cm,lineNum)){return null;}pos=forward?0:line.length;}while(true){if(emptyLineIsWord&&line==''){return{from:0,to:0,line:lineNum};}var stop=dir>0?line.length:-1;var wordStart=stop,wordEnd=stop;while(pos!=stop){var foundWord=false;for(var i=0;i<charTests.length&&!foundWord;++i){if(charTests[i](line.charAt(pos))){wordStart=pos;while(pos!=stop&&charTests[i](line.charAt(pos))){pos+=dir;}wordEnd=pos;foundWord=wordStart!=wordEnd;if(wordStart==cur.ch&&lineNum==cur.line&&wordEnd==wordStart+dir){continue;}else{return{from:Math.min(wordStart,wordEnd+1),to:Math.max(wordStart,wordEnd),line:lineNum};}}}if(!foundWord){pos+=dir;}}lineNum+=dir;if(!isLine(cm,lineNum)){return null;}line=cm.getLine(lineNum);pos=dir>0?0:line.length;}}function moveToWord(cm,cur,repeat,forward,wordEnd,bigWord){var curStart=copyCursor(cur);var words=[];if(forward&&!wordEnd||!forward&&wordEnd){repeat++;}var emptyLineIsWord=!(forward&&wordEnd);for(var i=0;i<repeat;i++){var word=findWord(cm,cur,forward,bigWord,emptyLineIsWord);if(!word){var eodCh=lineLength(cm,cm.lastLine());words.push(forward?{line:cm.lastLine(),from:eodCh,to:eodCh}:{line:0,from:0,to:0});break;}words.push(word);cur=new Pos(word.line,forward?word.to-1:word.from);}var shortCircuit=words.length!=repeat;var firstWord=words[0];var lastWord=words.pop();if(forward&&!wordEnd){if(!shortCircuit&&(firstWord.from!=curStart.ch||firstWord.line!=curStart.line)){lastWord=words.pop();}return new Pos(lastWord.line,lastWord.from);}else if(forward&&wordEnd){return new Pos(lastWord.line,lastWord.to-1);}else if(!forward&&wordEnd){if(!shortCircuit&&(firstWord.to!=curStart.ch||firstWord.line!=curStart.line)){lastWord=words.pop();}return new Pos(lastWord.line,lastWord.to);}else{return new Pos(lastWord.line,lastWord.from);}}function _moveToEol(cm,head,motionArgs,vim,keepHPos){var cur=head;var retval=new Pos(cur.line+motionArgs.repeat-1,Infinity);var end=cm.clipPos(retval);end.ch--;if(!keepHPos){vim.lastHPos=Infinity;vim.lastHSPos=cm.charCoords(end,'div').left;}return retval;}function _moveToCharacter(cm,repeat,forward,character,head){var cur=head||cm.getCursor();var start=cur.ch;var idx;for(var i=0;i<repeat;i++){var line=cm.getLine(cur.line);idx=charIdxInLine(start,line,character,forward,true);if(idx==-1){return null;}start=idx;}return new Pos(cm.getCursor().line,idx);}function _moveToColumn(cm,repeat){var line=cm.getCursor().line;return clipCursorToContent(cm,new Pos(line,repeat-1));}function updateMark(cm,vim,markName,pos){if(!inArray(markName,validMarks)){return;}if(vim.marks[markName]){vim.marks[markName].clear();}vim.marks[markName]=cm.setBookmark(pos);}function charIdxInLine(start,line,character,forward,includeChar){var idx;if(forward){idx=line.indexOf(character,start+1);if(idx!=-1&&!includeChar){idx-=1;}}else{idx=line.lastIndexOf(character,start-1);if(idx!=-1&&!includeChar){idx+=1;}}return idx;}function findParagraph(cm,head,repeat,dir,inclusive){var line=head.line;var min=cm.firstLine();var max=cm.lastLine();var start,end,i=line;function isEmpty(i){return!cm.getLine(i);}function isBoundary(i,dir,any){if(any){return isEmpty(i)!=isEmpty(i+dir);}return!isEmpty(i)&&isEmpty(i+dir);}if(dir){while(min<=i&&i<=max&&repeat>0){if(isBoundary(i,dir)){repeat--;}i+=dir;}return new Pos(i,0);}var vim=cm.state.vim;if(vim.visualLine&&isBoundary(line,1,true)){var anchor=vim.sel.anchor;if(isBoundary(anchor.line,-1,true)){if(!inclusive||anchor.line!=line){line+=1;}}}var startState=isEmpty(line);for(i=line;i<=max&&repeat;i++){if(isBoundary(i,1,true)){if(!inclusive||isEmpty(i)!=startState){repeat--;}}}end=new Pos(i,0);if(i>max&&!startState){startState=true;}else{inclusive=false;}for(i=line;i>min;i--){if(!inclusive||isEmpty(i)==startState||i==line){if(isBoundary(i,-1,true)){break;}}}start=new Pos(i,0);return{start:start,end:end};}function getSentence(cm,cur,repeat,dir,inclusive){function nextChar(curr){if(curr.pos+curr.dir<0||curr.pos+curr.dir>=curr.line.length){curr.line=null;}else{curr.pos+=curr.dir;}}function forward(cm,ln,pos,dir){var line=cm.getLine(ln);var curr={line:line,ln:ln,pos:pos,dir:dir};if(curr.line===""){return{ln:curr.ln,pos:curr.pos};}var lastSentencePos=curr.pos;nextChar(curr);while(curr.line!==null){lastSentencePos=curr.pos;if(isEndOfSentenceSymbol(curr.line[curr.pos])){if(!inclusive){return{ln:curr.ln,pos:curr.pos+1};}else{nextChar(curr);while(curr.line!==null){if(isWhiteSpaceString(curr.line[curr.pos])){lastSentencePos=curr.pos;nextChar(curr);}else{break;}}return{ln:curr.ln,pos:lastSentencePos+1};}}nextChar(curr);}return{ln:curr.ln,pos:lastSentencePos+1};}function reverse(cm,ln,pos,dir){var line=cm.getLine(ln);var curr={line:line,ln:ln,pos:pos,dir:dir};if(curr.line===""){return{ln:curr.ln,pos:curr.pos};}var lastSentencePos=curr.pos;nextChar(curr);while(curr.line!==null){if(!isWhiteSpaceString(curr.line[curr.pos])&&!isEndOfSentenceSymbol(curr.line[curr.pos])){lastSentencePos=curr.pos;}else if(isEndOfSentenceSymbol(curr.line[curr.pos])){if(!inclusive){return{ln:curr.ln,pos:lastSentencePos};}else{if(isWhiteSpaceString(curr.line[curr.pos+1])){return{ln:curr.ln,pos:curr.pos+1};}else{return{ln:curr.ln,pos:lastSentencePos};}}}nextChar(curr);}curr.line=line;if(inclusive&&isWhiteSpaceString(curr.line[curr.pos])){return{ln:curr.ln,pos:curr.pos};}else{return{ln:curr.ln,pos:lastSentencePos};}}var curr_index={ln:cur.line,pos:cur.ch};while(repeat>0){if(dir<0){curr_index=reverse(cm,curr_index.ln,curr_index.pos,dir);}else{curr_index=forward(cm,curr_index.ln,curr_index.pos,dir);}repeat--;}return new Pos(curr_index.ln,curr_index.pos);}function findSentence(cm,cur,repeat,dir){function nextChar(cm,idx){if(idx.pos+idx.dir<0||idx.pos+idx.dir>=idx.line.length){idx.ln+=idx.dir;if(!isLine(cm,idx.ln)){idx.line=null;idx.ln=null;idx.pos=null;return;}idx.line=cm.getLine(idx.ln);idx.pos=idx.dir>0?0:idx.line.length-1;}else{idx.pos+=idx.dir;}}function forward(cm,ln,pos,dir){var line=cm.getLine(ln);var stop=line==="";var curr={line:line,ln:ln,pos:pos,dir:dir};var last_valid={ln:curr.ln,pos:curr.pos};var skip_empty_lines=curr.line==="";nextChar(cm,curr);while(curr.line!==null){last_valid.ln=curr.ln;last_valid.pos=curr.pos;if(curr.line===""&&!skip_empty_lines){return{ln:curr.ln,pos:curr.pos};}else if(stop&&curr.line!==""&&!isWhiteSpaceString(curr.line[curr.pos])){return{ln:curr.ln,pos:curr.pos};}else if(isEndOfSentenceSymbol(curr.line[curr.pos])&&!stop&&(curr.pos===curr.line.length-1||isWhiteSpaceString(curr.line[curr.pos+1]))){stop=true;}nextChar(cm,curr);}var line=cm.getLine(last_valid.ln);last_valid.pos=0;for(var i=line.length-1;i>=0;--i){if(!isWhiteSpaceString(line[i])){last_valid.pos=i;break;}}return last_valid;}function reverse(cm,ln,pos,dir){var line=cm.getLine(ln);var curr={line:line,ln:ln,pos:pos,dir:dir};var last_valid={ln:curr.ln,pos:null};var skip_empty_lines=curr.line==="";nextChar(cm,curr);while(curr.line!==null){if(curr.line===""&&!skip_empty_lines){if(last_valid.pos!==null){return last_valid;}else{return{ln:curr.ln,pos:curr.pos};}}else if(isEndOfSentenceSymbol(curr.line[curr.pos])&&last_valid.pos!==null&&!(curr.ln===last_valid.ln&&curr.pos+1===last_valid.pos)){return last_valid;}else if(curr.line!==""&&!isWhiteSpaceString(curr.line[curr.pos])){skip_empty_lines=false;last_valid={ln:curr.ln,pos:curr.pos};}nextChar(cm,curr);}var line=cm.getLine(last_valid.ln);last_valid.pos=0;for(var i=0;i<line.length;++i){if(!isWhiteSpaceString(line[i])){last_valid.pos=i;break;}}return last_valid;}var curr_index={ln:cur.line,pos:cur.ch};while(repeat>0){if(dir<0){curr_index=reverse(cm,curr_index.ln,curr_index.pos,dir);}else{curr_index=forward(cm,curr_index.ln,curr_index.pos,dir);}repeat--;}return new Pos(curr_index.ln,curr_index.pos);}function selectCompanionObject(cm,head,symb,inclusive){var cur=head,start,end;var bracketRegexp={'(':/[()]/,')':/[()]/,'[':/[[\]]/,']':/[[\]]/,'{':/[{}]/,'}':/[{}]/,'<':/[<>]/,'>':/[<>]/}[symb];var openSym={'(':'(',')':'(','[':'[',']':'[','{':'{','}':'{','<':'<','>':'<'}[symb];var curChar=cm.getLine(cur.line).charAt(cur.ch);var offset=curChar===openSym?1:0;start=cm.scanForBracket(new Pos(cur.line,cur.ch+offset),-1,undefined,{'bracketRegex':bracketRegexp});end=cm.scanForBracket(new Pos(cur.line,cur.ch+offset),1,undefined,{'bracketRegex':bracketRegexp});if(!start||!end)return null;start=start.pos;end=end.pos;if(start.line==end.line&&start.ch>end.ch||start.line>end.line){var tmp=start;start=end;end=tmp;}if(inclusive){end.ch+=1;}else{start.ch+=1;}return{start:start,end:end};}function findBeginningAndEnd(cm,head,symb,inclusive){var cur=copyCursor(head);var line=cm.getLine(cur.line);var chars=line.split('');var start,end,i,len;var firstIndex=chars.indexOf(symb);if(cur.ch<firstIndex){cur.ch=firstIndex;}else if(firstIndex<cur.ch&&chars[cur.ch]==symb){var stringAfter=/string/.test(cm.getTokenTypeAt(offsetCursor(head,0,1)));var stringBefore=/string/.test(cm.getTokenTypeAt(head));var isStringStart=stringAfter&&!stringBefore;if(!isStringStart){end=cur.ch;--cur.ch;}}if(chars[cur.ch]==symb&&!end){start=cur.ch+1;}else{for(i=cur.ch;i>-1&&!start;i--){if(chars[i]==symb){start=i+1;}}}if(start&&!end){for(i=start,len=chars.length;i<len&&!end;i++){if(chars[i]==symb){end=i;}}}if(!start||!end){return{start:cur,end:cur};}if(inclusive){--start;++end;}return{start:new Pos(cur.line,start),end:new Pos(cur.line,end)};}defineOption('pcre',true,'boolean');function SearchState(){}SearchState.prototype={getQuery:function getQuery(){return vimGlobalState.query;},setQuery:function setQuery(query){vimGlobalState.query=query;},getOverlay:function getOverlay(){return this.searchOverlay;},setOverlay:function setOverlay(overlay){this.searchOverlay=overlay;},isReversed:function isReversed(){return vimGlobalState.isReversed;},setReversed:function setReversed(reversed){vimGlobalState.isReversed=reversed;},getScrollbarAnnotate:function getScrollbarAnnotate(){return this.annotate;},setScrollbarAnnotate:function setScrollbarAnnotate(annotate){this.annotate=annotate;}};function getSearchState(cm){var vim=cm.state.vim;return vim.searchState_||(vim.searchState_=new SearchState());}function splitBySlash(argString){return splitBySeparator(argString,'/');}function findUnescapedSlashes(argString){return findUnescapedSeparators(argString,'/');}function splitBySeparator(argString,separator){var slashes=findUnescapedSeparators(argString,separator)||[];if(!slashes.length)return[];var tokens=[];if(slashes[0]!==0)return;for(var i=0;i<slashes.length;i++){if(typeof slashes[i]=='number')tokens.push(argString.substring(slashes[i]+1,slashes[i+1]));}return tokens;}function findUnescapedSeparators(str,separator){if(!separator)separator='/';var escapeNextChar=false;var slashes=[];for(var i=0;i<str.length;i++){var c=str.charAt(i);if(!escapeNextChar&&c==separator){slashes.push(i);}escapeNextChar=!escapeNextChar&&c=='\\';}return slashes;}function translateRegex(str){var specials='|(){';var unescape='}';var escapeNextChar=false;var out=[];for(var i=-1;i<str.length;i++){var c=str.charAt(i)||'';var n=str.charAt(i+1)||'';var specialComesNext=n&&specials.indexOf(n)!=-1;if(escapeNextChar){if(c!=='\\'||!specialComesNext){out.push(c);}escapeNextChar=false;}else{if(c==='\\'){escapeNextChar=true;if(n&&unescape.indexOf(n)!=-1){specialComesNext=true;}if(!specialComesNext||n==='\\'){out.push(c);}}else{out.push(c);if(specialComesNext&&n!=='\\'){out.push('\\');}}}}return out.join('');}var charUnescapes={'\\n':'\n','\\r':'\r','\\t':'\t'};function translateRegexReplace(str){var escapeNextChar=false;var out=[];for(var i=-1;i<str.length;i++){var c=str.charAt(i)||'';var n=str.charAt(i+1)||'';if(charUnescapes[c+n]){out.push(charUnescapes[c+n]);i++;}else if(escapeNextChar){out.push(c);escapeNextChar=false;}else{if(c==='\\'){escapeNextChar=true;if(isNumber(n)||n==='$'){out.push('$');}else if(n!=='/'&&n!=='\\'){out.push('\\');}}else{if(c==='$'){out.push('$');}out.push(c);if(n==='/'){out.push('\\');}}}}return out.join('');}var unescapes={'\\/':'/','\\\\':'\\','\\n':'\n','\\r':'\r','\\t':'\t','\\&':'&'};function unescapeRegexReplace(str){var stream=new CodeMirror.StringStream(str);var output=[];while(!stream.eol()){while(stream.peek()&&stream.peek()!='\\'){output.push(stream.next());}var matched=false;for(var matcher in unescapes){if(stream.match(matcher,true)){matched=true;output.push(unescapes[matcher]);break;}}if(!matched){output.push(stream.next());}}return output.join('');}function parseQuery(query,ignoreCase,smartCase){var lastSearchRegister=vimGlobalState.registerController.getRegister('/');lastSearchRegister.setText(query);if(query instanceof RegExp){return query;}var slashes=findUnescapedSlashes(query);var regexPart;var forceIgnoreCase;if(!slashes.length){regexPart=query;}else{regexPart=query.substring(0,slashes[0]);var flagsPart=query.substring(slashes[0]);forceIgnoreCase=flagsPart.indexOf('i')!=-1;}if(!regexPart){return null;}if(!getOption('pcre')){regexPart=translateRegex(regexPart);}if(smartCase){ignoreCase=/^[^A-Z]*$/.test(regexPart);}var regexp=new RegExp(regexPart,ignoreCase||forceIgnoreCase?'im':'m');return regexp;}function dom(n){if(typeof n==='string')n=document.createElement(n);for(var a,i=1;i<arguments.length;i++){if(!(a=arguments[i]))continue;if(typeof a!=='object')a=document.createTextNode(a);if(a.nodeType)n.appendChild(a);else for(var key in a){if(!Object.prototype.hasOwnProperty.call(a,key))continue;if(key[0]==='$')n.style[key.slice(1)]=a[key];else n.setAttribute(key,a[key]);}}return n;}function showConfirm(cm,template){var pre=dom('div',{$color:'red',$whiteSpace:'pre',class:'cm-vim-message'},template);if(cm.openNotification){cm.openNotification(pre,{bottom:true,duration:5000});}else{alert(pre.innerText);}}function makePrompt(prefix,desc){return dom('div',{$display:'flex'},dom('span',{$fontFamily:'monospace',$whiteSpace:'pre',$flex:1},prefix,dom('input',{type:'text',autocorrect:'off',autocapitalize:'off',spellcheck:'false',$width:'100%'})),desc&&dom('span',{$color:'#888'},desc));}function showPrompt(cm,options){var template=makePrompt(options.prefix,options.desc);if(cm.openDialog){cm.openDialog(template,options.onClose,{onKeyDown:options.onKeyDown,onKeyUp:options.onKeyUp,bottom:true,selectValueOnOpen:false,value:options.value});}else{var shortText='';if(typeof options.prefix!="string"&&options.prefix)shortText+=options.prefix.textContent;if(options.desc)shortText+=" "+options.desc;options.onClose(prompt(shortText,''));}}function regexEqual(r1,r2){if(r1 instanceof RegExp&&r2 instanceof RegExp){var props=['global','multiline','ignoreCase','source'];for(var i=0;i<props.length;i++){var prop=props[i];if(r1[prop]!==r2[prop]){return false;}}return true;}return false;}function updateSearchQuery(cm,rawQuery,ignoreCase,smartCase){if(!rawQuery){return;}var state=getSearchState(cm);var query=parseQuery(rawQuery,!!ignoreCase,!!smartCase);if(!query){return;}highlightSearchMatches(cm,query);if(regexEqual(query,state.getQuery())){return query;}state.setQuery(query);return query;}function searchOverlay(query){if(query.source.charAt(0)=='^'){var matchSol=true;}return{token:function token(stream){if(matchSol&&!stream.sol()){stream.skipToEnd();return;}var match=stream.match(query,false);if(match){if(match[0].length==0){stream.next();return'searching';}if(!stream.sol()){stream.backUp(1);if(!query.exec(stream.next()+match[0])){stream.next();return null;}}stream.match(query);return'searching';}while(!stream.eol()){stream.next();if(stream.match(query,false))break;}},query:query};}var highlightTimeout=0;function highlightSearchMatches(cm,query){clearTimeout(highlightTimeout);highlightTimeout=setTimeout(function(){if(!cm.state.vim)return;var searchState=getSearchState(cm);var overlay=searchState.getOverlay();if(!overlay||query!=overlay.query){if(overlay){cm.removeOverlay(overlay);}overlay=searchOverlay(query);cm.addOverlay(overlay);if(cm.showMatchesOnScrollbar){if(searchState.getScrollbarAnnotate()){searchState.getScrollbarAnnotate().clear();}searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));}searchState.setOverlay(overlay);}},50);}function _findNext(cm,prev,query,repeat){if(repeat===undefined){repeat=1;}return cm.operation(function(){var pos=cm.getCursor();var cursor=cm.getSearchCursor(query,pos);for(var i=0;i<repeat;i++){var found=cursor.find(prev);if(i==0&&found&&cursorEqual(cursor.from(),pos)){var lastEndPos=prev?cursor.from():cursor.to();found=cursor.find(prev);if(found&&!found[0]&&cursorEqual(cursor.from(),lastEndPos)){if(cm.getLine(lastEndPos.line).length==lastEndPos.ch)found=cursor.find(prev);}}if(!found){cursor=cm.getSearchCursor(query,prev?new Pos(cm.lastLine()):new Pos(cm.firstLine(),0));if(!cursor.find(prev)){return;}}}return cursor.from();});}function findNextFromAndToInclusive(cm,prev,query,repeat,vim){if(repeat===undefined){repeat=1;}return cm.operation(function(){var pos=cm.getCursor();var cursor=cm.getSearchCursor(query,pos);var found=cursor.find(!prev);if(!vim.visualMode&&found&&cursorEqual(cursor.from(),pos)){cursor.find(!prev);}for(var i=0;i<repeat;i++){found=cursor.find(prev);if(!found){cursor=cm.getSearchCursor(query,prev?new Pos(cm.lastLine()):new Pos(cm.firstLine(),0));if(!cursor.find(prev)){return;}}}return[cursor.from(),cursor.to()];});}function clearSearchHighlight(cm){var state=getSearchState(cm);cm.removeOverlay(getSearchState(cm).getOverlay());state.setOverlay(null);if(state.getScrollbarAnnotate()){state.getScrollbarAnnotate().clear();state.setScrollbarAnnotate(null);}}function isInRange(pos,start,end){if(typeof pos!='number'){pos=pos.line;}if(start instanceof Array){return inArray(pos,start);}else{if(typeof end=='number'){return pos>=start&&pos<=end;}else{return pos==start;}}}function getUserVisibleLines(cm){var scrollInfo=cm.getScrollInfo();var occludeToleranceTop=6;var occludeToleranceBottom=10;var from=cm.coordsChar({left:0,top:occludeToleranceTop+scrollInfo.top},'local');var bottomY=scrollInfo.clientHeight-occludeToleranceBottom+scrollInfo.top;var to=cm.coordsChar({left:0,top:bottomY},'local');return{top:from.line,bottom:to.line};}function getMarkPos(cm,vim,markName){if(markName=='\''||markName=='`'){return vimGlobalState.jumpList.find(cm,-1)||new Pos(0,0);}else if(markName=='.'){return getLastEditPos(cm);}var mark=vim.marks[markName];return mark&&mark.find();}function getLastEditPos(cm){if(cm.getLastEditEnd){return cm.getLastEditEnd();}var done=cm.doc.history.done;for(var i=done.length;i--;){if(done[i].changes){return copyCursor(done[i].changes[0].to);}}}var ExCommandDispatcher=function ExCommandDispatcher(){this.buildCommandMap_();};ExCommandDispatcher.prototype={processCommand:function processCommand(cm,input,opt_params){var that=this;cm.operation(function(){cm.curOp.isVimOp=true;that._processCommand(cm,input,opt_params);});},_processCommand:function _processCommand(cm,input,opt_params){var vim=cm.state.vim;var commandHistoryRegister=vimGlobalState.registerController.getRegister(':');var previousCommand=commandHistoryRegister.toString();var inputStream=new CodeMirror.StringStream(input);commandHistoryRegister.setText(input);var params=opt_params||{};params.input=input;try{this.parseInput_(cm,inputStream,params);}catch(e){showConfirm(cm,e.toString());throw e;}if(vim.visualMode){exitVisualMode(cm);}var command;var commandName;if(!params.commandName){if(params.line!==undefined){commandName='move';}}else{command=this.matchCommand_(params.commandName);if(command){commandName=command.name;if(command.excludeFromCommandHistory){commandHistoryRegister.setText(previousCommand);}this.parseCommandArgs_(inputStream,params,command);if(command.type=='exToKey'){for(var i=0;i<command.toKeys.length;i++){vimApi.handleKey(cm,command.toKeys[i],'mapping');}return;}else if(command.type=='exToEx'){this.processCommand(cm,command.toInput);return;}}}if(!commandName){showConfirm(cm,'Not an editor command ":'+input+'"');return;}try{exCommands[commandName](cm,params);if((!command||!command.possiblyAsync)&&params.callback){params.callback();}}catch(e){showConfirm(cm,e.toString());throw e;}},parseInput_:function parseInput_(cm,inputStream,result){inputStream.eatWhile(':');if(inputStream.eat('%')){result.line=cm.firstLine();result.lineEnd=cm.lastLine();}else{result.line=this.parseLineSpec_(cm,inputStream);if(result.line!==undefined&&inputStream.eat(',')){result.lineEnd=this.parseLineSpec_(cm,inputStream);}}if(result.line==undefined){if(cm.state.vim.visualMode){var _getMarkPos,_getMarkPos2;result.selectionLine=(_getMarkPos=getMarkPos(cm,cm.state.vim,'<'))==null?void 0:_getMarkPos.line;result.selectionLineEnd=(_getMarkPos2=getMarkPos(cm,cm.state.vim,'>'))==null?void 0:_getMarkPos2.line;}else{result.selectionLine=cm.getCursor().line;}}else{result.selectionLine=result.line;result.selectionLineEnd=result.lineEnd;}var commandMatch=inputStream.match(/^(\w+|!!|@@|[!#&*<=>@~])/);if(commandMatch){result.commandName=commandMatch[1];}else{result.commandName=inputStream.match(/.*/)[0];}return result;},parseLineSpec_:function parseLineSpec_(cm,inputStream){var numberMatch=inputStream.match(/^(\d+)/);if(numberMatch){return parseInt(numberMatch[1],10)-1;}switch(inputStream.next()){case'.':return this.parseLineSpecOffset_(inputStream,cm.getCursor().line);case'$':return this.parseLineSpecOffset_(inputStream,cm.lastLine());case'\'':var markName=inputStream.next();var markPos=getMarkPos(cm,cm.state.vim,markName);if(!markPos)throw new Error('Mark not set');return this.parseLineSpecOffset_(inputStream,markPos.line);case'-':case'+':inputStream.backUp(1);return this.parseLineSpecOffset_(inputStream,cm.getCursor().line);default:inputStream.backUp(1);return undefined;}},parseLineSpecOffset_:function parseLineSpecOffset_(inputStream,line){var offsetMatch=inputStream.match(/^([+-])?(\d+)/);if(offsetMatch){var offset=parseInt(offsetMatch[2],10);if(offsetMatch[1]=="-"){line-=offset;}else{line+=offset;}}return line;},parseCommandArgs_:function parseCommandArgs_(inputStream,params,command){if(inputStream.eol()){return;}params.argString=inputStream.match(/.*/)[0];var delim=command.argDelimiter||/\s+/;var args=trim(params.argString).split(delim);if(args.length&&args[0]){params.args=args;}},matchCommand_:function matchCommand_(commandName){for(var i=commandName.length;i>0;i--){var prefix=commandName.substring(0,i);if(this.commandMap_[prefix]){var command=this.commandMap_[prefix];if(command.name.indexOf(commandName)===0){return command;}}}return null;},buildCommandMap_:function buildCommandMap_(){this.commandMap_={};for(var i=0;i<defaultExCommandMap.length;i++){var command=defaultExCommandMap[i];var key=command.shortName||command.name;this.commandMap_[key]=command;}},map:function map(lhs,rhs,ctx,noremap){if(lhs!=':'&&lhs.charAt(0)==':'){if(ctx){throw Error('Mode not supported for ex mappings');}var commandName=lhs.substring(1);if(rhs!=':'&&rhs.charAt(0)==':'){this.commandMap_[commandName]={name:commandName,type:'exToEx',toInput:rhs.substring(1),user:true};}else{this.commandMap_[commandName]={name:commandName,type:'exToKey',toKeys:rhs,user:true};}}else{if(rhs!=':'&&rhs.charAt(0)==':'){var mapping={keys:lhs,type:'keyToEx',exArgs:{input:rhs.substring(1)}};if(ctx){mapping.context=ctx;}defaultKeymap.unshift(mapping);}else{var mapping={keys:lhs,type:'keyToKey',toKeys:rhs,noremap:noremap};if(ctx){mapping.context=ctx;}defaultKeymap.unshift(mapping);}}},unmap:function unmap(lhs,ctx){if(lhs!=':'&&lhs.charAt(0)==':'){if(ctx){throw Error('Mode not supported for ex mappings');}var commandName=lhs.substring(1);if(this.commandMap_[commandName]&&this.commandMap_[commandName].user){delete this.commandMap_[commandName];return true;}}else{var keys=lhs;for(var i=0;i<defaultKeymap.length;i++){if(keys==defaultKeymap[i].keys&&defaultKeymap[i].context===ctx){defaultKeymap.splice(i,1);return true;}}}}};var exCommands={colorscheme:function colorscheme(cm,params){if(!params.args||params.args.length<1){showConfirm(cm,cm.getOption('theme'));return;}cm.setOption('theme',params.args[0]);},map:function map(cm,params,ctx,defaultOnly){var mapArgs=params.args;if(!mapArgs||mapArgs.length<2){if(cm){showConfirm(cm,'Invalid mapping: '+params.input);}return;}exCommandDispatcher.map(mapArgs[0],mapArgs[1],ctx,defaultOnly);},imap:function imap(cm,params){this.map(cm,params,'insert');},nmap:function nmap(cm,params){this.map(cm,params,'normal');},vmap:function vmap(cm,params){this.map(cm,params,'visual');},omap:function omap(cm,params){this.map(cm,params,'operatorPending');},noremap:function noremap(cm,params){this.map(cm,params,undefined,true);},inoremap:function inoremap(cm,params){this.map(cm,params,'insert',true);},nnoremap:function nnoremap(cm,params){this.map(cm,params,'normal',true);},vnoremap:function vnoremap(cm,params){this.map(cm,params,'visual',true);},onoremap:function onoremap(cm,params){this.map(cm,params,'operatorPending',true);},unmap:function unmap(cm,params,ctx){var mapArgs=params.args;if(!mapArgs||mapArgs.length<1||!exCommandDispatcher.unmap(mapArgs[0],ctx)){if(cm){showConfirm(cm,'No such mapping: '+params.input);}}},mapclear:function mapclear(cm,params){vimApi.mapclear();},imapclear:function imapclear(cm,params){vimApi.mapclear('insert');},nmapclear:function nmapclear(cm,params){vimApi.mapclear('normal');},vmapclear:function vmapclear(cm,params){vimApi.mapclear('visual');},omapclear:function omapclear(cm,params){vimApi.mapclear('operatorPending');},move:function move(cm,params){commandDispatcher.processCommand(cm,cm.state.vim,{type:'motion',motion:'moveToLineOrEdgeOfDocument',motionArgs:{forward:false,explicitRepeat:true,linewise:true},repeatOverride:params.line+1});},set:function set(cm,params){var setArgs=params.args;var setCfg=params.setCfg||{};if(!setArgs||setArgs.length<1){if(cm){showConfirm(cm,'Invalid mapping: '+params.input);}return;}var expr=setArgs[0].split('=');var optionName=expr[0];var value=expr[1];var forceGet=false;if(optionName.charAt(optionName.length-1)=='?'){if(value){throw Error('Trailing characters: '+params.argString);}optionName=optionName.substring(0,optionName.length-1);forceGet=true;}if(value===undefined&&optionName.substring(0,2)=='no'){optionName=optionName.substring(2);value=false;}var optionIsBoolean=options[optionName]&&options[optionName].type=='boolean';if(optionIsBoolean&&value==undefined){value=true;}if(!optionIsBoolean&&value===undefined||forceGet){var oldValue=getOption(optionName,cm,setCfg);if(oldValue instanceof Error){showConfirm(cm,oldValue.message);}else if(oldValue===true||oldValue===false){showConfirm(cm,' '+(oldValue?'':'no')+optionName);}else{showConfirm(cm,'  '+optionName+'='+oldValue);}}else{var setOptionReturn=setOption(optionName,value,cm,setCfg);if(setOptionReturn instanceof Error){showConfirm(cm,setOptionReturn.message);}}},setlocal:function setlocal(cm,params){params.setCfg={scope:'local'};this.set(cm,params);},setglobal:function setglobal(cm,params){params.setCfg={scope:'global'};this.set(cm,params);},registers:function registers(cm,params){var regArgs=params.args;var registers=vimGlobalState.registerController.registers;var regInfo='----------Registers----------\n\n';if(!regArgs){for(var registerName in registers){var text=registers[registerName].toString();if(text.length){regInfo+='"'+registerName+'    '+text+'\n';}}}else{var registerName;regArgs=regArgs.join('');for(var i=0;i<regArgs.length;i++){registerName=regArgs.charAt(i);if(!vimGlobalState.registerController.isValidRegister(registerName)){continue;}var register=registers[registerName]||new Register();regInfo+='"'+registerName+'    '+register.toString()+'\n';}}showConfirm(cm,regInfo);},sort:function sort(cm,params){var reverse,ignoreCase,unique,number,pattern;function parseArgs(){if(params.argString){var args=new CodeMirror.StringStream(params.argString);if(args.eat('!')){reverse=true;}if(args.eol()){return;}if(!args.eatSpace()){return'Invalid arguments';}var opts=args.match(/([dinuox]+)?\s*(\/.+\/)?\s*/);if(!opts&&!args.eol()){return'Invalid arguments';}if(opts[1]){ignoreCase=opts[1].indexOf('i')!=-1;unique=opts[1].indexOf('u')!=-1;var decimal=opts[1].indexOf('d')!=-1||opts[1].indexOf('n')!=-1&&1;var hex=opts[1].indexOf('x')!=-1&&1;var octal=opts[1].indexOf('o')!=-1&&1;if(decimal+hex+octal>1){return'Invalid arguments';}number=decimal&&'decimal'||hex&&'hex'||octal&&'octal';}if(opts[2]){pattern=new RegExp(opts[2].substr(1,opts[2].length-2),ignoreCase?'i':'');}}}var err=parseArgs();if(err){showConfirm(cm,err+': '+params.argString);return;}var lineStart=params.line||cm.firstLine();var lineEnd=params.lineEnd||params.line||cm.lastLine();if(lineStart==lineEnd){return;}var curStart=new Pos(lineStart,0);var curEnd=new Pos(lineEnd,lineLength(cm,lineEnd));var text=cm.getRange(curStart,curEnd).split('\n');var numberRegex=pattern?pattern:number=='decimal'?/(-?)([\d]+)/:number=='hex'?/(-?)(?:0x)?([0-9a-f]+)/i:number=='octal'?/([0-7]+)/:null;var radix=number=='decimal'?10:number=='hex'?16:number=='octal'?8:null;var numPart=[],textPart=[];if(number||pattern){for(var i=0;i<text.length;i++){var matchPart=pattern?text[i].match(pattern):null;if(matchPart&&matchPart[0]!=''){numPart.push(matchPart);}else if(!pattern&&numberRegex.exec(text[i])){numPart.push(text[i]);}else{textPart.push(text[i]);}}}else{textPart=text;}function compareFn(a,b){if(reverse){var tmp;tmp=a;a=b;b=tmp;}if(ignoreCase){a=a.toLowerCase();b=b.toLowerCase();}var anum=number&&numberRegex.exec(a);var bnum=number&&numberRegex.exec(b);if(!anum){return a<b?-1:1;}anum=parseInt((anum[1]+anum[2]).toLowerCase(),radix);bnum=parseInt((bnum[1]+bnum[2]).toLowerCase(),radix);return anum-bnum;}function comparePatternFn(a,b){if(reverse){var tmp;tmp=a;a=b;b=tmp;}if(ignoreCase){a[0]=a[0].toLowerCase();b[0]=b[0].toLowerCase();}return a[0]<b[0]?-1:1;}numPart.sort(pattern?comparePatternFn:compareFn);if(pattern){for(var i=0;i<numPart.length;i++){numPart[i]=numPart[i].input;}}else if(!number){textPart.sort(compareFn);}text=!reverse?textPart.concat(numPart):numPart.concat(textPart);if(unique){var textOld=text;var lastLine;text=[];for(var i=0;i<textOld.length;i++){if(textOld[i]!=lastLine){text.push(textOld[i]);}lastLine=textOld[i];}}cm.replaceRange(text.join('\n'),curStart,curEnd);},vglobal:function vglobal(cm,params){this.global(cm,params);},normal:function normal(cm,params){var argString=params.argString&&params.argString.trimStart();if(!argString){showConfirm(cm,'Argument is required.');return;}var line=params.line;if(typeof line=='number'){var lineEnd=isNaN(params.lineEnd)?line:params.lineEnd;for(var i=line;i<=lineEnd;i++){cm.setCursor(i,0);doKeyToKey(cm,params.argString.trimStart());if(cm.state.vim.insertMode){exitInsertMode(cm,true);}}}else{doKeyToKey(cm,params.argString.trimStart());if(cm.state.vim.insertMode){exitInsertMode(cm,true);}}},global:function global(cm,params){var argString=params.argString;if(!argString){showConfirm(cm,'Regular Expression missing from global');return;}var inverted=params.commandName[0]==='v';if(argString[0]==='!'&&params.commandName[0]==='g'){inverted=true;argString=argString.slice(1);}var lineStart=params.line!==undefined?params.line:cm.firstLine();var lineEnd=params.lineEnd||params.line||cm.lastLine();var tokens=splitBySlash(argString);var regexPart=argString,cmd;if(tokens.length){regexPart=tokens[0];cmd=tokens.slice(1,tokens.length).join('/');}if(regexPart){try{updateSearchQuery(cm,regexPart,true,true);}catch(e){showConfirm(cm,'Invalid regex: '+regexPart);return;}}var query=getSearchState(cm).getQuery();var matchedLines=[];for(var i=lineStart;i<=lineEnd;i++){var line=cm.getLine(i);var matched=query.test(line);if(matched!==inverted){matchedLines.push(cmd?cm.getLineHandle(i):line);}}if(!cmd){showConfirm(cm,matchedLines.join('\n'));return;}var index=0;var nextCommand=function nextCommand(){if(index<matchedLines.length){var lineHandle=matchedLines[index++];var lineNum=cm.getLineNumber(lineHandle);if(lineNum==null){nextCommand();return;}var command=lineNum+1+cmd;exCommandDispatcher.processCommand(cm,command,{callback:nextCommand});}else if(cm.releaseLineHandles){cm.releaseLineHandles();}};nextCommand();},substitute:function substitute(cm,params){if(!cm.getSearchCursor){throw new Error('Search feature not available. Requires searchcursor.js or '+'any other getSearchCursor implementation.');}var argString=params.argString;var tokens=argString?splitBySeparator(argString,argString[0]):[];var regexPart,replacePart='',trailing,flagsPart,count;var confirm=false;var global=false;if(tokens.length){regexPart=tokens[0];if(getOption('pcre')&&regexPart!==''){regexPart=new RegExp(regexPart).source;}replacePart=tokens[1];if(replacePart!==undefined){if(getOption('pcre')){replacePart=unescapeRegexReplace(replacePart.replace(/([^\\])&/g,"$1$$&"));}else{replacePart=translateRegexReplace(replacePart);}vimGlobalState.lastSubstituteReplacePart=replacePart;}trailing=tokens[2]?tokens[2].split(' '):[];}else{if(argString&&argString.length){showConfirm(cm,'Substitutions should be of the form '+':s/pattern/replace/');return;}}if(trailing){flagsPart=trailing[0];count=parseInt(trailing[1]);if(flagsPart){if(flagsPart.indexOf('c')!=-1){confirm=true;}if(flagsPart.indexOf('g')!=-1){global=true;}if(getOption('pcre')){regexPart=regexPart+'/'+flagsPart;}else{regexPart=regexPart.replace(/\//g,"\\/")+'/'+flagsPart;}}}if(regexPart){try{updateSearchQuery(cm,regexPart,true,true);}catch(e){showConfirm(cm,'Invalid regex: '+regexPart);return;}}replacePart=replacePart||vimGlobalState.lastSubstituteReplacePart;if(replacePart===undefined){showConfirm(cm,'No previous substitute regular expression');return;}var state=getSearchState(cm);var query=state.getQuery();var lineStart=params.line!==undefined?params.line:cm.getCursor().line;var lineEnd=params.lineEnd||lineStart;if(lineStart==cm.firstLine()&&lineEnd==cm.lastLine()){lineEnd=Infinity;}if(count){lineStart=lineEnd;lineEnd=lineStart+count-1;}var startPos=clipCursorToContent(cm,new Pos(lineStart,0));var cursor=cm.getSearchCursor(query,startPos);doReplace(cm,confirm,global,lineStart,lineEnd,cursor,query,replacePart,params.callback);},redo:CodeMirror.commands.redo,undo:CodeMirror.commands.undo,write:function write(cm){if(CodeMirror.commands.save){CodeMirror.commands.save(cm);}else if(cm.save){cm.save();}},nohlsearch:function nohlsearch(cm){clearSearchHighlight(cm);},yank:function yank(cm){var cur=copyCursor(cm.getCursor());var line=cur.line;var lineText=cm.getLine(line);vimGlobalState.registerController.pushText('0','yank',lineText,true,true);},delete:function _delete(cm,params){var line=params.selectionLine;var lineEnd=isNaN(params.selectionLineEnd)?line:params.selectionLineEnd;operators.delete(cm,{linewise:true},[{anchor:new Pos(line,0),head:new Pos(lineEnd+1,0)}]);},join:function join(cm,params){var line=params.selectionLine;var lineEnd=isNaN(params.selectionLineEnd)?line:params.selectionLineEnd;cm.setCursor(new Pos(line,0));actions.joinLines(cm,{repeat:lineEnd-line},cm.state.vim);},delmarks:function delmarks(cm,params){if(!params.argString||!trim(params.argString)){showConfirm(cm,'Argument required');return;}var state=cm.state.vim;var stream=new CodeMirror.StringStream(trim(params.argString));while(!stream.eol()){stream.eatSpace();var count=stream.pos;if(!stream.match(/[a-zA-Z]/,false)){showConfirm(cm,'Invalid argument: '+params.argString.substring(count));return;}var sym=stream.next();if(stream.match('-',true)){if(!stream.match(/[a-zA-Z]/,false)){showConfirm(cm,'Invalid argument: '+params.argString.substring(count));return;}var startMark=sym;var finishMark=stream.next();if(isLowerCase(startMark)&&isLowerCase(finishMark)||isUpperCase(startMark)&&isUpperCase(finishMark)){var start=startMark.charCodeAt(0);var finish=finishMark.charCodeAt(0);if(start>=finish){showConfirm(cm,'Invalid argument: '+params.argString.substring(count));return;}for(var j=0;j<=finish-start;j++){var mark=String.fromCharCode(start+j);delete state.marks[mark];}}else{showConfirm(cm,'Invalid argument: '+startMark+'-');return;}}else{delete state.marks[sym];}}}};var exCommandDispatcher=new ExCommandDispatcher();function doReplace(cm,confirm,global,lineStart,lineEnd,searchCursor,query,replaceWith,callback){cm.state.vim.exMode=true;var done=false;var lastPos,modifiedLineNumber,joined;function replaceAll(){cm.operation(function(){while(!done){replace();next();}stop();});}function replace(){var text=cm.getRange(searchCursor.from(),searchCursor.to());var newText=text.replace(query,replaceWith);var unmodifiedLineNumber=searchCursor.to().line;searchCursor.replace(newText);modifiedLineNumber=searchCursor.to().line;lineEnd+=modifiedLineNumber-unmodifiedLineNumber;joined=modifiedLineNumber<unmodifiedLineNumber;}function findNextValidMatch(){var lastMatchTo=lastPos&&copyCursor(searchCursor.to());var match=searchCursor.findNext();if(match&&!match[0]&&lastMatchTo&&cursorEqual(searchCursor.from(),lastMatchTo)){match=searchCursor.findNext();}return match;}function next(){while(findNextValidMatch()&&isInRange(searchCursor.from(),lineStart,lineEnd)){if(!global&&searchCursor.from().line==modifiedLineNumber&&!joined){continue;}cm.scrollIntoView(searchCursor.from(),30);cm.setSelection(searchCursor.from(),searchCursor.to());lastPos=searchCursor.from();done=false;return;}done=true;}function stop(close){if(close){close();}cm.focus();if(lastPos){cm.setCursor(lastPos);var vim=cm.state.vim;vim.exMode=false;vim.lastHPos=vim.lastHSPos=lastPos.ch;}if(callback){callback();}}function onPromptKeyDown(e,_value,close){CodeMirror.e_stop(e);var keyName=CodeMirror.keyName(e);switch(keyName){case'Y':replace();next();break;case'N':next();break;case'A':var savedCallback=callback;callback=undefined;cm.operation(replaceAll);callback=savedCallback;break;case'L':replace();case'Q':case'Esc':case'Ctrl-C':case'Ctrl-[':stop(close);break;}if(done){stop(close);}return true;}next();if(done){showConfirm(cm,'No matches for '+query.source);return;}if(!confirm){replaceAll();if(callback){callback();}return;}showPrompt(cm,{prefix:dom('span','replace with ',dom('strong',replaceWith),' (y/n/a/q/l)'),onKeyDown:onPromptKeyDown});}CodeMirror.keyMap.vim={attach:attachVimMap,detach:detachVimMap,call:cmKey};function exitInsertMode(cm,keepCursor){var vim=cm.state.vim;var macroModeState=vimGlobalState.macroModeState;var insertModeChangeRegister=vimGlobalState.registerController.getRegister('.');var isPlaying=macroModeState.isPlaying;var lastChange=macroModeState.lastInsertModeChanges;if(!isPlaying){cm.off('change',onChange);if(vim.insertEnd)vim.insertEnd.clear();vim.insertEnd=null;CodeMirror.off(cm.getInputField(),'keydown',onKeyEventTargetKeyDown);}if(!isPlaying&&vim.insertModeRepeat>1){_repeatLastEdit(cm,vim,vim.insertModeRepeat-1,true);vim.lastEditInputState.repeatOverride=vim.insertModeRepeat;}delete vim.insertModeRepeat;vim.insertMode=false;if(!keepCursor){cm.setCursor(cm.getCursor().line,cm.getCursor().ch-1);}cm.setOption('keyMap','vim');cm.setOption('disableInput',true);cm.toggleOverwrite(false);insertModeChangeRegister.setText(lastChange.changes.join(''));CodeMirror.signal(cm,"vim-mode-change",{mode:"normal"});if(macroModeState.isRecording){logInsertModeChange(macroModeState);}}function _mapCommand(command){defaultKeymap.unshift(command);}function mapCommand(keys,type,name,args,extra){var command={keys:keys,type:type};command[type]=name;command[type+"Args"]=args;for(var key in extra)command[key]=extra[key];_mapCommand(command);}defineOption('insertModeEscKeysTimeout',200,'number');CodeMirror.keyMap['vim-insert']={fallthrough:['default'],attach:attachVimMap,detach:detachVimMap,call:cmKey};CodeMirror.keyMap['vim-replace']={'Backspace':'goCharLeft',fallthrough:['vim-insert'],attach:attachVimMap,detach:detachVimMap};function executeMacroRegister(cm,vim,macroModeState,registerName){var register=vimGlobalState.registerController.getRegister(registerName);if(registerName==':'){if(register.keyBuffer[0]){exCommandDispatcher.processCommand(cm,register.keyBuffer[0]);}macroModeState.isPlaying=false;return;}var keyBuffer=register.keyBuffer;var imc=0;macroModeState.isPlaying=true;macroModeState.replaySearchQueries=register.searchQueries.slice(0);for(var i=0;i<keyBuffer.length;i++){var text=keyBuffer[i];var match,key;while(text){match=/<\w+-.+?>|<\w+>|./.exec(text);key=match[0];text=text.substring(match.index+key.length);vimApi.handleKey(cm,key,'macro');if(vim.insertMode){var changes=register.insertModeChanges[imc++].changes;vimGlobalState.macroModeState.lastInsertModeChanges.changes=changes;repeatInsertModeChanges(cm,changes,1);exitInsertMode(cm);}}}macroModeState.isPlaying=false;}function logKey(macroModeState,key){if(macroModeState.isPlaying){return;}var registerName=macroModeState.latestRegister;var register=vimGlobalState.registerController.getRegister(registerName);if(register){register.pushText(key);}}function logInsertModeChange(macroModeState){if(macroModeState.isPlaying){return;}var registerName=macroModeState.latestRegister;var register=vimGlobalState.registerController.getRegister(registerName);if(register&&register.pushInsertModeChanges){register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);}}function logSearchQuery(macroModeState,query){if(macroModeState.isPlaying){return;}var registerName=macroModeState.latestRegister;var register=vimGlobalState.registerController.getRegister(registerName);if(register&&register.pushSearchQuery){register.pushSearchQuery(query);}}function onChange(cm,changeObj){var macroModeState=vimGlobalState.macroModeState;var lastChange=macroModeState.lastInsertModeChanges;if(!macroModeState.isPlaying){var vim=cm.state.vim;while(changeObj){lastChange.expectCursorActivityForChange=true;if(lastChange.ignoreCount>1){lastChange.ignoreCount--;}else if(changeObj.origin=='+input'||changeObj.origin=='paste'||changeObj.origin===undefined){var selectionCount=cm.listSelections().length;if(selectionCount>1)lastChange.ignoreCount=selectionCount;var text=changeObj.text.join('\n');if(lastChange.maybeReset){lastChange.changes=[];lastChange.maybeReset=false;}if(text){if(cm.state.overwrite&&!/\n/.test(text)){lastChange.changes.push([text]);}else{if(text.length>1){var insertEnd=vim&&vim.insertEnd&&vim.insertEnd.find();var cursor=cm.getCursor();if(insertEnd&&insertEnd.line==cursor.line){var offset=insertEnd.ch-cursor.ch;if(offset>0&&offset<text.length){lastChange.changes.push([text,offset]);text='';}}}if(text)lastChange.changes.push(text);}}}changeObj=changeObj.next;}}}function onCursorActivity(cm){var vim=cm.state.vim;if(vim.insertMode){var macroModeState=vimGlobalState.macroModeState;if(macroModeState.isPlaying){return;}var lastChange=macroModeState.lastInsertModeChanges;if(lastChange.expectCursorActivityForChange){lastChange.expectCursorActivityForChange=false;}else{lastChange.maybeReset=true;if(vim.insertEnd)vim.insertEnd.clear();vim.insertEnd=cm.setBookmark(cm.getCursor(),{insertLeft:true});}}else if(!cm.curOp.isVimOp){handleExternalSelection(cm,vim);}}function handleExternalSelection(cm,vim){var anchor=cm.getCursor('anchor');var head=cm.getCursor('head');if(vim.visualMode&&!cm.somethingSelected()){exitVisualMode(cm,false);}else if(!vim.visualMode&&!vim.insertMode&&cm.somethingSelected()){vim.visualMode=true;vim.visualLine=false;CodeMirror.signal(cm,"vim-mode-change",{mode:"visual"});}if(vim.visualMode){var headOffset=!cursorIsBefore(head,anchor)?-1:0;var anchorOffset=cursorIsBefore(head,anchor)?-1:0;head=offsetCursor(head,0,headOffset);anchor=offsetCursor(anchor,0,anchorOffset);vim.sel={anchor:anchor,head:head};updateMark(cm,vim,'<',cursorMin(head,anchor));updateMark(cm,vim,'>',cursorMax(head,anchor));}else if(!vim.insertMode){vim.lastHPos=cm.getCursor().ch;}}function InsertModeKey(keyName){this.keyName=keyName;}function onKeyEventTargetKeyDown(e){var macroModeState=vimGlobalState.macroModeState;var lastChange=macroModeState.lastInsertModeChanges;var keyName=CodeMirror.keyName(e);if(!keyName){return;}function onKeyFound(){if(lastChange.maybeReset){lastChange.changes=[];lastChange.maybeReset=false;}lastChange.changes.push(new InsertModeKey(keyName));return true;}if(keyName.indexOf('Delete')!=-1||keyName.indexOf('Backspace')!=-1){CodeMirror.lookupKey(keyName,'vim-insert',onKeyFound);}}function _repeatLastEdit(cm,vim,repeat,repeatForInsert){var macroModeState=vimGlobalState.macroModeState;macroModeState.isPlaying=true;var isAction=!!vim.lastEditActionCommand;var cachedInputState=vim.inputState;function repeatCommand(){if(isAction){commandDispatcher.processAction(cm,vim,vim.lastEditActionCommand);}else{commandDispatcher.evalInput(cm,vim);}}function repeatInsert(repeat){if(macroModeState.lastInsertModeChanges.changes.length>0){repeat=!vim.lastEditActionCommand?1:repeat;var changeObject=macroModeState.lastInsertModeChanges;repeatInsertModeChanges(cm,changeObject.changes,repeat);}}vim.inputState=vim.lastEditInputState;if(isAction&&vim.lastEditActionCommand.interlaceInsertRepeat){for(var i=0;i<repeat;i++){repeatCommand();repeatInsert(1);}}else{if(!repeatForInsert){repeatCommand();}repeatInsert(repeat);}vim.inputState=cachedInputState;if(vim.insertMode&&!repeatForInsert){exitInsertMode(cm);}macroModeState.isPlaying=false;}function sendCmKey(cm,key){CodeMirror.lookupKey(key,'vim-insert',function keyHandler(binding){if(typeof binding=='string'){CodeMirror.commands[binding](cm);}else{binding(cm);}return true;});}function repeatInsertModeChanges(cm,changes,repeat){var head=cm.getCursor('head');var visualBlock=vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;if(visualBlock){selectForInsert(cm,head,visualBlock+1);repeat=cm.listSelections().length;cm.setCursor(head);}for(var i=0;i<repeat;i++){if(visualBlock){cm.setCursor(offsetCursor(head,i,0));}for(var j=0;j<changes.length;j++){var change=changes[j];if(change instanceof InsertModeKey){sendCmKey(cm,change.keyName);}else if(typeof change=="string"){cm.replaceSelection(change);}else{var start=cm.getCursor();var end=offsetCursor(start,0,change[0].length-(change[1]||0));cm.replaceRange(change[0],start,change[1]?start:end);cm.setCursor(end);}}}if(visualBlock){cm.setCursor(offsetCursor(head,0,1));}}function cloneVimState(state){var n=new state.constructor();Object.keys(state).forEach(function(key){if(key=="insertEnd")return;var o=state[key];if(Array.isArray(o))o=o.slice();else if(o&&typeof o=="object"&&o.constructor!=Object)o=cloneVimState(o);n[key]=o;});if(state.sel){n.sel={head:state.sel.head&&copyCursor(state.sel.head),anchor:state.sel.anchor&&copyCursor(state.sel.anchor)};}return n;}function multiSelectHandleKey(cm,key,origin){var isHandled=false;var vim=vimApi.maybeInitVimState_(cm);var visualBlock=vim.visualBlock||vim.wasInVisualBlock;var wasMultiselect=cm.isInMultiSelectMode();if(vim.wasInVisualBlock&&!wasMultiselect){vim.wasInVisualBlock=false;}else if(wasMultiselect&&vim.visualBlock){vim.wasInVisualBlock=true;}if(key=='<Esc>'&&!vim.insertMode&&!vim.visualMode&&wasMultiselect&&vim.status=="<Esc>"){clearInputState(cm);}else if(visualBlock||!wasMultiselect||cm.inVirtualSelectionMode){isHandled=vimApi.handleKey(cm,key,origin);}else{var old=cloneVimState(vim);var changeQueueList=vim.inputState.changeQueueList||[];cm.operation(function(){cm.curOp.isVimOp=true;var index=0;cm.forEachSelection(function(){cm.state.vim.inputState.changeQueue=changeQueueList[index];var head=cm.getCursor("head");var anchor=cm.getCursor("anchor");var headOffset=!cursorIsBefore(head,anchor)?-1:0;var anchorOffset=cursorIsBefore(head,anchor)?-1:0;head=offsetCursor(head,0,headOffset);anchor=offsetCursor(anchor,0,anchorOffset);cm.state.vim.sel.head=head;cm.state.vim.sel.anchor=anchor;isHandled=vimApi.handleKey(cm,key,origin);if(cm.virtualSelection){changeQueueList[index]=cm.state.vim.inputState.changeQueue;cm.state.vim=cloneVimState(old);}index++;});if(cm.curOp.cursorActivity&&!isHandled)cm.curOp.cursorActivity=false;cm.state.vim=vim;vim.inputState.changeQueueList=changeQueueList;vim.inputState.changeQueue=null;},true);}if(isHandled&&!vim.visualMode&&!vim.insert&&vim.visualMode!=cm.somethingSelected()){handleExternalSelection(cm,vim);}return isHandled;}resetVimGlobalState();return vimApi;}function _indexFromPos(doc,pos){var ch=pos.ch;var lineNumber=pos.line+1;if(lineNumber<1){lineNumber=1;ch=0;}if(lineNumber>doc.lines){lineNumber=doc.lines;ch=Number.MAX_VALUE;}var line=doc.line(lineNumber);return Math.min(line.from+Math.max(0,ch),line.to);}function _posFromIndex(doc,offset){var line=doc.lineAt(offset);return{line:line.number-1,ch:offset-line.from};}var Pos=(0,_createClass2.default)(function Pos(line,ch){(0,_classCallCheck2.default)(this,Pos);this.line=line;this.ch=ch;});function _on(emitter,type,f){if(emitter.addEventListener){emitter.addEventListener(type,f,false);}else{var map=emitter._handlers||(emitter._handlers={});map[type]=(map[type]||[]).concat(f);}}function _off(emitter,type,f){if(emitter.removeEventListener){emitter.removeEventListener(type,f,false);}else{var map=emitter._handlers,arr=map&&map[type];if(arr){var index=arr.indexOf(f);if(index>-1){map[type]=arr.slice(0,index).concat(arr.slice(index+1));}}}}function _signal(emitter,type){var _a;var handlers=(_a=emitter._handlers)===null||_a===void 0?void 0:_a[type];if(!handlers)return;for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}for(var i=0;i<handlers.length;++i){handlers[i].apply(handlers,args);}}function signalTo(handlers){if(!handlers)return;for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}for(var i=0;i<handlers.length;++i){handlers[i].apply(handlers,args);}}var specialKey={Return:'CR',Backspace:'BS','Delete':'Del',Escape:'Esc',Insert:'Ins',ArrowLeft:'Left',ArrowRight:'Right',ArrowUp:'Up',ArrowDown:'Down',Enter:'CR',' ':'Space'};var ignoredKeys={Shift:1,Alt:1,Command:1,Control:1,CapsLock:1,AltGraph:1,Dead:1,Unidentified:1};var wordChar;try{wordChar=new RegExp("[\\w\\p{Alphabetic}\\p{Number}_]","u");}catch(_){wordChar=/[\w]/;}function dispatchChange(cm,transaction){var view=cm.cm6;var type="input.type.compose";if(cm.curOp){if(!cm.curOp.lastChange)type="input.type.compose.start";}if(transaction.annotations){try{transaction.annotations.some(function(note){if(note.value=="input")note.value=type;});}catch(e){console.error(e);}}else{transaction.userEvent=type;}return view.dispatch(transaction);}function runHistoryCommand(cm,revert){var _a;if(cm.curOp){cm.curOp.$changeStart=undefined;}(revert?commands.undo:commands.redo)(cm.cm6);var changeStartIndex=(_a=cm.curOp)===null||_a===void 0?void 0:_a.$changeStart;if(changeStartIndex!=null){cm.cm6.dispatch({selection:{anchor:changeStartIndex}});}}var keys={};"Left|Right|Up|Down|Backspace|Delete".split("|").forEach(function(key){keys[key]=function(cm){return view.runScopeHandlers(cm.cm6,{key:key},"editor");};});var CodeMirror=function(){function CodeMirror(cm6){(0,_classCallCheck2.default)(this,CodeMirror);this.state={};this.marks=Object.create(null);this.$mid=0;this.options={};this._handlers={};this.$lastChangeEndOffset=0;this.virtualSelection=null;this.cm6=cm6;this.onChange=this.onChange.bind(this);this.onSelectionChange=this.onSelectionChange.bind(this);}(0,_createClass2.default)(CodeMirror,[{key:"openDialog",value:function openDialog(template,callback,options){return _openDialog(this,template,callback,options);}},{key:"openNotification",value:function openNotification(template,options){return _openNotification(this,template,options);}},{key:"on",value:function on(type,f){_on(this,type,f);}},{key:"off",value:function off(type,f){_off(this,type,f);}},{key:"signal",value:function signal(type,e,handlers){_signal(this,type,e,handlers);}},{key:"indexFromPos",value:function indexFromPos(pos){return _indexFromPos(this.cm6.state.doc,pos);}},{key:"posFromIndex",value:function posFromIndex(offset){return _posFromIndex(this.cm6.state.doc,offset);}},{key:"foldCode",value:function foldCode(pos){var view=this.cm6;var ranges=view.state.selection.ranges;var doc=this.cm6.state.doc;var index=_indexFromPos(doc,pos);var tmpRanges=state.EditorSelection.create([state.EditorSelection.range(index,index)],0).ranges;view.state.selection.ranges=tmpRanges;language.foldCode(view);view.state.selection.ranges=ranges;}},{key:"firstLine",value:function firstLine(){return 0;}},{key:"lastLine",value:function lastLine(){return this.cm6.state.doc.lines-1;}},{key:"lineCount",value:function lineCount(){return this.cm6.state.doc.lines;}},{key:"setCursor",value:function setCursor(line,ch){if(typeof line==='object'){ch=line.ch;line=line.line;}var offset=_indexFromPos(this.cm6.state.doc,{line:line,ch:ch});this.cm6.dispatch({selection:{anchor:offset}},{scrollIntoView:!this.curOp});if(this.curOp&&!this.curOp.isVimOp)this.onBeforeEndOperation();}},{key:"getCursor",value:function getCursor(p){var sel=this.cm6.state.selection.main;var offset=p=="head"||!p?sel.head:p=="anchor"?sel.anchor:p=="start"?sel.from:p=="end"?sel.to:null;if(offset==null)throw new Error("Invalid cursor type");return this.posFromIndex(offset);}},{key:"listSelections",value:function listSelections(){var doc=this.cm6.state.doc;return this.cm6.state.selection.ranges.map(function(r){return{anchor:_posFromIndex(doc,r.anchor),head:_posFromIndex(doc,r.head)};});}},{key:"setSelections",value:function setSelections(p,primIndex){var doc=this.cm6.state.doc;var ranges=p.map(function(x){return state.EditorSelection.range(_indexFromPos(doc,x.anchor),_indexFromPos(doc,x.head));});this.cm6.dispatch({selection:state.EditorSelection.create(ranges,primIndex)});}},{key:"setSelection",value:function setSelection(anchor,head,options){var doc=this.cm6.state.doc;var ranges=[state.EditorSelection.range(_indexFromPos(doc,anchor),_indexFromPos(doc,head))];this.cm6.dispatch({selection:state.EditorSelection.create(ranges,0)});if(options&&options.origin=='*mouse'){this.onBeforeEndOperation();}}},{key:"getLine",value:function getLine(row){var doc=this.cm6.state.doc;if(row<0||row>=doc.lines)return"";return this.cm6.state.doc.line(row+1).text;}},{key:"getLineHandle",value:function getLineHandle(row){if(!this.$lineHandleChanges)this.$lineHandleChanges=[];return{row:row,index:this.indexFromPos(new Pos(row,0))};}},{key:"getLineNumber",value:function getLineNumber(handle){var updates=this.$lineHandleChanges;if(!updates)return null;var offset=handle.index;for(var i=0;i<updates.length;i++){offset=updates[i].changes.mapPos(offset,1,state.MapMode.TrackAfter);if(offset==null)return null;}var pos=this.posFromIndex(offset);return pos.ch==0?pos.line:null;}},{key:"releaseLineHandles",value:function releaseLineHandles(){this.$lineHandleChanges=undefined;}},{key:"getRange",value:function getRange(s,e){var doc=this.cm6.state.doc;return this.cm6.state.sliceDoc(_indexFromPos(doc,s),_indexFromPos(doc,e));}},{key:"replaceRange",value:function replaceRange(text,s,e){if(!e)e=s;var doc=this.cm6.state.doc;var from=_indexFromPos(doc,s);var to=_indexFromPos(doc,e);dispatchChange(this,{changes:{from:from,to:to,insert:text}});}},{key:"replaceSelection",value:function replaceSelection(text){dispatchChange(this,this.cm6.state.replaceSelection(text));}},{key:"replaceSelections",value:function replaceSelections(replacements){var ranges=this.cm6.state.selection.ranges;var changes=ranges.map(function(r,i){return{from:r.from,to:r.to,insert:replacements[i]||""};});dispatchChange(this,{changes:changes});}},{key:"getSelection",value:function getSelection(){return this.getSelections().join("\n");}},{key:"getSelections",value:function getSelections(){var cm=this.cm6;return cm.state.selection.ranges.map(function(r){return cm.state.sliceDoc(r.from,r.to);});}},{key:"somethingSelected",value:function somethingSelected(){return this.cm6.state.selection.ranges.some(function(r){return!r.empty;});}},{key:"getInputField",value:function getInputField(){return this.cm6.contentDOM;}},{key:"clipPos",value:function clipPos(p){var doc=this.cm6.state.doc;var ch=p.ch;var lineNumber=p.line+1;if(lineNumber<1){lineNumber=1;ch=0;}if(lineNumber>doc.lines){lineNumber=doc.lines;ch=Number.MAX_VALUE;}var line=doc.line(lineNumber);ch=Math.min(Math.max(0,ch),line.to-line.from);return new Pos(lineNumber-1,ch);}},{key:"getValue",value:function getValue(){return this.cm6.state.doc.toString();}},{key:"setValue",value:function setValue(text){var cm=this.cm6;return cm.dispatch({changes:{from:0,to:cm.state.doc.length,insert:text},selection:state.EditorSelection.range(0,0)});}},{key:"focus",value:function focus(){return this.cm6.focus();}},{key:"blur",value:function blur(){return this.cm6.contentDOM.blur();}},{key:"defaultTextHeight",value:function defaultTextHeight(){return this.cm6.defaultLineHeight;}},{key:"findMatchingBracket",value:function findMatchingBracket(pos){var state=this.cm6.state;var offset=_indexFromPos(state.doc,pos);var m=language.matchBrackets(state,offset+1,-1);if(m&&m.end){return{to:_posFromIndex(state.doc,m.end.from)};}m=language.matchBrackets(state,offset,1);if(m&&m.end){return{to:_posFromIndex(state.doc,m.end.from)};}return{to:undefined};}},{key:"scanForBracket",value:function scanForBracket(pos,dir,style,config){return _scanForBracket(this,pos,dir,style,config);}},{key:"indentLine",value:function indentLine(line,more){if(more)this.indentMore();else this.indentLess();}},{key:"indentMore",value:function indentMore(){commands.indentMore(this.cm6);}},{key:"indentLess",value:function indentLess(){commands.indentLess(this.cm6);}},{key:"execCommand",value:function execCommand(name){if(name=="indentAuto")CodeMirror.commands.indentAuto(this);else if(name=="goLineLeft")commands.cursorLineBoundaryBackward(this.cm6);else if(name=="goLineRight"){commands.cursorLineBoundaryForward(this.cm6);commands.cursorCharBackward(this.cm6);}else console.log(name+" is not implemented");}},{key:"setBookmark",value:function setBookmark(cursor,options){var assoc=(options===null||options===void 0?void 0:options.insertLeft)?1:-1;var offset=this.indexFromPos(cursor);var bm=new Marker(this,offset,assoc);return bm;}},{key:"addOverlay",value:function addOverlay(_ref){var query=_ref.query;var cm6Query=new search.SearchQuery({regexp:true,search:query.source,caseSensitive:!/i/.test(query.flags)});if(cm6Query.valid){cm6Query.forVim=true;this.cm6Query=cm6Query;var effect=search.setSearchQuery.of(cm6Query);this.cm6.dispatch({effects:effect});return cm6Query;}}},{key:"removeOverlay",value:function removeOverlay(overlay){if(!this.cm6Query)return;this.cm6Query.forVim=false;var effect=search.setSearchQuery.of(this.cm6Query);this.cm6.dispatch({effects:effect});}},{key:"getSearchCursor",value:function getSearchCursor(query,pos){var cm=this;var last=null;var lastCM5Result=null;if(pos.ch==undefined)pos.ch=Number.MAX_VALUE;var firstOffset=_indexFromPos(cm.cm6.state.doc,pos);var source=query.source.replace(/(\\.|{(?:\d+(?:,\d*)?|,\d+)})|[{}]/g,function(a,b){if(!b)return"\\"+a;return b;});function rCursor(doc){var from=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var to=arguments.length>2&&arguments[2]!==undefined?arguments[2]:doc.length;return new search.RegExpCursor(doc,source,{ignoreCase:query.ignoreCase},from,to);}function nextMatch(from){var doc=cm.cm6.state.doc;if(from>doc.length)return null;var res=rCursor(doc,from).next();return res.done?null:res.value;}var ChunkSize=10000;function prevMatchInRange(from,to){var doc=cm.cm6.state.doc;for(var size=1;;size++){var start=Math.max(from,to-size*ChunkSize);var cursor=rCursor(doc,start,to),range=null;while(!cursor.next().done)range=cursor.value;if(range&&(start==from||range.from>start+10))return range;if(start==from)return null;}}return{findNext:function findNext(){return this.find(false);},findPrevious:function findPrevious(){return this.find(true);},find:function find(back){var doc=cm.cm6.state.doc;if(back){var endAt=last?last.from==last.to?last.to-1:last.from:firstOffset;last=prevMatchInRange(0,endAt);}else{var startFrom=last?last.from==last.to?last.to+1:last.to:firstOffset;last=nextMatch(startFrom);}lastCM5Result=last&&{from:_posFromIndex(doc,last.from),to:_posFromIndex(doc,last.to),match:last.match};return last&&last.match;},from:function from(){return lastCM5Result===null||lastCM5Result===void 0?void 0:lastCM5Result.from;},to:function to(){return lastCM5Result===null||lastCM5Result===void 0?void 0:lastCM5Result.to;},replace:function replace(text){if(last){dispatchChange(cm,{changes:{from:last.from,to:last.to,insert:text}});last.to=last.from+text.length;if(lastCM5Result){lastCM5Result.to=_posFromIndex(cm.cm6.state.doc,last.to);}}}};}},{key:"findPosV",value:function findPosV(start,amount,unit,goalColumn){var cm6=this.cm6;var doc=cm6.state.doc;var pixels=unit=='page'?cm6.dom.clientHeight:0;var startOffset=_indexFromPos(doc,start);var range=state.EditorSelection.range(startOffset,startOffset,goalColumn);var count=Math.round(Math.abs(amount));for(var i=0;i<count;i++){if(unit=='page'){range=cm6.moveVertically(range,amount>0,pixels);}else if(unit=='line'){range=cm6.moveVertically(range,amount>0);}}var pos=_posFromIndex(doc,range.head);if(amount<0&&range.head==0&&goalColumn!=0&&start.line==0&&start.ch!=0||amount>0&&range.head==doc.length&&pos.ch!=goalColumn&&start.line==pos.line){pos.hitSide=true;}return pos;}},{key:"charCoords",value:function charCoords(pos,mode){var rect=this.cm6.contentDOM.getBoundingClientRect();var offset=_indexFromPos(this.cm6.state.doc,pos);var coords=this.cm6.coordsAtPos(offset);var d=-rect.top;return{left:((coords===null||coords===void 0?void 0:coords.left)||0)-rect.left,top:((coords===null||coords===void 0?void 0:coords.top)||0)+d,bottom:((coords===null||coords===void 0?void 0:coords.bottom)||0)+d};}},{key:"coordsChar",value:function coordsChar(coords,mode){var rect=this.cm6.contentDOM.getBoundingClientRect();var offset=this.cm6.posAtCoords({x:coords.left+rect.left,y:coords.top+rect.top})||0;return _posFromIndex(this.cm6.state.doc,offset);}},{key:"getScrollInfo",value:function getScrollInfo(){var scroller=this.cm6.scrollDOM;return{left:scroller.scrollLeft,top:scroller.scrollTop,height:scroller.scrollHeight,width:scroller.scrollWidth,clientHeight:scroller.clientHeight,clientWidth:scroller.clientWidth};}},{key:"scrollTo",value:function scrollTo(x,y){if(x!=null)this.cm6.scrollDOM.scrollLeft=x;if(y!=null)this.cm6.scrollDOM.scrollTop=y;}},{key:"scrollIntoView",value:function scrollIntoView(pos,margin){if(pos){var offset=this.indexFromPos(pos);this.cm6.dispatch({effects:view.EditorView.scrollIntoView(offset)});}else{this.cm6.dispatch({scrollIntoView:true,userEvent:"scroll"});}}},{key:"getWrapperElement",value:function getWrapperElement(){return this.cm6.dom;}},{key:"getMode",value:function getMode(){return{name:this.getOption("mode")};}},{key:"setSize",value:function setSize(w,h){this.cm6.dom.style.width=w+4+"px";this.cm6.dom.style.height=h+"px";this.refresh();}},{key:"refresh",value:function refresh(){this.cm6.measure();}},{key:"destroy",value:function destroy(){this.removeOverlay();}},{key:"getLastEditEnd",value:function getLastEditEnd(){return this.posFromIndex(this.$lastChangeEndOffset);}},{key:"onChange",value:function onChange(update){var _this2=this;if(this.$lineHandleChanges){this.$lineHandleChanges.push(update);}for(var i in this.marks){var m=this.marks[i];m.update(update.changes);}if(this.virtualSelection){this.virtualSelection.ranges=this.virtualSelection.ranges.map(function(range){return range.map(update.changes);});}var curOp=this.curOp=this.curOp||{};update.changes.iterChanges(function(fromA,toA,fromB,toB,text){if(curOp.$changeStart==null||curOp.$changeStart>fromB)curOp.$changeStart=fromB;_this2.$lastChangeEndOffset=toB;var change={text:text.toJSON()};if(!curOp.lastChange){curOp.lastChange=curOp.change=change;}else{curOp.lastChange.next=curOp.lastChange=change;}},true);if(!curOp.changeHandlers)curOp.changeHandlers=this._handlers["change"]&&this._handlers["change"].slice();}},{key:"onSelectionChange",value:function onSelectionChange(){var curOp=this.curOp=this.curOp||{};if(!curOp.cursorActivityHandlers)curOp.cursorActivityHandlers=this._handlers["cursorActivity"]&&this._handlers["cursorActivity"].slice();this.curOp.cursorActivity=true;}},{key:"operation",value:function operation(fn){if(!this.curOp)this.curOp={$d:0};this.curOp.$d++;try{var result=fn();}finally{if(this.curOp){this.curOp.$d--;if(!this.curOp.$d)this.onBeforeEndOperation();}}return result;}},{key:"onBeforeEndOperation",value:function onBeforeEndOperation(){var op=this.curOp;var scrollIntoView=false;if(op){if(op.change){signalTo(op.changeHandlers,this,op.change);}if(op&&op.cursorActivity){signalTo(op.cursorActivityHandlers,this,null);if(op.isVimOp)scrollIntoView=true;}this.curOp=null;}if(scrollIntoView)this.scrollIntoView();}},{key:"moveH",value:function moveH(increment,unit){if(unit=='char'){var cur=this.getCursor();this.setCursor(cur.line,cur.ch+increment);}}},{key:"setOption",value:function setOption(name,val){switch(name){case"keyMap":this.state.keyMap=val;break;}}},{key:"getOption",value:function getOption(name){switch(name){case"firstLineNumber":return 1;case"tabSize":return this.cm6.state.tabSize||4;case"readonly":return this.cm6.state.readOnly;case"indentWithTabs":return this.cm6.state.facet(language.indentUnit)=="\t";case"indentUnit":return this.cm6.state.facet(language.indentUnit).length||2;case"keyMap":return this.state.keyMap||"vim";}}},{key:"toggleOverwrite",value:function toggleOverwrite(on){this.state.overwrite=on;}},{key:"getTokenTypeAt",value:function getTokenTypeAt(pos){var _a;var offset=this.indexFromPos(pos);var tree=language.ensureSyntaxTree(this.cm6.state,offset);var node=tree===null||tree===void 0?void 0:tree.resolve(offset);var type=((_a=node===null||node===void 0?void 0:node.type)===null||_a===void 0?void 0:_a.name)||"";if(/comment/i.test(type))return"comment";if(/string/i.test(type))return"string";return"";}},{key:"overWriteSelection",value:function overWriteSelection(text){var doc=this.cm6.state.doc;var sel=this.cm6.state.selection;var ranges=sel.ranges.map(function(x){if(x.empty){var ch=x.to<doc.length?doc.sliceString(x.from,x.to+1):"";if(ch&&!/\n/.test(ch))return state.EditorSelection.range(x.from,x.to+1);}return x;});this.cm6.dispatch({selection:state.EditorSelection.create(ranges,sel.mainIndex)});this.replaceSelection(text);}},{key:"isInMultiSelectMode",value:function isInMultiSelectMode(){return this.cm6.state.selection.ranges.length>1;}},{key:"virtualSelectionMode",value:function virtualSelectionMode(){return!!this.virtualSelection;}},{key:"forEachSelection",value:function forEachSelection(command){var selection=this.cm6.state.selection;this.virtualSelection=state.EditorSelection.create(selection.ranges,selection.mainIndex);for(var i=0;i<this.virtualSelection.ranges.length;i++){var range=this.virtualSelection.ranges[i];if(!range)continue;this.cm6.dispatch({selection:state.EditorSelection.create([range])});command();this.virtualSelection.ranges[i]=this.cm6.state.selection.ranges[0];}this.cm6.dispatch({selection:this.virtualSelection});this.virtualSelection=null;}}]);return CodeMirror;}();CodeMirror.isMac=typeof navigator!="undefined"&&/Mac/.test(navigator.platform);CodeMirror.Pos=Pos;CodeMirror.StringStream=language.StringStream;CodeMirror.commands={cursorCharLeft:function cursorCharLeft(cm){commands.cursorCharLeft(cm.cm6);},redo:function redo(cm){runHistoryCommand(cm,false);},undo:function undo(cm){runHistoryCommand(cm,true);},newlineAndIndent:function newlineAndIndent(cm){commands.insertNewlineAndIndent({state:cm.cm6.state,dispatch:function dispatch(tr){return dispatchChange(cm,tr);}});},indentAuto:function indentAuto(cm){commands.indentSelection(cm.cm6);}};CodeMirror.defineOption=function(name,val,setter){};CodeMirror.isWordChar=function(ch){return wordChar.test(ch);};CodeMirror.keys=keys;CodeMirror.keyMap={};CodeMirror.addClass=function(){};CodeMirror.rmClass=function(){};CodeMirror.e_preventDefault=function(e){e.preventDefault();};CodeMirror.e_stop=function(e){var _a,_b;(_a=e===null||e===void 0?void 0:e.stopPropagation)===null||_a===void 0?void 0:_a.call(e);(_b=e===null||e===void 0?void 0:e.preventDefault)===null||_b===void 0?void 0:_b.call(e);};CodeMirror.keyName=function(e){var key=e.key;if(ignoredKeys[key])return;if(key=="Escape")key="Esc";if(key==" ")key="Space";if(key.length>1){key=key.replace(/Numpad|Arrow/,"");}if(key.length==1)key=key.toUpperCase();var name='';if(e.ctrlKey){name+='Ctrl-';}if(e.altKey){name+='Alt-';}if((name||key.length>1)&&e.shiftKey){name+='Shift-';}name+=key;return name;};CodeMirror.vimKey=function vimKey(e){var key=e.key;if(ignoredKeys[key])return;if(key.length>1&&key[0]=="n"){key=key.replace("Numpad","");}key=specialKey[key]||key;var name='';if(e.ctrlKey){name+='C-';}if(e.altKey){name+='A-';}if(e.metaKey){name+='M-';}if(CodeMirror.isMac&&e.altKey&&!e.metaKey&&!e.ctrlKey){name=name.slice(2);}if((name||key.length>1)&&e.shiftKey){name+='S-';}name+=key;if(name.length>1){name='<'+name+'>';}return name;};CodeMirror.lookupKey=function lookupKey(key,map,handle){var result=CodeMirror.keys[key];if(result)handle(result);};CodeMirror.on=_on;CodeMirror.off=_off;CodeMirror.signal=_signal;CodeMirror.findMatchingTag=findMatchingTag;CodeMirror.findEnclosingTag=findEnclosingTag;function dialogDiv(cm,template,bottom){var dialog=document.createElement("div");dialog.appendChild(template);return dialog;}function closeNotification(cm,newVal){if(cm.state.currentNotificationClose)cm.state.currentNotificationClose();cm.state.currentNotificationClose=newVal;}function _openNotification(cm,template,options){closeNotification(cm,close);var dialog=dialogDiv(cm,template,options&&options.bottom);var closed=false;var doneTimer;var duration=options&&typeof options.duration!=="undefined"?options.duration:5000;function close(){if(closed)return;closed=true;clearTimeout(doneTimer);dialog.remove();hideDialog(cm,dialog);}dialog.onclick=function(e){e.preventDefault();close();};showDialog(cm,dialog);if(duration)doneTimer=setTimeout(close,duration);return close;}function showDialog(cm,dialog){var oldDialog=cm.state.dialog;cm.state.dialog=dialog;if(dialog&&oldDialog!==dialog){if(oldDialog&&oldDialog.contains(document.activeElement))cm.focus();if(oldDialog&&oldDialog.parentElement){oldDialog.parentElement.replaceChild(dialog,oldDialog);}else if(oldDialog){oldDialog.remove();}CodeMirror.signal(cm,"dialog");}}function hideDialog(cm,dialog){if(cm.state.dialog==dialog){cm.state.dialog=null;CodeMirror.signal(cm,"dialog");}}function _openDialog(me,template,callback,options){if(!options)options={};closeNotification(me,undefined);var dialog=dialogDiv(me,template,options.bottom);var closed=false;showDialog(me,dialog);function close(newVal){if(typeof newVal=='string'){inp.value=newVal;}else{if(closed)return;closed=true;hideDialog(me,dialog);if(!me.state.dialog)me.focus();if(options.onClose)options.onClose(dialog);}}var inp=dialog.getElementsByTagName("input")[0];if(inp){if(options.value){inp.value=options.value;if(options.selectValueOnOpen!==false)inp.select();}if(options.onInput)CodeMirror.on(inp,"input",function(e){options.onInput(e,inp.value,close);});if(options.onKeyUp)CodeMirror.on(inp,"keyup",function(e){options.onKeyUp(e,inp.value,close);});CodeMirror.on(inp,"keydown",function(e){if(options&&options.onKeyDown&&options.onKeyDown(e,inp.value,close)){return;}if(e.keyCode==13)callback(inp.value);if(e.keyCode==27||options.closeOnEnter!==false&&e.keyCode==13){inp.blur();CodeMirror.e_stop(e);close();}});if(options.closeOnBlur!==false)CodeMirror.on(inp,"blur",function(){setTimeout(function(){if(document.activeElement===inp)return;close();});});inp.focus();}return close;}var matching={"(":")>",")":"(<","[":"]>","]":"[<","{":"}>","}":"{<","<":">>",">":"<<"};function bracketRegex(config){return config&&config.bracketRegex||/[(){}[\]]/;}function _scanForBracket(cm,where,dir,style,config){var maxScanLen=config&&config.maxScanLineLength||10000;var maxScanLines=config&&config.maxScanLines||1000;var stack=[];var re=bracketRegex(config);var lineEnd=dir>0?Math.min(where.line+maxScanLines,cm.lastLine()+1):Math.max(cm.firstLine()-1,where.line-maxScanLines);for(var lineNo=where.line;lineNo!=lineEnd;lineNo+=dir){var line=cm.getLine(lineNo);if(!line)continue;var pos=dir>0?0:line.length-1,end=dir>0?line.length:-1;if(line.length>maxScanLen)continue;if(lineNo==where.line)pos=where.ch-(dir<0?1:0);for(;pos!=end;pos+=dir){var ch=line.charAt(pos);if(re.test(ch)){var match=matching[ch];if(match&&match.charAt(1)==">"==dir>0)stack.push(ch);else if(!stack.length)return{pos:new Pos(lineNo,pos),ch:ch};else stack.pop();}}}return lineNo-dir==(dir>0?cm.lastLine():cm.firstLine())?false:null;}function findMatchingTag(cm,pos){}function findEnclosingTag(cm,pos){var _a,_b;var state=cm.cm6.state;var offset=cm.indexFromPos(pos);if(offset<state.doc.length){var text=state.sliceDoc(offset,offset+1);if(text=="<")offset++;}var tree=language.ensureSyntaxTree(state,offset);var node=(tree===null||tree===void 0?void 0:tree.resolve(offset))||null;while(node){if(((_a=node.firstChild)===null||_a===void 0?void 0:_a.type.name)=='OpenTag'&&((_b=node.lastChild)===null||_b===void 0?void 0:_b.type.name)=='CloseTag'){return{open:convertRange(state.doc,node.firstChild),close:convertRange(state.doc,node.lastChild)};}node=node.parent;}}function convertRange(doc,cm6Range){return{from:_posFromIndex(doc,cm6Range.from),to:_posFromIndex(doc,cm6Range.to)};}var Marker=function(){function Marker(cm,offset,assoc){(0,_classCallCheck2.default)(this,Marker);this.cm=cm;this.id=cm.$mid++;this.offset=offset;this.assoc=assoc;cm.marks[this.id]=this;}(0,_createClass2.default)(Marker,[{key:"clear",value:function clear(){delete this.cm.marks[this.id];}},{key:"find",value:function find(){if(this.offset==null)return null;return this.cm.posFromIndex(this.offset);}},{key:"update",value:function update(change){if(this.offset!=null)this.offset=change.mapPos(this.offset,this.assoc,state.MapMode.TrackDel);}}]);return Marker;}();var Piece=function(){function Piece(left,top,height,fontFamily,fontSize,fontWeight,color,className,letter,partial){(0,_classCallCheck2.default)(this,Piece);this.left=left;this.top=top;this.height=height;this.fontFamily=fontFamily;this.fontSize=fontSize;this.fontWeight=fontWeight;this.color=color;this.className=className;this.letter=letter;this.partial=partial;}(0,_createClass2.default)(Piece,[{key:"draw",value:function draw(){var elt=document.createElement("div");elt.className=this.className;this.adjust(elt);return elt;}},{key:"adjust",value:function adjust(elt){elt.style.left=this.left+"px";elt.style.top=this.top+"px";elt.style.height=this.height+"px";elt.style.lineHeight=this.height+"px";elt.style.fontFamily=this.fontFamily;elt.style.fontSize=this.fontSize;elt.style.fontWeight=this.fontWeight;elt.style.color=this.partial?"transparent":this.color;elt.className=this.className;elt.textContent=this.letter;}},{key:"eq",value:function eq(p){return this.left==p.left&&this.top==p.top&&this.height==p.height&&this.fontFamily==p.fontFamily&&this.fontSize==p.fontSize&&this.fontWeight==p.fontWeight&&this.color==p.color&&this.className==p.className&&this.letter==p.letter;}}]);return Piece;}();var BlockCursorPlugin=function(){function BlockCursorPlugin(view,cm){(0,_classCallCheck2.default)(this,BlockCursorPlugin);this.view=view;this.rangePieces=[];this.cursors=[];this.cm=cm;this.measureReq={read:this.readPos.bind(this),write:this.drawSel.bind(this)};this.cursorLayer=view.scrollDOM.appendChild(document.createElement("div"));this.cursorLayer.className="cm-cursorLayer cm-vimCursorLayer";this.cursorLayer.setAttribute("aria-hidden","true");view.requestMeasure(this.measureReq);this.setBlinkRate();}(0,_createClass2.default)(BlockCursorPlugin,[{key:"setBlinkRate",value:function setBlinkRate(){this.cursorLayer.style.animationDuration=1200+"ms";}},{key:"update",value:function update(_update){if(_update.selectionSet||_update.geometryChanged||_update.viewportChanged){this.view.requestMeasure(this.measureReq);this.cursorLayer.style.animationName=this.cursorLayer.style.animationName=="cm-blink"?"cm-blink2":"cm-blink";}}},{key:"scheduleRedraw",value:function scheduleRedraw(){this.view.requestMeasure(this.measureReq);}},{key:"readPos",value:function readPos(){var state=this.view.state;var cursors=[];for(var r of state.selection.ranges){var prim=r==state.selection.main;var piece=measureCursor(this.cm,this.view,r,prim);if(piece)cursors.push(piece);}return{cursors:cursors};}},{key:"drawSel",value:function drawSel(_ref2){var _this3=this;var cursors=_ref2.cursors;if(cursors.length!=this.cursors.length||cursors.some(function(c,i){return!c.eq(_this3.cursors[i]);})){var oldCursors=this.cursorLayer.children;if(oldCursors.length!==cursors.length){this.cursorLayer.textContent="";for(var c of cursors)this.cursorLayer.appendChild(c.draw());}else{cursors.forEach(function(c,idx){return c.adjust(oldCursors[idx]);});}this.cursors=cursors;}}},{key:"destroy",value:function destroy(){this.cursorLayer.remove();}}]);return BlockCursorPlugin;}();var themeSpec={".cm-vimMode .cm-line":{"& ::selection":{backgroundColor:"transparent !important"},"&::selection":{backgroundColor:"transparent !important"},caretColor:"transparent !important"},".cm-fat-cursor":{position:"absolute",background:"#ff9696",border:"none",whiteSpace:"pre"},"&:not(.cm-focused) .cm-fat-cursor":{background:"none",outline:"solid 1px #ff9696",color:"transparent !important"}};var hideNativeSelection=state.Prec.highest(view.EditorView.theme(themeSpec));function getBase(view$1){var rect=view$1.scrollDOM.getBoundingClientRect();var left=view$1.textDirection==view.Direction.LTR?rect.left:rect.right-view$1.scrollDOM.clientWidth;return{left:left-view$1.scrollDOM.scrollLeft,top:rect.top-view$1.scrollDOM.scrollTop};}function measureCursor(cm,view,cursor,primary){var head=cursor.head;var fatCursor=false;var hCoeff=1;var vim=cm.state.vim;if(vim&&(!vim.insertMode||cm.state.overwrite)){fatCursor=true;if(vim.visualBlock&&!primary)return null;if(cursor.anchor<cursor.head)head--;if(cm.state.overwrite)hCoeff=0.2;else if(vim.status)hCoeff=0.5;}if(fatCursor){var letter=head<view.state.doc.length&&view.state.sliceDoc(head,head+1);if(letter&&/[\uDC00-\uDFFF]/.test(letter)&&head>1){head--;letter=view.state.sliceDoc(head,head+1);}var pos=view.coordsAtPos(head,1);if(!pos)return null;var base=getBase(view);var domAtPos=view.domAtPos(head);var node=domAtPos?domAtPos.node:view.contentDOM;while(domAtPos&&domAtPos.node instanceof HTMLElement){node=domAtPos.node;domAtPos={node:domAtPos.node.childNodes[domAtPos.offset],offset:0};}if(!(node instanceof HTMLElement)){if(!node.parentNode)return null;node=node.parentNode;}var style=getComputedStyle(node);var left=pos.left;if(!letter||letter=="\n"||letter=="\r"){letter="\xa0";}else if(letter=="\t"){letter="\xa0";var nextPos=view.coordsAtPos(head+1,-1);if(nextPos){left=nextPos.left-(nextPos.left-pos.left)/parseInt(style.tabSize);}}else if(/[\uD800-\uDBFF]/.test(letter)&&head<view.state.doc.length-1){letter+=view.state.sliceDoc(head+1,head+2);}var h=pos.bottom-pos.top;return new Piece(left-base.left,pos.top-base.top+h*(1-hCoeff),h*hCoeff,style.fontFamily,style.fontSize,style.fontWeight,style.color,primary?"cm-fat-cursor cm-cursor-primary":"cm-fat-cursor cm-cursor-secondary",letter,hCoeff!=1);}else{return null;}}var FIREFOX_LINUX=typeof navigator!="undefined"&&/linux/i.test(navigator.platform)&&/ Gecko\/\d+/.exec(navigator.userAgent);var Vim=initVim(CodeMirror);var HighlightMargin=250;var vimStyle=view.EditorView.baseTheme({".cm-vimMode .cm-cursorLayer:not(.cm-vimCursorLayer)":{display:"none"},".cm-vim-panel":{padding:"0px 10px",fontFamily:"monospace",minHeight:"1.3em"},".cm-vim-panel input":{border:"none",outline:"none",backgroundColor:"inherit"},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"}});var vimPlugin=view.ViewPlugin.fromClass(function(){function _class(view$1){var _this4=this;(0,_classCallCheck2.default)(this,_class);this.status="";this.query=null;this.decorations=view.Decoration.none;this.waitForCopy=false;this.lastKeydown='';this.useNextTextInput=false;this.view=view$1;var cm=this.cm=new CodeMirror(view$1);Vim.enterVimMode(this.cm);this.view.cm=this.cm;this.cm.state.vimPlugin=this;this.blockCursor=new BlockCursorPlugin(view$1,cm);this.updateClass();this.cm.on("vim-command-done",function(){if(cm.state.vim)cm.state.vim.status="";_this4.blockCursor.scheduleRedraw();_this4.updateStatus();});this.cm.on("vim-mode-change",function(e){cm.state.vim.mode=e.mode;if(e.subMode){cm.state.vim.mode+=" block";}cm.state.vim.status="";_this4.blockCursor.scheduleRedraw();_this4.updateClass();_this4.updateStatus();});this.cm.on("dialog",function(){if(_this4.cm.state.statusbar){_this4.updateStatus();}else{view$1.dispatch({effects:showVimPanel.of(!!_this4.cm.state.dialog)});}});this.dom=document.createElement("span");this.dom.style.cssText="position: absolute; right: 10px; top: 1px";this.statusButton=document.createElement("span");this.statusButton.onclick=function(e){Vim.handleKey(_this4.cm,"<Esc>","user");_this4.cm.focus();};this.statusButton.style.cssText="cursor: pointer";}(0,_createClass2.default)(_class,[{key:"update",value:function update(_update2){var _a;if((_update2.viewportChanged||_update2.docChanged)&&this.query){this.highlight(this.query);}if(_update2.docChanged){this.cm.onChange(_update2);}if(_update2.selectionSet){this.cm.onSelectionChange();}if(_update2.viewportChanged);if(this.cm.curOp&&!this.cm.curOp.isVimOp){this.cm.onBeforeEndOperation();}if(_update2.transactions){for(var tr of _update2.transactions)for(var effect of tr.effects){if(effect.is(search.setSearchQuery)){var forVim=(_a=effect.value)===null||_a===void 0?void 0:_a.forVim;if(!forVim){this.highlight(null);}else{var query=effect.value.create();this.highlight(query);}}}}this.blockCursor.update(_update2);}},{key:"updateClass",value:function updateClass(){var state=this.cm.state;if(!state.vim||state.vim.insertMode&&!state.overwrite)this.view.scrollDOM.classList.remove("cm-vimMode");else this.view.scrollDOM.classList.add("cm-vimMode");}},{key:"updateStatus",value:function updateStatus(){var dom=this.cm.state.statusbar;var vim=this.cm.state.vim;if(!dom||!vim)return;var dialog=this.cm.state.dialog;if(dialog){if(dialog.parentElement!=dom){dom.textContent="";dom.appendChild(dialog);}}else{dom.textContent="";var status=(vim.mode||"normal").toUpperCase();if(vim.insertModeReturn)status+="(C-O)";this.statusButton.textContent="--"+status+"--";dom.appendChild(this.statusButton);}this.dom.textContent=vim.status;dom.appendChild(this.dom);}},{key:"destroy",value:function destroy(){Vim.leaveVimMode(this.cm);this.updateClass();this.blockCursor.destroy();delete this.view.cm;}},{key:"highlight",value:function highlight(query){this.query=query;if(!query)return this.decorations=view.Decoration.none;var view$1=this.view;var builder=new state.RangeSetBuilder();for(var i=0,ranges=view$1.visibleRanges,l=ranges.length;i<l;i++){var _ranges$i=ranges[i],from=_ranges$i.from,to=_ranges$i.to;while(i<l-1&&to>ranges[i+1].from-2*HighlightMargin)to=ranges[++i].to;query.highlight(view$1.state,from,to,function(from,to){builder.add(from,to,matchMark);});}return this.decorations=builder.finish();}},{key:"handleKey",value:function handleKey(e,view){var key=CodeMirror.vimKey(e);var cm=this.cm;if(!key)return;var vim=cm.state.vim;if(!vim)return;if(key=="<Esc>"&&!vim.insertMode&&!vim.visualMode&&this.query){var searchState=vim.searchState_;if(searchState){cm.removeOverlay(searchState.getOverlay());searchState.setOverlay(null);}}var isCopy=key==="<C-c>"&&!CodeMirror.isMac;if(isCopy&&cm.somethingSelected()){this.waitForCopy=true;return true;}vim.status=(vim.status||"")+key;var result=Vim.multiSelectHandleKey(cm,key,"user");vim=cm.state.vim;if(!result&&vim.insertMode&&cm.state.overwrite){if(e.key&&e.key.length==1&&!/\n/.test(e.key)){result=true;cm.overWriteSelection(e.key);}else if(e.key=="Backspace"){result=true;CodeMirror.commands.cursorCharLeft(cm);}}if(result){CodeMirror.signal(this.cm,'vim-keypress',key);e.preventDefault();e.stopPropagation();this.blockCursor.scheduleRedraw();}this.updateStatus();return!!result;}}]);return _class;}(),{eventHandlers:{copy:function copy(e,view){var _this5=this;if(!this.waitForCopy)return;this.waitForCopy=false;Promise.resolve().then(function(){var cm=_this5.cm;var vim=cm.state.vim;if(!vim)return;if(vim.insertMode){cm.setSelection(cm.getCursor(),cm.getCursor());}else{cm.operation(function(){if(cm.curOp)cm.curOp.isVimOp=true;Vim.handleKey(cm,'<Esc>','user');});}});},compositionstart:function compositionstart(e,view){this.useNextTextInput=true;},keypress:function keypress(e,view){if(this.lastKeydown=="Dead")this.handleKey(e,view);},keydown:function keydown(e,view){this.lastKeydown=e.key;if(this.lastKeydown=="Unidentified"||this.lastKeydown=="Process"||this.lastKeydown=="Dead"){this.useNextTextInput=true;}else{this.useNextTextInput=false;this.handleKey(e,view);}}},provide:function provide(){return[view.EditorView.inputHandler.of(function(view,from,to,text){var _a,_b;var cm=getCM(view);if(!cm)return false;var vim=(_a=cm.state)===null||_a===void 0?void 0:_a.vim;var vimPlugin=cm.state.vimPlugin;if(vim&&!vim.insertMode&&!((_b=cm.curOp)===null||_b===void 0?void 0:_b.isVimOp)){if(text==="\0\0"){return true;}if(text.length==1&&vimPlugin.useNextTextInput){vimPlugin.handleKey({key:text,preventDefault:function preventDefault(){},stopPropagation:function stopPropagation(){}});}forceEndComposition(view);return true;}return false;})];},decorations:function decorations(v){return v.decorations;}});function forceEndComposition(view){var parent=view.scrollDOM.parentElement;if(!parent)return;if(FIREFOX_LINUX){view.contentDOM.textContent="\0\0";view.contentDOM.dispatchEvent(new CustomEvent("compositionend"));return;}var sibling=view.scrollDOM.nextSibling;var selection=window.getSelection();var savedSelection=selection&&{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};view.scrollDOM.remove();parent.insertBefore(view.scrollDOM,sibling);try{if(savedSelection&&selection){selection.setPosition(savedSelection.anchorNode,savedSelection.anchorOffset);if(savedSelection.focusNode){selection.extend(savedSelection.focusNode,savedSelection.focusOffset);}}}catch(e){console.error(e);}view.focus();view.contentDOM.dispatchEvent(new CustomEvent("compositionend"));}var matchMark=view.Decoration.mark({class:"cm-searchMatch"});var showVimPanel=state.StateEffect.define();var vimPanelState=state.StateField.define({create:function create(){return false;},update:function update(value,tr){for(var e of tr.effects)if(e.is(showVimPanel))value=e.value;return value;},provide:function provide(f){return view.showPanel.from(f,function(on){return on?createVimPanel:null;});}});function createVimPanel(view){var dom=document.createElement("div");dom.className="cm-vim-panel";var cm=view.cm;if(cm.state.dialog){dom.appendChild(cm.state.dialog);}return{top:false,dom:dom};}function statusPanel(view){var dom=document.createElement("div");dom.className="cm-vim-panel";var cm=view.cm;cm.state.statusbar=dom;cm.state.vimPlugin.updateStatus();return{dom:dom};}function vim(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return[vimStyle,vimPlugin,hideNativeSelection,options.status?view.showPanel.of(statusPanel):vimPanelState];}function getCM(view){return view.cm||null;}exports.CodeMirror=CodeMirror;exports.Vim=Vim;exports.getCM=getCM;exports.vim=vim;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/classCallCheck.js":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/classCallCheck.js ***!
	  \***********************************************************************/
	/***/ (function(module) {
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	  }
	}
	module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/createClass.js":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/createClass.js ***!
	  \********************************************************************/
	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {
	
	var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ "../editor/node_modules/@babel/runtime/helpers/toPropertyKey.js");
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
		var descriptor = props[i];
		descriptor.enumerable = descriptor.enumerable || false;
		descriptor.configurable = true;
		if ("value" in descriptor) descriptor.writable = true;
		Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
		writable: false
	  });
	  return Constructor;
	}
	module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
	/*!******************************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
	  \******************************************************************************/
	/***/ (function(module) {
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
		"default": obj
	  };
	}
	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/toPrimitive.js":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/toPrimitive.js ***!
	  \********************************************************************/
	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {
	
	var _typeof = (__webpack_require__(/*! ./typeof.js */ "../editor/node_modules/@babel/runtime/helpers/typeof.js")["default"]);
	function _toPrimitive(input, hint) {
	  if (_typeof(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
		var res = prim.call(input, hint || "default");
		if (_typeof(res) !== "object") return res;
		throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}
	module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/toPropertyKey.js":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
	  \**********************************************************************/
	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {
	
	var _typeof = (__webpack_require__(/*! ./typeof.js */ "../editor/node_modules/@babel/runtime/helpers/typeof.js")["default"]);
	var toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ "../editor/node_modules/@babel/runtime/helpers/toPrimitive.js");
	function _toPropertyKey(arg) {
	  var key = toPrimitive(arg, "string");
	  return _typeof(key) === "symbol" ? key : String(key);
	}
	module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@babel/runtime/helpers/typeof.js":
	/*!***************************************************************!*\
	  !*** ../editor/node_modules/@babel/runtime/helpers/typeof.js ***!
	  \***************************************************************/
	/***/ (function(module) {
	
	function _typeof(obj) {
	  "@babel/helpers - typeof";
	
	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
		return typeof obj;
	  } : function (obj) {
		return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
	}
	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/autocomplete/dist/index.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	An instance of this is passed to completion source functions.
	*/
	class CompletionContext {
		/**
		Create a new completion context. (Mostly useful for testing
		completion sources—in the editor, the extension will create
		these for you.)
		*/
		constructor(
		/**
		The editor state that the completion happens in.
		*/
		state, 
		/**
		The position at which the completion is happening.
		*/
		pos, 
		/**
		Indicates whether completion was activated explicitly, or
		implicitly by typing. The usual way to respond to this is to
		only return completions when either there is part of a
		completable entity before the cursor, or `explicit` is true.
		*/
		explicit) {
			this.state = state;
			this.pos = pos;
			this.explicit = explicit;
			/**
			@internal
			*/
			this.abortListeners = [];
		}
		/**
		Get the extent, content, and (if there is a token) type of the
		token before `this.pos`.
		*/
		tokenBefore(types) {
			let token = language.syntaxTree(this.state).resolveInner(this.pos, -1);
			while (token && types.indexOf(token.name) < 0)
				token = token.parent;
			return token ? { from: token.from, to: this.pos,
				text: this.state.sliceDoc(token.from, this.pos),
				type: token.type } : null;
		}
		/**
		Get the match of the given expression directly before the
		cursor.
		*/
		matchBefore(expr) {
			let line = this.state.doc.lineAt(this.pos);
			let start = Math.max(line.from, this.pos - 250);
			let str = line.text.slice(start - line.from, this.pos - line.from);
			let found = str.search(ensureAnchor(expr, false));
			return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
		}
		/**
		Yields true when the query has been aborted. Can be useful in
		asynchronous queries to avoid doing work that will be ignored.
		*/
		get aborted() { return this.abortListeners == null; }
		/**
		Allows you to register abort handlers, which will be called when
		the query is
		[aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
		*/
		addEventListener(type, listener) {
			if (type == "abort" && this.abortListeners)
				this.abortListeners.push(listener);
		}
	}
	function toSet(chars) {
		let flat = Object.keys(chars).join("");
		let words = /\w/.test(flat);
		if (words)
			flat = flat.replace(/\w/g, "");
		return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
	}
	function prefixMatch(options) {
		let first = Object.create(null), rest = Object.create(null);
		for (let { label } of options) {
			first[label[0]] = true;
			for (let i = 1; i < label.length; i++)
				rest[label[i]] = true;
		}
		let source = toSet(first) + toSet(rest) + "*$";
		return [new RegExp("^" + source), new RegExp(source)];
	}
	/**
	Given a a fixed array of options, return an autocompleter that
	completes them.
	*/
	function completeFromList(list) {
		let options = list.map(o => typeof o == "string" ? { label: o } : o);
		let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
		return (context) => {
			let token = context.matchBefore(match);
			return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
		};
	}
	/**
	Wrap the given completion source so that it will only fire when the
	cursor is in a syntax node with one of the given names.
	*/
	function ifIn(nodes, source) {
		return (context) => {
			for (let pos = language.syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
				if (nodes.indexOf(pos.name) > -1)
					return source(context);
				if (pos.type.isTop)
					break;
			}
			return null;
		};
	}
	/**
	Wrap the given completion source so that it will not fire when the
	cursor is in a syntax node with one of the given names.
	*/
	function ifNotIn(nodes, source) {
		return (context) => {
			for (let pos = language.syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
				if (nodes.indexOf(pos.name) > -1)
					return null;
				if (pos.type.isTop)
					break;
			}
			return source(context);
		};
	}
	class Option {
		constructor(completion, source, match, score) {
			this.completion = completion;
			this.source = source;
			this.match = match;
			this.score = score;
		}
	}
	function cur(state) { return state.selection.main.from; }
	// Make sure the given regexp has a $ at its end and, if `start` is
	// true, a ^ at its start.
	function ensureAnchor(expr, start) {
		var _a;
		let { source } = expr;
		let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
		if (!addStart && !addEnd)
			return expr;
		return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
	}
	/**
	This annotation is added to transactions that are produced by
	picking a completion.
	*/
	const pickedCompletion = state.Annotation.define();
	/**
	Helper function that returns a transaction spec which inserts a
	completion's text in the main selection range, and any other
	selection range that has the same text in front of it.
	*/
	function insertCompletionText(state$1, text, from, to) {
		let { main } = state$1.selection, fromOff = from - main.from, toOff = to - main.from;
		return Object.assign(Object.assign({}, state$1.changeByRange(range => {
			if (range != main && from != to &&
				state$1.sliceDoc(range.from + fromOff, range.from + toOff) != state$1.sliceDoc(from, to))
				return { range };
			return {
				changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },
				range: state.EditorSelection.cursor(range.from + fromOff + text.length)
			};
		})), { scrollIntoView: true, userEvent: "input.complete" });
	}
	const SourceCache = new WeakMap();
	function asSource(source) {
		if (!Array.isArray(source))
			return source;
		let known = SourceCache.get(source);
		if (!known)
			SourceCache.set(source, known = completeFromList(source));
		return known;
	}
	const startCompletionEffect = state.StateEffect.define();
	const closeCompletionEffect = state.StateEffect.define();
	
	// A pattern matcher for fuzzy completion matching. Create an instance
	// once for a pattern, and then use that to match any number of
	// completions.
	class FuzzyMatcher {
		constructor(pattern) {
			this.pattern = pattern;
			this.chars = [];
			this.folded = [];
			// Buffers reused by calls to `match` to track matched character
			// positions.
			this.any = [];
			this.precise = [];
			this.byWord = [];
			this.score = 0;
			this.matched = [];
			for (let p = 0; p < pattern.length;) {
				let char = state.codePointAt(pattern, p), size = state.codePointSize(char);
				this.chars.push(char);
				let part = pattern.slice(p, p + size), upper = part.toUpperCase();
				this.folded.push(state.codePointAt(upper == part ? part.toLowerCase() : upper, 0));
				p += size;
			}
			this.astral = pattern.length != this.chars.length;
		}
		ret(score, matched) {
			this.score = score;
			this.matched = matched;
			return true;
		}
		// Matches a given word (completion) against the pattern (input).
		// Will return a boolean indicating whether there was a match and,
		// on success, set `this.score` to the score, `this.matched` to an
		// array of `from, to` pairs indicating the matched parts of `word`.
		//
		// The score is a number that is more negative the worse the match
		// is. See `Penalty` above.
		match(word) {
			if (this.pattern.length == 0)
				return this.ret(-100 /* Penalty.NotFull */, []);
			if (word.length < this.pattern.length)
				return false;
			let { chars, folded, any, precise, byWord } = this;
			// For single-character queries, only match when they occur right
			// at the start
			if (chars.length == 1) {
				let first = state.codePointAt(word, 0), firstSize = state.codePointSize(first);
				let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
				if (first == chars[0]) ;
				else if (first == folded[0])
					score += -200 /* Penalty.CaseFold */;
				else
					return false;
				return this.ret(score, [0, firstSize]);
			}
			let direct = word.indexOf(this.pattern);
			if (direct == 0)
				return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
			let len = chars.length, anyTo = 0;
			if (direct < 0) {
				for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
					let next = state.codePointAt(word, i);
					if (next == chars[anyTo] || next == folded[anyTo])
						any[anyTo++] = i;
					i += state.codePointSize(next);
				}
				// No match, exit immediately
				if (anyTo < len)
					return false;
			}
			// This tracks the extent of the precise (non-folded, not
			// necessarily adjacent) match
			let preciseTo = 0;
			// Tracks whether there is a match that hits only characters that
			// appear to be starting words. `byWordFolded` is set to true when
			// a case folded character is encountered in such a match
			let byWordTo = 0, byWordFolded = false;
			// If we've found a partial adjacent match, these track its state
			let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
			let hasLower = /[a-z]/.test(word), wordAdjacent = true;
			// Go over the option's text, scanning for the various kinds of matches
			for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
				let next = state.codePointAt(word, i);
				if (direct < 0) {
					if (preciseTo < len && next == chars[preciseTo])
						precise[preciseTo++] = i;
					if (adjacentTo < len) {
						if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
							if (adjacentTo == 0)
								adjacentStart = i;
							adjacentEnd = i + 1;
							adjacentTo++;
						}
						else {
							adjacentTo = 0;
						}
					}
				}
				let ch, type = next < 0xff
					? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
					: ((ch = state.fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
				if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
					if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
						byWord[byWordTo++] = i;
					else if (byWord.length)
						wordAdjacent = false;
				}
				prevType = type;
				i += state.codePointSize(next);
			}
			if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
				return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
			if (adjacentTo == len && adjacentStart == 0)
				return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
			if (direct > -1)
				return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
			if (adjacentTo == len)
				return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
			if (byWordTo == len)
				return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
					(wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
			return chars.length == 2 ? false
				: this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
		}
		result(score, positions, word) {
			let result = [], i = 0;
			for (let pos of positions) {
				let to = pos + (this.astral ? state.codePointSize(state.codePointAt(word, pos)) : 1);
				if (i && result[i - 1] == pos)
					result[i - 1] = to;
				else {
					result[i++] = pos;
					result[i++] = to;
				}
			}
			return this.ret(score - word.length, result);
		}
	}
	
	const completionConfig = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				activateOnTyping: true,
				selectOnOpen: true,
				override: null,
				closeOnBlur: true,
				maxRenderedOptions: 100,
				defaultKeymap: true,
				tooltipClass: () => "",
				optionClass: () => "",
				aboveCursor: false,
				icons: true,
				addToOptions: [],
				positionInfo: defaultPositionInfo,
				compareCompletions: (a, b) => a.label.localeCompare(b.label),
				interactionDelay: 75,
				updateSyncTime: 100
			}, {
				defaultKeymap: (a, b) => a && b,
				closeOnBlur: (a, b) => a && b,
				icons: (a, b) => a && b,
				tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
				optionClass: (a, b) => c => joinClass(a(c), b(c)),
				addToOptions: (a, b) => a.concat(b)
			});
		}
	});
	function joinClass(a, b) {
		return a ? b ? a + " " + b : a : b;
	}
	function defaultPositionInfo(view$1, list, option, info, space, tooltip) {
		let rtl = view$1.textDirection == view.Direction.RTL, left = rtl, narrow = false;
		let side = "top", offset, maxWidth;
		let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
		let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
		if (left && spaceLeft < Math.min(infoWidth, spaceRight))
			left = false;
		else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
			left = true;
		if (infoWidth <= (left ? spaceLeft : spaceRight)) {
			offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
			maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
		}
		else {
			narrow = true;
			maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
			let spaceBelow = space.bottom - list.bottom;
			if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
				offset = option.bottom - list.top;
			}
			else { // Above it
				side = "bottom";
				offset = list.bottom - option.top;
			}
		}
		let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
		let scaleX = (list.right - list.left) / tooltip.offsetWidth;
		return {
			style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
			class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
		};
	}
	
	function optionContent(config) {
		let content = config.addToOptions.slice();
		if (config.icons)
			content.push({
				render(completion) {
					let icon = document.createElement("div");
					icon.classList.add("cm-completionIcon");
					if (completion.type)
						icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
					icon.setAttribute("aria-hidden", "true");
					return icon;
				},
				position: 20
			});
		content.push({
			render(completion, _s, _v, match) {
				let labelElt = document.createElement("span");
				labelElt.className = "cm-completionLabel";
				let label = completion.displayLabel || completion.label, off = 0;
				for (let j = 0; j < match.length;) {
					let from = match[j++], to = match[j++];
					if (from > off)
						labelElt.appendChild(document.createTextNode(label.slice(off, from)));
					let span = labelElt.appendChild(document.createElement("span"));
					span.appendChild(document.createTextNode(label.slice(from, to)));
					span.className = "cm-completionMatchedText";
					off = to;
				}
				if (off < label.length)
					labelElt.appendChild(document.createTextNode(label.slice(off)));
				return labelElt;
			},
			position: 50
		}, {
			render(completion) {
				if (!completion.detail)
					return null;
				let detailElt = document.createElement("span");
				detailElt.className = "cm-completionDetail";
				detailElt.textContent = completion.detail;
				return detailElt;
			},
			position: 80
		});
		return content.sort((a, b) => a.position - b.position).map(a => a.render);
	}
	function rangeAroundSelected(total, selected, max) {
		if (total <= max)
			return { from: 0, to: total };
		if (selected < 0)
			selected = 0;
		if (selected <= (total >> 1)) {
			let off = Math.floor(selected / max);
			return { from: off * max, to: (off + 1) * max };
		}
		let off = Math.floor((total - selected) / max);
		return { from: total - (off + 1) * max, to: total - off * max };
	}
	class CompletionTooltip {
		constructor(view, stateField, applyCompletion) {
			this.view = view;
			this.stateField = stateField;
			this.applyCompletion = applyCompletion;
			this.info = null;
			this.infoDestroy = null;
			this.placeInfoReq = {
				read: () => this.measureInfo(),
				write: (pos) => this.placeInfo(pos),
				key: this
			};
			this.space = null;
			this.currentClass = "";
			let cState = view.state.field(stateField);
			let { options, selected } = cState.open;
			let config = view.state.facet(completionConfig);
			this.optionContent = optionContent(config);
			this.optionClass = config.optionClass;
			this.tooltipClass = config.tooltipClass;
			this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
			this.dom = document.createElement("div");
			this.dom.className = "cm-tooltip-autocomplete";
			this.updateTooltipClass(view.state);
			this.dom.addEventListener("mousedown", (e) => {
				let { options } = view.state.field(stateField).open;
				for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
					if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
						this.applyCompletion(view, options[+match[1]]);
						e.preventDefault();
						return;
					}
				}
			});
			this.dom.addEventListener("focusout", (e) => {
				let state = view.state.field(this.stateField, false);
				if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
					e.relatedTarget != view.contentDOM)
					view.dispatch({ effects: closeCompletionEffect.of(null) });
			});
			this.showOptions(options, cState.id);
		}
		mount() { this.updateSel(); }
		showOptions(options, id) {
			if (this.list)
				this.list.remove();
			this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
			this.list.addEventListener("scroll", () => {
				if (this.info)
					this.view.requestMeasure(this.placeInfoReq);
			});
		}
		update(update) {
			var _a;
			let cState = update.state.field(this.stateField);
			let prevState = update.startState.field(this.stateField);
			this.updateTooltipClass(update.state);
			if (cState != prevState) {
				let { options, selected, disabled } = cState.open;
				if (!prevState.open || prevState.open.options != options) {
					this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
					this.showOptions(options, cState.id);
				}
				this.updateSel();
				if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))
					this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
			}
		}
		updateTooltipClass(state) {
			let cls = this.tooltipClass(state);
			if (cls != this.currentClass) {
				for (let c of this.currentClass.split(" "))
					if (c)
						this.dom.classList.remove(c);
				for (let c of cls.split(" "))
					if (c)
						this.dom.classList.add(c);
				this.currentClass = cls;
			}
		}
		positioned(space) {
			this.space = space;
			if (this.info)
				this.view.requestMeasure(this.placeInfoReq);
		}
		updateSel() {
			let cState = this.view.state.field(this.stateField), open = cState.open;
			if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
				this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
				this.showOptions(open.options, cState.id);
			}
			if (this.updateSelectedOption(open.selected)) {
				this.destroyInfo();
				let { completion } = open.options[open.selected];
				let { info } = completion;
				if (!info)
					return;
				let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
				if (!infoResult)
					return;
				if ("then" in infoResult) {
					infoResult.then(obj => {
						if (obj && this.view.state.field(this.stateField, false) == cState)
							this.addInfoPane(obj, completion);
					}).catch(e => view.logException(this.view.state, e, "completion info"));
				}
				else {
					this.addInfoPane(infoResult, completion);
				}
			}
		}
		addInfoPane(content, completion) {
			this.destroyInfo();
			let wrap = this.info = document.createElement("div");
			wrap.className = "cm-tooltip cm-completionInfo";
			if (content.nodeType != null) {
				wrap.appendChild(content);
				this.infoDestroy = null;
			}
			else {
				let { dom, destroy } = content;
				wrap.appendChild(dom);
				this.infoDestroy = destroy || null;
			}
			this.dom.appendChild(wrap);
			this.view.requestMeasure(this.placeInfoReq);
		}
		updateSelectedOption(selected) {
			let set = null;
			for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
				if (opt.nodeName != "LI" || !opt.id) {
					i--; // A section header
				}
				else if (i == selected) {
					if (!opt.hasAttribute("aria-selected")) {
						opt.setAttribute("aria-selected", "true");
						set = opt;
					}
				}
				else {
					if (opt.hasAttribute("aria-selected"))
						opt.removeAttribute("aria-selected");
				}
			}
			if (set)
				scrollIntoView(this.list, set);
			return set;
		}
		measureInfo() {
			let sel = this.dom.querySelector("[aria-selected]");
			if (!sel || !this.info)
				return null;
			let listRect = this.dom.getBoundingClientRect();
			let infoRect = this.info.getBoundingClientRect();
			let selRect = sel.getBoundingClientRect();
			let space = this.space;
			if (!space) {
				let win = this.dom.ownerDocument.defaultView || window;
				space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
			}
			if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
				selRect.bottom < Math.max(space.top, listRect.top) + 10)
				return null;
			return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
		}
		placeInfo(pos) {
			if (this.info) {
				if (pos) {
					if (pos.style)
						this.info.style.cssText = pos.style;
					this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
				}
				else {
					this.info.style.cssText = "top: -1e6px";
				}
			}
		}
		createListBox(options, id, range) {
			const ul = document.createElement("ul");
			ul.id = id;
			ul.setAttribute("role", "listbox");
			ul.setAttribute("aria-expanded", "true");
			ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
			let curSection = null;
			for (let i = range.from; i < range.to; i++) {
				let { completion, match } = options[i], { section } = completion;
				if (section) {
					let name = typeof section == "string" ? section : section.name;
					if (name != curSection && (i > range.from || range.from == 0)) {
						curSection = name;
						if (typeof section != "string" && section.header) {
							ul.appendChild(section.header(section));
						}
						else {
							let header = ul.appendChild(document.createElement("completion-section"));
							header.textContent = name;
						}
					}
				}
				const li = ul.appendChild(document.createElement("li"));
				li.id = id + "-" + i;
				li.setAttribute("role", "option");
				let cls = this.optionClass(completion);
				if (cls)
					li.className = cls;
				for (let source of this.optionContent) {
					let node = source(completion, this.view.state, this.view, match);
					if (node)
						li.appendChild(node);
				}
			}
			if (range.from)
				ul.classList.add("cm-completionListIncompleteTop");
			if (range.to < options.length)
				ul.classList.add("cm-completionListIncompleteBottom");
			return ul;
		}
		destroyInfo() {
			if (this.info) {
				if (this.infoDestroy)
					this.infoDestroy();
				this.info.remove();
				this.info = null;
			}
		}
		destroy() {
			this.destroyInfo();
		}
	}
	function completionTooltip(stateField, applyCompletion) {
		return (view) => new CompletionTooltip(view, stateField, applyCompletion);
	}
	function scrollIntoView(container, element) {
		let parent = container.getBoundingClientRect();
		let self = element.getBoundingClientRect();
		let scaleY = parent.height / container.offsetHeight;
		if (self.top < parent.top)
			container.scrollTop -= (parent.top - self.top) / scaleY;
		else if (self.bottom > parent.bottom)
			container.scrollTop += (self.bottom - parent.bottom) / scaleY;
	}
	
	// Used to pick a preferred option when two options with the same
	// label occur in the result.
	function score(option) {
		return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
			(option.type ? 1 : 0);
	}
	function sortOptions(active, state) {
		let options = [];
		let sections = null;
		let addOption = (option) => {
			options.push(option);
			let { section } = option.completion;
			if (section) {
				if (!sections)
					sections = [];
				let name = typeof section == "string" ? section : section.name;
				if (!sections.some(s => s.name == name))
					sections.push(typeof section == "string" ? { name } : section);
			}
		};
		for (let a of active)
			if (a.hasResult()) {
				let getMatch = a.result.getMatch;
				if (a.result.filter === false) {
					for (let option of a.result.options) {
						addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
					}
				}
				else {
					let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to));
					for (let option of a.result.options)
						if (matcher.match(option.label)) {
							let matched = !option.displayLabel ? matcher.matched : getMatch ? getMatch(option, matcher.matched) : [];
							addOption(new Option(option, a.source, matched, matcher.score + (option.boost || 0)));
						}
				}
			}
		if (sections) {
			let sectionOrder = Object.create(null), pos = 0;
			let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
			for (let s of sections.sort(cmp)) {
				pos -= 1e5;
				sectionOrder[s.name] = pos;
			}
			for (let option of options) {
				let { section } = option.completion;
				if (section)
					option.score += sectionOrder[typeof section == "string" ? section : section.name];
			}
		}
		let result = [], prev = null;
		let compare = state.facet(completionConfig).compareCompletions;
		for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
			let cur = opt.completion;
			if (!prev || prev.label != cur.label || prev.detail != cur.detail ||
				(prev.type != null && cur.type != null && prev.type != cur.type) ||
				prev.apply != cur.apply || prev.boost != cur.boost)
				result.push(opt);
			else if (score(opt.completion) > score(prev))
				result[result.length - 1] = opt;
			prev = opt.completion;
		}
		return result;
	}
	class CompletionDialog {
		constructor(options, attrs, tooltip, timestamp, selected, disabled) {
			this.options = options;
			this.attrs = attrs;
			this.tooltip = tooltip;
			this.timestamp = timestamp;
			this.selected = selected;
			this.disabled = disabled;
		}
		setSelected(selected, id) {
			return selected == this.selected || selected >= this.options.length ? this
				: new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
		}
		static build(active, state, id, prev, conf) {
			let options = sortOptions(active, state);
			if (!options.length) {
				return prev && active.some(a => a.state == 1 /* State.Pending */) ?
					new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
			}
			let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
			if (prev && prev.selected != selected && prev.selected != -1) {
				let selectedValue = prev.options[prev.selected].completion;
				for (let i = 0; i < options.length; i++)
					if (options[i].completion == selectedValue) {
						selected = i;
						break;
					}
			}
			return new CompletionDialog(options, makeAttrs(id, selected), {
				pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
				create: createTooltip,
				above: conf.aboveCursor,
			}, prev ? prev.timestamp : Date.now(), selected, false);
		}
		map(changes) {
			return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
		}
	}
	class CompletionState {
		constructor(active, id, open) {
			this.active = active;
			this.id = id;
			this.open = open;
		}
		static start() {
			return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
		}
		update(tr) {
			let { state } = tr, conf = state.facet(completionConfig);
			let sources = conf.override ||
				state.languageDataAt("autocomplete", cur(state)).map(asSource);
			let active = sources.map(source => {
				let value = this.active.find(s => s.source == source) ||
					new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
				return value.update(tr, conf);
			});
			if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
				active = this.active;
			let open = this.open;
			if (open && tr.docChanged)
				open = open.map(tr.changes);
			if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
				!sameResults(active, this.active))
				open = CompletionDialog.build(active, state, this.id, open, conf);
			else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */))
				open = null;
			if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult()))
				active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
			for (let effect of tr.effects)
				if (effect.is(setSelectedEffect))
					open = open && open.setSelected(effect.value, this.id);
			return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
		}
		get tooltip() { return this.open ? this.open.tooltip : null; }
		get attrs() { return this.open ? this.open.attrs : baseAttrs; }
	}
	function sameResults(a, b) {
		if (a == b)
			return true;
		for (let iA = 0, iB = 0;;) {
			while (iA < a.length && !a[iA].hasResult)
				iA++;
			while (iB < b.length && !b[iB].hasResult)
				iB++;
			let endA = iA == a.length, endB = iB == b.length;
			if (endA || endB)
				return endA == endB;
			if (a[iA++].result != b[iB++].result)
				return false;
		}
	}
	const baseAttrs = {
		"aria-autocomplete": "list"
	};
	function makeAttrs(id, selected) {
		let result = {
			"aria-autocomplete": "list",
			"aria-haspopup": "listbox",
			"aria-controls": id
		};
		if (selected > -1)
			result["aria-activedescendant"] = id + "-" + selected;
		return result;
	}
	const none = [];
	function getUserEvent(tr) {
		return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
	}
	class ActiveSource {
		constructor(source, state, explicitPos = -1) {
			this.source = source;
			this.state = state;
			this.explicitPos = explicitPos;
		}
		hasResult() { return false; }
		update(tr, conf) {
			let event = getUserEvent(tr), value = this;
			if (event)
				value = value.handleUserEvent(tr, event, conf);
			else if (tr.docChanged)
				value = value.handleChange(tr);
			else if (tr.selection && value.state != 0 /* State.Inactive */)
				value = new ActiveSource(value.source, 0 /* State.Inactive */);
			for (let effect of tr.effects) {
				if (effect.is(startCompletionEffect))
					value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);
				else if (effect.is(closeCompletionEffect))
					value = new ActiveSource(value.source, 0 /* State.Inactive */);
				else if (effect.is(setActiveEffect))
					for (let active of effect.value)
						if (active.source == value.source)
							value = active;
			}
			return value;
		}
		handleUserEvent(tr, type, conf) {
			return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
		}
		handleChange(tr) {
			return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
		}
		map(changes) {
			return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
		}
	}
	class ActiveResult extends ActiveSource {
		constructor(source, explicitPos, result, from, to) {
			super(source, 2 /* State.Result */, explicitPos);
			this.result = result;
			this.from = from;
			this.to = to;
		}
		hasResult() { return true; }
		handleUserEvent(tr, type, conf) {
			var _a;
			let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
			let pos = cur(tr.state);
			if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
				pos > to ||
				type == "delete" && cur(tr.startState) == this.from)
				return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
			let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
			if (checkValid(this.result.validFor, tr.state, from, to))
				return new ActiveResult(this.source, explicitPos, this.result, from, to);
			if (this.result.update &&
				(updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
				return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
			return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
		}
		handleChange(tr) {
			return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
		}
		map(mapping) {
			return mapping.empty ? this :
				new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
		}
	}
	function checkValid(validFor, state, from, to) {
		if (!validFor)
			return false;
		let text = state.sliceDoc(from, to);
		return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
	}
	const setActiveEffect = state.StateEffect.define({
		map(sources, mapping) { return sources.map(s => s.map(mapping)); }
	});
	const setSelectedEffect = state.StateEffect.define();
	const completionState = state.StateField.define({
		create() { return CompletionState.start(); },
		update(value, tr) { return value.update(tr); },
		provide: f => [
			view.showTooltip.from(f, val => val.tooltip),
			view.EditorView.contentAttributes.from(f, state => state.attrs)
		]
	});
	function applyCompletion(view, option) {
		const apply = option.completion.apply || option.completion.label;
		let result = view.state.field(completionState).active.find(a => a.source == option.source);
		if (!(result instanceof ActiveResult))
			return false;
		if (typeof apply == "string")
			view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
		else
			apply(view, option.completion, result.from, result.to);
		return true;
	}
	const createTooltip = completionTooltip(completionState, applyCompletion);
	
	/**
	Returns a command that moves the completion selection forward or
	backward by the given amount.
	*/
	function moveCompletionSelection(forward, by = "option") {
		return (view$1) => {
			let cState = view$1.state.field(completionState, false);
			if (!cState || !cState.open || cState.open.disabled ||
				Date.now() - cState.open.timestamp < view$1.state.facet(completionConfig).interactionDelay)
				return false;
			let step = 1, tooltip;
			if (by == "page" && (tooltip = view.getTooltip(view$1, cState.open.tooltip)))
				step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
					tooltip.dom.querySelector("li").offsetHeight) - 1);
			let { length } = cState.open.options;
			let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
			if (selected < 0)
				selected = by == "page" ? 0 : length - 1;
			else if (selected >= length)
				selected = by == "page" ? length - 1 : 0;
			view$1.dispatch({ effects: setSelectedEffect.of(selected) });
			return true;
		};
	}
	/**
	Accept the current completion.
	*/
	const acceptCompletion = (view) => {
		let cState = view.state.field(completionState, false);
		if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||
			Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
			return false;
		return applyCompletion(view, cState.open.options[cState.open.selected]);
	};
	/**
	Explicitly start autocompletion.
	*/
	const startCompletion = (view) => {
		let cState = view.state.field(completionState, false);
		if (!cState)
			return false;
		view.dispatch({ effects: startCompletionEffect.of(true) });
		return true;
	};
	/**
	Close the currently active completion.
	*/
	const closeCompletion = (view) => {
		let cState = view.state.field(completionState, false);
		if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
			return false;
		view.dispatch({ effects: closeCompletionEffect.of(null) });
		return true;
	};
	class RunningQuery {
		constructor(active, context) {
			this.active = active;
			this.context = context;
			this.time = Date.now();
			this.updates = [];
			// Note that 'undefined' means 'not done yet', whereas 'null' means
			// 'query returned null'.
			this.done = undefined;
		}
	}
	const MaxUpdateCount = 50, MinAbortTime = 1000;
	const completionPlugin = view.ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.debounceUpdate = -1;
			this.running = [];
			this.debounceAccept = -1;
			this.composing = 0 /* CompositionState.None */;
			for (let active of view.state.field(completionState).active)
				if (active.state == 1 /* State.Pending */)
					this.startQuery(active);
		}
		update(update) {
			let cState = update.state.field(completionState);
			if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
				return;
			let doesReset = update.transactions.some(tr => {
				return (tr.selection || tr.docChanged) && !getUserEvent(tr);
			});
			for (let i = 0; i < this.running.length; i++) {
				let query = this.running[i];
				if (doesReset ||
					query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
					for (let handler of query.context.abortListeners) {
						try {
							handler();
						}
						catch (e) {
							view.logException(this.view.state, e);
						}
					}
					query.context.abortListeners = null;
					this.running.splice(i--, 1);
				}
				else {
					query.updates.push(...update.transactions);
				}
			}
			if (this.debounceUpdate > -1)
				clearTimeout(this.debounceUpdate);
			this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source))
				? setTimeout(() => this.startUpdate(), 50) : -1;
			if (this.composing != 0 /* CompositionState.None */)
				for (let tr of update.transactions) {
					if (getUserEvent(tr) == "input")
						this.composing = 2 /* CompositionState.Changed */;
					else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
						this.composing = 3 /* CompositionState.ChangedAndMoved */;
				}
		}
		startUpdate() {
			this.debounceUpdate = -1;
			let { state } = this.view, cState = state.field(completionState);
			for (let active of cState.active) {
				if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source))
					this.startQuery(active);
			}
		}
		startQuery(active) {
			let { state } = this.view, pos = cur(state);
			let context = new CompletionContext(state, pos, active.explicitPos == pos);
			let pending = new RunningQuery(active, context);
			this.running.push(pending);
			Promise.resolve(active.source(context)).then(result => {
				if (!pending.context.aborted) {
					pending.done = result || null;
					this.scheduleAccept();
				}
			}, err => {
				this.view.dispatch({ effects: closeCompletionEffect.of(null) });
				view.logException(this.view.state, err);
			});
		}
		scheduleAccept() {
			if (this.running.every(q => q.done !== undefined))
				this.accept();
			else if (this.debounceAccept < 0)
				this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
		}
		// For each finished query in this.running, try to create a result
		// or, if appropriate, restart the query.
		accept() {
			var _a;
			if (this.debounceAccept > -1)
				clearTimeout(this.debounceAccept);
			this.debounceAccept = -1;
			let updated = [];
			let conf = this.view.state.facet(completionConfig);
			for (let i = 0; i < this.running.length; i++) {
				let query = this.running[i];
				if (query.done === undefined)
					continue;
				this.running.splice(i--, 1);
				if (query.done) {
					let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
					// Replay the transactions that happened since the start of
					// the request and see if that preserves the result
					for (let tr of query.updates)
						active = active.update(tr, conf);
					if (active.hasResult()) {
						updated.push(active);
						continue;
					}
				}
				let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
				if (current && current.state == 1 /* State.Pending */) {
					if (query.done == null) {
						// Explicitly failed. Should clear the pending status if it
						// hasn't been re-set in the meantime.
						let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
						for (let tr of query.updates)
							active = active.update(tr, conf);
						if (active.state != 1 /* State.Pending */)
							updated.push(active);
					}
					else {
						// Cleared by subsequent transactions. Restart.
						this.startQuery(current);
					}
				}
			}
			if (updated.length)
				this.view.dispatch({ effects: setActiveEffect.of(updated) });
		}
	}, {
		eventHandlers: {
			blur(event) {
				let state = this.view.state.field(completionState, false);
				if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
					let dialog = state.open && view.getTooltip(this.view, state.open.tooltip);
					if (!dialog || !dialog.dom.contains(event.relatedTarget))
						this.view.dispatch({ effects: closeCompletionEffect.of(null) });
				}
			},
			compositionstart() {
				this.composing = 1 /* CompositionState.Started */;
			},
			compositionend() {
				if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
					// Safari fires compositionend events synchronously, possibly
					// from inside an update, so dispatch asynchronously to avoid reentrancy
					setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
				}
				this.composing = 0 /* CompositionState.None */;
			}
		}
	});
	
	const baseTheme = view.EditorView.baseTheme({
		".cm-tooltip.cm-tooltip-autocomplete": {
			"& > ul": {
				fontFamily: "monospace",
				whiteSpace: "nowrap",
				overflow: "hidden auto",
				maxWidth_fallback: "700px",
				maxWidth: "min(700px, 95vw)",
				minWidth: "250px",
				maxHeight: "10em",
				height: "100%",
				listStyle: "none",
				margin: 0,
				padding: 0,
				"& > li, & > completion-section": {
					padding: "1px 3px",
					lineHeight: 1.2
				},
				"& > li": {
					overflowX: "hidden",
					textOverflow: "ellipsis",
					cursor: "pointer"
				},
				"& > completion-section": {
					display: "list-item",
					borderBottom: "1px solid silver",
					paddingLeft: "0.5em",
					opacity: 0.7
				}
			}
		},
		"&light .cm-tooltip-autocomplete ul li[aria-selected]": {
			background: "#17c",
			color: "white",
		},
		"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
			background: "#777",
		},
		"&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
			background: "#347",
			color: "white",
		},
		"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
			background: "#444",
		},
		".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
			content: '"···"',
			opacity: 0.5,
			display: "block",
			textAlign: "center"
		},
		".cm-tooltip.cm-completionInfo": {
			position: "absolute",
			padding: "3px 9px",
			width: "max-content",
			maxWidth: `${400 /* Info.Width */}px`,
			boxSizing: "border-box"
		},
		".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
		".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
		".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
		".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
		"&light .cm-snippetField": { backgroundColor: "#00000022" },
		"&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
		".cm-snippetFieldPosition": {
			verticalAlign: "text-top",
			width: 0,
			height: "1.15em",
			display: "inline-block",
			margin: "0 -0.7px -.7em",
			borderLeft: "1.4px dotted #888"
		},
		".cm-completionMatchedText": {
			textDecoration: "underline"
		},
		".cm-completionDetail": {
			marginLeft: "0.5em",
			fontStyle: "italic"
		},
		".cm-completionIcon": {
			fontSize: "90%",
			width: ".8em",
			display: "inline-block",
			textAlign: "center",
			paddingRight: ".6em",
			opacity: "0.6",
			boxSizing: "content-box"
		},
		".cm-completionIcon-function, .cm-completionIcon-method": {
			"&:after": { content: "'ƒ'" }
		},
		".cm-completionIcon-class": {
			"&:after": { content: "'○'" }
		},
		".cm-completionIcon-interface": {
			"&:after": { content: "'◌'" }
		},
		".cm-completionIcon-variable": {
			"&:after": { content: "'𝑥'" }
		},
		".cm-completionIcon-constant": {
			"&:after": { content: "'𝐶'" }
		},
		".cm-completionIcon-type": {
			"&:after": { content: "'𝑡'" }
		},
		".cm-completionIcon-enum": {
			"&:after": { content: "'∪'" }
		},
		".cm-completionIcon-property": {
			"&:after": { content: "'□'" }
		},
		".cm-completionIcon-keyword": {
			"&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
		},
		".cm-completionIcon-namespace": {
			"&:after": { content: "'▢'" }
		},
		".cm-completionIcon-text": {
			"&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
		}
	});
	
	class FieldPos {
		constructor(field, line, from, to) {
			this.field = field;
			this.line = line;
			this.from = from;
			this.to = to;
		}
	}
	class FieldRange {
		constructor(field, from, to) {
			this.field = field;
			this.from = from;
			this.to = to;
		}
		map(changes) {
			let from = changes.mapPos(this.from, -1, state.MapMode.TrackDel);
			let to = changes.mapPos(this.to, 1, state.MapMode.TrackDel);
			return from == null || to == null ? null : new FieldRange(this.field, from, to);
		}
	}
	class Snippet {
		constructor(lines, fieldPositions) {
			this.lines = lines;
			this.fieldPositions = fieldPositions;
		}
		instantiate(state, pos) {
			let text = [], lineStart = [pos];
			let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
			for (let line of this.lines) {
				if (text.length) {
					let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
					for (let i = 0; i < tabs; i++)
						indent += state.facet(language.indentUnit);
					lineStart.push(pos + indent.length - tabs);
					line = indent + line.slice(tabs);
				}
				text.push(line);
				pos += line.length + 1;
			}
			let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
			return { text, ranges };
		}
		static parse(template) {
			let fields = [];
			let lines = [], positions = [], m;
			for (let line of template.split(/\r\n?|\n/)) {
				while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
					let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
					for (let i = 0; i < fields.length; i++) {
						if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
							found = i;
					}
					if (found < 0) {
						let i = 0;
						while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
							i++;
						fields.splice(i, 0, { seq, name });
						found = i;
						for (let pos of positions)
							if (pos.field >= found)
								pos.field++;
					}
					positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
					line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
				}
				for (let esc; esc = /\\([{}])/.exec(line);) {
					line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
					for (let pos of positions)
						if (pos.line == lines.length && pos.from > esc.index) {
							pos.from--;
							pos.to--;
						}
				}
				lines.push(line);
			}
			return new Snippet(lines, positions);
		}
	}
	let fieldMarker = view.Decoration.widget({ widget: new class extends view.WidgetType {
			toDOM() {
				let span = document.createElement("span");
				span.className = "cm-snippetFieldPosition";
				return span;
			}
			ignoreEvent() { return false; }
		} });
	let fieldRange = view.Decoration.mark({ class: "cm-snippetField" });
	class ActiveSnippet {
		constructor(ranges, active) {
			this.ranges = ranges;
			this.active = active;
			this.deco = view.Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
		}
		map(changes) {
			let ranges = [];
			for (let r of this.ranges) {
				let mapped = r.map(changes);
				if (!mapped)
					return null;
				ranges.push(mapped);
			}
			return new ActiveSnippet(ranges, this.active);
		}
		selectionInsideField(sel) {
			return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
		}
	}
	const setActive = state.StateEffect.define({
		map(value, changes) { return value && value.map(changes); }
	});
	const moveToField = state.StateEffect.define();
	const snippetState = state.StateField.define({
		create() { return null; },
		update(value, tr) {
			for (let effect of tr.effects) {
				if (effect.is(setActive))
					return effect.value;
				if (effect.is(moveToField) && value)
					return new ActiveSnippet(value.ranges, effect.value);
			}
			if (value && tr.docChanged)
				value = value.map(tr.changes);
			if (value && tr.selection && !value.selectionInsideField(tr.selection))
				value = null;
			return value;
		},
		provide: f => view.EditorView.decorations.from(f, val => val ? val.deco : view.Decoration.none)
	});
	function fieldSelection(ranges, field) {
		return state.EditorSelection.create(ranges.filter(r => r.field == field).map(r => state.EditorSelection.range(r.from, r.to)));
	}
	/**
	Convert a snippet template to a function that can
	[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
	using syntax like this:
	
		"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"
	
	Each `${}` placeholder (you may also use `#{}`) indicates a field
	that the user can fill in. Its name, if any, will be the default
	content for the field.
	
	When the snippet is activated by calling the returned function,
	the code is inserted at the given position. Newlines in the
	template are indented by the indentation of the start line, plus
	one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
	the newline.
	
	On activation, (all instances of) the first field are selected.
	The user can move between fields with Tab and Shift-Tab as long as
	the fields are active. Moving to the last field or moving the
	cursor out of the current field deactivates the fields.
	
	The order of fields defaults to textual order, but you can add
	numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
	a custom order.
	
	To include a literal `{` or `}` in your template, put a backslash
	in front of it. This will be removed and the brace will not be
	interpreted as indicating a placeholder.
	*/
	function snippet(template) {
		let snippet = Snippet.parse(template);
		return (editor, completion, from, to) => {
			let { text, ranges } = snippet.instantiate(editor.state, from);
			let spec = {
				changes: { from, to, insert: state.Text.of(text) },
				scrollIntoView: true,
				annotations: completion ? pickedCompletion.of(completion) : undefined
			};
			if (ranges.length)
				spec.selection = fieldSelection(ranges, 0);
			if (ranges.length > 1) {
				let active = new ActiveSnippet(ranges, 0);
				let effects = spec.effects = [setActive.of(active)];
				if (editor.state.field(snippetState, false) === undefined)
					effects.push(state.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
			}
			editor.dispatch(editor.state.update(spec));
		};
	}
	function moveField(dir) {
		return ({ state, dispatch }) => {
			let active = state.field(snippetState, false);
			if (!active || dir < 0 && active.active == 0)
				return false;
			let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
			dispatch(state.update({
				selection: fieldSelection(active.ranges, next),
				effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
				scrollIntoView: true
			}));
			return true;
		};
	}
	/**
	A command that clears the active snippet, if any.
	*/
	const clearSnippet = ({ state, dispatch }) => {
		let active = state.field(snippetState, false);
		if (!active)
			return false;
		dispatch(state.update({ effects: setActive.of(null) }));
		return true;
	};
	/**
	Move to the next snippet field, if available.
	*/
	const nextSnippetField = moveField(1);
	/**
	Move to the previous snippet field, if available.
	*/
	const prevSnippetField = moveField(-1);
	/**
	Check if there is an active snippet with a next field for
	`nextSnippetField` to move to.
	*/
	function hasNextSnippetField(state) {
		let active = state.field(snippetState, false);
		return !!(active && active.ranges.some(r => r.field == active.active + 1));
	}
	/**
	Returns true if there is an active snippet and a previous field
	for `prevSnippetField` to move to.
	*/
	function hasPrevSnippetField(state) {
		let active = state.field(snippetState, false);
		return !!(active && active.active > 0);
	}
	const defaultSnippetKeymap = [
		{ key: "Tab", run: nextSnippetField, shift: prevSnippetField },
		{ key: "Escape", run: clearSnippet }
	];
	/**
	A facet that can be used to configure the key bindings used by
	snippets. The default binds Tab to
	[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
	[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
	to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
	*/
	const snippetKeymap = state.Facet.define({
		combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
	});
	const addSnippetKeymap = state.Prec.highest(view.keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
	/**
	Create a completion from a snippet. Returns an object with the
	properties from `completion`, plus an `apply` function that
	applies the snippet.
	*/
	function snippetCompletion(template, completion) {
		return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
	}
	const snippetPointerHandler = view.EditorView.domEventHandlers({
		mousedown(event, view) {
			let active = view.state.field(snippetState, false), pos;
			if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
				return false;
			let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
			if (!match || match.field == active.active)
				return false;
			view.dispatch({
				selection: fieldSelection(active.ranges, match.field),
				effects: setActive.of(active.ranges.some(r => r.field > match.field)
					? new ActiveSnippet(active.ranges, match.field) : null),
				scrollIntoView: true
			});
			return true;
		}
	});
	
	function wordRE(wordChars) {
		let escaped = wordChars.replace(/[\]\-\\]/g, "\\$&");
		try {
			return new RegExp(`[\\p{Alphabetic}\\p{Number}_${escaped}]+`, "ug");
		}
		catch (_a) {
			return new RegExp(`[\w${escaped}]`, "g");
		}
	}
	function mapRE(re, f) {
		return new RegExp(f(re.source), re.unicode ? "u" : "");
	}
	const wordCaches = Object.create(null);
	function wordCache(wordChars) {
		return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);
	}
	function storeWords(doc, wordRE, result, seen, ignoreAt) {
		for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {
			let { value } = lines, m;
			wordRE.lastIndex = 0;
			while (m = wordRE.exec(value)) {
				if (!seen[m[0]] && pos + m.index != ignoreAt) {
					result.push({ type: "text", label: m[0] });
					seen[m[0]] = true;
					if (result.length >= 2000 /* C.MaxList */)
						return;
				}
			}
			pos += value.length + 1;
		}
	}
	function collectWords(doc, cache, wordRE, to, ignoreAt) {
		let big = doc.length >= 1000 /* C.MinCacheLen */;
		let cached = big && cache.get(doc);
		if (cached)
			return cached;
		let result = [], seen = Object.create(null);
		if (doc.children) {
			let pos = 0;
			for (let ch of doc.children) {
				if (ch.length >= 1000 /* C.MinCacheLen */) {
					for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {
						if (!seen[c.label]) {
							seen[c.label] = true;
							result.push(c);
						}
					}
				}
				else {
					storeWords(ch, wordRE, result, seen, ignoreAt - pos);
				}
				pos += ch.length + 1;
			}
		}
		else {
			storeWords(doc, wordRE, result, seen, ignoreAt);
		}
		if (big && result.length < 2000 /* C.MaxList */)
			cache.set(doc, result);
		return result;
	}
	/**
	A completion source that will scan the document for words (using a
	[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and
	return those as completions.
	*/
	const completeAnyWord = context => {
		let wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
		let re = wordRE(wordChars);
		let token = context.matchBefore(mapRE(re, s => s + "$"));
		if (!token && !context.explicit)
			return null;
		let from = token ? token.from : context.pos;
		let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* C.Range */, from);
		return { from, options, validFor: mapRE(re, s => "^" + s) };
	};
	
	const defaults = {
		brackets: ["(", "[", "{", "'", '"'],
		before: ")]}:;>",
		stringPrefixes: []
	};
	const closeBracketEffect = state.StateEffect.define({
		map(value, mapping) {
			let mapped = mapping.mapPos(value, -1, state.MapMode.TrackAfter);
			return mapped == null ? undefined : mapped;
		}
	});
	const closedBracket = new class extends state.RangeValue {
	};
	closedBracket.startSide = 1;
	closedBracket.endSide = -1;
	const bracketState = state.StateField.define({
		create() { return state.RangeSet.empty; },
		update(value, tr) {
			value = value.map(tr.changes);
			if (tr.selection) {
				let line = tr.state.doc.lineAt(tr.selection.main.head);
				value = value.update({ filter: from => from >= line.from && from <= line.to });
			}
			for (let effect of tr.effects)
				if (effect.is(closeBracketEffect))
					value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
			return value;
		}
	});
	/**
	Extension to enable bracket-closing behavior. When a closeable
	bracket is typed, its closing bracket is immediately inserted
	after the cursor. When closing a bracket directly in front of a
	closing bracket inserted by the extension, the cursor moves over
	that bracket.
	*/
	function closeBrackets() {
		return [inputHandler, bracketState];
	}
	const definedClosing = "()[]{}<>";
	function closing(ch) {
		for (let i = 0; i < definedClosing.length; i += 2)
			if (definedClosing.charCodeAt(i) == ch)
				return definedClosing.charAt(i + 1);
		return state.fromCodePoint(ch < 128 ? ch : ch + 1);
	}
	function config(state, pos) {
		return state.languageDataAt("closeBrackets", pos)[0] || defaults;
	}
	const android = typeof navigator == "object" && /Android\b/.test(navigator.userAgent);
	const inputHandler = view.EditorView.inputHandler.of((view, from, to, insert) => {
		if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
			return false;
		let sel = view.state.selection.main;
		if (insert.length > 2 || insert.length == 2 && state.codePointSize(state.codePointAt(insert, 0)) == 1 ||
			from != sel.from || to != sel.to)
			return false;
		let tr = insertBracket(view.state, insert);
		if (!tr)
			return false;
		view.dispatch(tr);
		return true;
	});
	/**
	Command that implements deleting a pair of matching brackets when
	the cursor is between them.
	*/
	const deleteBracketPair = ({ state: state$1, dispatch }) => {
		if (state$1.readOnly)
			return false;
		let conf = config(state$1, state$1.selection.main.head);
		let tokens = conf.brackets || defaults.brackets;
		let dont = null, changes = state$1.changeByRange(range => {
			if (range.empty) {
				let before = prevChar(state$1.doc, range.head);
				for (let token of tokens) {
					if (token == before && nextChar(state$1.doc, range.head) == closing(state.codePointAt(token, 0)))
						return { changes: { from: range.head - token.length, to: range.head + token.length },
							range: state.EditorSelection.cursor(range.head - token.length) };
				}
			}
			return { range: dont = range };
		});
		if (!dont)
			dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
		return !dont;
	};
	/**
	Close-brackets related key bindings. Binds Backspace to
	[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
	*/
	const closeBracketsKeymap = [
		{ key: "Backspace", run: deleteBracketPair }
	];
	/**
	Implements the extension's behavior on text insertion. If the
	given string counts as a bracket in the language around the
	selection, and replacing the selection with it requires custom
	behavior (inserting a closing version or skipping past a
	previously-closed bracket), this function returns a transaction
	representing that custom behavior. (You only need this if you want
	to programmatically insert brackets—the
	[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
	take care of running this for user input.)
	*/
	function insertBracket(state$1, bracket) {
		let conf = config(state$1, state$1.selection.main.head);
		let tokens = conf.brackets || defaults.brackets;
		for (let tok of tokens) {
			let closed = closing(state.codePointAt(tok, 0));
			if (bracket == tok)
				return closed == tok ? handleSame(state$1, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
					: handleOpen(state$1, tok, closed, conf.before || defaults.before);
			if (bracket == closed && closedBracketAt(state$1, state$1.selection.main.from))
				return handleClose(state$1, tok, closed);
		}
		return null;
	}
	function closedBracketAt(state, pos) {
		let found = false;
		state.field(bracketState).between(0, state.doc.length, from => {
			if (from == pos)
				found = true;
		});
		return found;
	}
	function nextChar(doc, pos) {
		let next = doc.sliceString(pos, pos + 2);
		return next.slice(0, state.codePointSize(state.codePointAt(next, 0)));
	}
	function prevChar(doc, pos) {
		let prev = doc.sliceString(pos - 2, pos);
		return state.codePointSize(state.codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
	}
	function handleOpen(state$1, open, close, closeBefore) {
		let dont = null, changes = state$1.changeByRange(range => {
			if (!range.empty)
				return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
					effects: closeBracketEffect.of(range.to + open.length),
					range: state.EditorSelection.range(range.anchor + open.length, range.head + open.length) };
			let next = nextChar(state$1.doc, range.head);
			if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
				return { changes: { insert: open + close, from: range.head },
					effects: closeBracketEffect.of(range.head + open.length),
					range: state.EditorSelection.cursor(range.head + open.length) };
			return { range: dont = range };
		});
		return dont ? null : state$1.update(changes, {
			scrollIntoView: true,
			userEvent: "input.type"
		});
	}
	function handleClose(state$1, _open, close) {
		let dont = null, changes = state$1.changeByRange(range => {
			if (range.empty && nextChar(state$1.doc, range.head) == close)
				return { changes: { from: range.head, to: range.head + close.length, insert: close },
					range: state.EditorSelection.cursor(range.head + close.length) };
			return dont = { range };
		});
		return dont ? null : state$1.update(changes, {
			scrollIntoView: true,
			userEvent: "input.type"
		});
	}
	// Handles cases where the open and close token are the same, and
	// possibly triple quotes (as in `"""abc"""`-style quoting).
	function handleSame(state$1, token, allowTriple, config) {
		let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
		let dont = null, changes = state$1.changeByRange(range => {
			if (!range.empty)
				return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
					effects: closeBracketEffect.of(range.to + token.length),
					range: state.EditorSelection.range(range.anchor + token.length, range.head + token.length) };
			let pos = range.head, next = nextChar(state$1.doc, pos), start;
			if (next == token) {
				if (nodeStart(state$1, pos)) {
					return { changes: { insert: token + token, from: pos },
						effects: closeBracketEffect.of(pos + token.length),
						range: state.EditorSelection.cursor(pos + token.length) };
				}
				else if (closedBracketAt(state$1, pos)) {
					let isTriple = allowTriple && state$1.sliceDoc(pos, pos + token.length * 3) == token + token + token;
					let content = isTriple ? token + token + token : token;
					return { changes: { from: pos, to: pos + content.length, insert: content },
						range: state.EditorSelection.cursor(pos + content.length) };
				}
			}
			else if (allowTriple && state$1.sliceDoc(pos - 2 * token.length, pos) == token + token &&
				(start = canStartStringAt(state$1, pos - 2 * token.length, stringPrefixes)) > -1 &&
				nodeStart(state$1, start)) {
				return { changes: { insert: token + token + token + token, from: pos },
					effects: closeBracketEffect.of(pos + token.length),
					range: state.EditorSelection.cursor(pos + token.length) };
			}
			else if (state$1.charCategorizer(pos)(next) != state.CharCategory.Word) {
				if (canStartStringAt(state$1, pos, stringPrefixes) > -1 && !probablyInString(state$1, pos, token, stringPrefixes))
					return { changes: { insert: token + token, from: pos },
						effects: closeBracketEffect.of(pos + token.length),
						range: state.EditorSelection.cursor(pos + token.length) };
			}
			return { range: dont = range };
		});
		return dont ? null : state$1.update(changes, {
			scrollIntoView: true,
			userEvent: "input.type"
		});
	}
	function nodeStart(state, pos) {
		let tree = language.syntaxTree(state).resolveInner(pos + 1);
		return tree.parent && tree.from == pos;
	}
	function probablyInString(state, pos, quoteToken, prefixes) {
		let node = language.syntaxTree(state).resolveInner(pos, -1);
		let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
		for (let i = 0; i < 5; i++) {
			let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
			let quotePos = start.indexOf(quoteToken);
			if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
				let first = node.firstChild;
				while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
					if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
						return false;
					first = first.firstChild;
				}
				return true;
			}
			let parent = node.to == pos && node.parent;
			if (!parent)
				break;
			node = parent;
		}
		return false;
	}
	function canStartStringAt(state$1, pos, prefixes) {
		let charCat = state$1.charCategorizer(pos);
		if (charCat(state$1.sliceDoc(pos - 1, pos)) != state.CharCategory.Word)
			return pos;
		for (let prefix of prefixes) {
			let start = pos - prefix.length;
			if (state$1.sliceDoc(start, pos) == prefix && charCat(state$1.sliceDoc(start - 1, start)) != state.CharCategory.Word)
				return start;
		}
		return -1;
	}
	
	/**
	Returns an extension that enables autocompletion.
	*/
	function autocompletion(config = {}) {
		return [
			completionState,
			completionConfig.of(config),
			completionPlugin,
			completionKeymapExt,
			baseTheme
		];
	}
	/**
	Basic keybindings for autocompletion.
	
	 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
	 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
	 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
	 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
	 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
	 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
	 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
	*/
	const completionKeymap = [
		{ key: "Ctrl-Space", run: startCompletion },
		{ key: "Escape", run: closeCompletion },
		{ key: "ArrowDown", run: moveCompletionSelection(true) },
		{ key: "ArrowUp", run: moveCompletionSelection(false) },
		{ key: "PageDown", run: moveCompletionSelection(true, "page") },
		{ key: "PageUp", run: moveCompletionSelection(false, "page") },
		{ key: "Enter", run: acceptCompletion }
	];
	const completionKeymapExt = state.Prec.highest(view.keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
	/**
	Get the current completion status. When completions are available,
	this will return `"active"`. When completions are pending (in the
	process of being queried), this returns `"pending"`. Otherwise, it
	returns `null`.
	*/
	function completionStatus(state) {
		let cState = state.field(completionState, false);
		return cState && cState.active.some(a => a.state == 1 /* State.Pending */) ? "pending"
			: cState && cState.active.some(a => a.state != 0 /* State.Inactive */) ? "active" : null;
	}
	const completionArrayCache = new WeakMap;
	/**
	Returns the available completions as an array.
	*/
	function currentCompletions(state) {
		var _a;
		let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
		if (!open || open.disabled)
			return [];
		let completions = completionArrayCache.get(open.options);
		if (!completions)
			completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));
		return completions;
	}
	/**
	Return the currently selected completion, if any.
	*/
	function selectedCompletion(state) {
		var _a;
		let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
		return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;
	}
	/**
	Returns the currently selected position in the active completion
	list, or null if no completions are active.
	*/
	function selectedCompletionIndex(state) {
		var _a;
		let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
		return open && !open.disabled && open.selected >= 0 ? open.selected : null;
	}
	/**
	Create an effect that can be attached to a transaction to change
	the currently selected completion.
	*/
	function setSelectedCompletion(index) {
		return setSelectedEffect.of(index);
	}
	
	exports.CompletionContext = CompletionContext;
	exports.acceptCompletion = acceptCompletion;
	exports.autocompletion = autocompletion;
	exports.clearSnippet = clearSnippet;
	exports.closeBrackets = closeBrackets;
	exports.closeBracketsKeymap = closeBracketsKeymap;
	exports.closeCompletion = closeCompletion;
	exports.completeAnyWord = completeAnyWord;
	exports.completeFromList = completeFromList;
	exports.completionKeymap = completionKeymap;
	exports.completionStatus = completionStatus;
	exports.currentCompletions = currentCompletions;
	exports.deleteBracketPair = deleteBracketPair;
	exports.hasNextSnippetField = hasNextSnippetField;
	exports.hasPrevSnippetField = hasPrevSnippetField;
	exports.ifIn = ifIn;
	exports.ifNotIn = ifNotIn;
	exports.insertBracket = insertBracket;
	exports.insertCompletionText = insertCompletionText;
	exports.moveCompletionSelection = moveCompletionSelection;
	exports.nextSnippetField = nextSnippetField;
	exports.pickedCompletion = pickedCompletion;
	exports.prevSnippetField = prevSnippetField;
	exports.selectedCompletion = selectedCompletion;
	exports.selectedCompletionIndex = selectedCompletionIndex;
	exports.setSelectedCompletion = setSelectedCompletion;
	exports.snippet = snippet;
	exports.snippetCompletion = snippetCompletion;
	exports.snippetKeymap = snippetKeymap;
	exports.startCompletion = startCompletion;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/commands/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/commands/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	/**
	Comment or uncomment the current selection. Will use line comments
	if available, otherwise falling back to block comments.
	*/
	const toggleComment = target => {
		let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
		return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
	};
	function command(f, option) {
		return ({ state, dispatch }) => {
			if (state.readOnly)
				return false;
			let tr = f(option, state);
			if (!tr)
				return false;
			dispatch(state.update(tr));
			return true;
		};
	}
	/**
	Comment or uncomment the current selection using line comments.
	The line comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleLineComment = command(changeLineComment, 0 /* CommentOption.Toggle */);
	/**
	Comment the current selection using line comments.
	*/
	const lineComment = command(changeLineComment, 1 /* CommentOption.Comment */);
	/**
	Uncomment the current selection using line comments.
	*/
	const lineUncomment = command(changeLineComment, 2 /* CommentOption.Uncomment */);
	/**
	Comment or uncomment the current selection using block comments.
	The block comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleBlockComment = command(changeBlockComment, 0 /* CommentOption.Toggle */);
	/**
	Comment the current selection using block comments.
	*/
	const blockComment = command(changeBlockComment, 1 /* CommentOption.Comment */);
	/**
	Uncomment the current selection using block comments.
	*/
	const blockUncomment = command(changeBlockComment, 2 /* CommentOption.Uncomment */);
	/**
	Comment or uncomment the lines around the current selection using
	block comments.
	*/
	const toggleBlockCommentByLine = command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
	function getConfig(state, pos) {
		let data = state.languageDataAt("commentTokens", pos);
		return data.length ? data[0] : {};
	}
	const SearchMargin = 50;
	/**
	Determines if the given range is block-commented in the given
	state.
	*/
	function findBlockComment(state, { open, close }, from, to) {
		let textBefore = state.sliceDoc(from - SearchMargin, from);
		let textAfter = state.sliceDoc(to, to + SearchMargin);
		let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
		let beforeOff = textBefore.length - spaceBefore;
		if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
			textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
			return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
				close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
		}
		let startText, endText;
		if (to - from <= 2 * SearchMargin) {
			startText = endText = state.sliceDoc(from, to);
		}
		else {
			startText = state.sliceDoc(from, from + SearchMargin);
			endText = state.sliceDoc(to - SearchMargin, to);
		}
		let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
		let endOff = endText.length - endSpace - close.length;
		if (startText.slice(startSpace, startSpace + open.length) == open &&
			endText.slice(endOff, endOff + close.length) == close) {
			return { open: { pos: from + startSpace + open.length,
					margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
				close: { pos: to - endSpace - close.length,
					margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
		}
		return null;
	}
	function selectedLineRanges(state) {
		let ranges = [];
		for (let r of state.selection.ranges) {
			let fromLine = state.doc.lineAt(r.from);
			let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
			let last = ranges.length - 1;
			if (last >= 0 && ranges[last].to > fromLine.from)
				ranges[last].to = toLine.to;
			else
				ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
		}
		return ranges;
	}
	// Performs toggle, comment and uncomment of block comments in
	// languages that support them.
	function changeBlockComment(option, state, ranges = state.selection.ranges) {
		let tokens = ranges.map(r => getConfig(state, r.from).block);
		if (!tokens.every(c => c))
			return null;
		let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
		if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
			return { changes: state.changes(ranges.map((range, i) => {
					if (comments[i])
						return [];
					return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
				})) };
		}
		else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
			let changes = [];
			for (let i = 0, comment; i < comments.length; i++)
				if (comment = comments[i]) {
					let token = tokens[i], { open, close } = comment;
					changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
				}
			return { changes };
		}
		return null;
	}
	// Performs toggle, comment and uncomment of line comments.
	function changeLineComment(option, state, ranges = state.selection.ranges) {
		let lines = [];
		let prevLine = -1;
		for (let { from, to } of ranges) {
			let startI = lines.length, minIndent = 1e9;
			let token = getConfig(state, from).line;
			if (!token)
				continue;
			for (let pos = from; pos <= to;) {
				let line = state.doc.lineAt(pos);
				if (line.from > prevLine && (from == to || to > line.from)) {
					prevLine = line.from;
					let indent = /^\s*/.exec(line.text)[0].length;
					let empty = indent == line.length;
					let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
					if (indent < line.text.length && indent < minIndent)
						minIndent = indent;
					lines.push({ line, comment, token, indent, empty, single: false });
				}
				pos = line.to + 1;
			}
			if (minIndent < 1e9)
				for (let i = startI; i < lines.length; i++)
					if (lines[i].indent < lines[i].line.text.length)
						lines[i].indent = minIndent;
			if (lines.length == startI + 1)
				lines[startI].single = true;
		}
		if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
			let changes = [];
			for (let { line, token, indent, empty, single } of lines)
				if (single || !empty)
					changes.push({ from: line.from + indent, insert: token + " " });
			let changeSet = state.changes(changes);
			return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
		}
		else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
			let changes = [];
			for (let { line, comment, token } of lines)
				if (comment >= 0) {
					let from = line.from + comment, to = from + token.length;
					if (line.text[to - line.from] == " ")
						to++;
					changes.push({ from, to });
				}
			return { changes };
		}
		return null;
	}
	
	const fromHistory = state.Annotation.define();
	/**
	Transaction annotation that will prevent that transaction from
	being combined with other transactions in the undo history. Given
	`"before"`, it'll prevent merging with previous transactions. With
	`"after"`, subsequent transactions won't be combined with this
	one. With `"full"`, the transaction is isolated on both sides.
	*/
	const isolateHistory = state.Annotation.define();
	/**
	This facet provides a way to register functions that, given a
	transaction, provide a set of effects that the history should
	store when inverting the transaction. This can be used to
	integrate some kinds of effects in the history, so that they can
	be undone (and redone again).
	*/
	const invertedEffects = state.Facet.define();
	const historyConfig = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				minDepth: 100,
				newGroupDelay: 500,
				joinToEvent: (_t, isAdjacent) => isAdjacent,
			}, {
				minDepth: Math.max,
				newGroupDelay: Math.min,
				joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
			});
		}
	});
	const historyField_ = state.StateField.define({
		create() {
			return HistoryState.empty;
		},
		update(state$1, tr) {
			let config = tr.state.facet(historyConfig);
			let fromHist = tr.annotation(fromHistory);
			if (fromHist) {
				let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
				let other = from == 0 /* BranchName.Done */ ? state$1.undone : state$1.done;
				if (item)
					other = updateBranch(other, other.length, config.minDepth, item);
				else
					other = addSelection(other, tr.startState.selection);
				return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
			}
			let isolate = tr.annotation(isolateHistory);
			if (isolate == "full" || isolate == "before")
				state$1 = state$1.isolate();
			if (tr.annotation(state.Transaction.addToHistory) === false)
				return !tr.changes.empty ? state$1.addMapping(tr.changes.desc) : state$1;
			let event = HistEvent.fromTransaction(tr);
			let time = tr.annotation(state.Transaction.time), userEvent = tr.annotation(state.Transaction.userEvent);
			if (event)
				state$1 = state$1.addChanges(event, time, userEvent, config, tr);
			else if (tr.selection)
				state$1 = state$1.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
			if (isolate == "full" || isolate == "after")
				state$1 = state$1.isolate();
			return state$1;
		},
		toJSON(value) {
			return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
		},
		fromJSON(json) {
			return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
		}
	});
	/**
	Create a history extension with the given configuration.
	*/
	function history(config = {}) {
		return [
			historyField_,
			historyConfig.of(config),
			view.EditorView.domEventHandlers({
				beforeinput(e, view) {
					let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
					if (!command)
						return false;
					e.preventDefault();
					return command(view);
				}
			})
		];
	}
	/**
	The state field used to store the history data. Should probably
	only be used when you want to
	[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
	[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
	that preserves history.
	*/
	const historyField = historyField_;
	function cmd(side, selection) {
		return function ({ state, dispatch }) {
			if (!selection && state.readOnly)
				return false;
			let historyState = state.field(historyField_, false);
			if (!historyState)
				return false;
			let tr = historyState.pop(side, state, selection);
			if (!tr)
				return false;
			dispatch(tr);
			return true;
		};
	}
	/**
	Undo a single group of history events. Returns false if no group
	was available.
	*/
	const undo = cmd(0 /* BranchName.Done */, false);
	/**
	Redo a group of history events. Returns false if no group was
	available.
	*/
	const redo = cmd(1 /* BranchName.Undone */, false);
	/**
	Undo a change or selection change.
	*/
	const undoSelection = cmd(0 /* BranchName.Done */, true);
	/**
	Redo a change or selection change.
	*/
	const redoSelection = cmd(1 /* BranchName.Undone */, true);
	function depth(side) {
		return function (state) {
			let histState = state.field(historyField_, false);
			if (!histState)
				return 0;
			let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;
			return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
		};
	}
	/**
	The amount of undoable change events available in a given state.
	*/
	const undoDepth = depth(0 /* BranchName.Done */);
	/**
	The amount of redoable change events available in a given state.
	*/
	const redoDepth = depth(1 /* BranchName.Undone */);
	// History events store groups of changes or effects that need to be
	// undone/redone together.
	class HistEvent {
		constructor(
		// The changes in this event. Normal events hold at least one
		// change or effect. But it may be necessary to store selection
		// events before the first change, in which case a special type of
		// instance is created which doesn't hold any changes, with
		// changes == startSelection == undefined
		changes, 
		// The effects associated with this event
		effects, 
		// Accumulated mapping (from addToHistory==false) that should be
		// applied to events below this one.
		mapped, 
		// The selection before this event
		startSelection, 
		// Stores selection changes after this event, to be used for
		// selection undo/redo.
		selectionsAfter) {
			this.changes = changes;
			this.effects = effects;
			this.mapped = mapped;
			this.startSelection = startSelection;
			this.selectionsAfter = selectionsAfter;
		}
		setSelAfter(after) {
			return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
		}
		toJSON() {
			var _a, _b, _c;
			return {
				changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
				mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
				startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
				selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
			};
		}
		static fromJSON(json) {
			return new HistEvent(json.changes && state.ChangeSet.fromJSON(json.changes), [], json.mapped && state.ChangeDesc.fromJSON(json.mapped), json.startSelection && state.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(state.EditorSelection.fromJSON));
		}
		// This does not check `addToHistory` and such, it assumes the
		// transaction needs to be converted to an item. Returns null when
		// there are no changes or effects in the transaction.
		static fromTransaction(tr, selection) {
			let effects = none;
			for (let invert of tr.startState.facet(invertedEffects)) {
				let result = invert(tr);
				if (result.length)
					effects = effects.concat(result);
			}
			if (!effects.length && tr.changes.empty)
				return null;
			return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
		}
		static selection(selections) {
			return new HistEvent(undefined, none, undefined, undefined, selections);
		}
	}
	function updateBranch(branch, to, maxLen, newEvent) {
		let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
		let newBranch = branch.slice(start, to);
		newBranch.push(newEvent);
		return newBranch;
	}
	function isAdjacent(a, b) {
		let ranges = [], isAdjacent = false;
		a.iterChangedRanges((f, t) => ranges.push(f, t));
		b.iterChangedRanges((_f, _t, f, t) => {
			for (let i = 0; i < ranges.length;) {
				let from = ranges[i++], to = ranges[i++];
				if (t >= from && f <= to)
					isAdjacent = true;
			}
		});
		return isAdjacent;
	}
	function eqSelectionShape(a, b) {
		return a.ranges.length == b.ranges.length &&
			a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
	}
	function conc(a, b) {
		return !a.length ? b : !b.length ? a : a.concat(b);
	}
	const none = [];
	const MaxSelectionsPerEvent = 200;
	function addSelection(branch, selection) {
		if (!branch.length) {
			return [HistEvent.selection([selection])];
		}
		else {
			let lastEvent = branch[branch.length - 1];
			let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
			if (sels.length && sels[sels.length - 1].eq(selection))
				return branch;
			sels.push(selection);
			return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
		}
	}
	// Assumes the top item has one or more selectionAfter values
	function popSelection(branch) {
		let last = branch[branch.length - 1];
		let newBranch = branch.slice();
		newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
		return newBranch;
	}
	// Add a mapping to the top event in the given branch. If this maps
	// away all the changes and effects in that item, drop it and
	// propagate the mapping to the next item.
	function addMappingToBranch(branch, mapping) {
		if (!branch.length)
			return branch;
		let length = branch.length, selections = none;
		while (length) {
			let event = mapEvent(branch[length - 1], mapping, selections);
			if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
				let result = branch.slice(0, length);
				result[length - 1] = event;
				return result;
			}
			else { // Drop this event, since there's no changes or effects left
				mapping = event.mapped;
				length--;
				selections = event.selectionsAfter;
			}
		}
		return selections.length ? [HistEvent.selection(selections)] : none;
	}
	function mapEvent(event, mapping, extraSelections) {
		let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
		// Change-less events don't store mappings (they are always the last event in a branch)
		if (!event.changes)
			return HistEvent.selection(selections);
		let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
		let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
		return new HistEvent(mappedChanges, state.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
	}
	const joinableUserEvent = /^(input\.type|delete)($|\.)/;
	class HistoryState {
		constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
			this.done = done;
			this.undone = undone;
			this.prevTime = prevTime;
			this.prevUserEvent = prevUserEvent;
		}
		isolate() {
			return this.prevTime ? new HistoryState(this.done, this.undone) : this;
		}
		addChanges(event, time, userEvent, config, tr) {
			let done = this.done, lastEvent = done[done.length - 1];
			if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
				(!userEvent || joinableUserEvent.test(userEvent)) &&
				((!lastEvent.selectionsAfter.length &&
					time - this.prevTime < config.newGroupDelay &&
					config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
					// For compose (but not compose.start) events, always join with previous event
					userEvent == "input.type.compose")) {
				done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
			}
			else {
				done = updateBranch(done, done.length, config.minDepth, event);
			}
			return new HistoryState(done, none, time, userEvent);
		}
		addSelection(selection, time, userEvent, newGroupDelay) {
			let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
			if (last.length > 0 &&
				time - this.prevTime < newGroupDelay &&
				userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
				eqSelectionShape(last[last.length - 1], selection))
				return this;
			return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
		}
		addMapping(mapping) {
			return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
		}
		pop(side, state, onlySelection) {
			let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
			if (branch.length == 0)
				return null;
			let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
			if (onlySelection && event.selectionsAfter.length) {
				return state.update({
					selection: event.selectionsAfter[event.selectionsAfter.length - 1],
					annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
					userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
					scrollIntoView: true
				});
			}
			else if (!event.changes) {
				return null;
			}
			else {
				let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
				if (event.mapped)
					rest = addMappingToBranch(rest, event.mapped);
				return state.update({
					changes: event.changes,
					selection: event.startSelection,
					effects: event.effects,
					annotations: fromHistory.of({ side, rest, selection }),
					filter: false,
					userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
					scrollIntoView: true
				});
			}
		}
	}
	HistoryState.empty = new HistoryState(none, none);
	/**
	Default key bindings for the undo history.
	
	- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
	- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
	- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
	- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
	*/
	const historyKeymap = [
		{ key: "Mod-z", run: undo, preventDefault: true },
		{ key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
		{ linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
		{ key: "Mod-u", run: undoSelection, preventDefault: true },
		{ key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
	];
	
	function updateSel(sel, by) {
		return state.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
	}
	function setSel(state, selection) {
		return state.update({ selection, scrollIntoView: true, userEvent: "select" });
	}
	function moveSel({ state, dispatch }, how) {
		let selection = updateSel(state.selection, how);
		if (selection.eq(state.selection))
			return false;
		dispatch(setSel(state, selection));
		return true;
	}
	function rangeEnd(range, forward) {
		return state.EditorSelection.cursor(forward ? range.to : range.from);
	}
	function cursorByChar(view, forward) {
		return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
	}
	function ltrAtCursor(view$1) {
		return view$1.textDirectionAt(view$1.state.selection.main.head) == view.Direction.LTR;
	}
	/**
	Move the selection one character to the left (which is backward in
	left-to-right text, forward in right-to-left text).
	*/
	const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
	/**
	Move the selection one character to the right.
	*/
	const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
	/**
	Move the selection one character forward.
	*/
	const cursorCharForward = view => cursorByChar(view, true);
	/**
	Move the selection one character backward.
	*/
	const cursorCharBackward = view => cursorByChar(view, false);
	function cursorByGroup(view, forward) {
		return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
	}
	/**
	Move the selection to the left across one group of word or
	non-word (but also non-space) characters.
	*/
	const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
	/**
	Move the selection one group to the right.
	*/
	const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
	/**
	Move the selection one group forward.
	*/
	const cursorGroupForward = view => cursorByGroup(view, true);
	/**
	Move the selection one group backward.
	*/
	const cursorGroupBackward = view => cursorByGroup(view, false);
	const segmenter = typeof Intl != "undefined" && Intl.Segmenter ?
		new (Intl.Segmenter)(undefined, { granularity: "word" }) : null;
	function moveBySubword(view, range, forward) {
		let categorize = view.state.charCategorizer(range.from);
		let cat = state.CharCategory.Space, pos = range.from, steps = 0;
		let done = false, sawUpper = false, sawLower = false;
		let step = (next) => {
			if (done)
				return false;
			pos += forward ? next.length : -next.length;
			let nextCat = categorize(next), ahead;
			if (nextCat == state.CharCategory.Word && next.charCodeAt(0) < 128 && /[\W_]/.test(next))
				nextCat = -1; // Treat word punctuation specially
			if (cat == state.CharCategory.Space)
				cat = nextCat;
			if (cat != nextCat)
				return false;
			if (cat == state.CharCategory.Word) {
				if (next.toLowerCase() == next) {
					if (!forward && sawUpper)
						return false;
					sawLower = true;
				}
				else if (sawLower) {
					if (forward)
						return false;
					done = true;
				}
				else {
					if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == state.CharCategory.Word &&
						ahead.toLowerCase() == ahead)
						return false;
					sawUpper = true;
				}
			}
			steps++;
			return true;
		};
		let end = view.moveByChar(range, forward, start => {
			step(start);
			return step;
		});
		if (segmenter && cat == state.CharCategory.Word && end.from == range.from + steps * (forward ? 1 : -1)) {
			let from = Math.min(range.head, end.head), to = Math.max(range.head, end.head);
			let skipped = view.state.sliceDoc(from, to);
			if (skipped.length > 1 && /[\u4E00-\uffff]/.test(skipped)) {
				let segments = Array.from(segmenter.segment(skipped));
				if (segments.length > 1) {
					if (forward)
						return state.EditorSelection.cursor(range.head + segments[1].index, -1);
					return state.EditorSelection.cursor(end.head + segments[segments.length - 1].index, 1);
				}
			}
		}
		return end;
	}
	function cursorBySubword(view, forward) {
		return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));
	}
	/**
	Move the selection one group or camel-case subword forward.
	*/
	const cursorSubwordForward = view => cursorBySubword(view, true);
	/**
	Move the selection one group or camel-case subword backward.
	*/
	const cursorSubwordBackward = view => cursorBySubword(view, false);
	function interestingNode(state, node, bracketProp) {
		if (node.type.prop(bracketProp))
			return true;
		let len = node.to - node.from;
		return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
	}
	function moveBySyntax(state$1, start, forward) {
		let pos = language.syntaxTree(state$1).resolveInner(start.head);
		let bracketProp = forward ? common.NodeProp.closedBy : common.NodeProp.openedBy;
		// Scan forward through child nodes to see if there's an interesting
		// node ahead.
		for (let at = start.head;;) {
			let next = forward ? pos.childAfter(at) : pos.childBefore(at);
			if (!next)
				break;
			if (interestingNode(state$1, next, bracketProp))
				pos = next;
			else
				at = forward ? next.to : next.from;
		}
		let bracket = pos.type.prop(bracketProp), match, newPos;
		if (bracket && (match = forward ? language.matchBrackets(state$1, pos.from, 1) : language.matchBrackets(state$1, pos.to, -1)) && match.matched)
			newPos = forward ? match.end.to : match.end.from;
		else
			newPos = forward ? pos.to : pos.from;
		return state.EditorSelection.cursor(newPos, forward ? -1 : 1);
	}
	/**
	Move the cursor over the next syntactic element to the left.
	*/
	const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
	/**
	Move the cursor over the next syntactic element to the right.
	*/
	const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
	function cursorByLine(view, forward) {
		return moveSel(view, range => {
			if (!range.empty)
				return rangeEnd(range, forward);
			let moved = view.moveVertically(range, forward);
			return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
		});
	}
	/**
	Move the selection one line up.
	*/
	const cursorLineUp = view => cursorByLine(view, false);
	/**
	Move the selection one line down.
	*/
	const cursorLineDown = view => cursorByLine(view, true);
	function pageInfo(view$1) {
		let selfScroll = view$1.scrollDOM.clientHeight < view$1.scrollDOM.scrollHeight - 2;
		let marginTop = 0, marginBottom = 0, height;
		if (selfScroll) {
			for (let source of view$1.state.facet(view.EditorView.scrollMargins)) {
				let margins = source(view$1);
				if (margins === null || margins === void 0 ? void 0 : margins.top)
					marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
				if (margins === null || margins === void 0 ? void 0 : margins.bottom)
					marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
			}
			height = view$1.scrollDOM.clientHeight - marginTop - marginBottom;
		}
		else {
			height = (view$1.dom.ownerDocument.defaultView || window).innerHeight;
		}
		return { marginTop, marginBottom, selfScroll,
			height: Math.max(view$1.defaultLineHeight, height - 5) };
	}
	function cursorByPage(view$1, forward) {
		let page = pageInfo(view$1);
		let { state } = view$1, selection = updateSel(state.selection, range => {
			return range.empty ? view$1.moveVertically(range, forward, page.height)
				: rangeEnd(range, forward);
		});
		if (selection.eq(state.selection))
			return false;
		let effect;
		if (page.selfScroll) {
			let startPos = view$1.coordsAtPos(state.selection.main.head);
			let scrollRect = view$1.scrollDOM.getBoundingClientRect();
			let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
			if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
				effect = view.EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
		}
		view$1.dispatch(setSel(state, selection), { effects: effect });
		return true;
	}
	/**
	Move the selection one page up.
	*/
	const cursorPageUp = view => cursorByPage(view, false);
	/**
	Move the selection one page down.
	*/
	const cursorPageDown = view => cursorByPage(view, true);
	function moveByLineBoundary(view, start, forward) {
		let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
		if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
			moved = view.moveToLineBoundary(start, forward, false);
		if (!forward && moved.head == line.from && line.length) {
			let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
			if (space && start.head != line.from + space)
				moved = state.EditorSelection.cursor(line.from + space);
		}
		return moved;
	}
	/**
	Move the selection to the next line wrap point, or to the end of
	the line if there isn't one left on this line.
	*/
	const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection to previous line wrap point, or failing that to
	the start of the line. If the line is indented, and the cursor
	isn't already at the end of the indentation, this will move to the
	end of the indentation instead of the start of the line.
	*/
	const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection one line wrap point to the left.
	*/
	const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
	/**
	Move the selection one line wrap point to the right.
	*/
	const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
	/**
	Move the selection to the start of the line.
	*/
	const cursorLineStart = view => moveSel(view, range => state.EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
	/**
	Move the selection to the end of the line.
	*/
	const cursorLineEnd = view => moveSel(view, range => state.EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
	function toMatchingBracket(state$1, dispatch, extend) {
		let found = false, selection = updateSel(state$1.selection, range => {
			let matching = language.matchBrackets(state$1, range.head, -1)
				|| language.matchBrackets(state$1, range.head, 1)
				|| (range.head > 0 && language.matchBrackets(state$1, range.head - 1, 1))
				|| (range.head < state$1.doc.length && language.matchBrackets(state$1, range.head + 1, -1));
			if (!matching || !matching.end)
				return range;
			found = true;
			let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
			return extend ? state.EditorSelection.range(range.anchor, head) : state.EditorSelection.cursor(head);
		});
		if (!found)
			return false;
		dispatch(setSel(state$1, selection));
		return true;
	}
	/**
	Move the selection to the bracket matching the one it is currently
	on, if any.
	*/
	const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
	/**
	Extend the selection to the bracket matching the one the selection
	head is currently on, if any.
	*/
	const selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);
	function extendSel(view, how) {
		let selection = updateSel(view.state.selection, range => {
			let head = how(range);
			return state.EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
		});
		if (selection.eq(view.state.selection))
			return false;
		view.dispatch(setSel(view.state, selection));
		return true;
	}
	function selectByChar(view, forward) {
		return extendSel(view, range => view.moveByChar(range, forward));
	}
	/**
	Move the selection head one character to the left, while leaving
	the anchor in place.
	*/
	const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
	/**
	Move the selection head one character to the right.
	*/
	const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
	/**
	Move the selection head one character forward.
	*/
	const selectCharForward = view => selectByChar(view, true);
	/**
	Move the selection head one character backward.
	*/
	const selectCharBackward = view => selectByChar(view, false);
	function selectByGroup(view, forward) {
		return extendSel(view, range => view.moveByGroup(range, forward));
	}
	/**
	Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
	the left.
	*/
	const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
	/**
	Move the selection head one group to the right.
	*/
	const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
	/**
	Move the selection head one group forward.
	*/
	const selectGroupForward = view => selectByGroup(view, true);
	/**
	Move the selection head one group backward.
	*/
	const selectGroupBackward = view => selectByGroup(view, false);
	function selectBySubword(view, forward) {
		return extendSel(view, range => moveBySubword(view, range, forward));
	}
	/**
	Move the selection head one group or camel-case subword forward.
	*/
	const selectSubwordForward = view => selectBySubword(view, true);
	/**
	Move the selection head one group or subword backward.
	*/
	const selectSubwordBackward = view => selectBySubword(view, false);
	/**
	Move the selection head over the next syntactic element to the left.
	*/
	const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
	/**
	Move the selection head over the next syntactic element to the right.
	*/
	const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
	function selectByLine(view, forward) {
		return extendSel(view, range => view.moveVertically(range, forward));
	}
	/**
	Move the selection head one line up.
	*/
	const selectLineUp = view => selectByLine(view, false);
	/**
	Move the selection head one line down.
	*/
	const selectLineDown = view => selectByLine(view, true);
	function selectByPage(view, forward) {
		return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
	}
	/**
	Move the selection head one page up.
	*/
	const selectPageUp = view => selectByPage(view, false);
	/**
	Move the selection head one page down.
	*/
	const selectPageDown = view => selectByPage(view, true);
	/**
	Move the selection head to the next line boundary.
	*/
	const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection head to the previous line boundary.
	*/
	const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection head one line boundary to the left.
	*/
	const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
	/**
	Move the selection head one line boundary to the right.
	*/
	const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
	/**
	Move the selection head to the start of the line.
	*/
	const selectLineStart = view => extendSel(view, range => state.EditorSelection.cursor(view.lineBlockAt(range.head).from));
	/**
	Move the selection head to the end of the line.
	*/
	const selectLineEnd = view => extendSel(view, range => state.EditorSelection.cursor(view.lineBlockAt(range.head).to));
	/**
	Move the selection to the start of the document.
	*/
	const cursorDocStart = ({ state, dispatch }) => {
		dispatch(setSel(state, { anchor: 0 }));
		return true;
	};
	/**
	Move the selection to the end of the document.
	*/
	const cursorDocEnd = ({ state, dispatch }) => {
		dispatch(setSel(state, { anchor: state.doc.length }));
		return true;
	};
	/**
	Move the selection head to the start of the document.
	*/
	const selectDocStart = ({ state, dispatch }) => {
		dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
		return true;
	};
	/**
	Move the selection head to the end of the document.
	*/
	const selectDocEnd = ({ state, dispatch }) => {
		dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
		return true;
	};
	/**
	Select the entire document.
	*/
	const selectAll = ({ state, dispatch }) => {
		dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
		return true;
	};
	/**
	Expand the selection to cover entire lines.
	*/
	const selectLine = ({ state: state$1, dispatch }) => {
		let ranges = selectedLineBlocks(state$1).map(({ from, to }) => state.EditorSelection.range(from, Math.min(to + 1, state$1.doc.length)));
		dispatch(state$1.update({ selection: state.EditorSelection.create(ranges), userEvent: "select" }));
		return true;
	};
	/**
	Select the next syntactic construct that is larger than the
	selection. Note that this will only work insofar as the language
	[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
	syntax tree.
	*/
	const selectParentSyntax = ({ state: state$1, dispatch }) => {
		let selection = updateSel(state$1.selection, range => {
			var _a;
			let stack = language.syntaxTree(state$1).resolveStack(range.from, 1);
			for (let cur = stack; cur; cur = cur.next) {
				let { node } = cur;
				if (((node.from < range.from && node.to >= range.to) ||
					(node.to > range.to && node.from <= range.from)) &&
					((_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent))
					return state.EditorSelection.range(node.to, node.from);
			}
			return range;
		});
		dispatch(setSel(state$1, selection));
		return true;
	};
	/**
	Simplify the current selection. When multiple ranges are selected,
	reduce it to its main range. Otherwise, if the selection is
	non-empty, convert it to a cursor selection.
	*/
	const simplifySelection = ({ state: state$1, dispatch }) => {
		let cur = state$1.selection, selection = null;
		if (cur.ranges.length > 1)
			selection = state.EditorSelection.create([cur.main]);
		else if (!cur.main.empty)
			selection = state.EditorSelection.create([state.EditorSelection.cursor(cur.main.head)]);
		if (!selection)
			return false;
		dispatch(setSel(state$1, selection));
		return true;
	};
	function deleteBy(target, by) {
		if (target.state.readOnly)
			return false;
		let event = "delete.selection", { state: state$1 } = target;
		let changes = state$1.changeByRange(range => {
			let { from, to } = range;
			if (from == to) {
				let towards = by(range);
				if (towards < from) {
					event = "delete.backward";
					towards = skipAtomic(target, towards, false);
				}
				else if (towards > from) {
					event = "delete.forward";
					towards = skipAtomic(target, towards, true);
				}
				from = Math.min(from, towards);
				to = Math.max(to, towards);
			}
			else {
				from = skipAtomic(target, from, false);
				to = skipAtomic(target, to, true);
			}
			return from == to ? { range } : { changes: { from, to }, range: state.EditorSelection.cursor(from, from < range.head ? -1 : 1) };
		});
		if (changes.changes.empty)
			return false;
		target.dispatch(state$1.update(changes, {
			scrollIntoView: true,
			userEvent: event,
			effects: event == "delete.selection" ? view.EditorView.announce.of(state$1.phrase("Selection deleted")) : undefined
		}));
		return true;
	}
	function skipAtomic(target, pos, forward) {
		if (target instanceof view.EditorView)
			for (let ranges of target.state.facet(view.EditorView.atomicRanges).map(f => f(target)))
				ranges.between(pos, pos, (from, to) => {
					if (from < pos && to > pos)
						pos = forward ? to : from;
				});
		return pos;
	}
	const deleteByChar = (target, forward) => deleteBy(target, range => {
		let pos = range.from, { state: state$1 } = target, line = state$1.doc.lineAt(pos), before, targetPos;
		if (!forward && pos > line.from && pos < line.from + 200 &&
			!/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
			if (before[before.length - 1] == "\t")
				return pos - 1;
			let col = state.countColumn(before, state$1.tabSize), drop = col % language.getIndentUnit(state$1) || language.getIndentUnit(state$1);
			for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
				pos--;
			targetPos = pos;
		}
		else {
			targetPos = state.findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
			if (targetPos == pos && line.number != (forward ? state$1.doc.lines : 1))
				targetPos += forward ? 1 : -1;
			else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
				targetPos = state.findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
		}
		return targetPos;
	});
	/**
	Delete the selection, or, for cursor selections, the character
	before the cursor.
	*/
	const deleteCharBackward = view => deleteByChar(view, false);
	/**
	Delete the selection or the character after the cursor.
	*/
	const deleteCharForward = view => deleteByChar(view, true);
	const deleteByGroup = (target, forward) => deleteBy(target, range => {
		let pos = range.head, { state: state$1 } = target, line = state$1.doc.lineAt(pos);
		let categorize = state$1.charCategorizer(pos);
		for (let cat = null;;) {
			if (pos == (forward ? line.to : line.from)) {
				if (pos == range.head && line.number != (forward ? state$1.doc.lines : 1))
					pos += forward ? 1 : -1;
				break;
			}
			let next = state.findClusterBreak(line.text, pos - line.from, forward) + line.from;
			let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
			let nextCat = categorize(nextChar);
			if (cat != null && nextCat != cat)
				break;
			if (nextChar != " " || pos != range.head)
				cat = nextCat;
			pos = next;
		}
		return pos;
	});
	/**
	Delete the selection or backward until the end of the next
	[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
	whitespace when they consist of a single space.
	*/
	const deleteGroupBackward = target => deleteByGroup(target, false);
	/**
	Delete the selection or forward until the end of the next group.
	*/
	const deleteGroupForward = target => deleteByGroup(target, true);
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the end of the line. If the cursor is directly at the end of the
	line, delete the line break after it.
	*/
	const deleteToLineEnd = view => deleteBy(view, range => {
		let lineEnd = view.lineBlockAt(range.head).to;
		return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the start of the line. If the cursor is directly at the start of the
	line, delete the line break before it.
	*/
	const deleteToLineStart = view => deleteBy(view, range => {
		let lineStart = view.lineBlockAt(range.head).from;
		return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the start of the line or the next line wrap before the cursor.
	*/
	const deleteLineBoundaryBackward = view => deleteBy(view, range => {
		let lineStart = view.moveToLineBoundary(range, false).head;
		return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the end of the line or the next line wrap after the cursor.
	*/
	const deleteLineBoundaryForward = view => deleteBy(view, range => {
		let lineStart = view.moveToLineBoundary(range, true).head;
		return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
	});
	/**
	Delete all whitespace directly before a line end from the
	document.
	*/
	const deleteTrailingWhitespace = ({ state, dispatch }) => {
		if (state.readOnly)
			return false;
		let changes = [];
		for (let pos = 0, prev = "", iter = state.doc.iter();;) {
			iter.next();
			if (iter.lineBreak || iter.done) {
				let trailing = prev.search(/\s+$/);
				if (trailing > -1)
					changes.push({ from: pos - (prev.length - trailing), to: pos });
				if (iter.done)
					break;
				prev = "";
			}
			else {
				prev = iter.value;
			}
			pos += iter.value.length;
		}
		if (!changes.length)
			return false;
		dispatch(state.update({ changes, userEvent: "delete" }));
		return true;
	};
	/**
	Replace each selection range with a line break, leaving the cursor
	on the line before the break.
	*/
	const splitLine = ({ state: state$1, dispatch }) => {
		if (state$1.readOnly)
			return false;
		let changes = state$1.changeByRange(range => {
			return { changes: { from: range.from, to: range.to, insert: state.Text.of(["", ""]) },
				range: state.EditorSelection.cursor(range.from) };
		});
		dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
		return true;
	};
	/**
	Flip the characters before and after the cursor(s).
	*/
	const transposeChars = ({ state: state$1, dispatch }) => {
		if (state$1.readOnly)
			return false;
		let changes = state$1.changeByRange(range => {
			if (!range.empty || range.from == 0 || range.from == state$1.doc.length)
				return { range };
			let pos = range.from, line = state$1.doc.lineAt(pos);
			let from = pos == line.from ? pos - 1 : state.findClusterBreak(line.text, pos - line.from, false) + line.from;
			let to = pos == line.to ? pos + 1 : state.findClusterBreak(line.text, pos - line.from, true) + line.from;
			return { changes: { from, to, insert: state$1.doc.slice(pos, to).append(state$1.doc.slice(from, pos)) },
				range: state.EditorSelection.cursor(to) };
		});
		if (changes.changes.empty)
			return false;
		dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
		return true;
	};
	function selectedLineBlocks(state) {
		let blocks = [], upto = -1;
		for (let range of state.selection.ranges) {
			let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
			if (!range.empty && range.to == endLine.from)
				endLine = state.doc.lineAt(range.to - 1);
			if (upto >= startLine.number) {
				let prev = blocks[blocks.length - 1];
				prev.to = endLine.to;
				prev.ranges.push(range);
			}
			else {
				blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
			}
			upto = endLine.number + 1;
		}
		return blocks;
	}
	function moveLine(state$1, dispatch, forward) {
		if (state$1.readOnly)
			return false;
		let changes = [], ranges = [];
		for (let block of selectedLineBlocks(state$1)) {
			if (forward ? block.to == state$1.doc.length : block.from == 0)
				continue;
			let nextLine = state$1.doc.lineAt(forward ? block.to + 1 : block.from - 1);
			let size = nextLine.length + 1;
			if (forward) {
				changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state$1.lineBreak });
				for (let r of block.ranges)
					ranges.push(state.EditorSelection.range(Math.min(state$1.doc.length, r.anchor + size), Math.min(state$1.doc.length, r.head + size)));
			}
			else {
				changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state$1.lineBreak + nextLine.text });
				for (let r of block.ranges)
					ranges.push(state.EditorSelection.range(r.anchor - size, r.head - size));
			}
		}
		if (!changes.length)
			return false;
		dispatch(state$1.update({
			changes,
			scrollIntoView: true,
			selection: state.EditorSelection.create(ranges, state$1.selection.mainIndex),
			userEvent: "move.line"
		}));
		return true;
	}
	/**
	Move the selected lines up one line.
	*/
	const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
	/**
	Move the selected lines down one line.
	*/
	const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
	function copyLine(state, dispatch, forward) {
		if (state.readOnly)
			return false;
		let changes = [];
		for (let block of selectedLineBlocks(state)) {
			if (forward)
				changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
			else
				changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
		}
		dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
		return true;
	}
	/**
	Create a copy of the selected lines. Keep the selection in the top copy.
	*/
	const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
	/**
	Create a copy of the selected lines. Keep the selection in the bottom copy.
	*/
	const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
	/**
	Delete selected lines.
	*/
	const deleteLine = view => {
		if (view.state.readOnly)
			return false;
		let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
			if (from > 0)
				from--;
			else if (to < state.doc.length)
				to++;
			return { from, to };
		}));
		let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
		view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
		return true;
	};
	/**
	Replace the selection with a newline.
	*/
	const insertNewline = ({ state, dispatch }) => {
		dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: "input" }));
		return true;
	};
	function isBetweenBrackets(state, pos) {
		if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
			return { from: pos, to: pos };
		let context = language.syntaxTree(state).resolveInner(pos);
		let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
		if (before && after && before.to <= pos && after.from >= pos &&
			(closedBy = before.type.prop(common.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
			state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
			!/\S/.test(state.sliceDoc(before.to, after.from)))
			return { from: before.to, to: after.from };
		return null;
	}
	/**
	Replace the selection with a newline and indent the newly created
	line(s). If the current line consists only of whitespace, this
	will also delete that whitespace. When the cursor is between
	matching brackets, an additional newline will be inserted after
	the cursor.
	*/
	const insertNewlineAndIndent = newlineAndIndent(false);
	/**
	Create a blank, indented line below the current line.
	*/
	const insertBlankLine = newlineAndIndent(true);
	function newlineAndIndent(atEof) {
		return ({ state: state$1, dispatch }) => {
			if (state$1.readOnly)
				return false;
			let changes = state$1.changeByRange(range => {
				let { from, to } = range, line = state$1.doc.lineAt(from);
				let explode = !atEof && from == to && isBetweenBrackets(state$1, from);
				if (atEof)
					from = to = (to <= line.to ? line : state$1.doc.lineAt(to)).to;
				let cx = new language.IndentContext(state$1, { simulateBreak: from, simulateDoubleBreak: !!explode });
				let indent = language.getIndentation(cx, from);
				if (indent == null)
					indent = state.countColumn(/^\s*/.exec(state$1.doc.lineAt(from).text)[0], state$1.tabSize);
				while (to < line.to && /\s/.test(line.text[to - line.from]))
					to++;
				if (explode)
					({ from, to } = explode);
				else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
					from = line.from;
				let insert = ["", language.indentString(state$1, indent)];
				if (explode)
					insert.push(language.indentString(state$1, cx.lineIndent(line.from, -1)));
				return { changes: { from, to, insert: state.Text.of(insert) },
					range: state.EditorSelection.cursor(from + 1 + insert[1].length) };
			});
			dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
			return true;
		};
	}
	function changeBySelectedLine(state$1, f) {
		let atLine = -1;
		return state$1.changeByRange(range => {
			let changes = [];
			for (let pos = range.from; pos <= range.to;) {
				let line = state$1.doc.lineAt(pos);
				if (line.number > atLine && (range.empty || range.to > line.from)) {
					f(line, changes, range);
					atLine = line.number;
				}
				pos = line.to + 1;
			}
			let changeSet = state$1.changes(changes);
			return { changes,
				range: state.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
		});
	}
	/**
	Auto-indent the selected lines. This uses the [indentation service
	facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
	information.
	*/
	const indentSelection = ({ state, dispatch }) => {
		if (state.readOnly)
			return false;
		let updated = Object.create(null);
		let context = new language.IndentContext(state, { overrideIndentation: start => {
				let found = updated[start];
				return found == null ? -1 : found;
			} });
		let changes = changeBySelectedLine(state, (line, changes, range) => {
			let indent = language.getIndentation(context, line.from);
			if (indent == null)
				return;
			if (!/\S/.test(line.text))
				indent = 0;
			let cur = /^\s*/.exec(line.text)[0];
			let norm = language.indentString(state, indent);
			if (cur != norm || range.from < line.from + cur.length) {
				updated[line.from] = indent;
				changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
			}
		});
		if (!changes.changes.empty)
			dispatch(state.update(changes, { userEvent: "indent" }));
		return true;
	};
	/**
	Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
	lines.
	*/
	const indentMore = ({ state, dispatch }) => {
		if (state.readOnly)
			return false;
		dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
			changes.push({ from: line.from, insert: state.facet(language.indentUnit) });
		}), { userEvent: "input.indent" }));
		return true;
	};
	/**
	Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
	selected lines.
	*/
	const indentLess = ({ state: state$1, dispatch }) => {
		if (state$1.readOnly)
			return false;
		dispatch(state$1.update(changeBySelectedLine(state$1, (line, changes) => {
			let space = /^\s*/.exec(line.text)[0];
			if (!space)
				return;
			let col = state.countColumn(space, state$1.tabSize), keep = 0;
			let insert = language.indentString(state$1, Math.max(0, col - language.getIndentUnit(state$1)));
			while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
				keep++;
			changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
		}), { userEvent: "delete.dedent" }));
		return true;
	};
	/**
	Insert a tab character at the cursor or, if something is selected,
	use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
	selection.
	*/
	const insertTab = ({ state, dispatch }) => {
		if (state.selection.ranges.some(r => !r.empty))
			return indentMore({ state, dispatch });
		dispatch(state.update(state.replaceSelection("\t"), { scrollIntoView: true, userEvent: "input" }));
		return true;
	};
	/**
	Array of key bindings containing the Emacs-style bindings that are
	available on macOS by default.
	
	 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
	 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
	 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
	 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
	 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
	*/
	const emacsStyleKeymap = [
		{ key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
		{ key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
		{ key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
		{ key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
		{ key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
		{ key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
		{ key: "Ctrl-d", run: deleteCharForward },
		{ key: "Ctrl-h", run: deleteCharBackward },
		{ key: "Ctrl-k", run: deleteToLineEnd },
		{ key: "Ctrl-Alt-h", run: deleteGroupBackward },
		{ key: "Ctrl-o", run: splitLine },
		{ key: "Ctrl-t", run: transposeChars },
		{ key: "Ctrl-v", run: cursorPageDown },
	];
	/**
	An array of key bindings closely sticking to platform-standard or
	widely used bindings. (This includes the bindings from
	[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
	property changed to `mac`.)
	
	 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
	 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
	 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
	 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
	 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
	 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
	 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
	 - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
	 - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
	*/
	const standardKeymap = [
		{ key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
		{ key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
		{ mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
		{ key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
		{ key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
		{ mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
		{ key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
		{ mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
		{ mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
		{ key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
		{ mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
		{ mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
		{ key: "PageUp", run: cursorPageUp, shift: selectPageUp },
		{ key: "PageDown", run: cursorPageDown, shift: selectPageDown },
		{ key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
		{ key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
		{ key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
		{ key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
		{ key: "Enter", run: insertNewlineAndIndent },
		{ key: "Mod-a", run: selectAll },
		{ key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
		{ key: "Delete", run: deleteCharForward },
		{ key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
		{ key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
		{ mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
		{ mac: "Mod-Delete", run: deleteLineBoundaryForward }
	].concat(emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
	/**
	The default keymap. Includes all bindings from
	[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:
	
	- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
	- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
	- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
	- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
	- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
	- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
	- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
	- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
	- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
	- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
	- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
	- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
	- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
	- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
	- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
	- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
	- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
	*/
	const defaultKeymap = [
		{ key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
		{ key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
		{ key: "Alt-ArrowUp", run: moveLineUp },
		{ key: "Shift-Alt-ArrowUp", run: copyLineUp },
		{ key: "Alt-ArrowDown", run: moveLineDown },
		{ key: "Shift-Alt-ArrowDown", run: copyLineDown },
		{ key: "Escape", run: simplifySelection },
		{ key: "Mod-Enter", run: insertBlankLine },
		{ key: "Alt-l", mac: "Ctrl-l", run: selectLine },
		{ key: "Mod-i", run: selectParentSyntax, preventDefault: true },
		{ key: "Mod-[", run: indentLess },
		{ key: "Mod-]", run: indentMore },
		{ key: "Mod-Alt-\\", run: indentSelection },
		{ key: "Shift-Mod-k", run: deleteLine },
		{ key: "Shift-Mod-\\", run: cursorMatchingBracket },
		{ key: "Mod-/", run: toggleComment },
		{ key: "Alt-A", run: toggleBlockComment }
	].concat(standardKeymap);
	/**
	A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
	Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
	Please see the [Tab example](../../examples/tab/) before using
	this.
	*/
	const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };
	
	exports.blockComment = blockComment;
	exports.blockUncomment = blockUncomment;
	exports.copyLineDown = copyLineDown;
	exports.copyLineUp = copyLineUp;
	exports.cursorCharBackward = cursorCharBackward;
	exports.cursorCharForward = cursorCharForward;
	exports.cursorCharLeft = cursorCharLeft;
	exports.cursorCharRight = cursorCharRight;
	exports.cursorDocEnd = cursorDocEnd;
	exports.cursorDocStart = cursorDocStart;
	exports.cursorGroupBackward = cursorGroupBackward;
	exports.cursorGroupForward = cursorGroupForward;
	exports.cursorGroupLeft = cursorGroupLeft;
	exports.cursorGroupRight = cursorGroupRight;
	exports.cursorLineBoundaryBackward = cursorLineBoundaryBackward;
	exports.cursorLineBoundaryForward = cursorLineBoundaryForward;
	exports.cursorLineBoundaryLeft = cursorLineBoundaryLeft;
	exports.cursorLineBoundaryRight = cursorLineBoundaryRight;
	exports.cursorLineDown = cursorLineDown;
	exports.cursorLineEnd = cursorLineEnd;
	exports.cursorLineStart = cursorLineStart;
	exports.cursorLineUp = cursorLineUp;
	exports.cursorMatchingBracket = cursorMatchingBracket;
	exports.cursorPageDown = cursorPageDown;
	exports.cursorPageUp = cursorPageUp;
	exports.cursorSubwordBackward = cursorSubwordBackward;
	exports.cursorSubwordForward = cursorSubwordForward;
	exports.cursorSyntaxLeft = cursorSyntaxLeft;
	exports.cursorSyntaxRight = cursorSyntaxRight;
	exports.defaultKeymap = defaultKeymap;
	exports.deleteCharBackward = deleteCharBackward;
	exports.deleteCharForward = deleteCharForward;
	exports.deleteGroupBackward = deleteGroupBackward;
	exports.deleteGroupForward = deleteGroupForward;
	exports.deleteLine = deleteLine;
	exports.deleteLineBoundaryBackward = deleteLineBoundaryBackward;
	exports.deleteLineBoundaryForward = deleteLineBoundaryForward;
	exports.deleteToLineEnd = deleteToLineEnd;
	exports.deleteToLineStart = deleteToLineStart;
	exports.deleteTrailingWhitespace = deleteTrailingWhitespace;
	exports.emacsStyleKeymap = emacsStyleKeymap;
	exports.history = history;
	exports.historyField = historyField;
	exports.historyKeymap = historyKeymap;
	exports.indentLess = indentLess;
	exports.indentMore = indentMore;
	exports.indentSelection = indentSelection;
	exports.indentWithTab = indentWithTab;
	exports.insertBlankLine = insertBlankLine;
	exports.insertNewline = insertNewline;
	exports.insertNewlineAndIndent = insertNewlineAndIndent;
	exports.insertTab = insertTab;
	exports.invertedEffects = invertedEffects;
	exports.isolateHistory = isolateHistory;
	exports.lineComment = lineComment;
	exports.lineUncomment = lineUncomment;
	exports.moveLineDown = moveLineDown;
	exports.moveLineUp = moveLineUp;
	exports.redo = redo;
	exports.redoDepth = redoDepth;
	exports.redoSelection = redoSelection;
	exports.selectAll = selectAll;
	exports.selectCharBackward = selectCharBackward;
	exports.selectCharForward = selectCharForward;
	exports.selectCharLeft = selectCharLeft;
	exports.selectCharRight = selectCharRight;
	exports.selectDocEnd = selectDocEnd;
	exports.selectDocStart = selectDocStart;
	exports.selectGroupBackward = selectGroupBackward;
	exports.selectGroupForward = selectGroupForward;
	exports.selectGroupLeft = selectGroupLeft;
	exports.selectGroupRight = selectGroupRight;
	exports.selectLine = selectLine;
	exports.selectLineBoundaryBackward = selectLineBoundaryBackward;
	exports.selectLineBoundaryForward = selectLineBoundaryForward;
	exports.selectLineBoundaryLeft = selectLineBoundaryLeft;
	exports.selectLineBoundaryRight = selectLineBoundaryRight;
	exports.selectLineDown = selectLineDown;
	exports.selectLineEnd = selectLineEnd;
	exports.selectLineStart = selectLineStart;
	exports.selectLineUp = selectLineUp;
	exports.selectMatchingBracket = selectMatchingBracket;
	exports.selectPageDown = selectPageDown;
	exports.selectPageUp = selectPageUp;
	exports.selectParentSyntax = selectParentSyntax;
	exports.selectSubwordBackward = selectSubwordBackward;
	exports.selectSubwordForward = selectSubwordForward;
	exports.selectSyntaxLeft = selectSyntaxLeft;
	exports.selectSyntaxRight = selectSyntaxRight;
	exports.simplifySelection = simplifySelection;
	exports.splitLine = splitLine;
	exports.standardKeymap = standardKeymap;
	exports.toggleBlockComment = toggleBlockComment;
	exports.toggleBlockCommentByLine = toggleBlockCommentByLine;
	exports.toggleComment = toggleComment;
	exports.toggleLineComment = toggleLineComment;
	exports.transposeChars = transposeChars;
	exports.undo = undo;
	exports.undoDepth = undoDepth;
	exports.undoSelection = undoSelection;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-angular/dist/index.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-angular/dist/index.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var langHtml = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	var langJavascript = __webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const Text = 1,
	  attributeContentSingle = 33,
	  attributeContentDouble = 34,
	  scriptAttributeContentSingle = 35,
	  scriptAttributeContentDouble = 36;
	
	const text = new lr.ExternalTokenizer(input => {
		let start = input.pos;
		for (;;) {
			if (input.next == 10 /* Newline */) {
				input.advance();
				break;
			}
			else if (input.next == 123 /* BraceL */ && input.peek(1) == 123 /* BraceL */ || input.next < 0) {
				break;
			}
			input.advance();
		}
		if (input.pos > start)
			input.acceptToken(Text);
	});
	function attrContent(quote, token, script) {
		return new lr.ExternalTokenizer(input => {
			let start = input.pos;
			while (input.next != quote && input.next >= 0 &&
				(script || input.next != 38 /* Ampersand */ && (input.next != 123 /* BraceL */ || input.peek(1) != 123 /* BraceL */)))
				input.advance();
			if (input.pos > start)
				input.acceptToken(token);
		});
	}
	const attrSingle = attrContent(39 /* SingleQuote */, attributeContentSingle, false);
	const attrDouble = attrContent(34 /* DoubleQuote */, attributeContentDouble, false);
	const scriptAttrSingle = attrContent(39 /* SingleQuote */, scriptAttributeContentSingle, true);
	const scriptAttrDouble = attrContent(34 /* DoubleQuote */, scriptAttributeContentDouble, true);
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "(jOVOqOOOeQpOOOvO!bO'#CaOOOP'#Cx'#CxQVOqOOO!OQpO'#CfO!WQpO'#ClO!]QpO'#CrO!bQpO'#CsOOQO'#Cv'#CvQ!gQpOOQ!lQpOOQ!qQpOOOOOV,58{,58{O!vOpO,58{OOOP-E6v-E6vO!{QpO,59QO#TQpO,59QOOQO,59W,59WO#YQpO,59^OOQO,59_,59_O#_QpOOO#_QpOOO#gQpOOOOOV1G.g1G.gO#oQpO'#CyO#tQpO1G.lOOQO1G.l1G.lO#|QpO1G.lOOQO1G.x1G.xO$UO`O'#DUO$ZOWO'#DUOOQO'#Co'#CoQOQpOOOOQO'#Cu'#CuO$`OtO'#CwO$qOrO'#CwOOQO,59e,59eOOQO-E6w-E6wOOQO7+$W7+$WO%SQpO7+$WO%[QpO7+$WOOOO'#Cp'#CpO%aOpO,59pOOOO'#Cq'#CqO%fOpO,59pOOOS'#Cz'#CzO%kOtO,59cOOQO,59c,59cOOOQ'#C{'#C{O%|OrO,59cO&_QpO<<GrOOQO<<Gr<<GrOOQO1G/[1G/[OOOS-E6x-E6xOOQO1G.}1G.}OOOQ-E6y-E6yOOQOAN=^AN=^",
	  stateData: "&d~OvOS~OPROSQOVROWRO~OZTO[XO^VOaUOhWO~OR]OU^O~O[`O^aO~O[bO~O[cO~O[dO~ObeO~ObfO~ObgO~ORhO~O]kOwiO~O[lO~O_mO~OynOzoO~OysOztO~O[uO~O]wOwiO~O_yOwiO~OtzO~Os|O~OSQOV!OOW!OOr!OOy!QO~OSQOV!ROW!ROq!ROz!QO~O_!TOwiO~O]!UO~Oy!VO~Oz!VO~OSQOV!OOW!OOr!OOy!XO~OSQOV!ROW!ROq!ROz!XO~O]!ZO~O",
	  goto: "#dyPPPPPzPPPP!WPPPPP!WPP!Z!^!a!d!dP!g!j!m!p!v#Q#WPPPPPPPP#^SROSS!Os!PT!Rt!SRYPRqeR{nR}oRZPRqfR[PRqgQSOR_SQj`SvjxRxlQ!PsR!W!PQ!StR!Y!SQpeRrf",
	  nodeNames: "⚠ Text Content }} {{ Interpolation InterpolationContent Entity InvalidEntity Attribute BoundAttributeName [ Identifier ] ( ) ReferenceName # Is ExpressionAttributeValue AttributeInterpolation AttributeInterpolation EventName DirectiveName * StatementAttributeValue AttributeName AttributeValue",
	  maxTerm: 42,
	  nodeProps: [
		["openedBy", 3,"{{",15,"("],
		["closedBy", 4,"}}",14,")"]
	  ],
	  skippedNodes: [0],
	  repeatNodeCount: 4,
	  tokenData: "0r~RyOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mqr#rrs%jst&Qtv#rvw&hwx)zxy*byz*xz{+`{}#r}!O+v!O!P-]!P!Q#r!Q![+v![!]+v!]!_#r!_!`-s!`!c#r!c!}+v!}#O.Z#O#P#r#P#Q.q#Q#R#r#R#S+v#S#T#r#T#o+v#o#p/X#p#q#r#q#r0Z#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vQ#wTUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rQ$ZSO#q#r#r;'S#r;'S;=`$g<%lO#rQ$jP;=`<%l#rR$t[UQvPOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mq#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR%qTyPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&XTaPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&oXUQWPOp'[pq#rq!]'[!]!^#r!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R'aXUQOp'[pq#rq!]'[!]!^'|!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R(TTVPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR(gXOp'[pq#rq!]'[!]!^'|!^#q'[#q#r)S#r;'S'[;'S;=`)t<%lO'[P)VUOp)Sq!])S!]!^)i!^;'S)S;'S;=`)n<%lO)SP)nOVPP)qP;=`<%l)SR)wP;=`<%l'[R*RTzPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR*iT^PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+PT_PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+gThPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+}b[PUQO}#r}!O+v!O!Q#r!Q![+v![!]+v!]!c#r!c!}+v!}#R#r#R#S+v#S#T#r#T#o+v#o#q#r#q#r$W#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vR-YP;=`<%l+vR-dTwPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR-zTUQbPO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.bTZPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.xT]PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/^VUQO#o#r#o#p/s#p#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/zTSPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#r~0^TO#q#r#q#r0m#r;'S#r;'S;=`$g<%lO#r~0rOR~",
	  tokenizers: [text, attrSingle, attrDouble, scriptAttrSingle, scriptAttrDouble, 0, 1],
	  topRules: {"Content":[0,2],"Attribute":[1,9]},
	  tokenPrec: 0
	});
	
	const exprParser = langJavascript.javascriptLanguage.parser.configure({
		top: "SingleExpression"
	});
	const baseParser = parser.configure({
		props: [
			highlight.styleTags({
				Text: highlight.tags.content,
				Is: highlight.tags.definitionOperator,
				AttributeName: highlight.tags.attributeName,
				"AttributeValue ExpressionAttributeValue StatementAttributeValue": highlight.tags.attributeValue,
				Entity: highlight.tags.character,
				InvalidEntity: highlight.tags.invalid,
				"BoundAttributeName/Identifier": highlight.tags.attributeName,
				"EventName/Identifier": highlight.tags.special(highlight.tags.attributeName),
				"ReferenceName/Identifier": highlight.tags.variableName,
				"DirectiveName/Identifier": highlight.tags.keyword,
				"{{ }}": highlight.tags.brace,
				"( )": highlight.tags.paren,
				"[ ]": highlight.tags.bracket,
				"# '*'": highlight.tags.punctuation
			})
		]
	});
	const exprMixed = { parser: exprParser }, statementMixed = { parser: langJavascript.javascriptLanguage.parser };
	const textParser = baseParser.configure({
		wrap: common.parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed : null),
	});
	const attrParser = baseParser.configure({
		wrap: common.parseMixed((node, input) => {
			var _a;
			return node.name == "InterpolationContent" ? exprMixed
				: node.name != "AttributeInterpolation" ? null
					: ((_a = node.node.parent) === null || _a === void 0 ? void 0 : _a.name) == "StatementAttributeValue" ? statementMixed : exprMixed;
		}),
		top: "Attribute"
	});
	const textMixed = { parser: textParser }, attrMixed = { parser: attrParser };
	const baseHTML = langHtml.html();
	function mkAngular(language) {
		return language.configure({ wrap: common.parseMixed(mixAngular) }, "angular");
	}
	/**
	A language provider for Angular Templates.
	*/
	const angularLanguage = mkAngular(baseHTML.language);
	function mixAngular(node, input) {
		switch (node.name) {
			case "Attribute":
				return /^[*#(\[]|\{\{/.test(input.read(node.from, node.to)) ? attrMixed : null;
			case "Text":
				return textMixed;
		}
		return null;
	}
	/**
	Angular Template language support.
	*/
	function angular(config = {}) {
		let base = baseHTML;
		if (config.base) {
			if (config.base.language.name != "html" || !(config.base.language instanceof language.LRLanguage))
				throw new RangeError("The base option must be the result of calling html(...)");
			base = config.base;
		}
		return new language.LanguageSupport(base.language == baseHTML.language ? angularLanguage : mkAngular(base.language), [base.support, base.language.data.of({
				closeBrackets: { brackets: ["[", "{", '"'] },
				indentOnInput: /^\s*[\}\]]$/
			})]);
	}
	
	exports.angular = angular;
	exports.angularLanguage = angularLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-cpp/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-cpp/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var cpp$1 = __webpack_require__(/*! @lezer/cpp */ "../editor/node_modules/@lezer/cpp/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	A language provider based on the [Lezer C++
	parser](https://github.com/lezer-parser/cpp), extended with
	highlighting and indentation information.
	*/
	const cppLanguage = language.LRLanguage.define({
		name: "cpp",
		parser: cpp$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					IfStatement: language.continuedIndent({ except: /^\s*({|else\b)/ }),
					TryStatement: language.continuedIndent({ except: /^\s*({|catch)\b/ }),
					LabeledStatement: language.flatIndent,
					CaseStatement: context => context.baseIndent + context.unit,
					BlockComment: () => null,
					CompoundStatement: language.delimitedIndent({ closing: "}" }),
					Statement: language.continuedIndent({ except: /^{/ })
				}),
				language.foldNodeProp.add({
					"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": language.foldInside,
					BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
				})
			]
		}),
		languageData: {
			commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
			indentOnInput: /^\s*(?:case |default:|\{|\})$/,
			closeBrackets: { stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"] }
		}
	});
	/**
	Language support for C++.
	*/
	function cpp() {
		return new language.LanguageSupport(cppLanguage);
	}
	
	exports.cpp = cpp;
	exports.cppLanguage = cppLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-css/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-css/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var css$1 = __webpack_require__(/*! @lezer/css */ "../editor/node_modules/@lezer/css/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	let _properties = null;
	function properties() {
		if (!_properties && typeof document == "object" && document.body) {
			let { style } = document.body, names = [], seen = new Set;
			for (let prop in style)
				if (prop != "cssText" && prop != "cssFloat") {
					if (typeof style[prop] == "string") {
						if (/[A-Z]/.test(prop))
							prop = prop.replace(/[A-Z]/g, ch => "-" + ch.toLowerCase());
						if (!seen.has(prop)) {
							names.push(prop);
							seen.add(prop);
						}
					}
				}
			_properties = names.sort().map(name => ({ type: "property", label: name }));
		}
		return _properties || [];
	}
	const pseudoClasses = [
		"active", "after", "any-link", "autofill", "backdrop", "before",
		"checked", "cue", "default", "defined", "disabled", "empty",
		"enabled", "file-selector-button", "first", "first-child",
		"first-letter", "first-line", "first-of-type", "focus",
		"focus-visible", "focus-within", "fullscreen", "has", "host",
		"host-context", "hover", "in-range", "indeterminate", "invalid",
		"is", "lang", "last-child", "last-of-type", "left", "link", "marker",
		"modal", "not", "nth-child", "nth-last-child", "nth-last-of-type",
		"nth-of-type", "only-child", "only-of-type", "optional", "out-of-range",
		"part", "placeholder", "placeholder-shown", "read-only", "read-write",
		"required", "right", "root", "scope", "selection", "slotted", "target",
		"target-text", "valid", "visited", "where"
	].map(name => ({ type: "class", label: name }));
	const values = [
		"above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
		"ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
		"antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
		"avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
		"bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
		"both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
		"buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
		"caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
		"cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
		"color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
		"contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
		"crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
		"decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
		"destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
		"disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
		"ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
		"ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
		"expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
		"fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
		"geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
		"higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
		"inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
		"inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
		"inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
		"landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
		"linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
		"lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
		"match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
		"mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
		"ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
		"normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
		"oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
		"outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
		"perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
		"pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
		"read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
		"repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
		"rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
		"row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
		"scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
		"se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
		"single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
		"slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
		"small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
		"source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
		"static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
		"super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
		"table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
		"table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
		"threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
		"transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
		"ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
		"uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
		"visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
		"windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
	].map(name => ({ type: "keyword", label: name })).concat([
		"aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
		"bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
		"burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
		"cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
		"darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
		"darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
		"darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
		"deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
		"floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
		"gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
		"hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
		"lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
		"lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
		"lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
		"lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
		"maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
		"mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
		"mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
		"navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
		"orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
		"papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
		"purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
		"salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
		"slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
		"teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
		"whitesmoke", "yellow", "yellowgreen"
	].map(name => ({ type: "constant", label: name })));
	const tags = [
		"a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
		"br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
		"details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
		"form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
		"img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
		"p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
		"sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
	].map(name => ({ type: "type", label: name }));
	const identifier = /^(\w[\w-]*|-\w[\w-]*|)$/, variable = /^-(-[\w-]*)?$/;
	function isVarArg(node, doc) {
		var _a;
		if (node.name == "(" || node.type.isError)
			node = node.parent || node;
		if (node.name != "ArgList")
			return false;
		let callee = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.firstChild;
		if ((callee === null || callee === void 0 ? void 0 : callee.name) != "Callee")
			return false;
		return doc.sliceString(callee.from, callee.to) == "var";
	}
	const VariablesByNode = new common.NodeWeakMap();
	const declSelector = ["Declaration"];
	function astTop(node) {
		for (let cur = node;;) {
			if (cur.type.isTop)
				return cur;
			if (!(cur = cur.parent))
				return node;
		}
	}
	function variableNames(doc, node, isVariable) {
		if (node.to - node.from > 4096) {
			let known = VariablesByNode.get(node);
			if (known)
				return known;
			let result = [], seen = new Set, cursor = node.cursor(common.IterMode.IncludeAnonymous);
			if (cursor.firstChild())
				do {
					for (let option of variableNames(doc, cursor.node, isVariable))
						if (!seen.has(option.label)) {
							seen.add(option.label);
							result.push(option);
						}
				} while (cursor.nextSibling());
			VariablesByNode.set(node, result);
			return result;
		}
		else {
			let result = [], seen = new Set;
			node.cursor().iterate(node => {
				var _a;
				if (isVariable(node) && node.matchContext(declSelector) && ((_a = node.node.nextSibling) === null || _a === void 0 ? void 0 : _a.name) == ":") {
					let name = doc.sliceString(node.from, node.to);
					if (!seen.has(name)) {
						seen.add(name);
						result.push({ label: name, type: "variable" });
					}
				}
			});
			return result;
		}
	}
	/**
	Create a completion source for a CSS dialect, providing a
	predicate for determining what kind of syntax node can act as a
	completable variable. This is used by language modes like Sass and
	Less to reuse this package's completion logic.
	*/
	const defineCSSCompletionSource = (isVariable) => context => {
		let { state, pos } = context, node = language.syntaxTree(state).resolveInner(pos, -1);
		let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
		if (node.name == "PropertyName" ||
			(isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
			return { from: node.from, options: properties(), validFor: identifier };
		if (node.name == "ValueName")
			return { from: node.from, options: values, validFor: identifier };
		if (node.name == "PseudoClassName")
			return { from: node.from, options: pseudoClasses, validFor: identifier };
		if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
			return { from: isVariable(node) || isDash ? node.from : pos,
				options: variableNames(state.doc, astTop(node), isVariable),
				validFor: variable };
		if (node.name == "TagName") {
			for (let { parent } = node; parent; parent = parent.parent)
				if (parent.name == "Block")
					return { from: node.from, options: properties(), validFor: identifier };
			return { from: node.from, options: tags, validFor: identifier };
		}
		if (!context.explicit)
			return null;
		let above = node.resolve(pos), before = above.childBefore(pos);
		if (before && before.name == ":" && above.name == "PseudoClassSelector")
			return { from: pos, options: pseudoClasses, validFor: identifier };
		if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
			return { from: pos, options: values, validFor: identifier };
		if (above.name == "Block" || above.name == "Styles")
			return { from: pos, options: properties(), validFor: identifier };
		return null;
	};
	/**
	CSS property, variable, and value keyword completion source.
	*/
	const cssCompletionSource = defineCSSCompletionSource(n => n.name == "VariableName");
	
	/**
	A language provider based on the [Lezer CSS
	parser](https://github.com/lezer-parser/css), extended with
	highlighting and indentation information.
	*/
	const cssLanguage = language.LRLanguage.define({
		name: "css",
		parser: css$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					Declaration: language.continuedIndent()
				}),
				language.foldNodeProp.add({
					"Block KeyframeList": language.foldInside
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "/*", close: "*/" } },
			indentOnInput: /^\s*\}$/,
			wordChars: "-"
		}
	});
	/**
	Language support for CSS.
	*/
	function css() {
		return new language.LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
	}
	
	exports.css = css;
	exports.cssCompletionSource = cssCompletionSource;
	exports.cssLanguage = cssLanguage;
	exports.defineCSSCompletionSource = defineCSSCompletionSource;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-html/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var html$1 = __webpack_require__(/*! @lezer/html */ "../editor/node_modules/@lezer/html/dist/index.cjs");
	var langCss = __webpack_require__(/*! @codemirror/lang-css */ "../editor/node_modules/@codemirror/lang-css/dist/index.cjs");
	var langJavascript = __webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	const Targets = ["_blank", "_self", "_top", "_parent"];
	const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
	const Methods = ["get", "post", "put", "delete"];
	const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
	const Bool = ["true", "false"];
	const S = {}; // Empty tag spec
	const Tags = {
		a: {
			attrs: {
				href: null, ping: null, type: null,
				media: null,
				target: Targets,
				hreflang: null
			}
		},
		abbr: S,
		address: S,
		area: {
			attrs: {
				alt: null, coords: null, href: null, target: null, ping: null,
				media: null, hreflang: null, type: null,
				shape: ["default", "rect", "circle", "poly"]
			}
		},
		article: S,
		aside: S,
		audio: {
			attrs: {
				src: null, mediagroup: null,
				crossorigin: ["anonymous", "use-credentials"],
				preload: ["none", "metadata", "auto"],
				autoplay: ["autoplay"],
				loop: ["loop"],
				controls: ["controls"]
			}
		},
		b: S,
		base: { attrs: { href: null, target: Targets } },
		bdi: S,
		bdo: S,
		blockquote: { attrs: { cite: null } },
		body: S,
		br: S,
		button: {
			attrs: {
				form: null, formaction: null, name: null, value: null,
				autofocus: ["autofocus"],
				disabled: ["autofocus"],
				formenctype: Encs,
				formmethod: Methods,
				formnovalidate: ["novalidate"],
				formtarget: Targets,
				type: ["submit", "reset", "button"]
			}
		},
		canvas: { attrs: { width: null, height: null } },
		caption: S,
		center: S,
		cite: S,
		code: S,
		col: { attrs: { span: null } },
		colgroup: { attrs: { span: null } },
		command: {
			attrs: {
				type: ["command", "checkbox", "radio"],
				label: null, icon: null, radiogroup: null, command: null, title: null,
				disabled: ["disabled"],
				checked: ["checked"]
			}
		},
		data: { attrs: { value: null } },
		datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
		datalist: { attrs: { data: null } },
		dd: S,
		del: { attrs: { cite: null, datetime: null } },
		details: { attrs: { open: ["open"] } },
		dfn: S,
		div: S,
		dl: S,
		dt: S,
		em: S,
		embed: { attrs: { src: null, type: null, width: null, height: null } },
		eventsource: { attrs: { src: null } },
		fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
		figcaption: S,
		figure: S,
		footer: S,
		form: {
			attrs: {
				action: null, name: null,
				"accept-charset": Charsets,
				autocomplete: ["on", "off"],
				enctype: Encs,
				method: Methods,
				novalidate: ["novalidate"],
				target: Targets
			}
		},
		h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
		head: {
			children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
		},
		header: S,
		hgroup: S,
		hr: S,
		html: {
			attrs: { manifest: null }
		},
		i: S,
		iframe: {
			attrs: {
				src: null, srcdoc: null, name: null, width: null, height: null,
				sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
				seamless: ["seamless"]
			}
		},
		img: {
			attrs: {
				alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
				crossorigin: ["anonymous", "use-credentials"]
			}
		},
		input: {
			attrs: {
				alt: null, dirname: null, form: null, formaction: null,
				height: null, list: null, max: null, maxlength: null, min: null,
				name: null, pattern: null, placeholder: null, size: null, src: null,
				step: null, value: null, width: null,
				accept: ["audio/*", "video/*", "image/*"],
				autocomplete: ["on", "off"],
				autofocus: ["autofocus"],
				checked: ["checked"],
				disabled: ["disabled"],
				formenctype: Encs,
				formmethod: Methods,
				formnovalidate: ["novalidate"],
				formtarget: Targets,
				multiple: ["multiple"],
				readonly: ["readonly"],
				required: ["required"],
				type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
					"week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
					"file", "submit", "image", "reset", "button"]
			}
		},
		ins: { attrs: { cite: null, datetime: null } },
		kbd: S,
		keygen: {
			attrs: {
				challenge: null, form: null, name: null,
				autofocus: ["autofocus"],
				disabled: ["disabled"],
				keytype: ["RSA"]
			}
		},
		label: { attrs: { for: null, form: null } },
		legend: S,
		li: { attrs: { value: null } },
		link: {
			attrs: {
				href: null, type: null,
				hreflang: null,
				media: null,
				sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
			}
		},
		map: { attrs: { name: null } },
		mark: S,
		menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
		meta: {
			attrs: {
				content: null,
				charset: Charsets,
				name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
				"http-equiv": ["content-language", "content-type", "default-style", "refresh"]
			}
		},
		meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
		nav: S,
		noscript: S,
		object: {
			attrs: {
				data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
				typemustmatch: ["typemustmatch"]
			}
		},
		ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
			children: ["li", "script", "template", "ul", "ol"] },
		optgroup: { attrs: { disabled: ["disabled"], label: null } },
		option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
		output: { attrs: { for: null, form: null, name: null } },
		p: S,
		param: { attrs: { name: null, value: null } },
		pre: S,
		progress: { attrs: { value: null, max: null } },
		q: { attrs: { cite: null } },
		rp: S,
		rt: S,
		ruby: S,
		samp: S,
		script: {
			attrs: {
				type: ["text/javascript"],
				src: null,
				async: ["async"],
				defer: ["defer"],
				charset: Charsets
			}
		},
		section: S,
		select: {
			attrs: {
				form: null, name: null, size: null,
				autofocus: ["autofocus"],
				disabled: ["disabled"],
				multiple: ["multiple"]
			}
		},
		slot: { attrs: { name: null } },
		small: S,
		source: { attrs: { src: null, type: null, media: null } },
		span: S,
		strong: S,
		style: {
			attrs: {
				type: ["text/css"],
				media: null,
				scoped: null
			}
		},
		sub: S,
		summary: S,
		sup: S,
		table: S,
		tbody: S,
		td: { attrs: { colspan: null, rowspan: null, headers: null } },
		template: S,
		textarea: {
			attrs: {
				dirname: null, form: null, maxlength: null, name: null, placeholder: null,
				rows: null, cols: null,
				autofocus: ["autofocus"],
				disabled: ["disabled"],
				readonly: ["readonly"],
				required: ["required"],
				wrap: ["soft", "hard"]
			}
		},
		tfoot: S,
		th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
		thead: S,
		time: { attrs: { datetime: null } },
		title: S,
		tr: S,
		track: {
			attrs: {
				src: null, label: null, default: null,
				kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
				srclang: null
			}
		},
		ul: { children: ["li", "script", "template", "ul", "ol"] },
		var: S,
		video: {
			attrs: {
				src: null, poster: null, width: null, height: null,
				crossorigin: ["anonymous", "use-credentials"],
				preload: ["auto", "metadata", "none"],
				autoplay: ["autoplay"],
				mediagroup: ["movie"],
				muted: ["muted"],
				controls: ["controls"]
			}
		},
		wbr: S
	};
	const GlobalAttrs = {
		accesskey: null,
		class: null,
		contenteditable: Bool,
		contextmenu: null,
		dir: ["ltr", "rtl", "auto"],
		draggable: ["true", "false", "auto"],
		dropzone: ["copy", "move", "link", "string:", "file:"],
		hidden: ["hidden"],
		id: null,
		inert: ["inert"],
		itemid: null,
		itemprop: null,
		itemref: null,
		itemscope: ["itemscope"],
		itemtype: null,
		lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
		spellcheck: Bool,
		autocorrect: Bool,
		autocapitalize: Bool,
		style: null,
		tabindex: null,
		title: null,
		translate: ["yes", "no"],
		rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
		role: "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
		"aria-activedescendant": null,
		"aria-atomic": Bool,
		"aria-autocomplete": ["inline", "list", "both", "none"],
		"aria-busy": Bool,
		"aria-checked": ["true", "false", "mixed", "undefined"],
		"aria-controls": null,
		"aria-describedby": null,
		"aria-disabled": Bool,
		"aria-dropeffect": null,
		"aria-expanded": ["true", "false", "undefined"],
		"aria-flowto": null,
		"aria-grabbed": ["true", "false", "undefined"],
		"aria-haspopup": Bool,
		"aria-hidden": Bool,
		"aria-invalid": ["true", "false", "grammar", "spelling"],
		"aria-label": null,
		"aria-labelledby": null,
		"aria-level": null,
		"aria-live": ["off", "polite", "assertive"],
		"aria-multiline": Bool,
		"aria-multiselectable": Bool,
		"aria-owns": null,
		"aria-posinset": null,
		"aria-pressed": ["true", "false", "mixed", "undefined"],
		"aria-readonly": Bool,
		"aria-relevant": null,
		"aria-required": Bool,
		"aria-selected": ["true", "false", "undefined"],
		"aria-setsize": null,
		"aria-sort": ["ascending", "descending", "none", "other"],
		"aria-valuemax": null,
		"aria-valuemin": null,
		"aria-valuenow": null,
		"aria-valuetext": null
	};
	const eventAttributes = ("beforeunload copy cut dragstart dragover dragleave dragenter dragend " +
		"drag paste focus blur change click load mousedown mouseenter mouseleave " +
		"mouseup keydown keyup resize scroll unload").split(" ").map(n => "on" + n);
	for (let a of eventAttributes)
		GlobalAttrs[a] = null;
	class Schema {
		constructor(extraTags, extraAttrs) {
			this.tags = Object.assign(Object.assign({}, Tags), extraTags);
			this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
			this.allTags = Object.keys(this.tags);
			this.globalAttrNames = Object.keys(this.globalAttrs);
		}
	}
	Schema.default = new Schema;
	function elementName(doc, tree, max = doc.length) {
		if (!tree)
			return "";
		let tag = tree.firstChild;
		let name = tag && tag.getChild("TagName");
		return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
	}
	function findParentElement(tree, skip = false) {
		for (; tree; tree = tree.parent)
			if (tree.name == "Element") {
				if (skip)
					skip = false;
				else
					return tree;
			}
		return null;
	}
	function allowedChildren(doc, tree, schema) {
		let parentInfo = schema.tags[elementName(doc, findParentElement(tree))];
		return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
	}
	function openTags(doc, tree) {
		let open = [];
		for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
			let tagName = elementName(doc, parent);
			if (tagName && parent.lastChild.name == "CloseTag")
				break;
			if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
				open.push(tagName);
		}
		return open;
	}
	const identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
	function completeTag(state, schema, tree, from, to) {
		let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
		let parent = findParentElement(tree, true);
		return { from, to,
			options: allowedChildren(state.doc, parent, schema).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end,
				type: "type", boost: 99 - i }))),
			validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
	}
	function completeCloseTag(state, tree, from, to) {
		let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
		return { from, to,
			options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
			validFor: identifier };
	}
	function completeStartTag(state, schema, tree, pos) {
		let options = [], level = 0;
		for (let tagName of allowedChildren(state.doc, tree, schema))
			options.push({ label: "<" + tagName, type: "type" });
		for (let open of openTags(state.doc, tree))
			options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
		return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
	}
	function completeAttrName(state, schema, tree, from, to) {
		let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
		let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
		let names = info && info.globalAttrs === false ? localAttrs
			: localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
		return { from, to,
			options: names.map(attrName => ({ label: attrName, type: "property" })),
			validFor: identifier };
	}
	function completeAttrValue(state, schema, tree, from, to) {
		var _a;
		let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
		let options = [], token = undefined;
		if (nameNode) {
			let attrName = state.sliceDoc(nameNode.from, nameNode.to);
			let attrs = schema.globalAttrs[attrName];
			if (!attrs) {
				let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
				attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
			}
			if (attrs) {
				let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
				if (/^['"]/.test(base)) {
					token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
					quoteStart = "";
					quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
					base = base.slice(1);
					from++;
				}
				else {
					token = /^[^\s<>='"]*$/;
				}
				for (let value of attrs)
					options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
			}
		}
		return { from, to, options, validFor: token };
	}
	function htmlCompletionFor(schema, context) {
		let { state, pos } = context, tree = language.syntaxTree(state).resolveInner(pos, -1), around = tree.resolve(pos);
		for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
			let last = before.lastChild;
			if (!last || !last.type.isError || last.from < last.to)
				break;
			around = tree = before;
			scan = last.from;
		}
		if (tree.name == "TagName") {
			return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
				: completeTag(state, schema, tree, tree.from, pos);
		}
		else if (tree.name == "StartTag") {
			return completeTag(state, schema, tree, pos, pos);
		}
		else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
			return completeCloseTag(state, tree, pos, pos);
		}
		else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
			return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
		}
		else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
			return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
		}
		else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
			return completeStartTag(state, schema, tree, pos);
		}
		else {
			return null;
		}
	}
	/**
	HTML tag completion. Opens and closes tags and attributes in a
	context-aware way.
	*/
	function htmlCompletionSource(context) {
		return htmlCompletionFor(Schema.default, context);
	}
	/**
	Create a completion source for HTML extended with additional tags
	or attributes.
	*/
	function htmlCompletionSourceWith(config) {
		let { extraTags, extraGlobalAttributes: extraAttrs } = config;
		let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
		return (context) => htmlCompletionFor(schema, context);
	}
	
	const jsonParser = langJavascript.javascriptLanguage.parser.configure({ top: "SingleExpression" });
	const defaultNesting = [
		{ tag: "script",
			attrs: attrs => attrs.type == "text/typescript" || attrs.lang == "ts",
			parser: langJavascript.typescriptLanguage.parser },
		{ tag: "script",
			attrs: attrs => attrs.type == "text/babel" || attrs.type == "text/jsx",
			parser: langJavascript.jsxLanguage.parser },
		{ tag: "script",
			attrs: attrs => attrs.type == "text/typescript-jsx",
			parser: langJavascript.tsxLanguage.parser },
		{ tag: "script",
			attrs(attrs) {
				return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(attrs.type);
			},
			parser: jsonParser },
		{ tag: "script",
			attrs(attrs) {
				return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
			},
			parser: langJavascript.javascriptLanguage.parser },
		{ tag: "style",
			attrs(attrs) {
				return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
			},
			parser: langCss.cssLanguage.parser }
	];
	const defaultAttrs = [
		{ name: "style",
			parser: langCss.cssLanguage.parser.configure({ top: "Styles" }) }
	].concat(eventAttributes.map(name => ({ name, parser: langJavascript.javascriptLanguage.parser })));
	/**
	A language provider based on the [Lezer HTML
	parser](https://github.com/lezer-parser/html), extended with the
	JavaScript and CSS parsers to parse the content of `<script>` and
	`<style>` tags.
	*/
	const htmlPlain = language.LRLanguage.define({
		name: "html",
		parser: html$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					Element(context) {
						let after = /^(\s*)(<\/)?/.exec(context.textAfter);
						if (context.node.to <= context.pos + after[0].length)
							return context.continue();
						return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
					},
					"OpenTag CloseTag SelfClosingTag"(context) {
						return context.column(context.node.from) + context.unit;
					},
					Document(context) {
						if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
							return context.continue();
						let endElt = null, close;
						for (let cur = context.node;;) {
							let last = cur.lastChild;
							if (!last || last.name != "Element" || last.to != cur.to)
								break;
							endElt = cur = last;
						}
						if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
							return context.lineIndent(endElt.from) + context.unit;
						return null;
					}
				}),
				language.foldNodeProp.add({
					Element(node) {
						let first = node.firstChild, last = node.lastChild;
						if (!first || first.name != "OpenTag")
							return null;
						return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
					}
				}),
				language.bracketMatchingHandle.add({
					"OpenTag CloseTag": node => node.getChild("TagName")
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "<!--", close: "-->" } },
			indentOnInput: /^\s*<\/\w+\W$/,
			wordChars: "-._"
		}
	});
	/**
	A language provider based on the [Lezer HTML
	parser](https://github.com/lezer-parser/html), extended with the
	JavaScript and CSS parsers to parse the content of `<script>` and
	`<style>` tags.
	*/
	const htmlLanguage = htmlPlain.configure({
		wrap: html$1.configureNesting(defaultNesting, defaultAttrs)
	});
	/**
	Language support for HTML, including
	[`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
	CSS support extensions.
	*/
	function html(config = {}) {
		let dialect = "", wrap;
		if (config.matchClosingTags === false)
			dialect = "noMatch";
		if (config.selfClosingTags === true)
			dialect = (dialect ? dialect + " " : "") + "selfClosing";
		if (config.nestedLanguages && config.nestedLanguages.length ||
			config.nestedAttributes && config.nestedAttributes.length)
			wrap = html$1.configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));
		let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;
		return new language.LanguageSupport(lang, [
			htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
			config.autoCloseTags !== false ? autoCloseTags : [],
			langJavascript.javascript().support,
			langCss.css().support
		]);
	}
	const selfClosers = new Set("area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
	/**
	Extension that will automatically insert close tags when a `>` or
	`/` is typed.
	*/
	const autoCloseTags = view.EditorView.inputHandler.of((view, from, to, text, insertTransaction) => {
		if (view.composing || view.state.readOnly || from != to || (text != ">" && text != "/") ||
			!htmlLanguage.isActiveAt(view.state, from, -1))
			return false;
		let base = insertTransaction(), { state: state$1 } = base;
		let closeTags = state$1.changeByRange(range => {
			var _a, _b, _c;
			let didType = state$1.doc.sliceString(range.from - 1, range.to) == text;
			let { head } = range, around = language.syntaxTree(state$1).resolveInner(head - 1, -1), name;
			if (around.name == "TagName" || around.name == "StartTag")
				around = around.parent;
			if (didType && text == ">" && around.name == "OpenTag") {
				if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" &&
					(name = elementName(state$1.doc, around.parent, head)) &&
					!selfClosers.has(name)) {
					let to = head + (state$1.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
					let insert = `</${name}>`;
					return { range, changes: { from: head, to, insert } };
				}
			}
			else if (didType && text == "/" && around.name == "IncompleteCloseTag") {
				let base = around.parent;
				if (around.from == head - 2 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" &&
					(name = elementName(state$1.doc, base, head)) && !selfClosers.has(name)) {
					let to = head + (state$1.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
					let insert = `${name}>`;
					return {
						range: state.EditorSelection.cursor(head + insert.length, -1),
						changes: { from: head, to, insert }
					};
				}
			}
			return { range };
		});
		if (closeTags.changes.empty)
			return false;
		view.dispatch([
			base,
			state$1.update(closeTags, {
				userEvent: "input.complete",
				scrollIntoView: true
			})
		]);
		return true;
	});
	
	exports.autoCloseTags = autoCloseTags;
	exports.html = html;
	exports.htmlCompletionSource = htmlCompletionSource;
	exports.htmlCompletionSourceWith = htmlCompletionSourceWith;
	exports.htmlLanguage = htmlLanguage;
	exports.htmlPlain = htmlPlain;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-java/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-java/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var java$1 = __webpack_require__(/*! @lezer/java */ "../editor/node_modules/@lezer/java/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	A language provider based on the [Lezer Java
	parser](https://github.com/lezer-parser/java), extended with
	highlighting and indentation information.
	*/
	const javaLanguage = language.LRLanguage.define({
		name: "java",
		parser: java$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					IfStatement: language.continuedIndent({ except: /^\s*({|else\b)/ }),
					TryStatement: language.continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
					LabeledStatement: language.flatIndent,
					SwitchBlock: context => {
						let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
						return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
					},
					Block: language.delimitedIndent({ closing: "}" }),
					BlockComment: () => null,
					Statement: language.continuedIndent({ except: /^{/ })
				}),
				language.foldNodeProp.add({
					["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody " +
						"ConstructorBody InterfaceBody ArrayInitializer"]: language.foldInside,
					BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
				})
			]
		}),
		languageData: {
			commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
			indentOnInput: /^\s*(?:case |default:|\{|\})$/
		}
	});
	/**
	Java language support.
	*/
	function java() {
		return new language.LanguageSupport(javaLanguage);
	}
	
	exports.java = java;
	exports.javaLanguage = javaLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var javascript$1 = __webpack_require__(/*! @lezer/javascript */ "../editor/node_modules/@lezer/javascript/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var autocomplete = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	/**
	A collection of JavaScript-related
	[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
	*/
	const snippets = [
		autocomplete.snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
			label: "function",
			detail: "definition",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
			label: "for",
			detail: "loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
			label: "for",
			detail: "of loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("do {\n\t${}\n} while (${})", {
			label: "do",
			detail: "loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("while (${}) {\n\t${}\n}", {
			label: "while",
			detail: "loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
			label: "try",
			detail: "/ catch block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("if (${}) {\n\t${}\n}", {
			label: "if",
			detail: "block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
			label: "if",
			detail: "/ else block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
			label: "class",
			detail: "definition",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("import {${names}} from \"${module}\"\n${}", {
			label: "import",
			detail: "named",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("import ${name} from \"${module}\"\n${}", {
			label: "import",
			detail: "default",
			type: "keyword"
		})
	];
	/**
	A collection of snippet completions for TypeScript. Includes the
	JavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).
	*/
	const typescriptSnippets = snippets.concat([
		autocomplete.snippetCompletion("interface ${name} {\n\t${}\n}", {
			label: "interface",
			detail: "definition",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("type ${name} = ${type}", {
			label: "type",
			detail: "definition",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("enum ${name} {\n\t${}\n}", {
			label: "enum",
			detail: "definition",
			type: "keyword"
		})
	]);
	
	const cache = new common.NodeWeakMap();
	const ScopeNodes = new Set([
		"Script", "Block",
		"FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration",
		"ForStatement"
	]);
	function defID(type) {
		return (node, def) => {
			let id = node.node.getChild("VariableDefinition");
			if (id)
				def(id, type);
			return true;
		};
	}
	const functionContext = ["FunctionDeclaration"];
	const gatherCompletions = {
		FunctionDeclaration: defID("function"),
		ClassDeclaration: defID("class"),
		ClassExpression: () => true,
		EnumDeclaration: defID("constant"),
		TypeAliasDeclaration: defID("type"),
		NamespaceDeclaration: defID("namespace"),
		VariableDefinition(node, def) { if (!node.matchContext(functionContext))
			def(node, "variable"); },
		TypeDefinition(node, def) { def(node, "type"); },
		__proto__: null
	};
	function getScope(doc, node) {
		let cached = cache.get(node);
		if (cached)
			return cached;
		let completions = [], top = true;
		function def(node, type) {
			let name = doc.sliceString(node.from, node.to);
			completions.push({ label: name, type });
		}
		node.cursor(common.IterMode.IncludeAnonymous).iterate(node => {
			if (top) {
				top = false;
			}
			else if (node.name) {
				let gather = gatherCompletions[node.name];
				if (gather && gather(node, def) || ScopeNodes.has(node.name))
					return false;
			}
			else if (node.to - node.from > 8192) {
				// Allow caching for bigger internal nodes
				for (let c of getScope(doc, node.node))
					completions.push(c);
				return false;
			}
		});
		cache.set(node, completions);
		return completions;
	}
	const Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
	const dontComplete = [
		"TemplateString", "String", "RegExp",
		"LineComment", "BlockComment",
		"VariableDefinition", "TypeDefinition", "Label",
		"PropertyDefinition", "PropertyName",
		"PrivatePropertyDefinition", "PrivatePropertyName",
		".", "?."
	];
	/**
	Completion source that looks up locally defined names in
	JavaScript code.
	*/
	function localCompletionSource(context) {
		let inner = language.syntaxTree(context.state).resolveInner(context.pos, -1);
		if (dontComplete.indexOf(inner.name) > -1)
			return null;
		let isWord = inner.name == "VariableName" ||
			inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
		if (!isWord && !context.explicit)
			return null;
		let options = [];
		for (let pos = inner; pos; pos = pos.parent) {
			if (ScopeNodes.has(pos.name))
				options = options.concat(getScope(context.state.doc, pos));
		}
		return {
			options,
			from: isWord ? inner.from : context.pos,
			validFor: Identifier
		};
	}
	function pathFor(read, member, name) {
		var _a;
		let path = [];
		for (;;) {
			let obj = member.firstChild, prop;
			if ((obj === null || obj === void 0 ? void 0 : obj.name) == "VariableName") {
				path.push(read(obj));
				return { path: path.reverse(), name };
			}
			else if ((obj === null || obj === void 0 ? void 0 : obj.name) == "MemberExpression" && ((_a = (prop = obj.lastChild)) === null || _a === void 0 ? void 0 : _a.name) == "PropertyName") {
				path.push(read(prop));
				member = obj;
			}
			else {
				return null;
			}
		}
	}
	/**
	Helper function for defining JavaScript completion sources. It
	returns the completable name and object path for a completion
	context, or null if no name/property completion should happen at
	that position. For example, when completing after `a.b.c` it will
	return `{path: ["a", "b"], name: "c"}`. When completing after `x`
	it will return `{path: [], name: "x"}`. When not in a property or
	name, it will return null if `context.explicit` is false, and
	`{path: [], name: ""}` otherwise.
	*/
	function completionPath(context) {
		let read = (node) => context.state.doc.sliceString(node.from, node.to);
		let inner = language.syntaxTree(context.state).resolveInner(context.pos, -1);
		if (inner.name == "PropertyName") {
			return pathFor(read, inner.parent, read(inner));
		}
		else if ((inner.name == "." || inner.name == "?.") && inner.parent.name == "MemberExpression") {
			return pathFor(read, inner.parent, "");
		}
		else if (dontComplete.indexOf(inner.name) > -1) {
			return null;
		}
		else if (inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {
			return { path: [], name: read(inner) };
		}
		else if (inner.name == "MemberExpression") {
			return pathFor(read, inner, "");
		}
		else {
			return context.explicit ? { path: [], name: "" } : null;
		}
	}
	function enumeratePropertyCompletions(obj, top) {
		let options = [], seen = new Set;
		for (let depth = 0;; depth++) {
			for (let name of (Object.getOwnPropertyNames || Object.keys)(obj)) {
				if (!/^[a-zA-Z_$\xaa-\uffdc][\w$\xaa-\uffdc]*$/.test(name) || seen.has(name))
					continue;
				seen.add(name);
				let value;
				try {
					value = obj[name];
				}
				catch (_) {
					continue;
				}
				options.push({
					label: name,
					type: typeof value == "function" ? (/^[A-Z]/.test(name) ? "class" : top ? "function" : "method")
						: top ? "variable" : "property",
					boost: -depth
				});
			}
			let next = Object.getPrototypeOf(obj);
			if (!next)
				return options;
			obj = next;
		}
	}
	/**
	Defines a [completion source](https://codemirror.net/6/docs/ref/#autocomplete.CompletionSource) that
	completes from the given scope object (for example `globalThis`).
	Will enter properties of the object when completing properties on
	a directly-named path.
	*/
	function scopeCompletionSource(scope) {
		let cache = new Map;
		return (context) => {
			let path = completionPath(context);
			if (!path)
				return null;
			let target = scope;
			for (let step of path.path) {
				target = target[step];
				if (!target)
					return null;
			}
			let options = cache.get(target);
			if (!options)
				cache.set(target, options = enumeratePropertyCompletions(target, !path.path.length));
			return {
				from: context.pos - path.name.length,
				options,
				validFor: Identifier
			};
		};
	}
	
	/**
	A language provider based on the [Lezer JavaScript
	parser](https://github.com/lezer-parser/javascript), extended with
	highlighting and indentation information.
	*/
	const javascriptLanguage = language.LRLanguage.define({
		name: "javascript",
		parser: javascript$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					IfStatement: language.continuedIndent({ except: /^\s*({|else\b)/ }),
					TryStatement: language.continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
					LabeledStatement: language.flatIndent,
					SwitchBody: context => {
						let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
						return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
					},
					Block: language.delimitedIndent({ closing: "}" }),
					ArrowFunction: cx => cx.baseIndent + cx.unit,
					"TemplateString BlockComment": () => null,
					"Statement Property": language.continuedIndent({ except: /^{/ }),
					JSXElement(context) {
						let closed = /^\s*<\//.test(context.textAfter);
						return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
					},
					JSXEscape(context) {
						let closed = /\s*\}/.test(context.textAfter);
						return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
					},
					"JSXOpenTag JSXSelfClosingTag"(context) {
						return context.column(context.node.from) + context.unit;
					}
				}),
				language.foldNodeProp.add({
					"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": language.foldInside,
					BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
				})
			]
		}),
		languageData: {
			closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
			commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
			indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
			wordChars: "$"
		}
	});
	const jsxSublanguage = {
		test: node => /^JSX/.test(node.name),
		facet: language.defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
	};
	/**
	A language provider for TypeScript.
	*/
	const typescriptLanguage = javascriptLanguage.configure({ dialect: "ts" }, "typescript");
	/**
	Language provider for JSX.
	*/
	const jsxLanguage = javascriptLanguage.configure({
		dialect: "jsx",
		props: [language.sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
	});
	/**
	Language provider for JSX + TypeScript.
	*/
	const tsxLanguage = javascriptLanguage.configure({
		dialect: "jsx ts",
		props: [language.sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
	}, "typescript");
	let kwCompletion = (name) => ({ label: name, type: "keyword" });
	const keywords = "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
	const typescriptKeywords = keywords.concat(["declare", "implements", "private", "protected", "public"].map(kwCompletion));
	/**
	JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
	completion.
	*/
	function javascript(config = {}) {
		let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
			: config.typescript ? typescriptLanguage : javascriptLanguage;
		let completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
		return new language.LanguageSupport(lang, [
			javascriptLanguage.data.of({
				autocomplete: autocomplete.ifNotIn(dontComplete, autocomplete.completeFromList(completions))
			}),
			javascriptLanguage.data.of({
				autocomplete: localCompletionSource
			}),
			config.jsx ? autoCloseTags : [],
		]);
	}
	function findOpenTag(node) {
		for (;;) {
			if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
				return node;
			if (node.name == "JSXEscape" || !node.parent)
				return null;
			node = node.parent;
		}
	}
	function elementName(doc, tree, max = doc.length) {
		for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
			if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" ||
				ch.name == "JSXMemberExpression")
				return doc.sliceString(ch.from, Math.min(ch.to, max));
		}
		return "";
	}
	const android = typeof navigator == "object" && /Android\b/.test(navigator.userAgent);
	/**
	Extension that will automatically insert JSX close tags when a `>` or
	`/` is typed.
	*/
	const autoCloseTags = view.EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {
		if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||
			from != to || (text != ">" && text != "/") ||
			!javascriptLanguage.isActiveAt(view.state, from, -1))
			return false;
		let base = defaultInsert(), { state: state$1 } = base;
		let closeTags = state$1.changeByRange(range => {
			var _a;
			let { head } = range, around = language.syntaxTree(state$1).resolveInner(head - 1, -1), name;
			if (around.name == "JSXStartTag")
				around = around.parent;
			if (state$1.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;
			else if (text == ">" && around.name == "JSXFragmentTag") {
				return { range, changes: { from: head, insert: `</>` } };
			}
			else if (text == "/" && around.name == "JSXStartCloseTag") {
				let empty = around.parent, base = empty.parent;
				if (base && empty.from == head - 2 &&
					((name = elementName(state$1.doc, base.firstChild, head)) || ((_a = base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "JSXFragmentTag")) {
					let insert = `${name}>`;
					return { range: state.EditorSelection.cursor(head + insert.length, -1), changes: { from: head, insert } };
				}
			}
			else if (text == ">") {
				let openTag = findOpenTag(around);
				if (openTag &&
					!/^\/?>|^<\//.test(state$1.doc.sliceString(head, head + 2)) &&
					(name = elementName(state$1.doc, openTag, head)))
					return { range, changes: { from: head, insert: `</${name}>` } };
			}
			return { range };
		});
		if (closeTags.changes.empty)
			return false;
		view.dispatch([
			base,
			state$1.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
		]);
		return true;
	});
	
	/**
	Connects an [ESLint](https://eslint.org/) linter to CodeMirror's
	[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the
	[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)
	class, and `config` an optional ESLint configuration. The return
	value of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)
	to create a JavaScript linting extension.
	
	Note that ESLint targets node, and is tricky to run in the
	browser. The
	[eslint-linter-browserify](https://github.com/UziTech/eslint-linter-browserify)
	package may help with that (see
	[example](https://github.com/UziTech/eslint-linter-browserify/blob/master/example/script.js)).
	*/
	function esLint(eslint, config) {
		if (!config) {
			config = {
				parserOptions: { ecmaVersion: 2019, sourceType: "module" },
				env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
				rules: {}
			};
			eslint.getRules().forEach((desc, name) => {
				if (desc.meta.docs.recommended)
					config.rules[name] = 2;
			});
		}
		return (view) => {
			let { state } = view, found = [];
			for (let { from, to } of javascriptLanguage.findRegions(state)) {
				let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
				for (let d of eslint.verify(state.sliceDoc(from, to), config))
					found.push(translateDiagnostic(d, state.doc, offset));
			}
			return found;
		};
	}
	function mapPos(line, col, doc, offset) {
		return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
	}
	function translateDiagnostic(input, doc, offset) {
		let start = mapPos(input.line, input.column, doc, offset);
		let result = {
			from: start,
			to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
			message: input.message,
			source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
			severity: input.severity == 1 ? "warning" : "error",
		};
		if (input.fix) {
			let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
			result.actions = [{
					name: "fix",
					apply(view, start) {
						view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });
					}
				}];
		}
		return result;
	}
	
	exports.autoCloseTags = autoCloseTags;
	exports.completionPath = completionPath;
	exports.esLint = esLint;
	exports.javascript = javascript;
	exports.javascriptLanguage = javascriptLanguage;
	exports.jsxLanguage = jsxLanguage;
	exports.localCompletionSource = localCompletionSource;
	exports.scopeCompletionSource = scopeCompletionSource;
	exports.snippets = snippets;
	exports.tsxLanguage = tsxLanguage;
	exports.typescriptLanguage = typescriptLanguage;
	exports.typescriptSnippets = typescriptSnippets;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-json/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-json/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var json$1 = __webpack_require__(/*! @lezer/json */ "../editor/node_modules/@lezer/json/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	Calls
	[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
	on the document and, if that throws an error, reports it as a
	single diagnostic.
	*/
	const jsonParseLinter = () => (view) => {
		try {
			JSON.parse(view.state.doc.toString());
		}
		catch (e) {
			if (!(e instanceof SyntaxError))
				throw e;
			const pos = getErrorPosition(e, view.state.doc);
			return [{
					from: pos,
					message: e.message,
					severity: 'error',
					to: pos
				}];
		}
		return [];
	};
	function getErrorPosition(error, doc) {
		let m;
		if (m = error.message.match(/at position (\d+)/))
			return Math.min(+m[1], doc.length);
		if (m = error.message.match(/at line (\d+) column (\d+)/))
			return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
		return 0;
	}
	
	/**
	A language provider that provides JSON parsing.
	*/
	const jsonLanguage = language.LRLanguage.define({
		name: "json",
		parser: json$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					Object: language.continuedIndent({ except: /^\s*\}/ }),
					Array: language.continuedIndent({ except: /^\s*\]/ })
				}),
				language.foldNodeProp.add({
					"Object Array": language.foldInside
				})
			]
		}),
		languageData: {
			closeBrackets: { brackets: ["[", "{", '"'] },
			indentOnInput: /^\s*[\}\]]$/
		}
	});
	/**
	JSON language support.
	*/
	function json() {
		return new language.LanguageSupport(jsonLanguage);
	}
	
	exports.json = json;
	exports.jsonLanguage = jsonLanguage;
	exports.jsonParseLinter = jsonParseLinter;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-less/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-less/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var langCss = __webpack_require__(/*! @codemirror/lang-css */ "../editor/node_modules/@codemirror/lang-css/dist/index.cjs");
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const descendantOp = 110,
	  Unit = 1,
	  openArgList = 2;
	
	const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
		8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
	function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161; }
	function isDigit(ch) { return ch >= 48 && ch <= 57; }
	const argList = new lr.ExternalTokenizer((input, stack) => {
		if (input.next == 40 /* Ch.parenL */) {
			let prev = input.peek(-1);
			if (isAlpha(prev) || isDigit(prev) || prev == 95 /* Ch.underscore */ || prev == 45 /* Ch.dash */)
				input.acceptToken(openArgList, 1);
		}
	});
	const descendant = new lr.ExternalTokenizer(input => {
		if (space.indexOf(input.peek(-1)) > -1) {
			let { next } = input;
			if (isAlpha(next) || next == 95 /* Ch.underscore */ || next == 35 /* Ch.hash */ || next == 46 /* Ch.period */ ||
				next == 91 /* Ch.bracketL */ || next == 58 /* Ch.colon */ || next == 45 /* Ch.dash */)
				input.acceptToken(descendantOp);
		}
	});
	const unitToken = new lr.ExternalTokenizer(input => {
		if (space.indexOf(input.peek(-1)) < 0) {
			let { next } = input;
			if (next == 37 /* Ch.percent */) {
				input.advance();
				input.acceptToken(Unit);
			}
			if (isAlpha(next)) {
				do {
					input.advance();
				} while (isAlpha(input.next));
				input.acceptToken(Unit);
			}
		}
	});
	
	const lessHighlighting = highlight.styleTags({
		"import charset namespace keyframes media supports when": highlight.tags.definitionKeyword,
		"from to selector": highlight.tags.keyword,
		NamespaceName: highlight.tags.namespace,
		KeyframeName: highlight.tags.labelName,
		TagName: highlight.tags.tagName,
		ClassName: highlight.tags.className,
		PseudoClassName: highlight.tags.constant(highlight.tags.className),
		IdName: highlight.tags.labelName,
		"FeatureName PropertyName PropertyVariable": highlight.tags.propertyName,
		AttributeName: highlight.tags.attributeName,
		NumberLiteral: highlight.tags.number,
		KeywordQuery: highlight.tags.keyword,
		UnaryQueryOp: highlight.tags.operatorKeyword,
		"CallTag ValueName": highlight.tags.atom,
		VariableName: highlight.tags.variableName,
		"AtKeyword Interpolation": highlight.tags.special(highlight.tags.variableName),
		Callee: highlight.tags.operatorKeyword,
		Unit: highlight.tags.unit,
		"UniversalSelector NestingSelector": highlight.tags.definitionOperator,
		MatchOp: highlight.tags.compareOperator,
		"ChildOp SiblingOp, LogicOp": highlight.tags.logicOperator,
		BinOp: highlight.tags.arithmeticOperator,
		Important: highlight.tags.modifier,
		"Comment LineComment": highlight.tags.blockComment,
		ColorLiteral: highlight.tags.color,
		"ParenthesizedContent StringLiteral": highlight.tags.string,
		Escape: highlight.tags.special(highlight.tags.string),
		": ...": highlight.tags.punctuation,
		"PseudoOp #": highlight.tags.derefOperator,
		"; ,": highlight.tags.separator,
		"( )": highlight.tags.paren,
		"[ ]": highlight.tags.squareBracket,
		"{ }": highlight.tags.brace
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,lang:40, "nth-child":40, "nth-last-child":40, "nth-of-type":40, "nth-last-of-type":40, dir:40, "host-context":40, and:244, or:244, not:74, only:74, url:86, "url-prefix":86, domain:86, regexp:86, when:117, selector:142, from:172, to:174};
	const spec_AtKeyword = {__proto__:null,"@import":126, "@plugin":126, "@media":152, "@charset":156, "@namespace":160, "@keyframes":166, "@supports":178};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "@^O!gQWOOO!nQaO'#CeOOQP'#Cd'#CdO$RQWO'#CgO$xQaO'#EaO%cQWO'#CiO%kQWO'#DZO%pQWO'#D^O%uQaO'#DfOOQP'#Es'#EsO'YQWO'#DlO'yQWO'#DyO(QQWO'#D{O(xQWO'#D}O)TQWO'#EQO'bQWO'#EWO)YQ`O'#FTO)]Q`O'#FTO)hQ`O'#FTO)vQWO'#EYOOQO'#Er'#ErOOQO'#FV'#FVOOQO'#Ec'#EcO){QWO'#EqO*WQWO'#EqQOQWOOOOQP'#Ch'#ChOOQP,59R,59RO$RQWO,59RO*bQWO'#EdO+PQWO,58|O+_QWO,59TO%kQWO,59uO%pQWO,59xO*bQWO,59{O*bQWO,59}OOQO'#De'#DeO*bQWO,5:OO,bQpO'#E}O,iQWO'#DkOOQO,58|,58|O(QQWO,58|O,pQWO,5:{OOQO,5:{,5:{OOQT'#Cl'#ClO-UQeO,59TO.cQ[O,59TOOQP'#D]'#D]OOQP,59u,59uOOQO'#D_'#D_O.hQpO,59xOOQO'#EZ'#EZO.pQ`O,5;oOOQO,5;o,5;oO/OQWO,5:WO/VQWO,5:WOOQS'#Dn'#DnO/rQWO'#DsO/yQ!fO'#FRO0eQWO'#DtOOQS'#FS'#FSO+YQWO,5:eO'bQWO'#DrOOQS'#Cu'#CuO(QQWO'#CwO0jQ!hO'#CyO2^Q!fO,5:gO2oQWO'#DWOOQS'#Ex'#ExO(QQWO'#DQOOQO'#EP'#EPO2tQWO,5:iO2yQWO,5:iOOQO'#ES'#ESO3RQWO,5:lO3WQ!fO,5:rO3iQ`O'#EkO.pQ`O,5;oOOQO,5:|,5:|O3zQWO,5:tOOQO,5:},5:}O4XQWO,5;]OOQO-E8a-E8aOOQP1G.m1G.mOOQP'#Ce'#CeO5RQaO,5;OOOQP'#Df'#DfOOQO-E8b-E8bOOQO1G.h1G.hO(QQWO1G.hO5fQWO1G.hO5nQeO1G.oO.cQ[O1G.oOOQP1G/a1G/aO6{QpO1G/dO7fQaO1G/gO8cQaO1G/iO9`QaO1G/jO:]Q!fO'#FOO:yQ!fO'#ExOOQO'#FO'#FOOOQO,5;i,5;iO<^QWO,5;iO<iQWO,5:VO<nQ!fO1G.hOOQO1G0g1G0gO=PQWO'#CnOOQP1G.o1G.oO=WQWO'#CqOOQP1G/d1G/dO(QQWO1G/dO=_Q`O1G1ZOOQO1G1Z1G1ZO=mQWO1G/rO=rQ!fO'#FQO>WQWO1G/rO>]Q!fO'#DnO>qQWO,5:ZO>vQ!fO,5:_OOQO'#DP'#DPO'bQWO,5:]O?XQWO'#DwOOQS,5:b,5:bO?`QWO,5:dO'bQWO'#EiO?gQWO,5;mO*bQWO,5:`OOQO1G0P1G0PO?uQ!fO,5:^O@aQ!fO,59cOOQS,59e,59eO(QQWO,59iOOQS,59n,59nO@rQWO,59pOOQO1G0R1G0RO@yQ#tO,59rOARQ!fO,59lOOQO1G0T1G0TOBrQWO1G0TOBwQWO'#ETOOQO1G0W1G0WOOQO1G0^1G0^OOQO,5;V,5;VOOQO-E8i-E8iOCVQ!fO1G0bOCvQWO1G0`O%kQWO'#E_O$RQWO'#E`OEZQWO'#E^OOQO1G0b1G0bPEkQWO'#EcO<nQ!fO7+$SOOQO7+$S7+$SO(QQWO7+$SOOQP7+$Z7+$ZOOQP7+%O7+%OO(QQWO7+%OOEpQ!fO'#EeOF}QWO,5;jO(QQWO,5;jOOQO,5;j,5;jO+gQpO'#EgOG[QWO1G1TOOQO1G1T1G1TOOQO1G/q1G/qOGgQaO'#EvOGnQWO,59YOGsQWO'#EwOG}QWO,59]OHSQ!fO7+%OOOQO7+&u7+&uOOQO7+%^7+%^O(QQWO'#EhOHeQWO,5;lOHmQWO7+%^O(QQWO1G/uOOQS1G/y1G/yOOQS1G/w1G/wOHrQWO,5:cOHwQ!fO1G0OOOQS1G0O1G0OOIYQ!fO,5;TOOQO-E8g-E8gOItQaO1G/zOOQS1G.}1G.}OOQS1G/T1G/TOI{Q!fO1G/[OOQS1G/[1G/[OJ^QWO1G/^OOQO7+%o7+%oOJcQYO'#CyO+YQWO'#EjOJkQWO,5:oOOQO,5:o,5:oOJyQ!fO'#ElO(QQWO'#ElOL^QWO7+%|OOQO7+%|7+%|OOQO7+%z7+%zOOQO,5:y,5:yOOQO,5:z,5:zOLqQaO,5:xOOQO,5:x,5:xOOQO<<Gn<<GnO<nQ!fO<<GnOMRQ!fO<<HjOOQO-E8c-E8cOMdQWO1G1UOOQO,5;R,5;ROOQO-E8e-E8eOOQO7+&o7+&oOMqQWO,5;bOOQP1G.t1G.tO(QQWO'#EfOMyQWO,5;cOOQT1G.w1G.wOOQP<<Hj<<HjONRQ!fO,5;SOOQO-E8f-E8fO/OQWO<<HxONgQWO7+%aOOQS1G/}1G/}OOQS7+%j7+%jOOQS7+%f7+%fOOQS7+$v7+$vOOQS7+$x7+$xOOQO,5;U,5;UOOQO-E8h-E8hOOQO1G0Z1G0ZONnQ!fO,5;WOOQO-E8j-E8jOOQO<<Ih<<IhOOQO1G0d1G0dOOQOAN=YAN=YOOQPAN>UAN>UO!!RQWO,5;QOOQO-E8d-E8dO!!]QWOAN>dOOQS<<H{<<H{OOQOG24OG24O",
	  stateData: "!!n~O#dOSROSSOS~OVXOYXO^TO_TOfaOgbOoaOpWOyVO!OUO!aYO!nZO!p[O!r]O!u^O!{_O#hPO#iRO~O#a#eP~P]O^XX^!}X_XXcXXjXXp!}XyXX!OXX!UXX!ZXX![XX!^XX#PXX#aXX#bXX#iXX#oXX#pXX#p!}X#x!}X!]XX~O#hjO~O^oO_oOcmOyqO!OpO!UrO#bsO#ilO#otO#ptO~OjvO![yO!^wO#P{O!Z#TX#a#TX!]#TX~P$WOd!OO#h|O~O#h!PO~O#h!RO~O#h!TO#p!VO#x!VO^!YX^#wX_!YXc!YXj!YXy!YX!O!YX!U!YX!Z!YX![!YX!^!YX#P!YX#a!YX#b!YX#i!YX#o!YX#p!YX!]!YX~Oj!XOn!WO~Og!^Oj!ZOo!^Op!^Ou!`O!i!]O#h!YO~O!^#uP~P'bOf!fOg!fOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO~On!iO{!eO#h!hO~O#h!kO~Op!nO#p!VO#x!VO^#wX~OjvO#p!VO#x!VO^#wX~O^!qO~O!Z!rO#a#eX!]#eX~O#a#eX!]#eX~P]OVXOYXO^TO_TOp!xOyVO!OUO#h!vO#iRO~OcmOjvO![!{O!^wO~Od#OO#h|O~Of!fOg#VOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO#s#WO~Oa#XO~P+gO!]#eP~P]O![!{O!^wO#P#]O!Z#Ta#a#Ta!]#Ta~OQ#^O^]a_]ac]aj]ay]a!O]a!U]a!Z]a![]a!^]a#P]a#a]a#b]a#i]a#o]a#p]a!]]aa]a~OQ#`O~Ow#aO!S#bO~Op!nO#p#dO#x#dO^#wa~O!Z#uP~P'bOa#tP~P(QOg!^Oj!ZOo!^Op!^Ou!`O!i!]O~O#h#hO~P/^OQ#mOc#pOr#lOy#oO#n#kO!^#uX!Z#uXa#uX~Oj#rO~OP#vOQmXrmXymX!ZmX#nmX^mXamXcmXfmXgmXhmXjmXlmXnmXomXpmXumX{mX#hmX#mmX!^mX#PmX#amXwmX!]mX~OQ#`Or#wOy#yO!Z#zO#n#kO~Oj#{O~O!Z#}O~On$OO{!eO~O!^$PO~OQ#mOr#lOy#oO!^wO#n#kO~O#h!TO^#_Xp#_X#p#_X#x#_X~O!O$WO!^wO#i$XO~P(QO!Z!rO#a#ea!]#ea~O^oO_oOyqO!OpO!UrO#bsO#ilO#otO#ptO~Oc#Waj#Wa![#Wa!^#Waa#Wa~P4dO![$_O!^wO~OQ#^O^]i_]ic]ij]iy]i!O]i!U]i!Z]i![]i!^]i#P]i#a]i#b]i#i]i#o]i#p]i!]]ia]i~Ow$aO!S$bO~O^oO_oOyqO!OpO#ilO~Oc!Tij!Ti!U!Ti!Z!Ti![!Ti!^!Ti#P!Ti#a!Ti#b!Ti#o!Ti#p!Ti!]!Tia!Ti~P7TOc!Vij!Vi!U!Vi!Z!Vi![!Vi!^!Vi#P!Vi#a!Vi#b!Vi#o!Vi#p!Vi!]!Via!Vi~P7TOc!Wij!Wi!U!Wi!Z!Wi![!Wi!^!Wi#P!Wi#a!Wi#b!Wi#o!Wi#p!Wi!]!Wia!Wi~P7TOQ#`O^$eOr#wOy#yO#n#kOa#rXc#rX!Z#rX~P(QO#s$fOQ#lX^#lXa#lXc#lXf#lXg#lXh#lXj#lXl#lXn#lXo#lXp#lXr#lXu#lXy#lX{#lX!Z#lX#h#lX#m#lX#n#lX~Oa$iOc$gO!Z$gO~O!]$jO~OQ#`Or#wOy#yO!^wO#n#kO~Oa#jP~P*bOa#kP~P(QOp!nO#p$pO#x$pO^#wi~O!Z$qO~OQ#`Oc$rOr#wOy#yO#n#kOa#tX~Oa$tO~OQ!bX^!dXa!bXr!bXy!bX#n!bX~O^$uO~OQ#mOa$vOr#lOy#oO#n#kO~Oa#uP~P'bOw$zO~P(QOc#pO!^#ua!Z#uaa#ua~OQ#mOr#lOy#oO#n#kOc!fa!^!fa!Z!faa!fa~OQ#`Oa%OOr#wOy#yO#n#kO~Ow%RO~P(QOn%SO|%SO~OQ#`Or#wOy#yO#n#kO!Zta^taatactaftagtahtajtaltantaotaptauta{ta#hta#mta!^ta#Pta#atawta!]ta~O!Z%TO~O!]%XO!x%VO!y%VO#m%UO~OQ#`Oc%ZOr#wOy#yO#P%]O#n#kO!Z#Oi#a#Oi!]#Oi~P(QO!Z%^OV!|iY!|i^!|i_!|if!|ig!|io!|ip!|iy!|i!O!|i!a!|i!n!|i!p!|i!r!|i!u!|i!{!|i#a!|i#h!|i#i!|i!]!|i~OjvO!Z#QX#a#QX!]#QX~P*bO!Z!rO~OQ#`Or#wOy#yO#n#kOa#XXc#XXf#XXg#XXh#XXj#XXl#XXn#XXo#XXp#XXu#XX{#XX!Z#XX#h#XX#m#XX~Oa#rac#ra!Z#ra~P(QOa%jOc$gO!Z$gO~Oa#jX~P$WOa%lO~Oc%mOa#kX~P(QOa%oO~OQ#`Or#wOw%pOy#yO#n#kO~Oc$rOa#ta~On%sO~Oa%uO~OQ#`Or#wOw%vOy#yO#n#kO~OQ#mOr#lOy#oO#n#kOc#]a!^#]a!Z#]aa#]a~Oa%wO~P4dOQ#`Or#wOw%xOy#yO#n#kO~Oa%yO~OP#vO!^mX~O!]%|O!x%VO!y%VO#m%UO~OQ#`Or#wOy#yO#n#kOc#`Xf#`Xg#`Xh#`Xj#`Xl#`Xn#`Xo#`Xp#`Xu#`X{#`X!Z#`X#P#`X#a#`X#h#`X#m#`X!]#`X~Oc%ZO#P&PO!Z#Oq#a#Oq!]#Oq~P(QOjvO!Z#Qa#a#Qa!]#Qa~P4dOQ#`Or#wOw&SOy#yO#n#kO~Oa#ric#ri!Z#ri~P(QOcmOa#ja~Oc%mOa#ka~OQ#`Or#wOy#yO#n#kOa#[ac#[a~Oa&WO~P(QOQ#`Or#wOy#yO#n#kOc#`af#`ag#`ah#`aj#`al#`an#`ao#`ap#`au#`a{#`a!Z#`a#P#`a#a#`a#h#`a#m#`a!]#`a~Oa#Yac#Ya~P(QO!Z&XO~Of#dpg#m|#iRSRr~",
	  goto: "0^#zPPPPPP#{P$Q$^P$Q$j$QPP$sP$yPP%PPPP%jP%jP&ZPPP%jP'O%jP%jP%jP'jPP$QP(a$Q(jP$QP$Q$Q(p$QPPPP(w#{P)f)f)q)f)f)f)fP)f)t)f#{P#{P#{P){#{P*O*RPP#{P#{*U*aP*f*i*i*a*a*l*s*}+e+k+q+w+},T,_PPPP,e,k,pPP-[-_-bPPPP.u/UP/[/_/k0QP0VVdOhweXOhmrsuw#^#r$YeQOhmrsuw#^#r$YQkRQ!ulR%`$XQ}TR!}oQ#_}R$`!}Q#_!Or#x!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}R$`#O!]!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&T![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TT%V$P%WY#l![!m#j#t${s#w!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TQ!i]R$O!jQ!QUQ#PpR%_$WQ!SVR#QqZuS!w$k$}%aQxSS!znzQ#s!_Q$R!mQ$V!qS$^!|#[Q%c$]Q%z%VR&R%dc!^Z_!W!Z!`#l#m#p%sR#i!ZZ#n![!m#j#t${R!j]R!l^R$Q!lU`OhwQ!UWR$S!nVeOhwR$Z!qR$Y!qShOwR!thQnSS!yn%kR%k$kQ$d#UQ$m#`Y%f$d$m%g%t&TQ%g$eQ%t$uR&T%mQ%n$mR&U%nQ$h#YR%i$hQ$s#fR%r$sQ#q![R$|#qQ%W$PR%{%WQ!o`Q#c!UT$T!o#cQ%[$UR&O%[QiOR#ZwVfOhwUSOhwQ!wmQ#RrQ#SsQ#TuQ$k#^Q$}#rR%a$YR$l#^R$n#`Q!d[S#Uv$gQ#[yQ#f!XQ#u!bQ#|!gQ$U!qQ$]!{d$c#U#`$d$e$m$u%g%m%t&TQ$o#bQ$y#oQ%P#wQ%Q#yS%Y$U%[Q%d$_Q%e$bQ%q$rR%}%ZQzSQ!pbQ!|nQ%b$YR&Q%aQ#YvR%h$gR#g!XQ!_ZQ#e!WQ$x#mR&V%sW![Z!W#m%sQ!m_Q#j!ZQ#t!`Q$w#lR${#pVcOhwSgOwR!sh",
	  nodeNames: "⚠ Unit ( Comment LineComment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName ) ArgList , PseudoClassName ArgList VariableName AtKeyword PropertyVariable ValueName ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral Escape Interpolation BinaryExpression BinOp LogicOp UnaryExpression UnaryQueryOp CallExpression ] SubscriptExpression [ CallLiteral CallTag ParenthesizedContent IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp InterpolatedSelector ; when } { Block ImportStatement import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector CallQuery ArgList SubscriptQuery MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports DetachedRuleSet PropertyName Declaration Important Inclusion IdSelector ClassSelector Inclusion CallExpression",
	  maxTerm: 133,
	  nodeProps: [
		["openedBy", 17,"(",59,"{"],
		["closedBy", 26,")",60,"}"]
	  ],
	  propSources: [lessHighlighting],
	  skippedNodes: [0,3,4],
	  repeatNodeCount: 10,
	  tokenData: "!2q~R!ZOX$tX^%l^p$tpq%lqr)Ors-xst/ltu6Zuv$tvw8^wx:Uxy;syz<Uz{<Z{|<t|}BQ}!OBc!O!PDo!P!QFY!Q![Jw![!]Kr!]!^Ln!^!_MP!_!`M{!`!aNl!a!b$t!b!c! m!c!}!&R!}#O!'y#O#P$t#P#Q!([#Q#R!(m#R#T$t#T#o!&R#o#p!)S#p#q!(m#q#r!)e#r#s!)v#s#y$t#y#z%l#z$f$t$f$g%l$g#BY$t#BY#BZ%l#BZ$IS$t$IS$I_%l$I_$I|$t$I|$JO%l$JO$JT$t$JT$JU%l$JU$KV$t$KV$KW%l$KW&FU$t&FU&FV%l&FV;'S$t;'S;=`!2k<%lO$t`$wSOy%Tz;'S%T;'S;=`%f<%lO%T`%YS|`Oy%Tz;'S%T;'S;=`%f<%lO%T`%iP;=`<%l%T~%qh#d~OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%T~'dh#d~|`OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%Tk)RUOy%Tz#]%T#]#^)e#^;'S%T;'S;=`%f<%lO%Tk)jU|`Oy%Tz#a%T#a#b)|#b;'S%T;'S;=`%f<%lO%Tk*RU|`Oy%Tz#d%T#d#e*e#e;'S%T;'S;=`%f<%lO%Tk*jU|`Oy%Tz#c%T#c#d*|#d;'S%T;'S;=`%f<%lO%Tk+RU|`Oy%Tz#f%T#f#g+e#g;'S%T;'S;=`%f<%lO%Tk+jU|`Oy%Tz#h%T#h#i+|#i;'S%T;'S;=`%f<%lO%Tk,RU|`Oy%Tz#T%T#T#U,e#U;'S%T;'S;=`%f<%lO%Tk,jU|`Oy%Tz#b%T#b#c,|#c;'S%T;'S;=`%f<%lO%Tk-RU|`Oy%Tz#h%T#h#i-e#i;'S%T;'S;=`%f<%lO%Tk-lS#PZ|`Oy%Tz;'S%T;'S;=`%f<%lO%T~-{WOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f<%lO-x~.jOn~~.mRO;'S-x;'S;=`.v;=`O-x~.yXOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f;=`<%l-x<%lO-x~/iP;=`<%l-xo/qY!OROy%Tz!Q%T!Q![0a![!c%T!c!i0a!i#T%T#T#Z0a#Z;'S%T;'S;=`%f<%lO%Tm0fY|`Oy%Tz!Q%T!Q![1U![!c%T!c!i1U!i#T%T#T#Z1U#Z;'S%T;'S;=`%f<%lO%Tm1ZY|`Oy%Tz!Q%T!Q![1y![!c%T!c!i1y!i#T%T#T#Z1y#Z;'S%T;'S;=`%f<%lO%Tm2QYl]|`Oy%Tz!Q%T!Q![2p![!c%T!c!i2p!i#T%T#T#Z2p#Z;'S%T;'S;=`%f<%lO%Tm2wYl]|`Oy%Tz!Q%T!Q![3g![!c%T!c!i3g!i#T%T#T#Z3g#Z;'S%T;'S;=`%f<%lO%Tm3lY|`Oy%Tz!Q%T!Q![4[![!c%T!c!i4[!i#T%T#T#Z4[#Z;'S%T;'S;=`%f<%lO%Tm4cYl]|`Oy%Tz!Q%T!Q![5R![!c%T!c!i5R!i#T%T#T#Z5R#Z;'S%T;'S;=`%f<%lO%Tm5WY|`Oy%Tz!Q%T!Q![5v![!c%T!c!i5v!i#T%T#T#Z5v#Z;'S%T;'S;=`%f<%lO%Tm5}Sl]|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm6^YOy%Tz!_%T!_!`6|!`!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Td7TS!SS|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm7h[h]|`Oy%Tz}%T}!O7a!O!Q%T!Q![7a![!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Ta8c[YPOy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%Ta9`[YP|`Oy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%T~:XWOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m<%lO:U~:tRO;'S:U;'S;=`:};=`O:U~;QXOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m;=`<%l:U<%lO:U~;pP;=`<%l:Uo;xSj_Oy%Tz;'S%T;'S;=`%f<%lO%T~<ZOa~m<bUVPrWOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%To<{Y#pQrWOy%Tz!O%T!O!P=k!P!Q%T!Q![@p![#R%T#R#SAm#S;'S%T;'S;=`%f<%lO%Tm=pU|`Oy%Tz!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%Tm>ZY#m]|`Oy%Tz!Q%T!Q![>S![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%Tm?OY|`Oy%Tz{%T{|?n|}%T}!O?n!O!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm?sU|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@^U#m]|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@w[#m]|`Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TbAtS#xQ|`Oy%Tz;'S%T;'S;=`%f<%lO%TkBVScZOy%Tz;'S%T;'S;=`%f<%lO%TmBhXrWOy%Tz}%T}!OCT!O!P=k!P!Q%T!Q![@p![;'S%T;'S;=`%f<%lO%TmCYW|`Oy%Tz!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%TmCy[f]|`Oy%Tz}%T}!OCr!O!Q%T!Q![Cr![!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%ToDtW#iROy%Tz!O%T!O!PE^!P!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%TlEcU|`Oy%Tz!O%T!O!PEu!P;'S%T;'S;=`%f<%lO%TlE|S#s[|`Oy%Tz;'S%T;'S;=`%f<%lO%T~F_VrWOy%Tz{Ft{!P%T!P!QIl!Q;'S%T;'S;=`%f<%lO%T~FyU|`OyFtyzG]z{Hd{;'SFt;'S;=`If<%lOFt~G`TOzG]z{Go{;'SG];'S;=`H^<%lOG]~GrVOzG]z{Go{!PG]!P!QHX!Q;'SG];'S;=`H^<%lOG]~H^OR~~HaP;=`<%lG]~HiW|`OyFtyzG]z{Hd{!PFt!P!QIR!Q;'SFt;'S;=`If<%lOFt~IYS|`R~Oy%Tz;'S%T;'S;=`%f<%lO%T~IiP;=`<%lFt~IsV|`S~OYIlYZ%TZyIlyzJYz;'SIl;'S;=`Jq<%lOIl~J_SS~OYJYZ;'SJY;'S;=`Jk<%lOJY~JnP;=`<%lJY~JtP;=`<%lIlmJ|[#m]Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TkKwU^ZOy%Tz![%T![!]LZ!];'S%T;'S;=`%f<%lO%TcLbS_R|`Oy%Tz;'S%T;'S;=`%f<%lO%TkLsS!ZZOy%Tz;'S%T;'S;=`%f<%lO%ThMUUrWOy%Tz!_%T!_!`Mh!`;'S%T;'S;=`%f<%lO%ThMoS|`rWOy%Tz;'S%T;'S;=`%f<%lO%TlNSW!SSrWOy%Tz!^%T!^!_Mh!_!`%T!`!aMh!a;'S%T;'S;=`%f<%lO%TjNsV!UQrWOy%Tz!_%T!_!`Mh!`!a! Y!a;'S%T;'S;=`%f<%lO%Tb! aS!UQ|`Oy%Tz;'S%T;'S;=`%f<%lO%To! rYg]Oy%Tz!b%T!b!c!!b!c!}!#R!}#T%T#T#o!#R#o#p!$O#p;'S%T;'S;=`%f<%lO%Tm!!iWg]|`Oy%Tz!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%Tm!#Y[g]|`Oy%Tz}%T}!O!#R!O!Q%T!Q![!#R![!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%To!$TW|`Oy%Tz!c%T!c!}!$m!}#T%T#T#o!$m#o;'S%T;'S;=`%f<%lO%To!$r^|`Oy%Tz}%T}!O!$m!O!Q%T!Q![!$m![!c%T!c!}!$m!}#T%T#T#o!$m#o#q%T#q#r!%n#r;'S%T;'S;=`%f<%lO%To!%uSp_|`Oy%Tz;'S%T;'S;=`%f<%lO%To!&W[#h_Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%To!'T[#h_|`Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%Tk!(OSyZOy%Tz;'S%T;'S;=`%f<%lO%Tm!(aSw]Oy%Tz;'S%T;'S;=`%f<%lO%Td!(pUOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tk!)XS!^ZOy%Tz;'S%T;'S;=`%f<%lO%Tk!)jS!]ZOy%Tz;'S%T;'S;=`%f<%lO%To!){Y#oQOr%Trs!*ksw%Twx!.wxy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tm!*pZ|`OY!*kYZ%TZr!*krs!+csy!*kyz!+vz#O!*k#O#P!-j#P;'S!*k;'S;=`!.q<%lO!*km!+jSo]|`Oy%Tz;'S%T;'S;=`%f<%lO%T]!+yWOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d<%lO!+v]!,hOo]]!,kRO;'S!+v;'S;=`!,t;=`O!+v]!,wXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!+v<%lO!+v]!-gP;=`<%l!+vm!-oU|`Oy!*kyz!+vz;'S!*k;'S;=`!.R;=`<%l!+v<%lO!*km!.UXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!*k<%lO!+vm!.tP;=`<%l!*km!.|Z|`OY!.wYZ%TZw!.wwx!+cxy!.wyz!/oz#O!.w#O#P!1^#P;'S!.w;'S;=`!2e<%lO!.w]!/rWOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W<%lO!/o]!0_RO;'S!/o;'S;=`!0h;=`O!/o]!0kXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!/o<%lO!/o]!1ZP;=`<%l!/om!1cU|`Oy!.wyz!/oz;'S!.w;'S;=`!1u;=`<%l!/o<%lO!.wm!1xXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!.w<%lO!/om!2hP;=`<%l!.w`!2nP;=`<%l$t",
	  tokenizers: [descendant, unitToken, argList, 0, 1, 2, 3, 4],
	  topRules: {"StyleSheet":[0,5]},
	  specialized: [{term: 116, get: value => spec_identifier[value] || -1},{term: 23, get: value => spec_AtKeyword[value] || -1}],
	  tokenPrec: 2180
	});
	
	/**
	A language provider for Less style sheets.
	*/
	const lessLanguage = language.LRLanguage.define({
		name: "less",
		parser: parser.configure({
			props: [
				language.indentNodeProp.add({
					Declaration: language.continuedIndent()
				}),
				language.foldNodeProp.add({
					Block: language.foldInside
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
			indentOnInput: /^\s*\}$/,
			wordChars: "@-"
		}
	});
	/**
	Property, variable, @-variable, and value keyword completion
	source.
	*/
	const lessCompletionSource = langCss.defineCSSCompletionSource(node => node.name == "VariableName" || node.name == "AtKeyword");
	/**
	Language support for Less.
	*/
	function less() {
		return new language.LanguageSupport(lessLanguage, lessLanguage.data.of({ autocomplete: lessCompletionSource }));
	}
	
	exports.less = less;
	exports.lessCompletionSource = lessCompletionSource;
	exports.lessLanguage = lessLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var autocomplete = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	var markdown$1 = __webpack_require__(/*! @lezer/markdown */ "../editor/node_modules/@lezer/markdown/dist/index.cjs");
	var langHtml = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	const data = language.defineLanguageFacet({ commentTokens: { block: { open: "<!--", close: "-->" } } });
	const headingProp = new common.NodeProp();
	const commonmark = markdown$1.parser.configure({
		props: [
			language.foldNodeProp.add(type => {
				return !type.is("Block") || type.is("Document") || isHeading(type) != null ? undefined
					: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
			}),
			headingProp.add(isHeading),
			language.indentNodeProp.add({
				Document: () => null
			}),
			language.languageDataProp.add({
				Document: data
			})
		]
	});
	function isHeading(type) {
		let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
		return match ? +match[1] : undefined;
	}
	function findSectionEnd(headerNode, level) {
		let last = headerNode;
		for (;;) {
			let next = last.nextSibling, heading;
			if (!next || (heading = isHeading(next.type)) != null && heading <= level)
				break;
			last = next;
		}
		return last.to;
	}
	const headerIndent = language.foldService.of((state, start, end) => {
		for (let node = language.syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {
			if (node.from < start)
				break;
			let heading = node.type.prop(headingProp);
			if (heading == null)
				continue;
			let upto = findSectionEnd(node, heading);
			if (upto > end)
				return { from: end, to: upto };
		}
		return null;
	});
	function mkLang(parser) {
		return new language.Language(data, parser, [headerIndent], "markdown");
	}
	/**
	Language support for strict CommonMark.
	*/
	const commonmarkLanguage = mkLang(commonmark);
	const extended = commonmark.configure([markdown$1.GFM, markdown$1.Subscript, markdown$1.Superscript, markdown$1.Emoji, {
			props: [
				language.foldNodeProp.add({
					Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })
				})
			]
		}]);
	/**
	Language support for [GFM](https://github.github.com/gfm/) plus
	subscript, superscript, and emoji syntax.
	*/
	const markdownLanguage = mkLang(extended);
	function getCodeParser(languages, defaultLanguage) {
		return (info) => {
			if (info && languages) {
				let found = null;
				// Strip anything after whitespace
				info = /\S*/.exec(info)[0];
				if (typeof languages == "function")
					found = languages(info);
				else
					found = language.LanguageDescription.matchLanguageName(languages, info, true);
				if (found instanceof language.LanguageDescription)
					return found.support ? found.support.language.parser : language.ParseContext.getSkippingParser(found.load());
				else if (found)
					return found.parser;
			}
			return defaultLanguage ? defaultLanguage.parser : null;
		};
	}
	
	class Context {
		constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
			this.node = node;
			this.from = from;
			this.to = to;
			this.spaceBefore = spaceBefore;
			this.spaceAfter = spaceAfter;
			this.type = type;
			this.item = item;
		}
		blank(maxWidth, trailing = true) {
			let result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
			if (maxWidth != null) {
				while (result.length < maxWidth)
					result += " ";
				return result;
			}
			else {
				for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
					result += " ";
				return result + (trailing ? this.spaceAfter : "");
			}
		}
		marker(doc, add) {
			let number = this.node.name == "OrderedList" ? String((+itemNumber(this.item, doc)[2] + add)) : "";
			return this.spaceBefore + number + this.type + this.spaceAfter;
		}
	}
	function getContext(node, doc) {
		let nodes = [];
		for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
			if (cur.name == "ListItem" || cur.name == "Blockquote" || cur.name == "FencedCode")
				nodes.push(cur);
		}
		let context = [];
		for (let i = nodes.length - 1; i >= 0; i--) {
			let node = nodes[i], match;
			let line = doc.lineAt(node.from), startPos = node.from - line.from;
			if (node.name == "FencedCode") {
				context.push(new Context(node, startPos, startPos, "", "", "", null));
			}
			else if (node.name == "Blockquote" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {
				context.push(new Context(node, startPos, startPos + match[0].length, "", match[1], ">", null));
			}
			else if (node.name == "ListItem" && node.parent.name == "OrderedList" &&
				(match = /^( *)\d+([.)])( *)/.exec(line.text.slice(startPos)))) {
				let after = match[3], len = match[0].length;
				if (after.length >= 4) {
					after = after.slice(0, after.length - 4);
					len -= 4;
				}
				context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));
			}
			else if (node.name == "ListItem" && node.parent.name == "BulletList" &&
				(match = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(line.text.slice(startPos)))) {
				let after = match[4], len = match[0].length;
				if (after.length > 4) {
					after = after.slice(0, after.length - 4);
					len -= 4;
				}
				let type = match[2];
				if (match[3])
					type += match[3].replace(/[xX]/, ' ');
				context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));
			}
		}
		return context;
	}
	function itemNumber(item, doc) {
		return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
	}
	function renumberList(after, doc, changes, offset = 0) {
		for (let prev = -1, node = after;;) {
			if (node.name == "ListItem") {
				let m = itemNumber(node, doc);
				let number = +m[2];
				if (prev >= 0) {
					if (number != prev + 1)
						return;
					changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });
				}
				prev = number;
			}
			let next = node.nextSibling;
			if (!next)
				break;
			node = next;
		}
	}
	function normalizeIndent(content, state$1) {
		let blank = /^[ \t]*/.exec(content)[0].length;
		if (!blank || state$1.facet(language.indentUnit) != "\t")
			return content;
		let col = state.countColumn(content, 4, blank);
		let space = "";
		for (let i = col; i > 0;) {
			if (i >= 4) {
				space += "\t";
				i -= 4;
			}
			else {
				space += " ";
				i--;
			}
		}
		return space + content.slice(blank);
	}
	/**
	This command, when invoked in Markdown context with cursor
	selection(s), will create a new line with the markup for
	blockquotes and lists that were active on the old line. If the
	cursor was directly after the end of the markup for the old line,
	trailing whitespace and list markers are removed from that line.
	
	The command does nothing in non-Markdown context, so it should
	not be used as the only binding for Enter (even in a Markdown
	document, HTML and code regions might use a different language).
	*/
	const insertNewlineContinueMarkup = ({ state: state$1, dispatch }) => {
		let tree = language.syntaxTree(state$1), { doc } = state$1;
		let dont = null, changes = state$1.changeByRange(range => {
			if (!range.empty || !markdownLanguage.isActiveAt(state$1, range.from))
				return dont = { range };
			let pos = range.from, line = doc.lineAt(pos);
			let context = getContext(tree.resolveInner(pos, -1), doc);
			while (context.length && context[context.length - 1].from > pos - line.from)
				context.pop();
			if (!context.length)
				return dont = { range };
			let inner = context[context.length - 1];
			if (inner.to - inner.spaceAfter.length > pos - line.from)
				return dont = { range };
			let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\S/.test(line.text.slice(inner.to));
			// Empty line in list
			if (inner.item && emptyLine) {
				// First list item or blank line before: delete a level of markup
				if (inner.node.firstChild.to >= pos ||
					line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
					let next = context.length > 1 ? context[context.length - 2] : null;
					let delTo, insert = "";
					if (next && next.item) { // Re-add marker for the list at the next level
						delTo = line.from + next.from;
						insert = next.marker(doc, 1);
					}
					else {
						delTo = line.from + (next ? next.to : 0);
					}
					let changes = [{ from: delTo, to: pos, insert }];
					if (inner.node.name == "OrderedList")
						renumberList(inner.item, doc, changes, -2);
					if (next && next.node.name == "OrderedList")
						renumberList(next.item, doc, changes);
					return { range: state.EditorSelection.cursor(delTo + insert.length), changes };
				}
				else { // Move this line down
					let insert = "";
					for (let i = 0, e = context.length - 2; i <= e; i++) {
						insert += context[i].blank(i < e ? state.countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);
					}
					insert = normalizeIndent(insert, state$1);
					return { range: state.EditorSelection.cursor(pos + insert.length + 1),
						changes: { from: line.from, insert: insert + state$1.lineBreak } };
				}
			}
			if (inner.node.name == "Blockquote" && emptyLine && line.from) {
				let prevLine = doc.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
				// Two aligned empty quoted lines in a row
				if (quoted && quoted.index == inner.from) {
					let changes = state$1.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },
						{ from: line.from + inner.from, to: line.to }]);
					return { range: range.map(changes), changes };
				}
			}
			let changes = [];
			if (inner.node.name == "OrderedList")
				renumberList(inner.item, doc, changes);
			let continued = inner.item && inner.item.from < line.from;
			let insert = "";
			// If not dedented
			if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
				for (let i = 0, e = context.length - 1; i <= e; i++) {
					insert += i == e && !continued ? context[i].marker(doc, 1)
						: context[i].blank(i < e ? state.countColumn(line.text, 4, context[i + 1].from) - insert.length : null);
				}
			}
			let from = pos;
			while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
				from--;
			insert = normalizeIndent(insert, state$1);
			changes.push({ from, to: pos, insert: state$1.lineBreak + insert });
			return { range: state.EditorSelection.cursor(from + insert.length + 1), changes };
		});
		if (dont)
			return false;
		dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
		return true;
	};
	function isMark(node) {
		return node.name == "QuoteMark" || node.name == "ListMark";
	}
	function contextNodeForDelete(tree, pos) {
		let node = tree.resolveInner(pos, -1), scan = pos;
		if (isMark(node)) {
			scan = node.from;
			node = node.parent;
		}
		for (let prev; prev = node.childBefore(scan);) {
			if (isMark(prev)) {
				scan = prev.from;
			}
			else if (prev.name == "OrderedList" || prev.name == "BulletList") {
				node = prev.lastChild;
				scan = node.to;
			}
			else {
				break;
			}
		}
		return node;
	}
	/**
	This command will, when invoked in a Markdown context with the
	cursor directly after list or blockquote markup, delete one level
	of markup. When the markup is for a list, it will be replaced by
	spaces on the first invocation (a further invocation will delete
	the spaces), to make it easy to continue a list.
	
	When not after Markdown block markup, this command will return
	false, so it is intended to be bound alongside other deletion
	commands, with a higher precedence than the more generic commands.
	*/
	const deleteMarkupBackward = ({ state: state$1, dispatch }) => {
		let tree = language.syntaxTree(state$1);
		let dont = null, changes = state$1.changeByRange(range => {
			let pos = range.from, { doc } = state$1;
			if (range.empty && markdownLanguage.isActiveAt(state$1, range.from)) {
				let line = doc.lineAt(pos);
				let context = getContext(contextNodeForDelete(tree, pos), doc);
				if (context.length) {
					let inner = context[context.length - 1];
					let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
					// Delete extra trailing space after markup
					if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
						return { range: state.EditorSelection.cursor(line.from + spaceEnd),
							changes: { from: line.from + spaceEnd, to: pos } };
					if (pos - line.from == spaceEnd &&
						// Only apply this if we're on the line that has the
						// construct's syntax, or there's only indentation in the
						// target range
						(!inner.item || line.from <= inner.item.from || !/\S/.test(line.text.slice(0, inner.to)))) {
						let start = line.from + inner.from;
						// Replace a list item marker with blank space
						if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to))) {
							let insert = inner.blank(state.countColumn(line.text, 4, inner.to) - state.countColumn(line.text, 4, inner.from));
							if (start == line.from)
								insert = normalizeIndent(insert, state$1);
							return { range: state.EditorSelection.cursor(start + insert.length),
								changes: { from: start, to: line.from + inner.to, insert } };
						}
						// Delete one level of indentation
						if (start < pos)
							return { range: state.EditorSelection.cursor(start), changes: { from: start, to: pos } };
					}
				}
			}
			return dont = { range };
		});
		if (dont)
			return false;
		dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "delete" }));
		return true;
	};
	
	/**
	A small keymap with Markdown-specific bindings. Binds Enter to
	[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
	and Backspace to
	[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
	*/
	const markdownKeymap = [
		{ key: "Enter", run: insertNewlineContinueMarkup },
		{ key: "Backspace", run: deleteMarkupBackward }
	];
	const htmlNoMatch = langHtml.html({ matchClosingTags: false });
	/**
	Markdown language support.
	*/
	function markdown(config = {}) {
		let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true } = config;
		if (!(parser instanceof markdown$1.MarkdownParser))
			throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
		let extensions = config.extensions ? [config.extensions] : [];
		let support = [htmlNoMatch.support], defaultCode;
		if (defaultCodeLanguage instanceof language.LanguageSupport) {
			support.push(defaultCodeLanguage.support);
			defaultCode = defaultCodeLanguage.language;
		}
		else if (defaultCodeLanguage) {
			defaultCode = defaultCodeLanguage;
		}
		let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;
		extensions.push(markdown$1.parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
		if (addKeymap)
			support.push(state.Prec.high(view.keymap.of(markdownKeymap)));
		let lang = mkLang(parser.configure(extensions));
		if (completeHTMLTags)
			support.push(lang.data.of({ autocomplete: htmlTagCompletion }));
		return new language.LanguageSupport(lang, support);
	}
	function htmlTagCompletion(context) {
		let { state, pos } = context, m = /<[:\-\.\w\u00b7-\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));
		if (!m)
			return null;
		let tree = language.syntaxTree(state).resolveInner(pos, -1);
		while (tree && !tree.type.isTop) {
			if (tree.name == "CodeBlock" || tree.name == "FencedCode" || tree.name == "ProcessingInstructionBlock" ||
				tree.name == "CommentBlock" || tree.name == "Link" || tree.name == "Image")
				return null;
			tree = tree.parent;
		}
		return {
			from: pos - m[0].length, to: pos,
			options: htmlTagCompletions(),
			validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
		};
	}
	let _tagCompletions = null;
	function htmlTagCompletions() {
		if (_tagCompletions)
			return _tagCompletions;
		let result = langHtml.htmlCompletionSource(new autocomplete.CompletionContext(state.EditorState.create({ extensions: htmlNoMatch }), 0, true));
		return _tagCompletions = result ? result.options : [];
	}
	
	exports.commonmarkLanguage = commonmarkLanguage;
	exports.deleteMarkupBackward = deleteMarkupBackward;
	exports.insertNewlineContinueMarkup = insertNewlineContinueMarkup;
	exports.markdown = markdown;
	exports.markdownKeymap = markdownKeymap;
	exports.markdownLanguage = markdownLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-php/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-php/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var php$1 = __webpack_require__(/*! @lezer/php */ "../editor/node_modules/@lezer/php/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var langHtml = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	A language provider based on the [Lezer PHP
	parser](https://github.com/lezer-parser/php), extended with
	highlighting and indentation information.
	*/
	const phpLanguage = language.LRLanguage.define({
		name: "php",
		parser: php$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					IfStatement: language.continuedIndent({ except: /^\s*({|else\b|elseif\b|endif\b)/ }),
					TryStatement: language.continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
					SwitchBody: context => {
						let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
						return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
					},
					ColonBlock: cx => cx.baseIndent + cx.unit,
					"Block EnumBody DeclarationList": language.delimitedIndent({ closing: "}" }),
					ArrowFunction: cx => cx.baseIndent + cx.unit,
					"String BlockComment": () => null,
					Statement: language.continuedIndent({ except: /^({|end(for|foreach|switch|while)\b)/ })
				}),
				language.foldNodeProp.add({
					"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList": language.foldInside,
					ColonBlock(tree) { return { from: tree.from + 1, to: tree.to }; },
					BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
			indentOnInput: /^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,
			wordChars: "$",
			closeBrackets: { stringPrefixes: ["b", "B"] }
		}
	});
	/**
	PHP language support.
	*/
	function php(config = {}) {
		let support = [], base;
		if (config.baseLanguage === null) ;
		else if (config.baseLanguage) {
			base = config.baseLanguage;
		}
		else {
			let htmlSupport = langHtml.html({ matchClosingTags: false });
			support.push(htmlSupport.support);
			base = htmlSupport.language;
		}
		return new language.LanguageSupport(phpLanguage.configure({
			wrap: base && common.parseMixed(node => {
				if (!node.type.isTop)
					return null;
				return {
					parser: base.parser,
					overlay: node => node.name == "Text"
				};
			}),
			top: config.plain ? "Program" : "Template"
		}), support);
	}
	
	exports.php = php;
	exports.phpLanguage = phpLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-python/dist/index.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-python/dist/index.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var python$1 = __webpack_require__(/*! @lezer/python */ "../editor/node_modules/@lezer/python/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var autocomplete = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	
	const cache = new common.NodeWeakMap();
	const ScopeNodes = new Set([
		"Script", "Body",
		"FunctionDefinition", "ClassDefinition", "LambdaExpression",
		"ForStatement", "MatchClause"
	]);
	function defID(type) {
		return (node, def, outer) => {
			if (outer)
				return false;
			let id = node.node.getChild("VariableName");
			if (id)
				def(id, type);
			return true;
		};
	}
	const gatherCompletions = {
		FunctionDefinition: defID("function"),
		ClassDefinition: defID("class"),
		ForStatement(node, def, outer) {
			if (outer)
				for (let child = node.node.firstChild; child; child = child.nextSibling) {
					if (child.name == "VariableName")
						def(child, "variable");
					else if (child.name == "in")
						break;
				}
		},
		ImportStatement(_node, def) {
			var _a, _b;
			let { node } = _node;
			let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "from";
			for (let ch = node.getChild("import"); ch; ch = ch.nextSibling) {
				if (ch.name == "VariableName" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != "as")
					def(ch, isFrom ? "variable" : "namespace");
			}
		},
		AssignStatement(node, def) {
			for (let child = node.node.firstChild; child; child = child.nextSibling) {
				if (child.name == "VariableName")
					def(child, "variable");
				else if (child.name == ":" || child.name == "AssignOp")
					break;
			}
		},
		ParamList(node, def) {
			for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
				if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
					def(child, "variable");
				prev = child;
			}
		},
		CapturePattern: defID("variable"),
		AsPattern: defID("variable"),
		__proto__: null
	};
	function getScope(doc, node) {
		let cached = cache.get(node);
		if (cached)
			return cached;
		let completions = [], top = true;
		function def(node, type) {
			let name = doc.sliceString(node.from, node.to);
			completions.push({ label: name, type });
		}
		node.cursor(common.IterMode.IncludeAnonymous).iterate(node => {
			if (node.name) {
				let gather = gatherCompletions[node.name];
				if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))
					return false;
				top = false;
			}
			else if (node.to - node.from > 8192) {
				// Allow caching for bigger internal nodes
				for (let c of getScope(doc, node.node))
					completions.push(c);
				return false;
			}
		});
		cache.set(node, completions);
		return completions;
	}
	const Identifier = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
	const dontComplete = ["String", "FormatString", "Comment", "PropertyName"];
	/**
	Completion source that looks up locally defined names in
	Python code.
	*/
	function localCompletionSource(context) {
		let inner = language.syntaxTree(context.state).resolveInner(context.pos, -1);
		if (dontComplete.indexOf(inner.name) > -1)
			return null;
		let isWord = inner.name == "VariableName" ||
			inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
		if (!isWord && !context.explicit)
			return null;
		let options = [];
		for (let pos = inner; pos; pos = pos.parent) {
			if (ScopeNodes.has(pos.name))
				options = options.concat(getScope(context.state.doc, pos));
		}
		return {
			options,
			from: isWord ? inner.from : context.pos,
			validFor: Identifier
		};
	}
	const globals = [
		"__annotations__", "__builtins__", "__debug__", "__doc__", "__import__", "__name__",
		"__loader__", "__package__", "__spec__",
		"False", "None", "True"
	].map(n => ({ label: n, type: "constant" })).concat([
		"ArithmeticError", "AssertionError", "AttributeError", "BaseException", "BlockingIOError",
		"BrokenPipeError", "BufferError", "BytesWarning", "ChildProcessError", "ConnectionAbortedError",
		"ConnectionError", "ConnectionRefusedError", "ConnectionResetError", "DeprecationWarning",
		"EOFError", "Ellipsis", "EncodingWarning", "EnvironmentError", "Exception", "FileExistsError",
		"FileNotFoundError", "FloatingPointError", "FutureWarning", "GeneratorExit", "IOError",
		"ImportError", "ImportWarning", "IndentationError", "IndexError", "InterruptedError",
		"IsADirectoryError", "KeyError", "KeyboardInterrupt", "LookupError", "MemoryError",
		"ModuleNotFoundError", "NameError", "NotADirectoryError", "NotImplemented", "NotImplementedError",
		"OSError", "OverflowError", "PendingDeprecationWarning", "PermissionError", "ProcessLookupError",
		"RecursionError", "ReferenceError", "ResourceWarning", "RuntimeError", "RuntimeWarning",
		"StopAsyncIteration", "StopIteration", "SyntaxError", "SyntaxWarning", "SystemError",
		"SystemExit", "TabError", "TimeoutError", "TypeError", "UnboundLocalError", "UnicodeDecodeError",
		"UnicodeEncodeError", "UnicodeError", "UnicodeTranslateError", "UnicodeWarning", "UserWarning",
		"ValueError", "Warning", "ZeroDivisionError"
	].map(n => ({ label: n, type: "type" }))).concat([
		"bool", "bytearray", "bytes", "classmethod", "complex", "float", "frozenset", "int", "list",
		"map", "memoryview", "object", "range", "set", "staticmethod", "str", "super", "tuple", "type"
	].map(n => ({ label: n, type: "class" }))).concat([
		"abs", "aiter", "all", "anext", "any", "ascii", "bin", "breakpoint", "callable", "chr",
		"compile", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "exit", "filter",
		"format", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "isinstance",
		"issubclass", "iter", "len", "license", "locals", "max", "min", "next", "oct", "open",
		"ord", "pow", "print", "property", "quit", "repr", "reversed", "round", "setattr", "slice",
		"sorted", "sum", "vars", "zip"
	].map(n => ({ label: n, type: "function" })));
	const snippets = [
		autocomplete.snippetCompletion("def ${name}(${params}):\n\t${}", {
			label: "def",
			detail: "function",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("for ${name} in ${collection}:\n\t${}", {
			label: "for",
			detail: "loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("while ${}:\n\t${}", {
			label: "while",
			detail: "loop",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("try:\n\t${}\nexcept ${error}:\n\t${}", {
			label: "try",
			detail: "/ except block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("if ${}:\n\t\n", {
			label: "if",
			detail: "block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("if ${}:\n\t${}\nelse:\n\t${}", {
			label: "if",
			detail: "/ else block",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}", {
			label: "class",
			detail: "definition",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("import ${module}", {
			label: "import",
			detail: "statement",
			type: "keyword"
		}),
		autocomplete.snippetCompletion("from ${module} import ${names}", {
			label: "from",
			detail: "import",
			type: "keyword"
		})
	];
	/**
	Autocompletion for built-in Python globals and keywords.
	*/
	const globalCompletion = autocomplete.ifNotIn(dontComplete, autocomplete.completeFromList(globals.concat(snippets)));
	
	function indentBody(context, node) {
		let base = context.baseIndentFor(node);
		let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
		// Don't consider blank, deindented lines at the end of the
		// block part of the block
		if (/^\s*($|#)/.test(line.text) &&
			context.node.to < to + 100 &&
			!/\S/.test(context.state.sliceDoc(to, context.node.to)) &&
			context.lineIndent(context.pos, -1) <= base)
			return null;
		// A normally deindenting keyword that appears at a higher
		// indentation than the block should probably be handled by the next
		// level
		if (/^\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)
			return null;
		return base + context.unit;
	}
	/**
	A language provider based on the [Lezer Python
	parser](https://github.com/lezer-parser/python), extended with
	highlighting and indentation information.
	*/
	const pythonLanguage = language.LRLanguage.define({
		name: "python",
		parser: python$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					Body: context => { var _a; return (_a = indentBody(context, context.node)) !== null && _a !== void 0 ? _a : context.continue(); },
					IfStatement: cx => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
					TryStatement: cx => /^\s*(except |finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
					"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": language.delimitedIndent({ closing: ")" }),
					"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": language.delimitedIndent({ closing: "}" }),
					"ArrayExpression ArrayComprehensionExpression": language.delimitedIndent({ closing: "]" }),
					"String FormatString": () => null,
					Script: context => {
						if (context.pos + /\s*/.exec(context.textAfter)[0].length >= context.node.to) {
							let endBody = null;
							for (let cur = context.node, to = cur.to;;) {
								cur = cur.lastChild;
								if (!cur || cur.to != to)
									break;
								if (cur.type.name == "Body")
									endBody = cur;
							}
							if (endBody) {
								let bodyIndent = indentBody(context, endBody);
								if (bodyIndent != null)
									return bodyIndent;
							}
						}
						return context.continue();
					}
				}),
				language.foldNodeProp.add({
					"ArrayExpression DictionaryExpression SetExpression TupleExpression": language.foldInside,
					Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })
				})
			],
		}),
		languageData: {
			closeBrackets: {
				brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
				stringPrefixes: ["f", "fr", "rf", "r", "u", "b", "br", "rb",
					"F", "FR", "RF", "R", "U", "B", "BR", "RB"]
			},
			commentTokens: { line: "#" },
			indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
		}
	});
	/**
	Python language support.
	*/
	function python() {
		return new language.LanguageSupport(pythonLanguage, [
			pythonLanguage.data.of({ autocomplete: localCompletionSource }),
			pythonLanguage.data.of({ autocomplete: globalCompletion }),
		]);
	}
	
	exports.globalCompletion = globalCompletion;
	exports.localCompletionSource = localCompletionSource;
	exports.python = python;
	exports.pythonLanguage = pythonLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-rust/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-rust/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var rust$1 = __webpack_require__(/*! @lezer/rust */ "../editor/node_modules/@lezer/rust/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	/**
	A syntax provider based on the [Lezer Rust
	parser](https://github.com/lezer-parser/rust), extended with
	highlighting and indentation information.
	*/
	const rustLanguage = language.LRLanguage.define({
		name: "rust",
		parser: rust$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					IfExpression: language.continuedIndent({ except: /^\s*({|else\b)/ }),
					"String BlockComment": () => null,
					"AttributeItem": cx => cx.continue(),
					"Statement MatchArm": language.continuedIndent()
				}),
				language.foldNodeProp.add(type => {
					if (/(Block|edTokens|List)$/.test(type.name))
						return language.foldInside;
					if (type.name == "BlockComment")
						return tree => ({ from: tree.from + 2, to: tree.to - 2 });
					return undefined;
				})
			]
		}),
		languageData: {
			commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
			indentOnInput: /^\s*(?:\{|\})$/,
			closeBrackets: { stringPrefixes: ["b", "r", "br"] }
		}
	});
	/**
	Rust language support
	*/
	function rust() {
		return new language.LanguageSupport(rustLanguage);
	}
	
	exports.rust = rust;
	exports.rustLanguage = rustLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-sass/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-sass/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var sass$1 = __webpack_require__(/*! @lezer/sass */ "../editor/node_modules/@lezer/sass/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var langCss = __webpack_require__(/*! @codemirror/lang-css */ "../editor/node_modules/@codemirror/lang-css/dist/index.cjs");
	
	/**
	A language provider based on the [Lezer Sass
	parser](https://github.com/lezer-parser/sass), extended with
	highlighting and indentation information.
	*/
	const sassLanguage = language.LRLanguage.define({
		name: "sass",
		parser: sass$1.parser.configure({
			props: [
				language.foldNodeProp.add({
					Block: language.foldInside,
					Comment(node, state) {
						return { from: node.from + 2, to: state.sliceDoc(node.to - 2, node.to) == "*/" ? node.to - 2 : node.to };
					}
				}),
				language.indentNodeProp.add({
					Declaration: language.continuedIndent()
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
			indentOnInput: /^\s*\}$/,
			wordChars: "$-"
		}
	});
	const indentedSassLanguage = sassLanguage.configure({
		dialect: "indented",
		props: [
			language.indentNodeProp.add({
				"Block RuleSet": cx => cx.baseIndent + cx.unit
			}),
			language.foldNodeProp.add({
				Block: node => ({ from: node.from, to: node.to })
			})
		]
	});
	/**
	Property, variable, $-variable, and value keyword completion
	source.
	*/
	const sassCompletionSource = langCss.defineCSSCompletionSource(node => node.name == "VariableName" || node.name == "SassVariableName");
	/**
	Language support for CSS.
	*/
	function sass(config) {
		return new language.LanguageSupport((config === null || config === void 0 ? void 0 : config.indented) ? indentedSassLanguage : sassLanguage, sassLanguage.data.of({ autocomplete: sassCompletionSource }));
	}
	
	exports.sass = sass;
	exports.sassCompletionSource = sassCompletionSource;
	exports.sassLanguage = sassLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-sql/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-sql/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var autocomplete = __webpack_require__(/*! @codemirror/autocomplete */ "../editor/node_modules/@codemirror/autocomplete/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const whitespace = 36,
	  LineComment = 1,
	  BlockComment = 2,
	  String$1 = 3,
	  Number = 4,
	  Bool = 5,
	  Null = 6,
	  ParenL = 7,
	  ParenR = 8,
	  BraceL = 9,
	  BraceR = 10,
	  BracketL = 11,
	  BracketR = 12,
	  Semi = 13,
	  Dot = 14,
	  Operator = 15,
	  Punctuation = 16,
	  SpecialVar = 17,
	  Identifier = 18,
	  QuotedIdentifier = 19,
	  Keyword = 20,
	  Type = 21,
	  Bits = 22,
	  Bytes = 23,
	  Builtin = 24;
	
	function isAlpha(ch) {
		return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
	}
	function isHexDigit(ch) {
		return ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch >= 97 /* a */ && ch <= 102 /* f */ || ch >= 65 /* A */ && ch <= 70 /* F */;
	}
	function readLiteral(input, endQuote, backslashEscapes) {
		for (let escaped = false;;) {
			if (input.next < 0)
				return;
			if (input.next == endQuote && !escaped) {
				input.advance();
				return;
			}
			escaped = backslashEscapes && !escaped && input.next == 92 /* Backslash */;
			input.advance();
		}
	}
	function readDoubleDollarLiteral(input) {
		for (;;) {
			if (input.next < 0 || input.peek(1) < 0)
				return;
			if (input.next == 36 /* Dollar */ && input.peek(1) == 36 /* Dollar */) {
				input.advance(2);
				return;
			}
			input.advance();
		}
	}
	function readPLSQLQuotedLiteral(input, openDelim) {
		let matchingDelim = "[{<(".indexOf(String.fromCharCode(openDelim));
		let closeDelim = matchingDelim < 0 ? openDelim : "]}>)".charCodeAt(matchingDelim);
		for (;;) {
			if (input.next < 0)
				return;
			if (input.next == closeDelim && input.peek(1) == 39 /* SingleQuote */) {
				input.advance(2);
				return;
			}
			input.advance();
		}
	}
	function readWord(input, result) {
		for (;;) {
			if (input.next != 95 /* Underscore */ && !isAlpha(input.next))
				break;
			if (result != null)
				result += String.fromCharCode(input.next);
			input.advance();
		}
		return result;
	}
	function readWordOrQuoted(input) {
		if (input.next == 39 /* SingleQuote */ || input.next == 34 /* DoubleQuote */ || input.next == 96 /* Backtick */) {
			let quote = input.next;
			input.advance();
			readLiteral(input, quote, false);
		}
		else {
			readWord(input);
		}
	}
	function readBits(input, endQuote) {
		while (input.next == 48 /* _0 */ || input.next == 49 /* _1 */)
			input.advance();
		if (endQuote && input.next == endQuote)
			input.advance();
	}
	function readNumber(input, sawDot) {
		for (;;) {
			if (input.next == 46 /* Dot */) {
				if (sawDot)
					break;
				sawDot = true;
			}
			else if (input.next < 48 /* _0 */ || input.next > 57 /* _9 */) {
				break;
			}
			input.advance();
		}
		if (input.next == 69 /* E */ || input.next == 101 /* e */) {
			input.advance();
			if (input.next == 43 /* Plus */ || input.next == 45 /* Dash */)
				input.advance();
			while (input.next >= 48 /* _0 */ && input.next <= 57 /* _9 */)
				input.advance();
		}
	}
	function eol(input) {
		while (!(input.next < 0 || input.next == 10 /* Newline */))
			input.advance();
	}
	function inString(ch, str) {
		for (let i = 0; i < str.length; i++)
			if (str.charCodeAt(i) == ch)
				return true;
		return false;
	}
	const Space = " \t\r\n";
	function keywords(keywords, types, builtin) {
		let result = Object.create(null);
		result["true"] = result["false"] = Bool;
		result["null"] = result["unknown"] = Null;
		for (let kw of keywords.split(" "))
			if (kw)
				result[kw] = Keyword;
		for (let tp of types.split(" "))
			if (tp)
				result[tp] = Type;
		for (let kw of (builtin || "").split(" "))
			if (kw)
				result[kw] = Builtin;
		return result;
	}
	const SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
	const SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
	const defaults = {
		backslashEscapes: false,
		hashComments: false,
		spaceAfterDashes: false,
		slashComments: false,
		doubleQuotedStrings: false,
		doubleDollarQuotedStrings: false,
		unquotedBitLiterals: false,
		treatBitsAsBytes: false,
		charSetCasts: false,
		plsqlQuotingMechanism: false,
		operatorChars: "*+\-%<>!=&|~^/",
		specialVar: "?",
		identifierQuotes: '"',
		words: keywords(SQLKeywords, SQLTypes)
	};
	function dialect(spec, kws, types, builtin) {
		let dialect = {};
		for (let prop in defaults)
			dialect[prop] = (spec.hasOwnProperty(prop) ? spec : defaults)[prop];
		if (kws)
			dialect.words = keywords(kws, types || "", builtin);
		return dialect;
	}
	function tokensFor(d) {
		return new lr.ExternalTokenizer(input => {
			var _a;
			let { next } = input;
			input.advance();
			if (inString(next, Space)) {
				while (inString(input.next, Space))
					input.advance();
				input.acceptToken(whitespace);
			}
			else if (next == 36 /* Dollar */ && input.next == 36 /* Dollar */ && d.doubleDollarQuotedStrings) {
				readDoubleDollarLiteral(input);
				input.acceptToken(String$1);
			}
			else if (next == 39 /* SingleQuote */ || next == 34 /* DoubleQuote */ && d.doubleQuotedStrings) {
				readLiteral(input, next, d.backslashEscapes);
				input.acceptToken(String$1);
			}
			else if (next == 35 /* Hash */ && d.hashComments ||
				next == 47 /* Slash */ && input.next == 47 /* Slash */ && d.slashComments) {
				eol(input);
				input.acceptToken(LineComment);
			}
			else if (next == 45 /* Dash */ && input.next == 45 /* Dash */ &&
				(!d.spaceAfterDashes || input.peek(1) == 32 /* Space */)) {
				eol(input);
				input.acceptToken(LineComment);
			}
			else if (next == 47 /* Slash */ && input.next == 42 /* Star */) {
				input.advance();
				for (let depth = 1;;) {
					let cur = input.next;
					if (input.next < 0)
						break;
					input.advance();
					if (cur == 42 /* Star */ && input.next == 47 /* Slash */) {
						depth--;
						input.advance();
						if (!depth)
							break;
					}
					else if (cur == 47 /* Slash */ && input.next == 42 /* Star */) {
						depth++;
						input.advance();
					}
				}
				input.acceptToken(BlockComment);
			}
			else if ((next == 101 /* e */ || next == 69 /* E */) && input.next == 39 /* SingleQuote */) {
				input.advance();
				readLiteral(input, 39 /* SingleQuote */, true);
			}
			else if ((next == 110 /* n */ || next == 78 /* N */) && input.next == 39 /* SingleQuote */ &&
				d.charSetCasts) {
				input.advance();
				readLiteral(input, 39 /* SingleQuote */, d.backslashEscapes);
				input.acceptToken(String$1);
			}
			else if (next == 95 /* Underscore */ && d.charSetCasts) {
				for (let i = 0;; i++) {
					if (input.next == 39 /* SingleQuote */ && i > 1) {
						input.advance();
						readLiteral(input, 39 /* SingleQuote */, d.backslashEscapes);
						input.acceptToken(String$1);
						break;
					}
					if (!isAlpha(input.next))
						break;
					input.advance();
				}
			}
			else if (d.plsqlQuotingMechanism &&
				(next == 113 /* q */ || next == 81 /* Q */) && input.next == 39 /* SingleQuote */ &&
				input.peek(1) > 0 && !inString(input.peek(1), Space)) {
				let openDelim = input.peek(1);
				input.advance(2);
				readPLSQLQuotedLiteral(input, openDelim);
				input.acceptToken(String$1);
			}
			else if (next == 40 /* ParenL */) {
				input.acceptToken(ParenL);
			}
			else if (next == 41 /* ParenR */) {
				input.acceptToken(ParenR);
			}
			else if (next == 123 /* BraceL */) {
				input.acceptToken(BraceL);
			}
			else if (next == 125 /* BraceR */) {
				input.acceptToken(BraceR);
			}
			else if (next == 91 /* BracketL */) {
				input.acceptToken(BracketL);
			}
			else if (next == 93 /* BracketR */) {
				input.acceptToken(BracketR);
			}
			else if (next == 59 /* Semi */) {
				input.acceptToken(Semi);
			}
			else if (d.unquotedBitLiterals && next == 48 /* _0 */ && input.next == 98 /* b */) {
				input.advance();
				readBits(input);
				input.acceptToken(Bits);
			}
			else if ((next == 98 /* b */ || next == 66 /* B */) && (input.next == 39 /* SingleQuote */ || input.next == 34 /* DoubleQuote */)) {
				const quoteStyle = input.next;
				input.advance();
				if (d.treatBitsAsBytes) {
					readLiteral(input, quoteStyle, d.backslashEscapes);
					input.acceptToken(Bytes);
				}
				else {
					readBits(input, quoteStyle);
					input.acceptToken(Bits);
				}
			}
			else if (next == 48 /* _0 */ && (input.next == 120 /* x */ || input.next == 88 /* X */) ||
				(next == 120 /* x */ || next == 88 /* X */) && input.next == 39 /* SingleQuote */) {
				let quoted = input.next == 39 /* SingleQuote */;
				input.advance();
				while (isHexDigit(input.next))
					input.advance();
				if (quoted && input.next == 39 /* SingleQuote */)
					input.advance();
				input.acceptToken(Number);
			}
			else if (next == 46 /* Dot */ && input.next >= 48 /* _0 */ && input.next <= 57 /* _9 */) {
				readNumber(input, true);
				input.acceptToken(Number);
			}
			else if (next == 46 /* Dot */) {
				input.acceptToken(Dot);
			}
			else if (next >= 48 /* _0 */ && next <= 57 /* _9 */) {
				readNumber(input, false);
				input.acceptToken(Number);
			}
			else if (inString(next, d.operatorChars)) {
				while (inString(input.next, d.operatorChars))
					input.advance();
				input.acceptToken(Operator);
			}
			else if (inString(next, d.specialVar)) {
				if (input.next == next)
					input.advance();
				readWordOrQuoted(input);
				input.acceptToken(SpecialVar);
			}
			else if (inString(next, d.identifierQuotes)) {
				readLiteral(input, next, false);
				input.acceptToken(QuotedIdentifier);
			}
			else if (next == 58 /* Colon */ || next == 44 /* Comma */) {
				input.acceptToken(Punctuation);
			}
			else if (isAlpha(next)) {
				let word = readWord(input, String.fromCharCode(next));
				input.acceptToken(input.next == 46 /* Dot */ ? Identifier : (_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : Identifier);
			}
		});
	}
	const tokens = tokensFor(defaults);
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser$1 = lr.LRParser.deserialize({
	  version: 14,
	  states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
	  stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
	  goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
	  nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
	  maxTerm: 38,
	  skippedNodes: [0,1,2],
	  repeatNodeCount: 3,
	  tokenData: "RORO",
	  tokenizers: [0, tokens],
	  topRules: {"Script":[0,25]},
	  tokenPrec: 0
	});
	
	function tokenBefore(tree) {
		let cursor = tree.cursor().moveTo(tree.from, -1);
		while (/Comment/.test(cursor.name))
			cursor.moveTo(cursor.from, -1);
		return cursor.node;
	}
	function idName(doc, node) {
		let text = doc.sliceString(node.from, node.to);
		let quoted = /^([`'"])(.*)\1$/.exec(text);
		return quoted ? quoted[2] : text;
	}
	function plainID(node) {
		return node && (node.name == "Identifier" || node.name == "QuotedIdentifier");
	}
	function pathFor(doc, id) {
		if (id.name == "CompositeIdentifier") {
			let path = [];
			for (let ch = id.firstChild; ch; ch = ch.nextSibling)
				if (plainID(ch))
					path.push(idName(doc, ch));
			return path;
		}
		return [idName(doc, id)];
	}
	function parentsFor(doc, node) {
		for (let path = [];;) {
			if (!node || node.name != ".")
				return path;
			let name = tokenBefore(node);
			if (!plainID(name))
				return path;
			path.unshift(idName(doc, name));
			node = tokenBefore(name);
		}
	}
	function sourceContext(state, startPos) {
		let pos = language.syntaxTree(state).resolveInner(startPos, -1);
		let aliases = getAliases(state.doc, pos);
		if (pos.name == "Identifier" || pos.name == "QuotedIdentifier" || pos.name == "Keyword") {
			return { from: pos.from,
				quoted: pos.name == "QuotedIdentifier" ? state.doc.sliceString(pos.from, pos.from + 1) : null,
				parents: parentsFor(state.doc, tokenBefore(pos)),
				aliases };
		}
		if (pos.name == ".") {
			return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };
		}
		else {
			return { from: startPos, quoted: null, parents: [], empty: true, aliases };
		}
	}
	const EndFrom = new Set("where group having order union intersect except all distinct limit offset fetch for".split(" "));
	function getAliases(doc, at) {
		let statement;
		for (let parent = at; !statement; parent = parent.parent) {
			if (!parent)
				return null;
			if (parent.name == "Statement")
				statement = parent;
		}
		let aliases = null;
		for (let scan = statement.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {
			let kw = scan.name == "Keyword" ? doc.sliceString(scan.from, scan.to).toLowerCase() : null;
			let alias = null;
			if (!sawFrom) {
				sawFrom = kw == "from";
			}
			else if (kw == "as" && prevID && plainID(scan.nextSibling)) {
				alias = idName(doc, scan.nextSibling);
			}
			else if (kw && EndFrom.has(kw)) {
				break;
			}
			else if (prevID && plainID(scan)) {
				alias = idName(doc, scan);
			}
			if (alias) {
				if (!aliases)
					aliases = Object.create(null);
				aliases[alias] = pathFor(doc, prevID);
			}
			prevID = /Identifier$/.test(scan.name) ? scan : null;
		}
		return aliases;
	}
	function maybeQuoteCompletions(quote, completions) {
		if (!quote)
			return completions;
		return completions.map(c => (Object.assign(Object.assign({}, c), { label: quote + c.label + quote, apply: undefined })));
	}
	const Span = /^\w*$/, QuotedSpan = /^[`'"]?\w*[`'"]?$/;
	class CompletionLevel {
		constructor() {
			this.list = [];
			this.children = undefined;
		}
		child(name, idQuote) {
			let children = this.children || (this.children = Object.create(null));
			let found = children[name];
			if (found)
				return found;
			if (name)
				this.list.push(nameCompletion(name, "type", idQuote));
			return (children[name] = new CompletionLevel);
		}
		addCompletions(list) {
			for (let option of list) {
				let found = this.list.findIndex(o => o.label == option.label);
				if (found > -1)
					this.list[found] = option;
				else
					this.list.push(option);
			}
		}
	}
	function nameCompletion(label, type, idQuote) {
		if (!/[^\w\xb5-\uffff]/.test(label))
			return { label, type };
		return { label, type, apply: idQuote + label + idQuote };
	}
	function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {
		var _a;
		let top = new CompletionLevel;
		let idQuote = ((_a = dialect === null || dialect === void 0 ? void 0 : dialect.spec.identifierQuotes) === null || _a === void 0 ? void 0 : _a[0]) || '"';
		let defaultSchema = top.child(defaultSchemaName || "", idQuote);
		for (let table in schema) {
			let parts = table.replace(/\\?\./g, p => p == "." ? "\0" : p).split("\0");
			let base = parts.length == 1 ? defaultSchema : top;
			for (let part of parts)
				base = base.child(part.replace(/\\\./g, "."), idQuote);
			for (let option of schema[table])
				if (option)
					base.list.push(typeof option == "string" ? nameCompletion(option, "property", idQuote) : option);
		}
		if (tables)
			defaultSchema.addCompletions(tables);
		if (schemas)
			top.addCompletions(schemas);
		top.addCompletions(defaultSchema.list);
		if (defaultTableName)
			top.addCompletions(defaultSchema.child(defaultTableName, idQuote).list);
		return (context) => {
			let { parents, from, quoted, empty, aliases } = sourceContext(context.state, context.pos);
			if (empty && !context.explicit)
				return null;
			if (aliases && parents.length == 1)
				parents = aliases[parents[0]] || parents;
			let level = top;
			for (let name of parents) {
				while (!level.children || !level.children[name]) {
					if (level == top)
						level = defaultSchema;
					else if (level == defaultSchema && defaultTableName)
						level = level.child(defaultTableName, idQuote);
					else
						return null;
				}
				level = level.child(name, idQuote);
			}
			let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
			let options = level.list;
			if (level == top && aliases)
				options = options.concat(Object.keys(aliases).map(name => ({ label: name, type: "constant" })));
			return {
				from,
				to: quoteAfter ? context.pos + 1 : undefined,
				options: maybeQuoteCompletions(quoted, options),
				validFor: quoted ? QuotedSpan : Span
			};
		};
	}
	function completeKeywords(keywords, upperCase) {
		let completions = Object.keys(keywords).map(keyword => ({
			label: upperCase ? keyword.toUpperCase() : keyword,
			type: keywords[keyword] == Type ? "type" : keywords[keyword] == Keyword ? "keyword" : "variable",
			boost: -1
		}));
		return autocomplete.ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], autocomplete.completeFromList(completions));
	}
	
	let parser = parser$1.configure({
		props: [
			language.indentNodeProp.add({
				Statement: language.continuedIndent()
			}),
			language.foldNodeProp.add({
				Statement(tree) { return { from: tree.firstChild.to, to: tree.to }; },
				BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
			}),
			highlight.styleTags({
				Keyword: highlight.tags.keyword,
				Type: highlight.tags.typeName,
				Builtin: highlight.tags.standard(highlight.tags.name),
				Bits: highlight.tags.number,
				Bytes: highlight.tags.string,
				Bool: highlight.tags.bool,
				Null: highlight.tags.null,
				Number: highlight.tags.number,
				String: highlight.tags.string,
				Identifier: highlight.tags.name,
				QuotedIdentifier: highlight.tags.special(highlight.tags.string),
				SpecialVar: highlight.tags.special(highlight.tags.name),
				LineComment: highlight.tags.lineComment,
				BlockComment: highlight.tags.blockComment,
				Operator: highlight.tags.operator,
				"Semi Punctuation": highlight.tags.punctuation,
				"( )": highlight.tags.paren,
				"{ }": highlight.tags.brace,
				"[ ]": highlight.tags.squareBracket
			})
		]
	});
	/**
	Represents an SQL dialect.
	*/
	class SQLDialect {
		constructor(
		/**
		@internal
		*/
		dialect, 
		/**
		The language for this dialect.
		*/
		language, 
		/**
		The spec used to define this dialect.
		*/
		spec) {
			this.dialect = dialect;
			this.language = language;
			this.spec = spec;
		}
		/**
		Returns the language for this dialect as an extension.
		*/
		get extension() { return this.language.extension; }
		/**
		Define a new dialect.
		*/
		static define(spec) {
			let d = dialect(spec, spec.keywords, spec.types, spec.builtin);
			let language$1 = language.LRLanguage.define({
				name: "sql",
				parser: parser.configure({
					tokenizers: [{ from: tokens, to: tokensFor(d) }]
				}),
				languageData: {
					commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
					closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
				}
			});
			return new SQLDialect(d, language$1, spec);
		}
	}
	/**
	Returns a completion source that provides keyword completion for
	the given SQL dialect.
	*/
	function keywordCompletionSource(dialect, upperCase = false) {
		return completeKeywords(dialect.dialect.words, upperCase);
	}
	/**
	FIXME remove on 1.0 @internal
	*/
	function keywordCompletion(dialect, upperCase = false) {
		return dialect.language.data.of({
			autocomplete: keywordCompletionSource(dialect, upperCase)
		});
	}
	/**
	Returns a completion sources that provides schema-based completion
	for the given configuration.
	*/
	function schemaCompletionSource(config) {
		return config.schema ? completeFromSchema(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema, config.dialect || StandardSQL)
			: () => null;
	}
	/**
	FIXME remove on 1.0 @internal
	*/
	function schemaCompletion(config) {
		return config.schema ? (config.dialect || StandardSQL).language.data.of({
			autocomplete: schemaCompletionSource(config)
		}) : [];
	}
	/**
	SQL language support for the given SQL dialect, with keyword
	completion, and, if provided, schema-based completion as extra
	extensions.
	*/
	function sql(config = {}) {
		let lang = config.dialect || StandardSQL;
		return new language.LanguageSupport(lang.language, [schemaCompletion(config), keywordCompletion(lang, !!config.upperCaseKeywords)]);
	}
	/**
	The standard SQL dialect.
	*/
	const StandardSQL = SQLDialect.define({});
	/**
	Dialect for [PostgreSQL](https://www.postgresql.org).
	*/
	const PostgreSQL = SQLDialect.define({
		charSetCasts: true,
		doubleDollarQuotedStrings: true,
		operatorChars: "+-*/<>=~!@#%^&|`?",
		specialVar: "",
		keywords: SQLKeywords + "a abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom c cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion g generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull k key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower m mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner p parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time t table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
		types: SQLTypes + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
	});
	const MySQLKeywords = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill";
	const MySQLTypes = SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed";
	const MySQLBuiltin = "charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee";
	/**
	[MySQL](https://dev.mysql.com/) dialect.
	*/
	const MySQL = SQLDialect.define({
		operatorChars: "*+-%<>!=&|^",
		charSetCasts: true,
		doubleQuotedStrings: true,
		unquotedBitLiterals: true,
		hashComments: true,
		spaceAfterDashes: true,
		specialVar: "@?",
		identifierQuotes: "`",
		keywords: SQLKeywords + "group_concat " + MySQLKeywords,
		types: MySQLTypes,
		builtin: MySQLBuiltin
	});
	/**
	Variant of [`MySQL`](https://codemirror.net/6/docs/ref/#lang-sql.MySQL) for
	[MariaDB](https://mariadb.org/).
	*/
	const MariaSQL = SQLDialect.define({
		operatorChars: "*+-%<>!=&|^",
		charSetCasts: true,
		doubleQuotedStrings: true,
		unquotedBitLiterals: true,
		hashComments: true,
		spaceAfterDashes: true,
		specialVar: "@?",
		identifierQuotes: "`",
		keywords: SQLKeywords + "always generated groupby_concat hard persistent shutdown soft virtual " + MySQLKeywords,
		types: MySQLTypes,
		builtin: MySQLBuiltin
	});
	/**
	SQL dialect for Microsoft [SQL
	Server](https://www.microsoft.com/en-us/sql-server).
	*/
	const MSSQL = SQLDialect.define({
		keywords: SQLKeywords + "trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock pivot readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx unpivot updlock with",
		types: SQLTypes + "bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml",
		builtin: "binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id",
		operatorChars: "*+-%<>!=^&|/",
		specialVar: "@"
	});
	/**
	[SQLite](https://sqlite.org/) dialect.
	*/
	const SQLite = SQLDialect.define({
		keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
		types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real",
		builtin: "auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
		operatorChars: "*+-%<>!=&|/~",
		identifierQuotes: "`\"",
		specialVar: "@:?$"
	});
	/**
	Dialect for [Cassandra](https://cassandra.apache.org/)'s SQL-ish query language.
	*/
	const Cassandra = SQLDialect.define({
		keywords: "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN",
		types: SQLTypes + "ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint",
		slashComments: true
	});
	/**
	[PL/SQL](https://en.wikipedia.org/wiki/PL/SQL) dialect.
	*/
	const PLSQL = SQLDialect.define({
		keywords: SQLKeywords + "abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work",
		builtin: "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap",
		types: SQLTypes + "ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml",
		operatorChars: "*/+-%<>!=~",
		doubleQuotedStrings: true,
		charSetCasts: true,
		plsqlQuotingMechanism: true
	});
	
	exports.Cassandra = Cassandra;
	exports.MSSQL = MSSQL;
	exports.MariaSQL = MariaSQL;
	exports.MySQL = MySQL;
	exports.PLSQL = PLSQL;
	exports.PostgreSQL = PostgreSQL;
	exports.SQLDialect = SQLDialect;
	exports.SQLite = SQLite;
	exports.StandardSQL = StandardSQL;
	exports.keywordCompletion = keywordCompletion;
	exports.keywordCompletionSource = keywordCompletionSource;
	exports.schemaCompletion = schemaCompletion;
	exports.schemaCompletionSource = schemaCompletionSource;
	exports.sql = sql;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-vue/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-vue/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var langHtml = __webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs");
	var langJavascript = __webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "%pOVOWOOObQPOOOpOSO'#C_OOOO'#Cp'#CpQVOWOOQxQPOOO!TQQOOQ!YQPOOOOOO,58y,58yO!_OSO,58yOOOO-E6n-E6nO!dQQO'#CqQ{QPOOO!iQPOOQ{QPOOO!qQPOOOOOO1G.e1G.eOOQO,59],59]OOQO-E6o-E6oO!yOpO'#CiO#RO`O'#CiQOQPOOO#ZO#tO'#CmO#fO!bO'#CmOOQO,59T,59TO#qOpO,59TO#vO`O,59TOOOO'#Cr'#CrO#{O#tO,59XOOQO,59X,59XOOOO'#Cs'#CsO$WO!bO,59XOOQO1G.o1G.oOOOO-E6p-E6pOOQO1G.s1G.sOOOO-E6q-E6q",
	  stateData: "$g~OjOS~OQROUROkQO~OWTOXUOZUO`VO~OSXOTWO~OXUO[]OlZO~OY^O~O[_O~OT`O~OYaO~OmcOodO~OmfOogO~O^iOnhO~O_jOphO~ObkOqkOrmO~OcnOsnOtmO~OnpO~OppO~ObkOqkOrrO~OcnOsnOtrO~OWX`~",
	  goto: "!^hPPPiPPPPPPPPPmPPPpPPsy!Q!WTROSRe]Re_QSORYSS[T^Rb[QlfRqlQogRso",
	  nodeNames: "⚠ Content Text Interpolation InterpolationContent }} Entity Attribute VueAttributeName : Identifier @ Is ScriptAttributeValue AttributeScript AttributeScript AttributeName AttributeValue Entity Entity",
	  maxTerm: 36,
	  skippedNodes: [0],
	  repeatNodeCount: 4,
	  tokenData: "'y~RdXY!aYZ!a]^!apq!ars!rwx!w}!O!|!O!P#t!Q![#y![!]$s!_!`%g!b!c%l!c!}#y#R#S#y#T#j#y#j#k%q#k#o#y%W;'S#y;'S;:j$m<%lO#y~!fSj~XY!aYZ!a]^!apq!a~!wOm~~!|Oo~!b#RX`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|!b#qP;=`<%l!|~#yOl~%W$QXY#t`!b}!O!|!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y%W$pP;=`<%l#y~$zXX~`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|~%lO[~~%qOZ~%W%xXY#t`!b}!O&e!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y!b&jX`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|!b'^XW!b`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|",
	  tokenizers: [6, 7, new lr.LocalTokenGroup("b~RP#q#rU~XP#q#r[~aOT~~", 17, 4), new lr.LocalTokenGroup("!k~RQvwX#o#p!_~^TU~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOU~~![P;=`<%lm~!bP#o#p!e~!jOk~~", 72, 2), new lr.LocalTokenGroup("[~RPwxU~ZOp~~", 11, 15), new lr.LocalTokenGroup("[~RPrsU~ZOn~~", 11, 14), new lr.LocalTokenGroup("!e~RQvwXwx!_~^Tc~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOc~~![P;=`<%lm~!dOt~~", 66, 35), new lr.LocalTokenGroup("!e~RQrsXvw^~^Or~~cTb~Oprq!]r!^;'Sr;'S;=`!^<%lOr~uUOprq!]r!]!^!X!^;'Sr;'S;=`!^<%lOr~!^Ob~~!aP;=`<%lr~", 66, 33)],
	  topRules: {"Content":[0,1],"Attribute":[1,7]},
	  tokenPrec: 157
	});
	
	const exprParser = langJavascript.javascriptLanguage.parser.configure({
		top: "SingleExpression"
	});
	const baseParser = parser.configure({
		props: [
			highlight.styleTags({
				Text: highlight.tags.content,
				Is: highlight.tags.definitionOperator,
				AttributeName: highlight.tags.attributeName,
				VueAttributeName: highlight.tags.keyword,
				Identifier: highlight.tags.variableName,
				"AttributeValue ScriptAttributeValue": highlight.tags.attributeValue,
				Entity: highlight.tags.character,
				"{{ }}": highlight.tags.brace,
				"@ :": highlight.tags.punctuation
			})
		]
	});
	const exprMixed = { parser: exprParser };
	const textParser = baseParser.configure({
		wrap: common.parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed : null),
	});
	const attrParser = baseParser.configure({
		wrap: common.parseMixed((node, input) => node.name == "AttributeScript" ? exprMixed : null),
		top: "Attribute"
	});
	const textMixed = { parser: textParser }, attrMixed = { parser: attrParser };
	const baseHTML = langHtml.html();
	function makeVue(base) {
		return base.configure({
			dialect: "selfClosing",
			wrap: common.parseMixed(mixVue)
		}, "vue");
	}
	/**
	A language provider for Vue templates.
	*/
	const vueLanguage = makeVue(baseHTML.language);
	function mixVue(node, input) {
		switch (node.name) {
			case "Attribute":
				return /^(@|:|v-)/.test(input.read(node.from, node.from + 2)) ? attrMixed : null;
			case "Text":
				return textMixed;
		}
		return null;
	}
	/**
	Vue template support.
	*/
	function vue(config = {}) {
		let base = baseHTML;
		if (config.base) {
			if (config.base.language.name != "html" || !(config.base.language instanceof language.LRLanguage))
				throw new RangeError("The base option must be the result of calling html(...)");
			base = config.base;
		}
		return new language.LanguageSupport(base.language == baseHTML.language ? vueLanguage : makeVue(base.language), [
			base.support,
			base.language.data.of({ closeBrackets: { brackets: ["{", '"'] } })
		]);
	}
	
	exports.vue = vue;
	exports.vueLanguage = vueLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-wast/dist/index.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-wast/dist/index.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_Keyword = {__proto__:null,anyref:34, dataref:34, eqref:34, externref:34, i31ref:34, funcref:34, i8:34, i16:34, i32:34, i64:34, f32:34, f64:34};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
	  stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
	  goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
	  nodeNames: "⚠ LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
	  maxTerm: 17,
	  nodeProps: [
		["openedBy", 4,"("],
		["closedBy", 5,")"],
		["group", -6,6,7,8,9,10,11,"Expression"]
	  ],
	  skippedNodes: [0,1,2],
	  repeatNodeCount: 1,
	  tokenData: "/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^",
	  tokenizers: [0],
	  topRules: {"Module":[0,3]},
	  specialized: [{term: 9, get: value => spec_Keyword[value] || -1}],
	  tokenPrec: 0
	});
	
	const wastLanguage = language.LRLanguage.define({
		name: "wast",
		parser: parser.configure({
			props: [
				language.indentNodeProp.add({
					App: language.delimitedIndent({ closing: ")", align: false })
				}),
				language.foldNodeProp.add({
					App: language.foldInside,
					BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
				}),
				highlight.styleTags({
					Keyword: highlight.tags.keyword,
					Type: highlight.tags.typeName,
					Number: highlight.tags.number,
					String: highlight.tags.string,
					Identifier: highlight.tags.variableName,
					LineComment: highlight.tags.lineComment,
					BlockComment: highlight.tags.blockComment,
					"( )": highlight.tags.paren
				})
			]
		}),
		languageData: {
			commentTokens: { line: ";;", block: { open: "(;", close: ";)" } },
			closeBrackets: { brackets: ["(", '"'] }
		}
	});
	function wast() {
		return new language.LanguageSupport(wastLanguage);
	}
	
	exports.wast = wast;
	exports.wastLanguage = wastLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lang-xml/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lang-xml/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var xml$1 = __webpack_require__(/*! @lezer/xml */ "../editor/node_modules/@lezer/xml/dist/index.cjs");
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	function tagName(doc, tag) {
		let name = tag && tag.getChild("TagName");
		return name ? doc.sliceString(name.from, name.to) : "";
	}
	function elementName(doc, tree) {
		let tag = tree && tree.firstChild;
		return !tag || tag.name != "OpenTag" ? "" : tagName(doc, tag);
	}
	function attrName(doc, tag, pos) {
		let attr = tag && tag.getChildren("Attribute").find(a => a.from <= pos && a.to >= pos);
		let name = attr && attr.getChild("AttributeName");
		return name ? doc.sliceString(name.from, name.to) : "";
	}
	function findParentElement(tree) {
		for (let cur = tree && tree.parent; cur; cur = cur.parent)
			if (cur.name == "Element")
				return cur;
		return null;
	}
	function findLocation(state, pos) {
		var _a;
		let at = language.syntaxTree(state).resolveInner(pos, -1), inTag = null;
		for (let cur = at; !inTag && cur.parent; cur = cur.parent)
			if (cur.name == "OpenTag" || cur.name == "CloseTag" || cur.name == "SelfClosingTag" || cur.name == "MismatchedCloseTag")
				inTag = cur;
		if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
			let elt = inTag.parent;
			if (at.name == "TagName")
				return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag"
					? { type: "closeTag", from: at.from, context: elt }
					: { type: "openTag", from: at.from, context: findParentElement(elt) };
			if (at.name == "AttributeName")
				return { type: "attrName", from: at.from, context: inTag };
			if (at.name == "AttributeValue")
				return { type: "attrValue", from: at.from, context: inTag };
			let before = at == inTag || at.name == "Attribute" ? at.childBefore(pos) : at;
			if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
				return { type: "openTag", from: pos, context: findParentElement(elt) };
			if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
				return { type: "closeTag", from: pos, context: elt };
			if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
				return { type: "attrValue", from: pos, context: inTag };
			if (before)
				return { type: "attrName", from: pos, context: inTag };
			return null;
		}
		else if (at.name == "StartCloseTag") {
			return { type: "closeTag", from: pos, context: at.parent };
		}
		while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))
			at = at.parent;
		if (at.name == "Element" || at.name == "Text" || at.name == "Document")
			return { type: "tag", from: pos, context: at.name == "Element" ? at : findParentElement(at) };
		return null;
	}
	class Element {
		constructor(spec, attrs, attrValues) {
			this.attrs = attrs;
			this.attrValues = attrValues;
			this.children = [];
			this.name = spec.name;
			this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
			this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
			this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
			this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
			this.text = spec.textContent ? spec.textContent.map(s => ({ label: s, type: "text" })) : [];
		}
	}
	const Identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
	function attrCompletion(spec) {
		return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
	}
	function valueCompletion(spec) {
		return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" }
			: /^"/.test(spec.label) ? spec
				: Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
	}
	/**
	Create a completion source for the given schema.
	*/
	function completeFromSchema(eltSpecs, attrSpecs) {
		let allAttrs = [], globalAttrs = [];
		let attrValues = Object.create(null);
		for (let s of attrSpecs) {
			let completion = attrCompletion(s);
			allAttrs.push(completion);
			if (s.global)
				globalAttrs.push(completion);
			if (s.values)
				attrValues[s.name] = s.values.map(valueCompletion);
		}
		let allElements = [], topElements = [];
		let byName = Object.create(null);
		for (let s of eltSpecs) {
			let attrs = globalAttrs, attrVals = attrValues;
			if (s.attributes)
				attrs = attrs.concat(s.attributes.map(s => {
					if (typeof s == "string")
						return allAttrs.find(a => a.label == s) || { label: s, type: "property" };
					if (s.values) {
						if (attrVals == attrValues)
							attrVals = Object.create(attrVals);
						attrVals[s.name] = s.values.map(valueCompletion);
					}
					return attrCompletion(s);
				}));
			let elt = new Element(s, attrs, attrVals);
			byName[elt.name] = elt;
			allElements.push(elt);
			if (s.top)
				topElements.push(elt);
		}
		if (!topElements.length)
			topElements = allElements;
		for (let i = 0; i < allElements.length; i++) {
			let s = eltSpecs[i], elt = allElements[i];
			if (s.children) {
				for (let ch of s.children)
					if (byName[ch])
						elt.children.push(byName[ch]);
			}
			else {
				elt.children = allElements;
			}
		}
		return cx => {
			var _a;
			let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);
			if (!loc || (loc.type == "tag" && !cx.explicit))
				return null;
			let { type, from, context } = loc;
			if (type == "openTag") {
				let children = topElements;
				let parentName = elementName(doc, context);
				if (parentName) {
					let parent = byName[parentName];
					children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
				}
				return {
					from,
					options: children.map(ch => ch.completion),
					validFor: Identifier
				};
			}
			else if (type == "closeTag") {
				let parentName = elementName(doc, context);
				return parentName ? {
					from,
					to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == ">" ? 1 : 0),
					options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + ">", type: "type" }],
					validFor: Identifier
				} : null;
			}
			else if (type == "attrName") {
				let parent = byName[tagName(doc, context)];
				return {
					from,
					options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
					validFor: Identifier
				};
			}
			else if (type == "attrValue") {
				let attr = attrName(doc, context, from);
				if (!attr)
					return null;
				let parent = byName[tagName(doc, context)];
				let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
				if (!values || !values.length)
					return null;
				return {
					from,
					to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '"' ? 1 : 0),
					options: values,
					validFor: /^"[^"]*"?$/
				};
			}
			else if (type == "tag") {
				let parentName = elementName(doc, context), parent = byName[parentName];
				let closing = [], last = context && context.lastChild;
				if (parentName && (!last || last.name != "CloseTag" || tagName(doc, last) != parentName))
					closing.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
				let options = closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion));
				if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {
					let openTag = context.firstChild;
					if (openTag.to > cx.pos - 20 && !/\S/.test(cx.state.sliceDoc(openTag.to, cx.pos)))
						options = options.concat(parent.text);
				}
				return {
					from,
					options,
					validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
				};
			}
			else {
				return null;
			}
		};
	}
	
	/**
	A language provider based on the [Lezer XML
	parser](https://github.com/lezer-parser/xml), extended with
	highlighting and indentation information.
	*/
	const xmlLanguage = language.LRLanguage.define({
		name: "xml",
		parser: xml$1.parser.configure({
			props: [
				language.indentNodeProp.add({
					Element(context) {
						let closed = /^\s*<\//.test(context.textAfter);
						return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
					},
					"OpenTag CloseTag SelfClosingTag"(context) {
						return context.column(context.node.from) + context.unit;
					}
				}),
				language.foldNodeProp.add({
					Element(subtree) {
						let first = subtree.firstChild, last = subtree.lastChild;
						if (!first || first.name != "OpenTag")
							return null;
						return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
					}
				}),
				language.bracketMatchingHandle.add({
					"OpenTag CloseTag": node => node.getChild("TagName")
				})
			]
		}),
		languageData: {
			commentTokens: { block: { open: "<!--", close: "-->" } },
			indentOnInput: /^\s*<\/$/
		}
	});
	/**
	XML language support. Includes schema-based autocompletion when
	configured.
	*/
	function xml(conf = {}) {
		return new language.LanguageSupport(xmlLanguage, xmlLanguage.data.of({
			autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])
		}));
	}
	
	exports.completeFromSchema = completeFromSchema;
	exports.xml = xml;
	exports.xmlLanguage = xmlLanguage;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/language-data/dist/index.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/language-data/dist/index.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var language = __webpack_require__(/*! @codemirror/language */ "../editor/node_modules/@codemirror/language/dist/index.cjs");
	
	function _interopNamespace(e) {
		if (e && e.__esModule) return e;
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n["default"] = e;
		return Object.freeze(n);
	}
	
	function legacy(parser) {
		return new language.LanguageSupport(language.StreamLanguage.define(parser));
	}
	function sql(dialectName) {
		return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-sql */ "../editor/node_modules/@codemirror/lang-sql/dist/index.cjs")); }).then(m => m.sql({ dialect: m[dialectName] }));
	}
	/**
	An array of language descriptions for known language packages.
	*/
	const languages = [
		// New-style language modes
		language.LanguageDescription.of({
			name: "C",
			extensions: ["c", "h", "ino"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-cpp */ "../editor/node_modules/@codemirror/lang-cpp/dist/index.cjs")); }).then(m => m.cpp());
			}
		}),
		language.LanguageDescription.of({
			name: "C++",
			alias: ["cpp"],
			extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-cpp */ "../editor/node_modules/@codemirror/lang-cpp/dist/index.cjs")); }).then(m => m.cpp());
			}
		}),
		language.LanguageDescription.of({
			name: "CQL",
			alias: ["cassandra"],
			extensions: ["cql"],
			load() { return sql("Cassandra"); }
		}),
		language.LanguageDescription.of({
			name: "CSS",
			extensions: ["css"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-css */ "../editor/node_modules/@codemirror/lang-css/dist/index.cjs")); }).then(m => m.css());
			}
		}),
		language.LanguageDescription.of({
			name: "HTML",
			alias: ["xhtml"],
			extensions: ["html", "htm", "handlebars", "hbs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-html */ "../editor/node_modules/@codemirror/lang-html/dist/index.cjs")); }).then(m => m.html());
			}
		}),
		language.LanguageDescription.of({
			name: "Java",
			extensions: ["java"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-java */ "../editor/node_modules/@codemirror/lang-java/dist/index.cjs")); }).then(m => m.java());
			}
		}),
		language.LanguageDescription.of({
			name: "JavaScript",
			alias: ["ecmascript", "js", "node"],
			extensions: ["js", "mjs", "cjs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs")); }).then(m => m.javascript());
			}
		}),
		language.LanguageDescription.of({
			name: "JSON",
			alias: ["json5"],
			extensions: ["json", "map"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-json */ "../editor/node_modules/@codemirror/lang-json/dist/index.cjs")); }).then(m => m.json());
			}
		}),
		language.LanguageDescription.of({
			name: "JSX",
			extensions: ["jsx"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs")); }).then(m => m.javascript({ jsx: true }));
			}
		}),
		language.LanguageDescription.of({
			name: "LESS",
			extensions: ["less"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-less */ "../editor/node_modules/@codemirror/lang-less/dist/index.cjs")); }).then(m => m.less());
			}
		}),
		language.LanguageDescription.of({
			name: "MariaDB SQL",
			load() { return sql("MariaSQL"); }
		}),
		language.LanguageDescription.of({
			name: "Markdown",
			extensions: ["md", "markdown", "mkd"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-markdown */ "../editor/node_modules/@codemirror/lang-markdown/dist/index.cjs")); }).then(m => m.markdown());
			}
		}),
		language.LanguageDescription.of({
			name: "MS SQL",
			load() { return sql("MSSQL"); }
		}),
		language.LanguageDescription.of({
			name: "MySQL",
			load() { return sql("MySQL"); }
		}),
		language.LanguageDescription.of({
			name: "PHP",
			extensions: ["php", "php3", "php4", "php5", "php7", "phtml"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-php */ "../editor/node_modules/@codemirror/lang-php/dist/index.cjs")); }).then(m => m.php());
			}
		}),
		language.LanguageDescription.of({
			name: "PLSQL",
			extensions: ["pls"],
			load() { return sql("PLSQL"); }
		}),
		language.LanguageDescription.of({
			name: "PostgreSQL",
			load() { return sql("PostgreSQL"); }
		}),
		language.LanguageDescription.of({
			name: "Python",
			extensions: ["BUILD", "bzl", "py", "pyw"],
			filename: /^(BUCK|BUILD)$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-python */ "../editor/node_modules/@codemirror/lang-python/dist/index.cjs")); }).then(m => m.python());
			}
		}),
		language.LanguageDescription.of({
			name: "Rust",
			extensions: ["rs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-rust */ "../editor/node_modules/@codemirror/lang-rust/dist/index.cjs")); }).then(m => m.rust());
			}
		}),
		language.LanguageDescription.of({
			name: "Sass",
			extensions: ["sass"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-sass */ "../editor/node_modules/@codemirror/lang-sass/dist/index.cjs")); }).then(m => m.sass({ indented: true }));
			}
		}),
		language.LanguageDescription.of({
			name: "SCSS",
			extensions: ["scss"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-sass */ "../editor/node_modules/@codemirror/lang-sass/dist/index.cjs")); }).then(m => m.sass());
			}
		}),
		language.LanguageDescription.of({
			name: "SQL",
			extensions: ["sql"],
			load() { return sql("StandardSQL"); }
		}),
		language.LanguageDescription.of({
			name: "SQLite",
			load() { return sql("SQLite"); }
		}),
		language.LanguageDescription.of({
			name: "TSX",
			extensions: ["tsx"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs")); }).then(m => m.javascript({ jsx: true, typescript: true }));
			}
		}),
		language.LanguageDescription.of({
			name: "TypeScript",
			alias: ["ts"],
			extensions: ["ts"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-javascript */ "../editor/node_modules/@codemirror/lang-javascript/dist/index.cjs")); }).then(m => m.javascript({ typescript: true }));
			}
		}),
		language.LanguageDescription.of({
			name: "WebAssembly",
			extensions: ["wat", "wast"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-wast */ "../editor/node_modules/@codemirror/lang-wast/dist/index.cjs")); }).then(m => m.wast());
			}
		}),
		language.LanguageDescription.of({
			name: "XML",
			alias: ["rss", "wsdl", "xsd"],
			extensions: ["xml", "xsl", "xsd", "svg"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-xml */ "../editor/node_modules/@codemirror/lang-xml/dist/index.cjs")); }).then(m => m.xml());
			}
		}),
		// Legacy modes ported from CodeMirror 5
		language.LanguageDescription.of({
			name: "APL",
			extensions: ["dyalog", "apl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/apl */ "../editor/node_modules/@codemirror/legacy-modes/mode/apl.cjs")); }).then(m => legacy(m.apl));
			}
		}),
		language.LanguageDescription.of({
			name: "PGP",
			alias: ["asciiarmor"],
			extensions: ["asc", "pgp", "sig"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/asciiarmor */ "../editor/node_modules/@codemirror/legacy-modes/mode/asciiarmor.cjs")); }).then(m => legacy(m.asciiArmor));
			}
		}),
		language.LanguageDescription.of({
			name: "ASN.1",
			extensions: ["asn", "asn1"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/asn1 */ "../editor/node_modules/@codemirror/legacy-modes/mode/asn1.cjs")); }).then(m => legacy(m.asn1({})));
			}
		}),
		language.LanguageDescription.of({
			name: "Asterisk",
			filename: /^extensions\.conf$/i,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/asterisk */ "../editor/node_modules/@codemirror/legacy-modes/mode/asterisk.cjs")); }).then(m => legacy(m.asterisk));
			}
		}),
		language.LanguageDescription.of({
			name: "Brainfuck",
			extensions: ["b", "bf"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/brainfuck */ "../editor/node_modules/@codemirror/legacy-modes/mode/brainfuck.cjs")); }).then(m => legacy(m.brainfuck));
			}
		}),
		language.LanguageDescription.of({
			name: "Cobol",
			extensions: ["cob", "cpy"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/cobol */ "../editor/node_modules/@codemirror/legacy-modes/mode/cobol.cjs")); }).then(m => legacy(m.cobol));
			}
		}),
		language.LanguageDescription.of({
			name: "C#",
			alias: ["csharp", "cs"],
			extensions: ["cs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.csharp));
			}
		}),
		language.LanguageDescription.of({
			name: "Clojure",
			extensions: ["clj", "cljc", "cljx"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clojure */ "../editor/node_modules/@codemirror/legacy-modes/mode/clojure.cjs")); }).then(m => legacy(m.clojure));
			}
		}),
		language.LanguageDescription.of({
			name: "ClojureScript",
			extensions: ["cljs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clojure */ "../editor/node_modules/@codemirror/legacy-modes/mode/clojure.cjs")); }).then(m => legacy(m.clojure));
			}
		}),
		language.LanguageDescription.of({
			name: "Closure Stylesheets (GSS)",
			extensions: ["gss"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/css */ "../editor/node_modules/@codemirror/legacy-modes/mode/css.cjs")); }).then(m => legacy(m.gss));
			}
		}),
		language.LanguageDescription.of({
			name: "CMake",
			extensions: ["cmake", "cmake.in"],
			filename: /^CMakeLists\.txt$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/cmake */ "../editor/node_modules/@codemirror/legacy-modes/mode/cmake.cjs")); }).then(m => legacy(m.cmake));
			}
		}),
		language.LanguageDescription.of({
			name: "CoffeeScript",
			alias: ["coffee", "coffee-script"],
			extensions: ["coffee"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/coffeescript */ "../editor/node_modules/@codemirror/legacy-modes/mode/coffeescript.cjs")); }).then(m => legacy(m.coffeeScript));
			}
		}),
		language.LanguageDescription.of({
			name: "Common Lisp",
			alias: ["lisp"],
			extensions: ["cl", "lisp", "el"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/commonlisp */ "../editor/node_modules/@codemirror/legacy-modes/mode/commonlisp.cjs")); }).then(m => legacy(m.commonLisp));
			}
		}),
		language.LanguageDescription.of({
			name: "Cypher",
			extensions: ["cyp", "cypher"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/cypher */ "../editor/node_modules/@codemirror/legacy-modes/mode/cypher.cjs")); }).then(m => legacy(m.cypher));
			}
		}),
		language.LanguageDescription.of({
			name: "Cython",
			extensions: ["pyx", "pxd", "pxi"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/python */ "../editor/node_modules/@codemirror/legacy-modes/mode/python.cjs")); }).then(m => legacy(m.cython));
			}
		}),
		language.LanguageDescription.of({
			name: "Crystal",
			extensions: ["cr"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/crystal */ "../editor/node_modules/@codemirror/legacy-modes/mode/crystal.cjs")); }).then(m => legacy(m.crystal));
			}
		}),
		language.LanguageDescription.of({
			name: "D",
			extensions: ["d"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/d */ "../editor/node_modules/@codemirror/legacy-modes/mode/d.cjs")); }).then(m => legacy(m.d));
			}
		}),
		language.LanguageDescription.of({
			name: "Dart",
			extensions: ["dart"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.dart));
			}
		}),
		language.LanguageDescription.of({
			name: "diff",
			extensions: ["diff", "patch"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/diff */ "../editor/node_modules/@codemirror/legacy-modes/mode/diff.cjs")); }).then(m => legacy(m.diff));
			}
		}),
		language.LanguageDescription.of({
			name: "Dockerfile",
			filename: /^Dockerfile$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/dockerfile */ "../editor/node_modules/@codemirror/legacy-modes/mode/dockerfile.cjs")); }).then(m => legacy(m.dockerFile));
			}
		}),
		language.LanguageDescription.of({
			name: "DTD",
			extensions: ["dtd"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/dtd */ "../editor/node_modules/@codemirror/legacy-modes/mode/dtd.cjs")); }).then(m => legacy(m.dtd));
			}
		}),
		language.LanguageDescription.of({
			name: "Dylan",
			extensions: ["dylan", "dyl", "intr"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/dylan */ "../editor/node_modules/@codemirror/legacy-modes/mode/dylan.cjs")); }).then(m => legacy(m.dylan));
			}
		}),
		language.LanguageDescription.of({
			name: "EBNF",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ebnf */ "../editor/node_modules/@codemirror/legacy-modes/mode/ebnf.cjs")); }).then(m => legacy(m.ebnf));
			}
		}),
		language.LanguageDescription.of({
			name: "ECL",
			extensions: ["ecl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ecl */ "../editor/node_modules/@codemirror/legacy-modes/mode/ecl.cjs")); }).then(m => legacy(m.ecl));
			}
		}),
		language.LanguageDescription.of({
			name: "edn",
			extensions: ["edn"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clojure */ "../editor/node_modules/@codemirror/legacy-modes/mode/clojure.cjs")); }).then(m => legacy(m.clojure));
			}
		}),
		language.LanguageDescription.of({
			name: "Eiffel",
			extensions: ["e"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/eiffel */ "../editor/node_modules/@codemirror/legacy-modes/mode/eiffel.cjs")); }).then(m => legacy(m.eiffel));
			}
		}),
		language.LanguageDescription.of({
			name: "Elm",
			extensions: ["elm"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/elm */ "../editor/node_modules/@codemirror/legacy-modes/mode/elm.cjs")); }).then(m => legacy(m.elm));
			}
		}),
		language.LanguageDescription.of({
			name: "Erlang",
			extensions: ["erl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/erlang */ "../editor/node_modules/@codemirror/legacy-modes/mode/erlang.cjs")); }).then(m => legacy(m.erlang));
			}
		}),
		language.LanguageDescription.of({
			name: "Esper",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/sql */ "../editor/node_modules/@codemirror/legacy-modes/mode/sql.cjs")); }).then(m => legacy(m.esper));
			}
		}),
		language.LanguageDescription.of({
			name: "Factor",
			extensions: ["factor"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/factor */ "../editor/node_modules/@codemirror/legacy-modes/mode/factor.cjs")); }).then(m => legacy(m.factor));
			}
		}),
		language.LanguageDescription.of({
			name: "FCL",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/fcl */ "../editor/node_modules/@codemirror/legacy-modes/mode/fcl.cjs")); }).then(m => legacy(m.fcl));
			}
		}),
		language.LanguageDescription.of({
			name: "Forth",
			extensions: ["forth", "fth", "4th"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/forth */ "../editor/node_modules/@codemirror/legacy-modes/mode/forth.cjs")); }).then(m => legacy(m.forth));
			}
		}),
		language.LanguageDescription.of({
			name: "Fortran",
			extensions: ["f", "for", "f77", "f90", "f95"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/fortran */ "../editor/node_modules/@codemirror/legacy-modes/mode/fortran.cjs")); }).then(m => legacy(m.fortran));
			}
		}),
		language.LanguageDescription.of({
			name: "F#",
			alias: ["fsharp"],
			extensions: ["fs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mllike */ "../editor/node_modules/@codemirror/legacy-modes/mode/mllike.cjs")); }).then(m => legacy(m.fSharp));
			}
		}),
		language.LanguageDescription.of({
			name: "Gas",
			extensions: ["s"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/gas */ "../editor/node_modules/@codemirror/legacy-modes/mode/gas.cjs")); }).then(m => legacy(m.gas));
			}
		}),
		language.LanguageDescription.of({
			name: "Gherkin",
			extensions: ["feature"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/gherkin */ "../editor/node_modules/@codemirror/legacy-modes/mode/gherkin.cjs")); }).then(m => legacy(m.gherkin));
			}
		}),
		language.LanguageDescription.of({
			name: "Go",
			extensions: ["go"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/go */ "../editor/node_modules/@codemirror/legacy-modes/mode/go.cjs")); }).then(m => legacy(m.go));
			}
		}),
		language.LanguageDescription.of({
			name: "Groovy",
			extensions: ["groovy", "gradle"],
			filename: /^Jenkinsfile$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/groovy */ "../editor/node_modules/@codemirror/legacy-modes/mode/groovy.cjs")); }).then(m => legacy(m.groovy));
			}
		}),
		language.LanguageDescription.of({
			name: "Haskell",
			extensions: ["hs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/haskell */ "../editor/node_modules/@codemirror/legacy-modes/mode/haskell.cjs")); }).then(m => legacy(m.haskell));
			}
		}),
		language.LanguageDescription.of({
			name: "Haxe",
			extensions: ["hx"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/haxe */ "../editor/node_modules/@codemirror/legacy-modes/mode/haxe.cjs")); }).then(m => legacy(m.haxe));
			}
		}),
		language.LanguageDescription.of({
			name: "HXML",
			extensions: ["hxml"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/haxe */ "../editor/node_modules/@codemirror/legacy-modes/mode/haxe.cjs")); }).then(m => legacy(m.hxml));
			}
		}),
		language.LanguageDescription.of({
			name: "HTTP",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/http */ "../editor/node_modules/@codemirror/legacy-modes/mode/http.cjs")); }).then(m => legacy(m.http));
			}
		}),
		language.LanguageDescription.of({
			name: "IDL",
			extensions: ["pro"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/idl */ "../editor/node_modules/@codemirror/legacy-modes/mode/idl.cjs")); }).then(m => legacy(m.idl));
			}
		}),
		language.LanguageDescription.of({
			name: "JSON-LD",
			alias: ["jsonld"],
			extensions: ["jsonld"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/javascript */ "../editor/node_modules/@codemirror/legacy-modes/mode/javascript.cjs")); }).then(m => legacy(m.jsonld));
			}
		}),
		language.LanguageDescription.of({
			name: "Jinja2",
			extensions: ["j2", "jinja", "jinja2"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/jinja2 */ "../editor/node_modules/@codemirror/legacy-modes/mode/jinja2.cjs")); }).then(m => legacy(m.jinja2));
			}
		}),
		language.LanguageDescription.of({
			name: "Julia",
			extensions: ["jl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/julia */ "../editor/node_modules/@codemirror/legacy-modes/mode/julia.cjs")); }).then(m => legacy(m.julia));
			}
		}),
		language.LanguageDescription.of({
			name: "Kotlin",
			extensions: ["kt"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.kotlin));
			}
		}),
		language.LanguageDescription.of({
			name: "LiveScript",
			alias: ["ls"],
			extensions: ["ls"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/livescript */ "../editor/node_modules/@codemirror/legacy-modes/mode/livescript.cjs")); }).then(m => legacy(m.liveScript));
			}
		}),
		language.LanguageDescription.of({
			name: "Lua",
			extensions: ["lua"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/lua */ "../editor/node_modules/@codemirror/legacy-modes/mode/lua.cjs")); }).then(m => legacy(m.lua));
			}
		}),
		language.LanguageDescription.of({
			name: "mIRC",
			extensions: ["mrc"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mirc */ "../editor/node_modules/@codemirror/legacy-modes/mode/mirc.cjs")); }).then(m => legacy(m.mirc));
			}
		}),
		language.LanguageDescription.of({
			name: "Mathematica",
			extensions: ["m", "nb", "wl", "wls"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mathematica */ "../editor/node_modules/@codemirror/legacy-modes/mode/mathematica.cjs")); }).then(m => legacy(m.mathematica));
			}
		}),
		language.LanguageDescription.of({
			name: "Modelica",
			extensions: ["mo"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/modelica */ "../editor/node_modules/@codemirror/legacy-modes/mode/modelica.cjs")); }).then(m => legacy(m.modelica));
			}
		}),
		language.LanguageDescription.of({
			name: "MUMPS",
			extensions: ["mps"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mumps */ "../editor/node_modules/@codemirror/legacy-modes/mode/mumps.cjs")); }).then(m => legacy(m.mumps));
			}
		}),
		language.LanguageDescription.of({
			name: "Mbox",
			extensions: ["mbox"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mbox */ "../editor/node_modules/@codemirror/legacy-modes/mode/mbox.cjs")); }).then(m => legacy(m.mbox));
			}
		}),
		language.LanguageDescription.of({
			name: "Nginx",
			filename: /nginx.*\.conf$/i,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/nginx */ "../editor/node_modules/@codemirror/legacy-modes/mode/nginx.cjs")); }).then(m => legacy(m.nginx));
			}
		}),
		language.LanguageDescription.of({
			name: "NSIS",
			extensions: ["nsh", "nsi"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/nsis */ "../editor/node_modules/@codemirror/legacy-modes/mode/nsis.cjs")); }).then(m => legacy(m.nsis));
			}
		}),
		language.LanguageDescription.of({
			name: "NTriples",
			extensions: ["nt", "nq"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ntriples */ "../editor/node_modules/@codemirror/legacy-modes/mode/ntriples.cjs")); }).then(m => legacy(m.ntriples));
			}
		}),
		language.LanguageDescription.of({
			name: "Objective-C",
			alias: ["objective-c", "objc"],
			extensions: ["m"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.objectiveC));
			}
		}),
		language.LanguageDescription.of({
			name: "Objective-C++",
			alias: ["objective-c++", "objc++"],
			extensions: ["mm"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.objectiveCpp));
			}
		}),
		language.LanguageDescription.of({
			name: "OCaml",
			extensions: ["ml", "mli", "mll", "mly"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mllike */ "../editor/node_modules/@codemirror/legacy-modes/mode/mllike.cjs")); }).then(m => legacy(m.oCaml));
			}
		}),
		language.LanguageDescription.of({
			name: "Octave",
			extensions: ["m"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/octave */ "../editor/node_modules/@codemirror/legacy-modes/mode/octave.cjs")); }).then(m => legacy(m.octave));
			}
		}),
		language.LanguageDescription.of({
			name: "Oz",
			extensions: ["oz"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/oz */ "../editor/node_modules/@codemirror/legacy-modes/mode/oz.cjs")); }).then(m => legacy(m.oz));
			}
		}),
		language.LanguageDescription.of({
			name: "Pascal",
			extensions: ["p", "pas"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/pascal */ "../editor/node_modules/@codemirror/legacy-modes/mode/pascal.cjs")); }).then(m => legacy(m.pascal));
			}
		}),
		language.LanguageDescription.of({
			name: "Perl",
			extensions: ["pl", "pm"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/perl */ "../editor/node_modules/@codemirror/legacy-modes/mode/perl.cjs")); }).then(m => legacy(m.perl));
			}
		}),
		language.LanguageDescription.of({
			name: "Pig",
			extensions: ["pig"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/pig */ "../editor/node_modules/@codemirror/legacy-modes/mode/pig.cjs")); }).then(m => legacy(m.pig));
			}
		}),
		language.LanguageDescription.of({
			name: "PowerShell",
			extensions: ["ps1", "psd1", "psm1"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/powershell */ "../editor/node_modules/@codemirror/legacy-modes/mode/powershell.cjs")); }).then(m => legacy(m.powerShell));
			}
		}),
		language.LanguageDescription.of({
			name: "Properties files",
			alias: ["ini", "properties"],
			extensions: ["properties", "ini", "in"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/properties */ "../editor/node_modules/@codemirror/legacy-modes/mode/properties.cjs")); }).then(m => legacy(m.properties));
			}
		}),
		language.LanguageDescription.of({
			name: "ProtoBuf",
			extensions: ["proto"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/protobuf */ "../editor/node_modules/@codemirror/legacy-modes/mode/protobuf.cjs")); }).then(m => legacy(m.protobuf));
			}
		}),
		language.LanguageDescription.of({
			name: "Puppet",
			extensions: ["pp"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/puppet */ "../editor/node_modules/@codemirror/legacy-modes/mode/puppet.cjs")); }).then(m => legacy(m.puppet));
			}
		}),
		language.LanguageDescription.of({
			name: "Q",
			extensions: ["q"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/q */ "../editor/node_modules/@codemirror/legacy-modes/mode/q.cjs")); }).then(m => legacy(m.q));
			}
		}),
		language.LanguageDescription.of({
			name: "R",
			alias: ["rscript"],
			extensions: ["r", "R"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/r */ "../editor/node_modules/@codemirror/legacy-modes/mode/r.cjs")); }).then(m => legacy(m.r));
			}
		}),
		language.LanguageDescription.of({
			name: "RPM Changes",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/rpm */ "../editor/node_modules/@codemirror/legacy-modes/mode/rpm.cjs")); }).then(m => legacy(m.rpmChanges));
			}
		}),
		language.LanguageDescription.of({
			name: "RPM Spec",
			extensions: ["spec"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/rpm */ "../editor/node_modules/@codemirror/legacy-modes/mode/rpm.cjs")); }).then(m => legacy(m.rpmSpec));
			}
		}),
		language.LanguageDescription.of({
			name: "Ruby",
			alias: ["jruby", "macruby", "rake", "rb", "rbx"],
			extensions: ["rb"],
			filename: /^(Gemfile|Rakefile)$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ruby */ "../editor/node_modules/@codemirror/legacy-modes/mode/ruby.cjs")); }).then(m => legacy(m.ruby));
			}
		}),
		language.LanguageDescription.of({
			name: "SAS",
			extensions: ["sas"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/sas */ "../editor/node_modules/@codemirror/legacy-modes/mode/sas.cjs")); }).then(m => legacy(m.sas));
			}
		}),
		language.LanguageDescription.of({
			name: "Scala",
			extensions: ["scala"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.scala));
			}
		}),
		language.LanguageDescription.of({
			name: "Scheme",
			extensions: ["scm", "ss"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/scheme */ "../editor/node_modules/@codemirror/legacy-modes/mode/scheme.cjs")); }).then(m => legacy(m.scheme));
			}
		}),
		language.LanguageDescription.of({
			name: "Shell",
			alias: ["bash", "sh", "zsh"],
			extensions: ["sh", "ksh", "bash"],
			filename: /^PKGBUILD$/,
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/shell */ "../editor/node_modules/@codemirror/legacy-modes/mode/shell.cjs")); }).then(m => legacy(m.shell));
			}
		}),
		language.LanguageDescription.of({
			name: "Sieve",
			extensions: ["siv", "sieve"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/sieve */ "../editor/node_modules/@codemirror/legacy-modes/mode/sieve.cjs")); }).then(m => legacy(m.sieve));
			}
		}),
		language.LanguageDescription.of({
			name: "Smalltalk",
			extensions: ["st"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/smalltalk */ "../editor/node_modules/@codemirror/legacy-modes/mode/smalltalk.cjs")); }).then(m => legacy(m.smalltalk));
			}
		}),
		language.LanguageDescription.of({
			name: "Solr",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/solr */ "../editor/node_modules/@codemirror/legacy-modes/mode/solr.cjs")); }).then(m => legacy(m.solr));
			}
		}),
		language.LanguageDescription.of({
			name: "SML",
			extensions: ["sml", "sig", "fun", "smackspec"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mllike */ "../editor/node_modules/@codemirror/legacy-modes/mode/mllike.cjs")); }).then(m => legacy(m.sml));
			}
		}),
		language.LanguageDescription.of({
			name: "SPARQL",
			alias: ["sparul"],
			extensions: ["rq", "sparql"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/sparql */ "../editor/node_modules/@codemirror/legacy-modes/mode/sparql.cjs")); }).then(m => legacy(m.sparql));
			}
		}),
		language.LanguageDescription.of({
			name: "Spreadsheet",
			alias: ["excel", "formula"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/spreadsheet */ "../editor/node_modules/@codemirror/legacy-modes/mode/spreadsheet.cjs")); }).then(m => legacy(m.spreadsheet));
			}
		}),
		language.LanguageDescription.of({
			name: "Squirrel",
			extensions: ["nut"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/clike */ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs")); }).then(m => legacy(m.squirrel));
			}
		}),
		language.LanguageDescription.of({
			name: "Stylus",
			extensions: ["styl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/stylus */ "../editor/node_modules/@codemirror/legacy-modes/mode/stylus.cjs")); }).then(m => legacy(m.stylus));
			}
		}),
		language.LanguageDescription.of({
			name: "Swift",
			extensions: ["swift"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/swift */ "../editor/node_modules/@codemirror/legacy-modes/mode/swift.cjs")); }).then(m => legacy(m.swift));
			}
		}),
		language.LanguageDescription.of({
			name: "sTeX",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/stex */ "../editor/node_modules/@codemirror/legacy-modes/mode/stex.cjs")); }).then(m => legacy(m.stex));
			}
		}),
		language.LanguageDescription.of({
			name: "LaTeX",
			alias: ["tex"],
			extensions: ["text", "ltx", "tex"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/stex */ "../editor/node_modules/@codemirror/legacy-modes/mode/stex.cjs")); }).then(m => legacy(m.stex));
			}
		}),
		language.LanguageDescription.of({
			name: "SystemVerilog",
			extensions: ["v", "sv", "svh"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/verilog */ "../editor/node_modules/@codemirror/legacy-modes/mode/verilog.cjs")); }).then(m => legacy(m.verilog));
			}
		}),
		language.LanguageDescription.of({
			name: "Tcl",
			extensions: ["tcl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/tcl */ "../editor/node_modules/@codemirror/legacy-modes/mode/tcl.cjs")); }).then(m => legacy(m.tcl));
			}
		}),
		language.LanguageDescription.of({
			name: "Textile",
			extensions: ["textile"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/textile */ "../editor/node_modules/@codemirror/legacy-modes/mode/textile.cjs")); }).then(m => legacy(m.textile));
			}
		}),
		language.LanguageDescription.of({
			name: "TiddlyWiki",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/tiddlywiki */ "../editor/node_modules/@codemirror/legacy-modes/mode/tiddlywiki.cjs")); }).then(m => legacy(m.tiddlyWiki));
			}
		}),
		language.LanguageDescription.of({
			name: "Tiki wiki",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/tiki */ "../editor/node_modules/@codemirror/legacy-modes/mode/tiki.cjs")); }).then(m => legacy(m.tiki));
			}
		}),
		language.LanguageDescription.of({
			name: "TOML",
			extensions: ["toml"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/toml */ "../editor/node_modules/@codemirror/legacy-modes/mode/toml.cjs")); }).then(m => legacy(m.toml));
			}
		}),
		language.LanguageDescription.of({
			name: "Troff",
			extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/troff */ "../editor/node_modules/@codemirror/legacy-modes/mode/troff.cjs")); }).then(m => legacy(m.troff));
			}
		}),
		language.LanguageDescription.of({
			name: "TTCN",
			extensions: ["ttcn", "ttcn3", "ttcnpp"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ttcn */ "../editor/node_modules/@codemirror/legacy-modes/mode/ttcn.cjs")); }).then(m => legacy(m.ttcn));
			}
		}),
		language.LanguageDescription.of({
			name: "TTCN_CFG",
			extensions: ["cfg"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/ttcn-cfg */ "../editor/node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.cjs")); }).then(m => legacy(m.ttcnCfg));
			}
		}),
		language.LanguageDescription.of({
			name: "Turtle",
			extensions: ["ttl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/turtle */ "../editor/node_modules/@codemirror/legacy-modes/mode/turtle.cjs")); }).then(m => legacy(m.turtle));
			}
		}),
		language.LanguageDescription.of({
			name: "Web IDL",
			extensions: ["webidl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/webidl */ "../editor/node_modules/@codemirror/legacy-modes/mode/webidl.cjs")); }).then(m => legacy(m.webIDL));
			}
		}),
		language.LanguageDescription.of({
			name: "VB.NET",
			extensions: ["vb"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/vb */ "../editor/node_modules/@codemirror/legacy-modes/mode/vb.cjs")); }).then(m => legacy(m.vb));
			}
		}),
		language.LanguageDescription.of({
			name: "VBScript",
			extensions: ["vbs"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/vbscript */ "../editor/node_modules/@codemirror/legacy-modes/mode/vbscript.cjs")); }).then(m => legacy(m.vbScript));
			}
		}),
		language.LanguageDescription.of({
			name: "Velocity",
			extensions: ["vtl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/velocity */ "../editor/node_modules/@codemirror/legacy-modes/mode/velocity.cjs")); }).then(m => legacy(m.velocity));
			}
		}),
		language.LanguageDescription.of({
			name: "Verilog",
			extensions: ["v"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/verilog */ "../editor/node_modules/@codemirror/legacy-modes/mode/verilog.cjs")); }).then(m => legacy(m.verilog));
			}
		}),
		language.LanguageDescription.of({
			name: "VHDL",
			extensions: ["vhd", "vhdl"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/vhdl */ "../editor/node_modules/@codemirror/legacy-modes/mode/vhdl.cjs")); }).then(m => legacy(m.vhdl));
			}
		}),
		language.LanguageDescription.of({
			name: "XQuery",
			extensions: ["xy", "xquery"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/xquery */ "../editor/node_modules/@codemirror/legacy-modes/mode/xquery.cjs")); }).then(m => legacy(m.xQuery));
			}
		}),
		language.LanguageDescription.of({
			name: "Yacas",
			extensions: ["ys"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/yacas */ "../editor/node_modules/@codemirror/legacy-modes/mode/yacas.cjs")); }).then(m => legacy(m.yacas));
			}
		}),
		language.LanguageDescription.of({
			name: "YAML",
			alias: ["yml"],
			extensions: ["yaml", "yml"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/yaml */ "../editor/node_modules/@codemirror/legacy-modes/mode/yaml.cjs")); }).then(m => legacy(m.yaml));
			}
		}),
		language.LanguageDescription.of({
			name: "Z80",
			extensions: ["z80"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/z80 */ "../editor/node_modules/@codemirror/legacy-modes/mode/z80.cjs")); }).then(m => legacy(m.z80));
			}
		}),
		language.LanguageDescription.of({
			name: "MscGen",
			extensions: ["mscgen", "mscin", "msc"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mscgen */ "../editor/node_modules/@codemirror/legacy-modes/mode/mscgen.cjs")); }).then(m => legacy(m.mscgen));
			}
		}),
		language.LanguageDescription.of({
			name: "Xù",
			extensions: ["xu"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mscgen */ "../editor/node_modules/@codemirror/legacy-modes/mode/mscgen.cjs")); }).then(m => legacy(m.xu));
			}
		}),
		language.LanguageDescription.of({
			name: "MsGenny",
			extensions: ["msgenny"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/legacy-modes/mode/mscgen */ "../editor/node_modules/@codemirror/legacy-modes/mode/mscgen.cjs")); }).then(m => legacy(m.msgenny));
			}
		}),
		language.LanguageDescription.of({
			name: "Vue",
			extensions: ["vue"],
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-vue */ "../editor/node_modules/@codemirror/lang-vue/dist/index.cjs")); }).then(m => m.vue());
			}
		}),
		language.LanguageDescription.of({
			name: "Angular Template",
			load() {
				return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(__webpack_require__(/*! @codemirror/lang-angular */ "../editor/node_modules/@codemirror/lang-angular/dist/index.cjs")); }).then(m => m.angular());
			}
		})
	];
	
	exports.languages = languages;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/language/dist/index.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/language/dist/index.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var styleMod = __webpack_require__(/*! style-mod */ "../editor/node_modules/@codemirror/language/node_modules/style-mod/dist/style-mod.cjs");
	
	var _a;
	/**
	Node prop stored in a parser's top syntax node to provide the
	facet that stores language-specific data for that language.
	*/
	const languageDataProp = new common.NodeProp();
	/**
	Helper function to define a facet (to be added to the top syntax
	node(s) for a language via
	[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
	used to associate language data with the language. You
	probably only need this when subclassing
	[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
	*/
	function defineLanguageFacet(baseData) {
		return state.Facet.define({
			combine: baseData ? values => values.concat(baseData) : undefined
		});
	}
	/**
	Syntax node prop used to register sublanguages. Should be added to
	the top level node type for the language.
	*/
	const sublanguageProp = new common.NodeProp();
	/**
	A language object manages parsing and per-language
	[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
	managed as a [Lezer](https://lezer.codemirror.net) tree. The class
	can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
	subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
	via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
	for stream parsers.
	*/
	class Language {
		/**
		Construct a language object. If you need to invoke this
		directly, first define a data facet with
		[`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
		configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
		to the language's outer syntax node.
		*/
		constructor(
		/**
		The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
		used for this language.
		*/
		data, parser, extraExtensions = [], 
		/**
		A language name.
		*/
		name = "") {
			this.data = data;
			this.name = name;
			// Kludge to define EditorState.tree as a debugging helper,
			// without the EditorState package actually knowing about
			// languages and lezer trees.
			if (!state.EditorState.prototype.hasOwnProperty("tree"))
				Object.defineProperty(state.EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
			this.parser = parser;
			this.extension = [
				language.of(this),
				state.EditorState.languageData.of((state, pos, side) => {
					let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
					if (!data)
						return [];
					let base = state.facet(data), sub = top.type.prop(sublanguageProp);
					if (sub) {
						let innerNode = top.resolve(pos - top.from, side);
						for (let sublang of sub)
							if (sublang.test(innerNode, state)) {
								let data = state.facet(sublang.facet);
								return sublang.type == "replace" ? data : data.concat(base);
							}
					}
					return base;
				})
			].concat(extraExtensions);
		}
		/**
		Query whether this language is active at the given position.
		*/
		isActiveAt(state, pos, side = -1) {
			return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
		}
		/**
		Find the document regions that were parsed using this language.
		The returned regions will _include_ any nested languages rooted
		in this language, when those exist.
		*/
		findRegions(state) {
			let lang = state.facet(language);
			if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
				return [{ from: 0, to: state.doc.length }];
			if (!lang || !lang.allowsNesting)
				return [];
			let result = [];
			let explore = (tree, from) => {
				if (tree.prop(languageDataProp) == this.data) {
					result.push({ from, to: from + tree.length });
					return;
				}
				let mount = tree.prop(common.NodeProp.mounted);
				if (mount) {
					if (mount.tree.prop(languageDataProp) == this.data) {
						if (mount.overlay)
							for (let r of mount.overlay)
								result.push({ from: r.from + from, to: r.to + from });
						else
							result.push({ from: from, to: from + tree.length });
						return;
					}
					else if (mount.overlay) {
						let size = result.length;
						explore(mount.tree, mount.overlay[0].from + from);
						if (result.length > size)
							return;
					}
				}
				for (let i = 0; i < tree.children.length; i++) {
					let ch = tree.children[i];
					if (ch instanceof common.Tree)
						explore(ch, tree.positions[i] + from);
				}
			};
			explore(syntaxTree(state), 0);
			return result;
		}
		/**
		Indicates whether this language allows nested languages. The
		default implementation returns true.
		*/
		get allowsNesting() { return true; }
	}
	/**
	@internal
	*/
	Language.setState = state.StateEffect.define();
	function topNodeAt(state, pos, side) {
		let topLang = state.facet(language), tree = syntaxTree(state).topNode;
		if (!topLang || topLang.allowsNesting) {
			for (let node = tree; node; node = node.enter(pos, side, common.IterMode.ExcludeBuffers))
				if (node.type.isTop)
					tree = node;
		}
		return tree;
	}
	/**
	A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
	[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
	parsers.
	*/
	class LRLanguage extends Language {
		constructor(data, parser, name) {
			super(data, parser, [], name);
			this.parser = parser;
		}
		/**
		Define a language from a parser.
		*/
		static define(spec) {
			let data = defineLanguageFacet(spec.languageData);
			return new LRLanguage(data, spec.parser.configure({
				props: [languageDataProp.add(type => type.isTop ? data : undefined)]
			}), spec.name);
		}
		/**
		Create a new instance of this language with a reconfigured
		version of its parser and optionally a new name.
		*/
		configure(options, name) {
			return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
		}
		get allowsNesting() { return this.parser.hasWrappers(); }
	}
	/**
	Get the syntax tree for a state, which is the current (possibly
	incomplete) parse tree of the active
	[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
	language available.
	*/
	function syntaxTree(state) {
		let field = state.field(Language.state, false);
		return field ? field.tree : common.Tree.empty;
	}
	/**
	Try to get a parse tree that spans at least up to `upto`. The
	method will do at most `timeout` milliseconds of work to parse
	up to that point if the tree isn't already available.
	*/
	function ensureSyntaxTree(state, upto, timeout = 50) {
		var _a;
		let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
		if (!parse)
			return null;
		let oldVieport = parse.viewport;
		parse.updateViewport({ from: 0, to: upto });
		let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;
		parse.updateViewport(oldVieport);
		return result;
	}
	/**
	Queries whether there is a full syntax tree available up to the
	given document position. If there isn't, the background parse
	process _might_ still be working and update the tree further, but
	there is no guarantee of that—the parser will [stop
	working](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a
	certain amount of time or has moved beyond the visible viewport.
	Always returns false if no language has been enabled.
	*/
	function syntaxTreeAvailable(state, upto = state.doc.length) {
		var _a;
		return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;
	}
	/**
	Move parsing forward, and update the editor state afterwards to
	reflect the new tree. Will work for at most `timeout`
	milliseconds. Returns true if the parser managed get to the given
	position in that time.
	*/
	function forceParsing(view, upto = view.viewport.to, timeout = 100) {
		let success = ensureSyntaxTree(view.state, upto, timeout);
		if (success != syntaxTree(view.state))
			view.dispatch({});
		return !!success;
	}
	/**
	Tells you whether the language parser is planning to do more
	parsing work (in a `requestIdleCallback` pseudo-thread) or has
	stopped running, either because it parsed the entire document,
	because it spent too much time and was cut off, or because there
	is no language parser enabled.
	*/
	function syntaxParserRunning(view) {
		var _a;
		return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;
	}
	/**
	Lezer-style
	[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
	object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
	*/
	class DocInput {
		/**
		Create an input object for the given document.
		*/
		constructor(doc) {
			this.doc = doc;
			this.cursorPos = 0;
			this.string = "";
			this.cursor = doc.iter();
		}
		get length() { return this.doc.length; }
		syncTo(pos) {
			this.string = this.cursor.next(pos - this.cursorPos).value;
			this.cursorPos = pos + this.string.length;
			return this.cursorPos - this.string.length;
		}
		chunk(pos) {
			this.syncTo(pos);
			return this.string;
		}
		get lineChunks() { return true; }
		read(from, to) {
			let stringStart = this.cursorPos - this.string.length;
			if (from < stringStart || to >= this.cursorPos)
				return this.doc.sliceString(from, to);
			else
				return this.string.slice(from - stringStart, to - stringStart);
		}
	}
	let currentContext = null;
	/**
	A parse context provided to parsers working on the editor content.
	*/
	class ParseContext {
		constructor(parser, 
		/**
		The current editor state.
		*/
		state, 
		/**
		Tree fragments that can be reused by incremental re-parses.
		*/
		fragments = [], 
		/**
		@internal
		*/
		tree, 
		/**
		@internal
		*/
		treeLen, 
		/**
		The current editor viewport (or some overapproximation
		thereof). Intended to be used for opportunistically avoiding
		work (in which case
		[`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
		should be called to make sure the parser is restarted when the
		skipped region becomes visible).
		*/
		viewport, 
		/**
		@internal
		*/
		skipped, 
		/**
		This is where skipping parsers can register a promise that,
		when resolved, will schedule a new parse. It is cleared when
		the parse worker picks up the promise. @internal
		*/
		scheduleOn) {
			this.parser = parser;
			this.state = state;
			this.fragments = fragments;
			this.tree = tree;
			this.treeLen = treeLen;
			this.viewport = viewport;
			this.skipped = skipped;
			this.scheduleOn = scheduleOn;
			this.parse = null;
			/**
			@internal
			*/
			this.tempSkipped = [];
		}
		/**
		@internal
		*/
		static create(parser, state, viewport) {
			return new ParseContext(parser, state, [], common.Tree.empty, 0, viewport, [], null);
		}
		startParse() {
			return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
		}
		/**
		@internal
		*/
		work(until, upto) {
			if (upto != null && upto >= this.state.doc.length)
				upto = undefined;
			if (this.tree != common.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
				this.takeTree();
				return true;
			}
			return this.withContext(() => {
				var _a;
				if (typeof until == "number") {
					let endTime = Date.now() + until;
					until = () => Date.now() > endTime;
				}
				if (!this.parse)
					this.parse = this.startParse();
				if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
					upto < this.state.doc.length)
					this.parse.stopAt(upto);
				for (;;) {
					let done = this.parse.advance();
					if (done) {
						this.fragments = this.withoutTempSkipped(common.TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
						this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
						this.tree = done;
						this.parse = null;
						if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
							this.parse = this.startParse();
						else
							return true;
					}
					if (until())
						return false;
				}
			});
		}
		/**
		@internal
		*/
		takeTree() {
			let pos, tree;
			if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
				if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
					this.parse.stopAt(pos);
				this.withContext(() => { while (!(tree = this.parse.advance())) { } });
				this.treeLen = pos;
				this.tree = tree;
				this.fragments = this.withoutTempSkipped(common.TreeFragment.addTree(this.tree, this.fragments, true));
				this.parse = null;
			}
		}
		withContext(f) {
			let prev = currentContext;
			currentContext = this;
			try {
				return f();
			}
			finally {
				currentContext = prev;
			}
		}
		withoutTempSkipped(fragments) {
			for (let r; r = this.tempSkipped.pop();)
				fragments = cutFragments(fragments, r.from, r.to);
			return fragments;
		}
		/**
		@internal
		*/
		changes(changes, newState) {
			let { fragments, tree, treeLen, viewport, skipped } = this;
			this.takeTree();
			if (!changes.empty) {
				let ranges = [];
				changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
				fragments = common.TreeFragment.applyChanges(fragments, ranges);
				tree = common.Tree.empty;
				treeLen = 0;
				viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
				if (this.skipped.length) {
					skipped = [];
					for (let r of this.skipped) {
						let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
						if (from < to)
							skipped.push({ from, to });
					}
				}
			}
			return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
		}
		/**
		@internal
		*/
		updateViewport(viewport) {
			if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
				return false;
			this.viewport = viewport;
			let startLen = this.skipped.length;
			for (let i = 0; i < this.skipped.length; i++) {
				let { from, to } = this.skipped[i];
				if (from < viewport.to && to > viewport.from) {
					this.fragments = cutFragments(this.fragments, from, to);
					this.skipped.splice(i--, 1);
				}
			}
			if (this.skipped.length >= startLen)
				return false;
			this.reset();
			return true;
		}
		/**
		@internal
		*/
		reset() {
			if (this.parse) {
				this.takeTree();
				this.parse = null;
			}
		}
		/**
		Notify the parse scheduler that the given region was skipped
		because it wasn't in view, and the parse should be restarted
		when it comes into view.
		*/
		skipUntilInView(from, to) {
			this.skipped.push({ from, to });
		}
		/**
		Returns a parser intended to be used as placeholder when
		asynchronously loading a nested parser. It'll skip its input and
		mark it as not-really-parsed, so that the next update will parse
		it again.
		
		When `until` is given, a reparse will be scheduled when that
		promise resolves.
		*/
		static getSkippingParser(until) {
			return new class extends common.Parser {
				createParse(input, fragments, ranges) {
					let from = ranges[0].from, to = ranges[ranges.length - 1].to;
					let parser = {
						parsedPos: from,
						advance() {
							let cx = currentContext;
							if (cx) {
								for (let r of ranges)
									cx.tempSkipped.push(r);
								if (until)
									cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
							}
							this.parsedPos = to;
							return new common.Tree(common.NodeType.none, [], [], to - from);
						},
						stoppedAt: null,
						stopAt() { }
					};
					return parser;
				}
			};
		}
		/**
		@internal
		*/
		isDone(upto) {
			upto = Math.min(upto, this.state.doc.length);
			let frags = this.fragments;
			return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
		}
		/**
		Get the context for the current parse, or `null` if no editor
		parse is in progress.
		*/
		static get() { return currentContext; }
	}
	function cutFragments(fragments, from, to) {
		return common.TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
	}
	class LanguageState {
		constructor(
		// A mutable parse state that is used to preserve work done during
		// the lifetime of a state when moving to the next state.
		context) {
			this.context = context;
			this.tree = context.tree;
		}
		apply(tr) {
			if (!tr.docChanged && this.tree == this.context.tree)
				return this;
			let newCx = this.context.changes(tr.changes, tr.state);
			// If the previous parse wasn't done, go forward only up to its
			// end position or the end of the viewport, to avoid slowing down
			// state updates with parse work beyond the viewport.
			let upto = this.context.treeLen == tr.startState.doc.length ? undefined
				: Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
			if (!newCx.work(20 /* Work.Apply */, upto))
				newCx.takeTree();
			return new LanguageState(newCx);
		}
		static init(state) {
			let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
			let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
			if (!parseState.work(20 /* Work.Apply */, vpTo))
				parseState.takeTree();
			return new LanguageState(parseState);
		}
	}
	Language.state = state.StateField.define({
		create: LanguageState.init,
		update(value, tr) {
			for (let e of tr.effects)
				if (e.is(Language.setState))
					return e.value;
			if (tr.startState.facet(language) != tr.state.facet(language))
				return LanguageState.init(tr.state);
			return value.apply(tr);
		}
	});
	let requestIdle = (callback) => {
		let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
		return () => clearTimeout(timeout);
	};
	if (typeof requestIdleCallback != "undefined")
		requestIdle = (callback) => {
			let idle = -1, timeout = setTimeout(() => {
				idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
			}, 100 /* Work.MinPause */);
			return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
		};
	const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
		? () => navigator.scheduling.isInputPending() : null;
	const parseWorker = view.ViewPlugin.fromClass(class ParseWorker {
		constructor(view) {
			this.view = view;
			this.working = null;
			this.workScheduled = 0;
			// End of the current time chunk
			this.chunkEnd = -1;
			// Milliseconds of budget left for this chunk
			this.chunkBudget = -1;
			this.work = this.work.bind(this);
			this.scheduleWork();
		}
		update(update) {
			let cx = this.view.state.field(Language.state).context;
			if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
				this.scheduleWork();
			if (update.docChanged || update.selectionSet) {
				if (this.view.hasFocus)
					this.chunkBudget += 50 /* Work.ChangeBonus */;
				this.scheduleWork();
			}
			this.checkAsyncSchedule(cx);
		}
		scheduleWork() {
			if (this.working)
				return;
			let { state } = this.view, field = state.field(Language.state);
			if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
				this.working = requestIdle(this.work);
		}
		work(deadline) {
			this.working = null;
			let now = Date.now();
			if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
				this.chunkEnd = now + 30000 /* Work.ChunkTime */;
				this.chunkBudget = 3000 /* Work.ChunkBudget */;
			}
			if (this.chunkBudget <= 0)
				return; // No more budget
			let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
			if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
				return;
			let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
			let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
			let done = field.context.work(() => {
				return isInputPending && isInputPending() || Date.now() > endTime;
			}, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
			this.chunkBudget -= Date.now() - now;
			if (done || this.chunkBudget <= 0) {
				field.context.takeTree();
				this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
			}
			if (this.chunkBudget > 0 && !(done && !viewportFirst))
				this.scheduleWork();
			this.checkAsyncSchedule(field.context);
		}
		checkAsyncSchedule(cx) {
			if (cx.scheduleOn) {
				this.workScheduled++;
				cx.scheduleOn
					.then(() => this.scheduleWork())
					.catch(err => view.logException(this.view.state, err))
					.then(() => this.workScheduled--);
				cx.scheduleOn = null;
			}
		}
		destroy() {
			if (this.working)
				this.working();
		}
		isWorking() {
			return !!(this.working || this.workScheduled > 0);
		}
	}, {
		eventHandlers: { focus() { this.scheduleWork(); } }
	});
	/**
	The facet used to associate a language with an editor state. Used
	by `Language` object's `extension` property (so you don't need to
	manually wrap your languages in this). Can be used to access the
	current language on a state.
	*/
	const language = state.Facet.define({
		combine(languages) { return languages.length ? languages[0] : null; },
		enables: language => [
			Language.state,
			parseWorker,
			view.EditorView.contentAttributes.compute([language], state => {
				let lang = state.facet(language);
				return lang && lang.name ? { "data-language": lang.name } : {};
			})
		]
	});
	/**
	This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
	optional set of supporting extensions. Language packages are
	encouraged to export a function that optionally takes a
	configuration object and returns a `LanguageSupport` instance, as
	the main way for client code to use the package.
	*/
	class LanguageSupport {
		/**
		Create a language support object.
		*/
		constructor(
		/**
		The language object.
		*/
		language, 
		/**
		An optional set of supporting extensions. When nesting a
		language in another language, the outer language is encouraged
		to include the supporting extensions for its inner languages
		in its own set of support extensions.
		*/
		support = []) {
			this.language = language;
			this.support = support;
			this.extension = [language, support];
		}
	}
	/**
	Language descriptions are used to store metadata about languages
	and to dynamically load them. Their main role is finding the
	appropriate language for a filename or dynamically loading nested
	parsers.
	*/
	class LanguageDescription {
		constructor(
		/**
		The name of this language.
		*/
		name, 
		/**
		Alternative names for the mode (lowercased, includes `this.name`).
		*/
		alias, 
		/**
		File extensions associated with this language.
		*/
		extensions, 
		/**
		Optional filename pattern that should be associated with this
		language.
		*/
		filename, loadFunc, 
		/**
		If the language has been loaded, this will hold its value.
		*/
		support = undefined) {
			this.name = name;
			this.alias = alias;
			this.extensions = extensions;
			this.filename = filename;
			this.loadFunc = loadFunc;
			this.support = support;
			this.loading = null;
		}
		/**
		Start loading the the language. Will return a promise that
		resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
		object when the language successfully loads.
		*/
		load() {
			return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));
		}
		/**
		Create a language description.
		*/
		static of(spec) {
			let { load, support } = spec;
			if (!load) {
				if (!support)
					throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
				load = () => Promise.resolve(support);
			}
			return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
		}
		/**
		Look for a language in the given array of descriptions that
		matches the filename. Will first match
		[`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
		and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
		and return the first language that matches.
		*/
		static matchFilename(descs, filename) {
			for (let d of descs)
				if (d.filename && d.filename.test(filename))
					return d;
			let ext = /\.([^.]+)$/.exec(filename);
			if (ext)
				for (let d of descs)
					if (d.extensions.indexOf(ext[1]) > -1)
						return d;
			return null;
		}
		/**
		Look for a language whose name or alias matches the the given
		name (case-insensitively). If `fuzzy` is true, and no direct
		matchs is found, this'll also search for a language whose name
		or alias occurs in the string (for names shorter than three
		characters, only when surrounded by non-word characters).
		*/
		static matchLanguageName(descs, name, fuzzy = true) {
			name = name.toLowerCase();
			for (let d of descs)
				if (d.alias.some(a => a == name))
					return d;
			if (fuzzy)
				for (let d of descs)
					for (let a of d.alias) {
						let found = name.indexOf(a);
						if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
							return d;
					}
			return null;
		}
	}
	
	/**
	Facet that defines a way to provide a function that computes the
	appropriate indentation depth, as a column number (see
	[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
	line. A return value of `null` indicates no indentation can be
	determined, and the line should inherit the indentation of the one
	above it. A return value of `undefined` defers to the next indent
	service.
	*/
	const indentService = state.Facet.define();
	/**
	Facet for overriding the unit by which indentation happens. Should
	be a string consisting either entirely of the same whitespace
	character. When not set, this defaults to 2 spaces.
	*/
	const indentUnit = state.Facet.define({
		combine: values => {
			if (!values.length)
				return "  ";
			let unit = values[0];
			if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
				throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
			return unit;
		}
	});
	/**
	Return the _column width_ of an indent unit in the state.
	Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
	facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
	contains tabs.
	*/
	function getIndentUnit(state) {
		let unit = state.facet(indentUnit);
		return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
	}
	/**
	Create an indentation string that covers columns 0 to `cols`.
	Will use tabs for as much of the columns as possible when the
	[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
	tabs.
	*/
	function indentString(state, cols) {
		let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
		if (ch == "\t") {
			while (cols >= ts) {
				result += "\t";
				cols -= ts;
			}
			ch = " ";
		}
		for (let i = 0; i < cols; i++)
			result += ch;
		return result;
	}
	/**
	Get the indentation, as a column number, at the given position.
	Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
	that are registered, and if none of those return an indentation,
	this will check the syntax tree for the [indent node
	prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
	number when an indentation could be determined, and null
	otherwise.
	*/
	function getIndentation(context, pos) {
		if (context instanceof state.EditorState)
			context = new IndentContext(context);
		for (let service of context.state.facet(indentService)) {
			let result = service(context, pos);
			if (result !== undefined)
				return result;
		}
		let tree = syntaxTree(context.state);
		return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
	}
	/**
	Create a change set that auto-indents all lines touched by the
	given document range.
	*/
	function indentRange(state, from, to) {
		let updated = Object.create(null);
		let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });
		let changes = [];
		for (let pos = from; pos <= to;) {
			let line = state.doc.lineAt(pos);
			pos = line.to + 1;
			let indent = getIndentation(context, line.from);
			if (indent == null)
				continue;
			if (!/\S/.test(line.text))
				indent = 0;
			let cur = /^\s*/.exec(line.text)[0];
			let norm = indentString(state, indent);
			if (cur != norm) {
				updated[line.from] = indent;
				changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
			}
		}
		return state.changes(changes);
	}
	/**
	Indentation contexts are used when calling [indentation
	services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
	useful in indentation logic, and can selectively override the
	indentation reported for some lines.
	*/
	class IndentContext {
		/**
		Create an indent context.
		*/
		constructor(
		/**
		The editor state.
		*/
		state, 
		/**
		@internal
		*/
		options = {}) {
			this.state = state;
			this.options = options;
			this.unit = getIndentUnit(state);
		}
		/**
		Get a description of the line at the given position, taking
		[simulated line
		breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
		into account. If there is such a break at `pos`, the `bias`
		argument determines whether the part of the line line before or
		after the break is used.
		*/
		lineAt(pos, bias = 1) {
			let line = this.state.doc.lineAt(pos);
			let { simulateBreak, simulateDoubleBreak } = this.options;
			if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
				if (simulateDoubleBreak && simulateBreak == pos)
					return { text: "", from: pos };
				else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
					return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
				else
					return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
			}
			return line;
		}
		/**
		Get the text directly after `pos`, either the entire line
		or the next 100 characters, whichever is shorter.
		*/
		textAfterPos(pos, bias = 1) {
			if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
				return "";
			let { text, from } = this.lineAt(pos, bias);
			return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
		}
		/**
		Find the column for the given position.
		*/
		column(pos, bias = 1) {
			let { text, from } = this.lineAt(pos, bias);
			let result = this.countColumn(text, pos - from);
			let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
			if (override > -1)
				result += override - this.countColumn(text, text.search(/\S|$/));
			return result;
		}
		/**
		Find the column position (taking tabs into account) of the given
		position in the given string.
		*/
		countColumn(line, pos = line.length) {
			return state.countColumn(line, this.state.tabSize, pos);
		}
		/**
		Find the indentation column of the line at the given point.
		*/
		lineIndent(pos, bias = 1) {
			let { text, from } = this.lineAt(pos, bias);
			let override = this.options.overrideIndentation;
			if (override) {
				let overriden = override(from);
				if (overriden > -1)
					return overriden;
			}
			return this.countColumn(text, text.search(/\S|$/));
		}
		/**
		Returns the [simulated line
		break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
		for this context, if any.
		*/
		get simulatedBreak() {
			return this.options.simulateBreak || null;
		}
	}
	/**
	A syntax tree node prop used to associate indentation strategies
	with node types. Such a strategy is a function from an indentation
	context to a column number (see also
	[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
	indicates that no definitive indentation can be determined.
	*/
	const indentNodeProp = new common.NodeProp();
	// Compute the indentation for a given position from the syntax tree.
	function syntaxIndentation(cx, ast, pos) {
		let stack = ast.resolveStack(pos);
		let inner = stack.node.enterUnfinishedNodesBefore(pos);
		if (inner != stack.node) {
			let add = [];
			for (let cur = inner; cur != stack.node; cur = cur.parent)
				add.push(cur);
			for (let i = add.length - 1; i >= 0; i--)
				stack = { node: add[i], next: stack };
		}
		return indentFor(stack, cx, pos);
	}
	function indentFor(stack, cx, pos) {
		for (let cur = stack; cur; cur = cur.next) {
			let strategy = indentStrategy(cur.node);
			if (strategy)
				return strategy(TreeIndentContext.create(cx, pos, cur));
		}
		return 0;
	}
	function ignoreClosed(cx) {
		return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
	}
	function indentStrategy(tree) {
		let strategy = tree.type.prop(indentNodeProp);
		if (strategy)
			return strategy;
		let first = tree.firstChild, close;
		if (first && (close = first.type.prop(common.NodeProp.closedBy))) {
			let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
			return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
		}
		return tree.parent == null ? topIndent : null;
	}
	function topIndent() { return 0; }
	/**
	Objects of this type provide context information and helper
	methods to indentation functions registered on syntax nodes.
	*/
	class TreeIndentContext extends IndentContext {
		constructor(base, 
		/**
		The position at which indentation is being computed.
		*/
		pos, 
		/**
		@internal
		*/
		context) {
			super(base.state, base.options);
			this.base = base;
			this.pos = pos;
			this.context = context;
		}
		/**
		The syntax tree node to which the indentation strategy
		applies.
		*/
		get node() { return this.context.node; }
		/**
		@internal
		*/
		static create(base, pos, context) {
			return new TreeIndentContext(base, pos, context);
		}
		/**
		Get the text directly after `this.pos`, either the entire line
		or the next 100 characters, whichever is shorter.
		*/
		get textAfter() {
			return this.textAfterPos(this.pos);
		}
		/**
		Get the indentation at the reference line for `this.node`, which
		is the line on which it starts, unless there is a node that is
		_not_ a parent of this node covering the start of that line. If
		so, the line at the start of that node is tried, again skipping
		on if it is covered by another such node.
		*/
		get baseIndent() {
			return this.baseIndentFor(this.node);
		}
		/**
		Get the indentation for the reference line of the given node
		(see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
		*/
		baseIndentFor(node) {
			let line = this.state.doc.lineAt(node.from);
			// Skip line starts that are covered by a sibling (or cousin, etc)
			for (;;) {
				let atBreak = node.resolve(line.from);
				while (atBreak.parent && atBreak.parent.from == atBreak.from)
					atBreak = atBreak.parent;
				if (isParent(atBreak, node))
					break;
				line = this.state.doc.lineAt(atBreak.from);
			}
			return this.lineIndent(line.from);
		}
		/**
		Continue looking for indentations in the node's parent nodes,
		and return the result of that.
		*/
		continue() {
			return indentFor(this.context.next, this.base, this.pos);
		}
	}
	function isParent(parent, of) {
		for (let cur = of; cur; cur = cur.parent)
			if (parent == cur)
				return true;
		return false;
	}
	// Check whether a delimited node is aligned (meaning there are
	// non-skipped nodes on the same line as the opening delimiter). And
	// if so, return the opening token.
	function bracketedAligned(context) {
		let tree = context.node;
		let openToken = tree.childAfter(tree.from), last = tree.lastChild;
		if (!openToken)
			return null;
		let sim = context.options.simulateBreak;
		let openLine = context.state.doc.lineAt(openToken.from);
		let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
		for (let pos = openToken.to;;) {
			let next = tree.childAfter(pos);
			if (!next || next == last)
				return null;
			if (!next.type.isSkipped)
				return next.from < lineEnd ? openToken : null;
			pos = next.to;
		}
	}
	/**
	An indentation strategy for delimited (usually bracketed) nodes.
	Will, by default, indent one unit more than the parent's base
	indent unless the line starts with a closing token. When `align`
	is true and there are non-skipped nodes on the node's opening
	line, the content of the node will be aligned with the end of the
	opening node, like this:
	
		foo(bar,
			baz)
	*/
	function delimitedIndent({ closing, align = true, units = 1 }) {
		return (context) => delimitedStrategy(context, align, units, closing);
	}
	function delimitedStrategy(context, align, units, closing, closedAt) {
		let after = context.textAfter, space = after.match(/^\s*/)[0].length;
		let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
		let aligned = align ? bracketedAligned(context) : null;
		if (aligned)
			return closed ? context.column(aligned.from) : context.column(aligned.to);
		return context.baseIndent + (closed ? 0 : context.unit * units);
	}
	/**
	An indentation strategy that aligns a node's content to its base
	indentation.
	*/
	const flatIndent = (context) => context.baseIndent;
	/**
	Creates an indentation strategy that, by default, indents
	continued lines one unit more than the node's base indentation.
	You can provide `except` to prevent indentation of lines that
	match a pattern (for example `/^else\b/` in `if`/`else`
	constructs), and you can change the amount of units used with the
	`units` option.
	*/
	function continuedIndent({ except, units = 1 } = {}) {
		return (context) => {
			let matchExcept = except && except.test(context.textAfter);
			return context.baseIndent + (matchExcept ? 0 : units * context.unit);
		};
	}
	const DontIndentBeyond = 200;
	/**
	Enables reindentation on input. When a language defines an
	`indentOnInput` field in its [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
	expression, the line at the cursor will be reindented whenever new
	text is typed and the input from the start of the line up to the
	cursor matches that regexp.
	
	To avoid unneccesary reindents, it is recommended to start the
	regexp with `^` (usually followed by `\s*`), and end it with `$`.
	For example, `/^\s*\}$/` will reindent when a closing brace is
	added at the start of a line.
	*/
	function indentOnInput() {
		return state.EditorState.transactionFilter.of(tr => {
			if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
				return tr;
			let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
			if (!rules.length)
				return tr;
			let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
			if (head > line.from + DontIndentBeyond)
				return tr;
			let lineStart = doc.sliceString(line.from, head);
			if (!rules.some(r => r.test(lineStart)))
				return tr;
			let { state } = tr, last = -1, changes = [];
			for (let { head } of state.selection.ranges) {
				let line = state.doc.lineAt(head);
				if (line.from == last)
					continue;
				last = line.from;
				let indent = getIndentation(state, line.from);
				if (indent == null)
					continue;
				let cur = /^\s*/.exec(line.text)[0];
				let norm = indentString(state, indent);
				if (cur != norm)
					changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
			}
			return changes.length ? [tr, { changes, sequential: true }] : tr;
		});
	}
	
	/**
	A facet that registers a code folding service. When called with
	the extent of a line, such a function should return a foldable
	range that starts on that line (but continues beyond it), if one
	can be found.
	*/
	const foldService = state.Facet.define();
	/**
	This node prop is used to associate folding information with
	syntax node types. Given a syntax node, it should check whether
	that tree is foldable and return the range that can be collapsed
	when it is.
	*/
	const foldNodeProp = new common.NodeProp();
	/**
	[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
	the first and the last child of a syntax node. Useful for nodes
	that start and end with delimiters.
	*/
	function foldInside(node) {
		let first = node.firstChild, last = node.lastChild;
		return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
	}
	function syntaxFolding(state, start, end) {
		let tree = syntaxTree(state);
		if (tree.length < end)
			return null;
		let stack = tree.resolveStack(end, 1);
		let found = null;
		for (let iter = stack; iter; iter = iter.next) {
			let cur = iter.node;
			if (cur.to <= end || cur.from > end)
				continue;
			if (found && cur.from < start)
				break;
			let prop = cur.type.prop(foldNodeProp);
			if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
				let value = prop(cur, state);
				if (value && value.from <= end && value.from >= start && value.to > end)
					found = value;
			}
		}
		return found;
	}
	function isUnfinished(node) {
		let ch = node.lastChild;
		return ch && ch.to == node.to && ch.type.isError;
	}
	/**
	Check whether the given line is foldable. First asks any fold
	services registered through
	[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
	a result, tries to query the [fold node
	prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
	of the line.
	*/
	function foldable(state, lineStart, lineEnd) {
		for (let service of state.facet(foldService)) {
			let result = service(state, lineStart, lineEnd);
			if (result)
				return result;
		}
		return syntaxFolding(state, lineStart, lineEnd);
	}
	function mapRange(range, mapping) {
		let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
		return from >= to ? undefined : { from, to };
	}
	/**
	State effect that can be attached to a transaction to fold the
	given range. (You probably only need this in exceptional
	circumstances—usually you'll just want to let
	[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
	gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
	*/
	const foldEffect = state.StateEffect.define({ map: mapRange });
	/**
	State effect that unfolds the given range (if it was folded).
	*/
	const unfoldEffect = state.StateEffect.define({ map: mapRange });
	function selectedLines(view) {
		let lines = [];
		for (let { head } of view.state.selection.ranges) {
			if (lines.some(l => l.from <= head && l.to >= head))
				continue;
			lines.push(view.lineBlockAt(head));
		}
		return lines;
	}
	/**
	The state field that stores the folded ranges (as a [decoration
	set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
	[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
	[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
	state.
	*/
	const foldState = state.StateField.define({
		create() {
			return view.Decoration.none;
		},
		update(folded, tr) {
			folded = folded.map(tr.changes);
			for (let e of tr.effects) {
				if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
					let { preparePlaceholder } = tr.state.facet(foldConfig);
					let widget = !preparePlaceholder ? foldWidget :
						view.Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
					folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
				}
				else if (e.is(unfoldEffect)) {
					folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
						filterFrom: e.value.from, filterTo: e.value.to });
				}
			}
			// Clear folded ranges that cover the selection head
			if (tr.selection) {
				let onSelection = false, { head } = tr.selection.main;
				folded.between(head, head, (a, b) => { if (a < head && b > head)
					onSelection = true; });
				if (onSelection)
					folded = folded.update({
						filterFrom: head,
						filterTo: head,
						filter: (a, b) => b <= head || a >= head
					});
			}
			return folded;
		},
		provide: f => view.EditorView.decorations.from(f),
		toJSON(folded, state) {
			let ranges = [];
			folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
			return ranges;
		},
		fromJSON(value) {
			if (!Array.isArray(value) || value.length % 2)
				throw new RangeError("Invalid JSON for fold state");
			let ranges = [];
			for (let i = 0; i < value.length;) {
				let from = value[i++], to = value[i++];
				if (typeof from != "number" || typeof to != "number")
					throw new RangeError("Invalid JSON for fold state");
				ranges.push(foldWidget.range(from, to));
			}
			return view.Decoration.set(ranges, true);
		}
	});
	/**
	Get a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges
	in the given state.
	*/
	function foldedRanges(state$1) {
		return state$1.field(foldState, false) || state.RangeSet.empty;
	}
	function findFold(state, from, to) {
		var _a;
		let found = null;
		(_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
			if (!found || found.from > from)
				found = { from, to };
		});
		return found;
	}
	function foldExists(folded, from, to) {
		let found = false;
		folded.between(from, from, (a, b) => { if (a == from && b == to)
			found = true; });
		return found;
	}
	function maybeEnable(state$1, other) {
		return state$1.field(foldState, false) ? other : other.concat(state.StateEffect.appendConfig.of(codeFolding()));
	}
	/**
	Fold the lines that are selected, if possible.
	*/
	const foldCode = view => {
		for (let line of selectedLines(view)) {
			let range = foldable(view.state, line.from, line.to);
			if (range) {
				view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
				return true;
			}
		}
		return false;
	};
	/**
	Unfold folded ranges on selected lines.
	*/
	const unfoldCode = view => {
		if (!view.state.field(foldState, false))
			return false;
		let effects = [];
		for (let line of selectedLines(view)) {
			let folded = findFold(view.state, line.from, line.to);
			if (folded)
				effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
		}
		if (effects.length)
			view.dispatch({ effects });
		return effects.length > 0;
	};
	function announceFold(view$1, range, fold = true) {
		let lineFrom = view$1.state.doc.lineAt(range.from).number, lineTo = view$1.state.doc.lineAt(range.to).number;
		return view.EditorView.announce.of(`${view$1.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view$1.state.phrase("to")} ${lineTo}.`);
	}
	/**
	Fold all top-level foldable ranges. Note that, in most cases,
	folding information will depend on the [syntax
	tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
	reliably when the document hasn't been fully parsed (either
	because the editor state was only just initialized, or because the
	document is so big that the parser decided not to parse it
	entirely).
	*/
	const foldAll = view => {
		let { state } = view, effects = [];
		for (let pos = 0; pos < state.doc.length;) {
			let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
			if (range)
				effects.push(foldEffect.of(range));
			pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
		}
		if (effects.length)
			view.dispatch({ effects: maybeEnable(view.state, effects) });
		return !!effects.length;
	};
	/**
	Unfold all folded code.
	*/
	const unfoldAll = view => {
		let field = view.state.field(foldState, false);
		if (!field || !field.size)
			return false;
		let effects = [];
		field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
		view.dispatch({ effects });
		return true;
	};
	// Find the foldable region containing the given line, if one exists
	function foldableContainer(view, lineBlock) {
		// Look backwards through line blocks until we find a foldable region that
		// intersects with the line
		for (let line = lineBlock;;) {
			let foldableRegion = foldable(view.state, line.from, line.to);
			if (foldableRegion && foldableRegion.to > lineBlock.from)
				return foldableRegion;
			if (!line.from)
				return null;
			line = view.lineBlockAt(line.from - 1);
		}
	}
	/**
	Toggle folding at cursors. Unfolds if there is an existing fold
	starting in that line, tries to find a foldable range around it
	otherwise.
	*/
	const toggleFold = (view) => {
		let effects = [];
		for (let line of selectedLines(view)) {
			let folded = findFold(view.state, line.from, line.to);
			if (folded) {
				effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
			}
			else {
				let foldRange = foldableContainer(view, line);
				if (foldRange)
					effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));
			}
		}
		if (effects.length > 0)
			view.dispatch({ effects: maybeEnable(view.state, effects) });
		return !!effects.length;
	};
	/**
	Default fold-related key bindings.
	
	 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
	 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
	 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
	 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
	*/
	const foldKeymap = [
		{ key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
		{ key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
		{ key: "Ctrl-Alt-[", run: foldAll },
		{ key: "Ctrl-Alt-]", run: unfoldAll }
	];
	const defaultConfig = {
		placeholderDOM: null,
		preparePlaceholder: null,
		placeholderText: "…"
	};
	const foldConfig = state.Facet.define({
		combine(values) { return state.combineConfig(values, defaultConfig); }
	});
	/**
	Create an extension that configures code folding.
	*/
	function codeFolding(config) {
		let result = [foldState, baseTheme$1];
		if (config)
			result.push(foldConfig.of(config));
		return result;
	}
	function widgetToDOM(view, prepared) {
		let { state } = view, conf = state.facet(foldConfig);
		let onclick = (event) => {
			let line = view.lineBlockAt(view.posAtDOM(event.target));
			let folded = findFold(view.state, line.from, line.to);
			if (folded)
				view.dispatch({ effects: unfoldEffect.of(folded) });
			event.preventDefault();
		};
		if (conf.placeholderDOM)
			return conf.placeholderDOM(view, onclick, prepared);
		let element = document.createElement("span");
		element.textContent = conf.placeholderText;
		element.setAttribute("aria-label", state.phrase("folded code"));
		element.title = state.phrase("unfold");
		element.className = "cm-foldPlaceholder";
		element.onclick = onclick;
		return element;
	}
	const foldWidget = view.Decoration.replace({ widget: new class extends view.WidgetType {
			toDOM(view) { return widgetToDOM(view, null); }
		} });
	class PreparedFoldWidget extends view.WidgetType {
		constructor(value) {
			super();
			this.value = value;
		}
		eq(other) { return this.value == other.value; }
		toDOM(view) { return widgetToDOM(view, this.value); }
	}
	const foldGutterDefaults = {
		openText: "⌄",
		closedText: "›",
		markerDOM: null,
		domEventHandlers: {},
		foldingChanged: () => false
	};
	class FoldMarker extends view.GutterMarker {
		constructor(config, open) {
			super();
			this.config = config;
			this.open = open;
		}
		eq(other) { return this.config == other.config && this.open == other.open; }
		toDOM(view) {
			if (this.config.markerDOM)
				return this.config.markerDOM(this.open);
			let span = document.createElement("span");
			span.textContent = this.open ? this.config.openText : this.config.closedText;
			span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
			return span;
		}
	}
	/**
	Create an extension that registers a fold gutter, which shows a
	fold status indicator before foldable lines (which can be clicked
	to fold or unfold the line).
	*/
	function foldGutter(config = {}) {
		let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
		let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
		let markers = view.ViewPlugin.fromClass(class {
			constructor(view) {
				this.from = view.viewport.from;
				this.markers = this.buildMarkers(view);
			}
			update(update) {
				if (update.docChanged || update.viewportChanged ||
					update.startState.facet(language) != update.state.facet(language) ||
					update.startState.field(foldState, false) != update.state.field(foldState, false) ||
					syntaxTree(update.startState) != syntaxTree(update.state) ||
					fullConfig.foldingChanged(update))
					this.markers = this.buildMarkers(update.view);
			}
			buildMarkers(view) {
				let builder = new state.RangeSetBuilder();
				for (let line of view.viewportLineBlocks) {
					let mark = findFold(view.state, line.from, line.to) ? canUnfold
						: foldable(view.state, line.from, line.to) ? canFold : null;
					if (mark)
						builder.add(line.from, line.from, mark);
				}
				return builder.finish();
			}
		});
		let { domEventHandlers } = fullConfig;
		return [
			markers,
			view.gutter({
				class: "cm-foldGutter",
				markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || state.RangeSet.empty; },
				initialSpacer() {
					return new FoldMarker(fullConfig, false);
				},
				domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
						if (domEventHandlers.click && domEventHandlers.click(view, line, event))
							return true;
						let folded = findFold(view.state, line.from, line.to);
						if (folded) {
							view.dispatch({ effects: unfoldEffect.of(folded) });
							return true;
						}
						let range = foldable(view.state, line.from, line.to);
						if (range) {
							view.dispatch({ effects: foldEffect.of(range) });
							return true;
						}
						return false;
					} })
			}),
			codeFolding()
		];
	}
	const baseTheme$1 = view.EditorView.baseTheme({
		".cm-foldPlaceholder": {
			backgroundColor: "#eee",
			border: "1px solid #ddd",
			color: "#888",
			borderRadius: ".2em",
			margin: "0 1px",
			padding: "0 1px",
			cursor: "pointer"
		},
		".cm-foldGutter span": {
			padding: "0 1px",
			cursor: "pointer"
		}
	});
	
	/**
	A highlight style associates CSS styles with higlighting
	[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
	*/
	class HighlightStyle {
		constructor(
		/**
		The tag styles used to create this highlight style.
		*/
		specs, options) {
			this.specs = specs;
			let modSpec;
			function def(spec) {
				let cls = styleMod.StyleModule.newName();
				(modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
				return cls;
			}
			const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
			const scopeOpt = options.scope;
			this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
				: scopeOpt ? (type) => type == scopeOpt : undefined;
			this.style = highlight.tagHighlighter(specs.map(style => ({
				tag: style.tag,
				class: style.class || def(Object.assign({}, style, { tag: null }))
			})), {
				all,
			}).style;
			this.module = modSpec ? new styleMod.StyleModule(modSpec) : null;
			this.themeType = options.themeType;
		}
		/**
		Create a highlighter style that associates the given styles to
		the given tags. The specs must be objects that hold a style tag
		or array of tags in their `tag` property, and either a single
		`class` property providing a static CSS class (for highlighter
		that rely on external styling), or a
		[`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
		set of CSS properties (which define the styling for those tags).
		
		The CSS rules created for a highlighter will be emitted in the
		order of the spec's properties. That means that for elements that
		have multiple tags associated with them, styles defined further
		down in the list will have a higher CSS precedence than styles
		defined earlier.
		*/
		static define(specs, options) {
			return new HighlightStyle(specs, options || {});
		}
	}
	const highlighterFacet = state.Facet.define();
	const fallbackHighlighter = state.Facet.define({
		combine(values) { return values.length ? [values[0]] : null; }
	});
	function getHighlighters(state) {
		let main = state.facet(highlighterFacet);
		return main.length ? main : state.facet(fallbackHighlighter);
	}
	/**
	Wrap a highlighter in an editor extension that uses it to apply
	syntax highlighting to the editor content.
	
	When multiple (non-fallback) styles are provided, the styling
	applied is the union of the classes they emit.
	*/
	function syntaxHighlighting(highlighter, options) {
		let ext = [treeHighlighter], themeType;
		if (highlighter instanceof HighlightStyle) {
			if (highlighter.module)
				ext.push(view.EditorView.styleModule.of(highlighter.module));
			themeType = highlighter.themeType;
		}
		if (options === null || options === void 0 ? void 0 : options.fallback)
			ext.push(fallbackHighlighter.of(highlighter));
		else if (themeType)
			ext.push(highlighterFacet.computeN([view.EditorView.darkTheme], state => {
				return state.facet(view.EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
			}));
		else
			ext.push(highlighterFacet.of(highlighter));
		return ext;
	}
	/**
	Returns the CSS classes (if any) that the highlighters active in
	the state would assign to the given style
	[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and
	(optional) language
	[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).
	*/
	function highlightingFor(state, tags, scope) {
		let highlighters = getHighlighters(state);
		let result = null;
		if (highlighters)
			for (let highlighter of highlighters) {
				if (!highlighter.scope || scope && highlighter.scope(scope)) {
					let cls = highlighter.style(tags);
					if (cls)
						result = result ? result + " " + cls : cls;
				}
			}
		return result;
	}
	class TreeHighlighter {
		constructor(view) {
			this.markCache = Object.create(null);
			this.tree = syntaxTree(view.state);
			this.decorations = this.buildDeco(view, getHighlighters(view.state));
		}
		update(update) {
			let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
			let styleChange = highlighters != getHighlighters(update.startState);
			if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
				this.decorations = this.decorations.map(update.changes);
			}
			else if (tree != this.tree || update.viewportChanged || styleChange) {
				this.tree = tree;
				this.decorations = this.buildDeco(update.view, highlighters);
			}
		}
		buildDeco(view$1, highlighters) {
			if (!highlighters || !this.tree.length)
				return view.Decoration.none;
			let builder = new state.RangeSetBuilder();
			for (let { from, to } of view$1.visibleRanges) {
				highlight.highlightTree(this.tree, highlighters, (from, to, style) => {
					builder.add(from, to, this.markCache[style] || (this.markCache[style] = view.Decoration.mark({ class: style })));
				}, from, to);
			}
			return builder.finish();
		}
	}
	const treeHighlighter = state.Prec.high(view.ViewPlugin.fromClass(TreeHighlighter, {
		decorations: v => v.decorations
	}));
	/**
	A default highlight style (works well with light themes).
	*/
	const defaultHighlightStyle = HighlightStyle.define([
		{ tag: highlight.tags.meta,
			color: "#404740" },
		{ tag: highlight.tags.link,
			textDecoration: "underline" },
		{ tag: highlight.tags.heading,
			textDecoration: "underline",
			fontWeight: "bold" },
		{ tag: highlight.tags.emphasis,
			fontStyle: "italic" },
		{ tag: highlight.tags.strong,
			fontWeight: "bold" },
		{ tag: highlight.tags.strikethrough,
			textDecoration: "line-through" },
		{ tag: highlight.tags.keyword,
			color: "#708" },
		{ tag: [highlight.tags.atom, highlight.tags.bool, highlight.tags.url, highlight.tags.contentSeparator, highlight.tags.labelName],
			color: "#219" },
		{ tag: [highlight.tags.literal, highlight.tags.inserted],
			color: "#164" },
		{ tag: [highlight.tags.string, highlight.tags.deleted],
			color: "#a11" },
		{ tag: [highlight.tags.regexp, highlight.tags.escape, highlight.tags.special(highlight.tags.string)],
			color: "#e40" },
		{ tag: highlight.tags.definition(highlight.tags.variableName),
			color: "#00f" },
		{ tag: highlight.tags.local(highlight.tags.variableName),
			color: "#30a" },
		{ tag: [highlight.tags.typeName, highlight.tags.namespace],
			color: "#085" },
		{ tag: highlight.tags.className,
			color: "#167" },
		{ tag: [highlight.tags.special(highlight.tags.variableName), highlight.tags.macroName],
			color: "#256" },
		{ tag: highlight.tags.definition(highlight.tags.propertyName),
			color: "#00c" },
		{ tag: highlight.tags.comment,
			color: "#940" },
		{ tag: highlight.tags.invalid,
			color: "#f00" }
	]);
	
	const baseTheme = view.EditorView.baseTheme({
		"&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
		"&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
	});
	const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
	const bracketMatchingConfig = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				afterCursor: true,
				brackets: DefaultBrackets,
				maxScanDistance: DefaultScanDist,
				renderMatch: defaultRenderMatch
			});
		}
	});
	const matchingMark = view.Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = view.Decoration.mark({ class: "cm-nonmatchingBracket" });
	function defaultRenderMatch(match) {
		let decorations = [];
		let mark = match.matched ? matchingMark : nonmatchingMark;
		decorations.push(mark.range(match.start.from, match.start.to));
		if (match.end)
			decorations.push(mark.range(match.end.from, match.end.to));
		return decorations;
	}
	const bracketMatchingState = state.StateField.define({
		create() { return view.Decoration.none; },
		update(deco, tr) {
			if (!tr.docChanged && !tr.selection)
				return deco;
			let decorations = [];
			let config = tr.state.facet(bracketMatchingConfig);
			for (let range of tr.state.selection.ranges) {
				if (!range.empty)
					continue;
				let match = matchBrackets(tr.state, range.head, -1, config)
					|| (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
					|| (config.afterCursor &&
						(matchBrackets(tr.state, range.head, 1, config) ||
							(range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
				if (match)
					decorations = decorations.concat(config.renderMatch(match, tr.state));
			}
			return view.Decoration.set(decorations, true);
		},
		provide: f => view.EditorView.decorations.from(f)
	});
	const bracketMatchingUnique = [
		bracketMatchingState,
		baseTheme
	];
	/**
	Create an extension that enables bracket matching. Whenever the
	cursor is next to a bracket, that bracket and the one it matches
	are highlighted. Or, when no matching bracket is found, another
	highlighting style is used to indicate this.
	*/
	function bracketMatching(config = {}) {
		return [bracketMatchingConfig.of(config), bracketMatchingUnique];
	}
	/**
	When larger syntax nodes, such as HTML tags, are marked as
	opening/closing, it can be a bit messy to treat the whole node as
	a matchable bracket. This node prop allows you to define, for such
	a node, a ‘handle’—the part of the node that is highlighted, and
	that the cursor must be on to activate highlighting in the first
	place.
	*/
	const bracketMatchingHandle = new common.NodeProp();
	function matchingNodes(node, dir, brackets) {
		let byProp = node.prop(dir < 0 ? common.NodeProp.openedBy : common.NodeProp.closedBy);
		if (byProp)
			return byProp;
		if (node.name.length == 1) {
			let index = brackets.indexOf(node.name);
			if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
				return [brackets[index + dir]];
		}
		return null;
	}
	function findHandle(node) {
		let hasHandle = node.type.prop(bracketMatchingHandle);
		return hasHandle ? hasHandle(node.node) : node;
	}
	/**
	Find the matching bracket for the token at `pos`, scanning
	direction `dir`. Only the `brackets` and `maxScanDistance`
	properties are used from `config`, if given. Returns null if no
	bracket was found at `pos`, or a match result otherwise.
	*/
	function matchBrackets(state, pos, dir, config = {}) {
		let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
		let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
		for (let cur = node; cur; cur = cur.parent) {
			let matches = matchingNodes(cur.type, dir, brackets);
			if (matches && cur.from < cur.to) {
				let handle = findHandle(cur);
				if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
					return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
			}
		}
		return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
	}
	function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
		let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
		let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
		if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
			do {
				if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
					if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
						let endHandle = findHandle(cursor);
						return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
					}
					else if (matchingNodes(cursor.type, dir, brackets)) {
						depth++;
					}
					else if (matchingNodes(cursor.type, -dir, brackets)) {
						if (depth == 0) {
							let endHandle = findHandle(cursor);
							return {
								start: firstToken,
								end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
								matched: false
							};
						}
						depth--;
					}
				}
			} while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
		return { start: firstToken, matched: false };
	}
	function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
		let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
		let bracket = brackets.indexOf(startCh);
		if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
			return null;
		let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
		let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
		for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
			let text = iter.value;
			if (dir < 0)
				distance += text.length;
			let basePos = pos + distance * dir;
			for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
				let found = brackets.indexOf(text[pos]);
				if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
					continue;
				if ((found % 2 == 0) == (dir > 0)) {
					depth++;
				}
				else if (depth == 1) { // Closing
					return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
				}
				else {
					depth--;
				}
			}
			if (dir > 0)
				distance += text.length;
		}
		return iter.done ? { start: startToken, matched: false } : null;
	}
	
	// Counts the column offset in a string, taking tabs into account.
	// Used mostly to find indentation.
	function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
		if (end == null) {
			end = string.search(/[^\s\u00a0]/);
			if (end == -1)
				end = string.length;
		}
		let n = startValue;
		for (let i = startIndex; i < end; i++) {
			if (string.charCodeAt(i) == 9)
				n += tabSize - (n % tabSize);
			else
				n++;
		}
		return n;
	}
	/**
	Encapsulates a single line of input. Given to stream syntax code,
	which uses it to tokenize the content.
	*/
	class StringStream {
		/**
		Create a stream.
		*/
		constructor(
		/**
		The line.
		*/
		string, tabSize, 
		/**
		The current indent unit size.
		*/
		indentUnit, overrideIndent) {
			this.string = string;
			this.tabSize = tabSize;
			this.indentUnit = indentUnit;
			this.overrideIndent = overrideIndent;
			/**
			The current position on the line.
			*/
			this.pos = 0;
			/**
			The start position of the current token.
			*/
			this.start = 0;
			this.lastColumnPos = 0;
			this.lastColumnValue = 0;
		}
		/**
		True if we are at the end of the line.
		*/
		eol() { return this.pos >= this.string.length; }
		/**
		True if we are at the start of the line.
		*/
		sol() { return this.pos == 0; }
		/**
		Get the next code unit after the current position, or undefined
		if we're at the end of the line.
		*/
		peek() { return this.string.charAt(this.pos) || undefined; }
		/**
		Read the next code unit and advance `this.pos`.
		*/
		next() {
			if (this.pos < this.string.length)
				return this.string.charAt(this.pos++);
		}
		/**
		Match the next character against the given string, regular
		expression, or predicate. Consume and return it if it matches.
		*/
		eat(match) {
			let ch = this.string.charAt(this.pos);
			let ok;
			if (typeof match == "string")
				ok = ch == match;
			else
				ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
			if (ok) {
				++this.pos;
				return ch;
			}
		}
		/**
		Continue matching characters that match the given string,
		regular expression, or predicate function. Return true if any
		characters were consumed.
		*/
		eatWhile(match) {
			let start = this.pos;
			while (this.eat(match)) { }
			return this.pos > start;
		}
		/**
		Consume whitespace ahead of `this.pos`. Return true if any was
		found.
		*/
		eatSpace() {
			let start = this.pos;
			while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
				++this.pos;
			return this.pos > start;
		}
		/**
		Move to the end of the line.
		*/
		skipToEnd() { this.pos = this.string.length; }
		/**
		Move to directly before the given character, if found on the
		current line.
		*/
		skipTo(ch) {
			let found = this.string.indexOf(ch, this.pos);
			if (found > -1) {
				this.pos = found;
				return true;
			}
		}
		/**
		Move back `n` characters.
		*/
		backUp(n) { this.pos -= n; }
		/**
		Get the column position at `this.pos`.
		*/
		column() {
			if (this.lastColumnPos < this.start) {
				this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
				this.lastColumnPos = this.start;
			}
			return this.lastColumnValue;
		}
		/**
		Get the indentation column of the current line.
		*/
		indentation() {
			var _a;
			return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);
		}
		/**
		Match the input against the given string or regular expression
		(which should start with a `^`). Return true or the regexp match
		if it matches.
		
		Unless `consume` is set to `false`, this will move `this.pos`
		past the matched text.
		
		When matching a string `caseInsensitive` can be set to true to
		make the match case-insensitive.
		*/
		match(pattern, consume, caseInsensitive) {
			if (typeof pattern == "string") {
				let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
				let substr = this.string.substr(this.pos, pattern.length);
				if (cased(substr) == cased(pattern)) {
					if (consume !== false)
						this.pos += pattern.length;
					return true;
				}
				else
					return null;
			}
			else {
				let match = this.string.slice(this.pos).match(pattern);
				if (match && match.index > 0)
					return null;
				if (match && consume !== false)
					this.pos += match[0].length;
				return match;
			}
		}
		/**
		Get the current token.
		*/
		current() { return this.string.slice(this.start, this.pos); }
	}
	
	function fullParser(spec) {
		return {
			name: spec.name || "",
			token: spec.token,
			blankLine: spec.blankLine || (() => { }),
			startState: spec.startState || (() => true),
			copyState: spec.copyState || defaultCopyState,
			indent: spec.indent || (() => null),
			languageData: spec.languageData || {},
			tokenTable: spec.tokenTable || noTokens
		};
	}
	function defaultCopyState(state) {
		if (typeof state != "object")
			return state;
		let newState = {};
		for (let prop in state) {
			let val = state[prop];
			newState[prop] = (val instanceof Array ? val.slice() : val);
		}
		return newState;
	}
	const IndentedFrom = new WeakMap();
	/**
	A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror
	5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).
	*/
	class StreamLanguage extends Language {
		constructor(parser) {
			let data = defineLanguageFacet(parser.languageData);
			let p = fullParser(parser), self;
			let impl = new class extends common.Parser {
				createParse(input, fragments, ranges) {
					return new Parse(self, input, fragments, ranges);
				}
			};
			super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);
			this.topNode = docID(data);
			self = this;
			this.streamParser = p;
			this.stateAfter = new common.NodeProp({ perNode: true });
			this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
		}
		/**
		Define a stream language.
		*/
		static define(spec) { return new StreamLanguage(spec); }
		getIndent(cx, pos) {
			let tree = syntaxTree(cx.state), at = tree.resolve(pos);
			while (at && at.type != this.topNode)
				at = at.parent;
			if (!at)
				return null;
			let from = undefined;
			let { overrideIndentation } = cx.options;
			if (overrideIndentation) {
				from = IndentedFrom.get(cx.state);
				if (from != null && from < pos - 1e4)
					from = undefined;
			}
			let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;
			if (start) {
				state = start.state;
				statePos = start.pos + 1;
			}
			else {
				state = this.streamParser.startState(cx.unit);
				statePos = 0;
			}
			if (pos - statePos > 10000 /* C.MaxIndentScanDist */)
				return null;
			while (statePos < pos) {
				let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);
				if (line.length) {
					let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;
					let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);
					while (stream.pos < end - line.from)
						readToken(this.streamParser.token, stream, state);
				}
				else {
					this.streamParser.blankLine(state, cx.unit);
				}
				if (end == pos)
					break;
				statePos = line.to + 1;
			}
			let line = cx.lineAt(pos);
			if (overrideIndentation && from == null)
				IndentedFrom.set(cx.state, line.from);
			return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx);
		}
		get allowsNesting() { return false; }
	}
	function findState(lang, tree, off, startPos, before) {
		let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
		if (state)
			return { state: lang.streamParser.copyState(state), pos: off + tree.length };
		for (let i = tree.children.length - 1; i >= 0; i--) {
			let child = tree.children[i], pos = off + tree.positions[i];
			let found = child instanceof common.Tree && pos < before && findState(lang, child, pos, startPos, before);
			if (found)
				return found;
		}
		return null;
	}
	function cutTree(lang, tree, from, to, inside) {
		if (inside && from <= 0 && to >= tree.length)
			return tree;
		if (!inside && tree.type == lang.topNode)
			inside = true;
		for (let i = tree.children.length - 1; i >= 0; i--) {
			let pos = tree.positions[i], child = tree.children[i], inner;
			if (pos < to && child instanceof common.Tree) {
				if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))
					break;
				return !inside ? inner
					: new common.Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
			}
		}
		return null;
	}
	function findStartInFragments(lang, fragments, startPos, editorState) {
		for (let f of fragments) {
			let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
			let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
			if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
				return { state: found.state, tree };
		}
		return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: common.Tree.empty };
	}
	class Parse {
		constructor(lang, input, fragments, ranges) {
			this.lang = lang;
			this.input = input;
			this.fragments = fragments;
			this.ranges = ranges;
			this.stoppedAt = null;
			this.chunks = [];
			this.chunkPos = [];
			this.chunk = [];
			this.chunkReused = undefined;
			this.rangeIndex = 0;
			this.to = ranges[ranges.length - 1].to;
			let context = ParseContext.get(), from = ranges[0].from;
			let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
			this.state = state;
			this.parsedPos = this.chunkStart = from + tree.length;
			for (let i = 0; i < tree.children.length; i++) {
				this.chunks.push(tree.children[i]);
				this.chunkPos.push(tree.positions[i]);
			}
			if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {
				this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
				context.skipUntilInView(this.parsedPos, context.viewport.from);
				this.parsedPos = context.viewport.from;
			}
			this.moveRangeIndex();
		}
		advance() {
			let context = ParseContext.get();
			let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
			let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);
			if (context)
				end = Math.min(end, context.viewport.to);
			while (this.parsedPos < end)
				this.parseLine(context);
			if (this.chunkStart < this.parsedPos)
				this.finishChunk();
			if (this.parsedPos >= parseEnd)
				return this.finish();
			if (context && this.parsedPos >= context.viewport.to) {
				context.skipUntilInView(this.parsedPos, parseEnd);
				return this.finish();
			}
			return null;
		}
		stopAt(pos) {
			this.stoppedAt = pos;
		}
		lineAfter(pos) {
			let chunk = this.input.chunk(pos);
			if (!this.input.lineChunks) {
				let eol = chunk.indexOf("\n");
				if (eol > -1)
					chunk = chunk.slice(0, eol);
			}
			else if (chunk == "\n") {
				chunk = "";
			}
			return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
		}
		nextLine() {
			let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;
			for (let index = this.rangeIndex;;) {
				let rangeEnd = this.ranges[index].to;
				if (rangeEnd >= end)
					break;
				line = line.slice(0, rangeEnd - (end - line.length));
				index++;
				if (index == this.ranges.length)
					break;
				let rangeStart = this.ranges[index].from;
				let after = this.lineAfter(rangeStart);
				line += after;
				end = rangeStart + after.length;
			}
			return { line, end };
		}
		skipGapsTo(pos, offset, side) {
			for (;;) {
				let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
				if (side > 0 ? end > offPos : end >= offPos)
					break;
				let start = this.ranges[++this.rangeIndex].from;
				offset += start - end;
			}
			return offset;
		}
		moveRangeIndex() {
			while (this.ranges[this.rangeIndex].to < this.parsedPos)
				this.rangeIndex++;
		}
		emitToken(id, from, to, size, offset) {
			if (this.ranges.length > 1) {
				offset = this.skipGapsTo(from, offset, 1);
				from += offset;
				let len0 = this.chunk.length;
				offset = this.skipGapsTo(to, offset, -1);
				to += offset;
				size += this.chunk.length - len0;
			}
			this.chunk.push(id, from, to, size);
			return offset;
		}
		parseLine(context) {
			let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
			let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
			if (stream.eol()) {
				streamParser.blankLine(this.state, stream.indentUnit);
			}
			else {
				while (!stream.eol()) {
					let token = readToken(streamParser.token, stream, this.state);
					if (token)
						offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
					if (stream.start > 10000 /* C.MaxLineLength */)
						break;
				}
			}
			this.parsedPos = end;
			this.moveRangeIndex();
			if (this.parsedPos < this.to)
				this.parsedPos++;
		}
		finishChunk() {
			let tree = common.Tree.build({
				buffer: this.chunk,
				start: this.chunkStart,
				length: this.parsedPos - this.chunkStart,
				nodeSet,
				topID: 0,
				maxBufferLength: 2048 /* C.ChunkSize */,
				reused: this.chunkReused
			});
			tree = new common.Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
			this.chunks.push(tree);
			this.chunkPos.push(this.chunkStart - this.ranges[0].from);
			this.chunk = [];
			this.chunkReused = undefined;
			this.chunkStart = this.parsedPos;
		}
		finish() {
			return new common.Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
		}
	}
	function readToken(token, stream, state) {
		stream.start = stream.pos;
		for (let i = 0; i < 10; i++) {
			let result = token(stream, state);
			if (stream.pos > stream.start)
				return result;
		}
		throw new Error("Stream parser failed to advance stream.");
	}
	const noTokens = Object.create(null);
	const typeArray = [common.NodeType.none];
	const nodeSet = new common.NodeSet(typeArray);
	const warned = [];
	// Cache of node types by name and tags
	const byTag = Object.create(null);
	const defaultTable = Object.create(null);
	for (let [legacyName, name] of [
		["variable", "variableName"],
		["variable-2", "variableName.special"],
		["string-2", "string.special"],
		["def", "variableName.definition"],
		["tag", "tagName"],
		["attribute", "attributeName"],
		["type", "typeName"],
		["builtin", "variableName.standard"],
		["qualifier", "modifier"],
		["error", "invalid"],
		["header", "heading"],
		["property", "propertyName"]
	])
		defaultTable[legacyName] = createTokenType(noTokens, name);
	class TokenTable {
		constructor(extra) {
			this.extra = extra;
			this.table = Object.assign(Object.create(null), defaultTable);
		}
		resolve(tag) {
			return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
		}
	}
	const defaultTokenTable = new TokenTable(noTokens);
	function warnForPart(part, msg) {
		if (warned.indexOf(part) > -1)
			return;
		warned.push(part);
		console.warn(msg);
	}
	function createTokenType(extra, tagStr) {
		let tags = [];
		for (let name of tagStr.split(" ")) {
			let found = [];
			for (let part of name.split(".")) {
				let value = (extra[part] || highlight.tags[part]);
				if (!value) {
					warnForPart(part, `Unknown highlighting tag ${part}`);
				}
				else if (typeof value == "function") {
					if (!found.length)
						warnForPart(part, `Modifier ${part} used at start of tag`);
					else
						found = found.map(value);
				}
				else {
					if (found.length)
						warnForPart(part, `Tag ${part} used as modifier`);
					else
						found = Array.isArray(value) ? value : [value];
				}
			}
			for (let tag of found)
				tags.push(tag);
		}
		if (!tags.length)
			return 0;
		let name = tagStr.replace(/ /g, "_"), key = name + " " + tags.map(t => t.id);
		let known = byTag[key];
		if (known)
			return known.id;
		let type = byTag[key] = common.NodeType.define({
			id: typeArray.length,
			name,
			props: [highlight.styleTags({ [name]: tags })]
		});
		typeArray.push(type);
		return type.id;
	}
	function docID(data) {
		let type = common.NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data)], top: true });
		typeArray.push(type);
		return type;
	}
	
	exports.DocInput = DocInput;
	exports.HighlightStyle = HighlightStyle;
	exports.IndentContext = IndentContext;
	exports.LRLanguage = LRLanguage;
	exports.Language = Language;
	exports.LanguageDescription = LanguageDescription;
	exports.LanguageSupport = LanguageSupport;
	exports.ParseContext = ParseContext;
	exports.StreamLanguage = StreamLanguage;
	exports.StringStream = StringStream;
	exports.TreeIndentContext = TreeIndentContext;
	exports.bracketMatching = bracketMatching;
	exports.bracketMatchingHandle = bracketMatchingHandle;
	exports.codeFolding = codeFolding;
	exports.continuedIndent = continuedIndent;
	exports.defaultHighlightStyle = defaultHighlightStyle;
	exports.defineLanguageFacet = defineLanguageFacet;
	exports.delimitedIndent = delimitedIndent;
	exports.ensureSyntaxTree = ensureSyntaxTree;
	exports.flatIndent = flatIndent;
	exports.foldAll = foldAll;
	exports.foldCode = foldCode;
	exports.foldEffect = foldEffect;
	exports.foldGutter = foldGutter;
	exports.foldInside = foldInside;
	exports.foldKeymap = foldKeymap;
	exports.foldNodeProp = foldNodeProp;
	exports.foldService = foldService;
	exports.foldState = foldState;
	exports.foldable = foldable;
	exports.foldedRanges = foldedRanges;
	exports.forceParsing = forceParsing;
	exports.getIndentUnit = getIndentUnit;
	exports.getIndentation = getIndentation;
	exports.highlightingFor = highlightingFor;
	exports.indentNodeProp = indentNodeProp;
	exports.indentOnInput = indentOnInput;
	exports.indentRange = indentRange;
	exports.indentService = indentService;
	exports.indentString = indentString;
	exports.indentUnit = indentUnit;
	exports.language = language;
	exports.languageDataProp = languageDataProp;
	exports.matchBrackets = matchBrackets;
	exports.sublanguageProp = sublanguageProp;
	exports.syntaxHighlighting = syntaxHighlighting;
	exports.syntaxParserRunning = syntaxParserRunning;
	exports.syntaxTree = syntaxTree;
	exports.syntaxTreeAvailable = syntaxTreeAvailable;
	exports.toggleFold = toggleFold;
	exports.unfoldAll = unfoldAll;
	exports.unfoldCode = unfoldCode;
	exports.unfoldEffect = unfoldEffect;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/language/node_modules/style-mod/dist/style-mod.cjs":
	/*!*********************************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/language/node_modules/style-mod/dist/style-mod.cjs ***!
	  \*********************************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	var C = "\u037c"
	var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C)
	var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet")
	var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {}
	
	// :: - Style modules encapsulate a set of CSS rules defined from
	// JavaScript. Their definitions are only available in a given DOM
	// root after it has been _mounted_ there with `StyleModule.mount`.
	//
	// Style modules should be created once and stored somewhere, as
	// opposed to re-creating them every time you need them. The amount of
	// CSS rules generated for a given DOM root is bounded by the amount
	// of style modules that were used. So to avoid leaking rules, don't
	// create these dynamically, but treat them as one-time allocations.
	var StyleModule = exports.StyleModule = function StyleModule(spec, options) {
	  this.rules = []
	  var ref = options || {};
	  var finish = ref.finish;
	
	  function splitSelector(selector) {
		return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
	  }
	
	  function render(selectors, spec, target, isKeyframes) {
		var local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes"
		if (isAt && spec == null) { return target.push(selectors[0] + ";") }
		for (var prop in spec) {
		  var value = spec[prop]
		  if (/&/.test(prop)) {
			render(prop.split(/,\s*/).map(function (part) { return selectors.map(function (sel) { return part.replace(/&/, sel); }); }).reduce(function (a, b) { return a.concat(b); }),
				   value, target)
		  } else if (value && typeof value == "object") {
			if (!isAt) { throw new RangeError("The value of a property (" + prop + ") should be a primitive value.") }
			render(splitSelector(prop), value, local, keyframes)
		  } else if (value != null) {
			local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) { return "-" + l.toLowerCase(); }) + ": " + value + ";")
		  }
		}
		if (local.length || keyframes) {
		  target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
					  " {" + local.join(" ") + "}")
		}
	  }
	
	  for (var prop in spec) { render(splitSelector(prop), spec[prop], this.rules) }
	};
	
	// :: () → string
	// Returns a string containing the module's CSS rules.
	StyleModule.prototype.getRules = function getRules () { return this.rules.join("\n") };
	
	// :: () → string
	// Generate a new unique CSS class name.
	StyleModule.newName = function newName () {
	  var id = top[COUNT] || 1
	  top[COUNT] = id + 1
	  return C + id.toString(36)
	};
	
	// :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
	//
	// Mount the given set of modules in the given DOM root, which ensures
	// that the CSS rules defined by the module are available in that
	// context.
	//
	// Rules are only added to the document once per root.
	//
	// Rule order will follow the order of the modules, so that rules from
	// modules later in the array take precedence of those from earlier
	// modules. If you call this function multiple times for the same root
	// in a way that changes the order of already mounted modules, the old
	// order will be changed.
	StyleModule.mount = function mount (root, modules) {
	  (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules])
	};
	
	var adoptedSet = null
	
	var StyleSet = function StyleSet(root) {
	  if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
		if (adoptedSet) {
		  root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets)
		  return root[SET] = adoptedSet
		}
		this.sheet = new CSSStyleSheet
		root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets)
		adoptedSet = this
	  } else {
		this.styleTag = (root.ownerDocument || root).createElement("style")
		var target = root.head || root
		target.insertBefore(this.styleTag, target.firstChild)
	  }
	  this.modules = []
	  root[SET] = this
	};
	
	StyleSet.prototype.mount = function mount (modules) {
	  var sheet = this.sheet
	  var pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */
	  for (var i = 0; i < modules.length; i++) {
		var mod = modules[i], index = this.modules.indexOf(mod)
		if (index < j && index > -1) { // Ordering conflict
		  this.modules.splice(index, 1)
		  j--
		  index = -1
		}
		if (index == -1) {
		  this.modules.splice(j++, 0, mod)
		  if (sheet) { for (var k = 0; k < mod.rules.length; k++)
			{ sheet.insertRule(mod.rules[k], pos++) } }
		} else {
		  while (j < index) { pos += this.modules[j++].rules.length }
		  pos += mod.rules.length
		  j++
		}
	  }
	
	  if (!sheet) {
		var text = ""
		for (var i$1 = 0; i$1 < this.modules.length; i$1++)
		  { text += this.modules[i$1].getRules() + "\n" }
		this.styleTag.textContent = text
	  }
	};
	
	// Style::Object<union<Style,string>>
	//
	// A style is an object that, in the simple case, maps CSS property
	// names to strings holding their values, as in `{color: "red",
	// fontWeight: "bold"}`. The property names can be given in
	// camel-case—the library will insert a dash before capital letters
	// when converting them to CSS.
	//
	// If you include an underscore in a property name, it and everything
	// after it will be removed from the output, which can be useful when
	// providing a property multiple times, for browser compatibility
	// reasons.
	//
	// A property in a style object can also be a sub-selector, which
	// extends the current context to add a pseudo-selector or a child
	// selector. Such a property should contain a `&` character, which
	// will be replaced by the current selector. For example `{"&:before":
	// {content: '"hi"'}}`. Sub-selectors and regular properties can
	// freely be mixed in a given object. Any property containing a `&` is
	// assumed to be a sub-selector.
	//
	// Finally, a property can specify an @-block to be wrapped around the
	// styles defined inside the object that's the property's value. For
	// example to create a media query you can do `{"@media screen and
	// (min-width: 400px)": {...}}`.
	
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/apl.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/apl.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var builtInFuncs = {
	  "+": ["conjugate", "add"],
	  "−": ["negate", "subtract"],
	  "×": ["signOf", "multiply"],
	  "÷": ["reciprocal", "divide"],
	  "⌈": ["ceiling", "greaterOf"],
	  "⌊": ["floor", "lesserOf"],
	  "∣": ["absolute", "residue"],
	  "⍳": ["indexGenerate", "indexOf"],
	  "?": ["roll", "deal"],
	  "⋆": ["exponentiate", "toThePowerOf"],
	  "⍟": ["naturalLog", "logToTheBase"],
	  "○": ["piTimes", "circularFuncs"],
	  "!": ["factorial", "binomial"],
	  "⌹": ["matrixInverse", "matrixDivide"],
	  "<": [null, "lessThan"],
	  "≤": [null, "lessThanOrEqual"],
	  "=": [null, "equals"],
	  ">": [null, "greaterThan"],
	  "≥": [null, "greaterThanOrEqual"],
	  "≠": [null, "notEqual"],
	  "≡": ["depth", "match"],
	  "≢": [null, "notMatch"],
	  "∈": ["enlist", "membership"],
	  "⍷": [null, "find"],
	  "∪": ["unique", "union"],
	  "∩": [null, "intersection"],
	  "∼": ["not", "without"],
	  "∨": [null, "or"],
	  "∧": [null, "and"],
	  "⍱": [null, "nor"],
	  "⍲": [null, "nand"],
	  "⍴": ["shapeOf", "reshape"],
	  ",": ["ravel", "catenate"],
	  "⍪": [null, "firstAxisCatenate"],
	  "⌽": ["reverse", "rotate"],
	  "⊖": ["axis1Reverse", "axis1Rotate"],
	  "⍉": ["transpose", null],
	  "↑": ["first", "take"],
	  "↓": [null, "drop"],
	  "⊂": ["enclose", "partitionWithAxis"],
	  "⊃": ["diclose", "pick"],
	  "⌷": [null, "index"],
	  "⍋": ["gradeUp", null],
	  "⍒": ["gradeDown", null],
	  "⊤": ["encode", null],
	  "⊥": ["decode", null],
	  "⍕": ["format", "formatByExample"],
	  "⍎": ["execute", null],
	  "⊣": ["stop", "left"],
	  "⊢": ["pass", "right"]
	};
	
	var isOperator = /[\.\/⌿⍀¨⍣]/;
	var isNiladic = /⍬/;
	var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
	var isArrow = /←/;
	var isComment = /[⍝#].*$/;
	
	var stringEater = function(type) {
	  var prev;
	  prev = false;
	  return function(c) {
		prev = c;
		if (c === type) {
		  return prev === "\\";
		}
		return true;
	  };
	};
	
	const apl = {
	  name: "apl",
	  startState: function() {
		return {
		  prev: false,
		  func: false,
		  op: false,
		  string: false,
		  escape: false
		};
	  },
	  token: function(stream, state) {
		var ch;
		if (stream.eatSpace()) {
		  return null;
		}
		ch = stream.next();
		if (ch === '"' || ch === "'") {
		  stream.eatWhile(stringEater(ch));
		  stream.next();
		  state.prev = true;
		  return "string";
		}
		if (/[\[{\(]/.test(ch)) {
		  state.prev = false;
		  return null;
		}
		if (/[\]}\)]/.test(ch)) {
		  state.prev = true;
		  return null;
		}
		if (isNiladic.test(ch)) {
		  state.prev = false;
		  return "atom";
		}
		if (/[¯\d]/.test(ch)) {
		  if (state.func) {
			state.func = false;
			state.prev = false;
		  } else {
			state.prev = true;
		  }
		  stream.eatWhile(/[\w\.]/);
		  return "number";
		}
		if (isOperator.test(ch)) {
		  return "operator"
		}
		if (isArrow.test(ch)) {
		  return "operator";
		}
		if (isFunction.test(ch)) {
		  state.func = true;
		  state.prev = false;
		  return builtInFuncs[ch] ? "variableName.function.standard" : "variableName.function"
		}
		if (isComment.test(ch)) {
		  stream.skipToEnd();
		  return "comment";
		}
		if (ch === "∘" && stream.peek() === ".") {
		  stream.next();
		  return "variableName.function";
		}
		stream.eatWhile(/[\w\$_]/);
		state.prev = true;
		return "keyword";
	  }
	};
	
	exports.apl = apl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/asciiarmor.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/asciiarmor.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function errorIfNotEmpty(stream) {
	  var nonWS = stream.match(/^\s*\S/);
	  stream.skipToEnd();
	  return nonWS ? "error" : null;
	}
	
	const asciiArmor = {
	  name: "asciiarmor",
	  token: function(stream, state) {
		var m;
		if (state.state == "top") {
		  if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
			state.state = "headers";
			state.type = m[1];
			return "tag";
		  }
		  return errorIfNotEmpty(stream);
		} else if (state.state == "headers") {
		  if (stream.sol() && stream.match(/^\w+:/)) {
			state.state = "header";
			return "atom";
		  } else {
			var result = errorIfNotEmpty(stream);
			if (result) state.state = "body";
			return result;
		  }
		} else if (state.state == "header") {
		  stream.skipToEnd();
		  state.state = "headers";
		  return "string";
		} else if (state.state == "body") {
		  if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
			if (m[1] != state.type) return "error";
			state.state = "end";
			return "tag";
		  } else {
			if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
			  return null;
			} else {
			  stream.next();
			  return "error";
			}
		  }
		} else if (state.state == "end") {
		  return errorIfNotEmpty(stream);
		}
	  },
	  blankLine: function(state) {
		if (state.state == "headers") state.state = "body";
	  },
	  startState: function() {
		return {state: "top", type: null};
	  }
	};
	
	exports.asciiArmor = asciiArmor;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/asn1.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/asn1.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	const defaults = {
	  keywords: words("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION" +
					  " REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED" +
					  " WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN" +
					  " IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS" +
					  " MINACCESS MAXACCESS REVISION STATUS DESCRIPTION" +
					  " SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName" +
					  " ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY" +
					  " IMPLIED EXPORTS"),
	  cmipVerbs: words("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
	  compareTypes: words("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY" +
						  " MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY" +
						  " OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL" +
						  " SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL" +
						  " TEXTUAL-CONVENTION"),
	  status: words("current deprecated mandatory obsolete"),
	  tags: words("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS" +
				  " UNIVERSAL"),
	  storage: words("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING" +
					 " UTCTime InterfaceIndex IANAifType CMIP-Attribute" +
					 " REAL PACKAGE PACKAGES IpAddress PhysAddress" +
					 " NetworkAddress BITS BMPString TimeStamp TimeTicks" +
					 " TruthValue RowStatus DisplayString GeneralString" +
					 " GraphicString IA5String NumericString" +
					 " PrintableString SnmpAdminString TeletexString" +
					 " UTF8String VideotexString VisibleString StringStore" +
					 " ISO646String T61String UniversalString Unsigned32" +
					 " Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
	  modifier: words("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS" +
					  " GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS" +
					  " DEFINED"),
	  accessTypes: words("not-accessible accessible-for-notify read-only" +
						 " read-create read-write"),
	  multiLineStrings: true
	};
	
	function asn1(parserConfig) {
	  var keywords = parserConfig.keywords || defaults.keywords,
		  cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,
		  compareTypes = parserConfig.compareTypes || defaults.compareTypes,
		  status = parserConfig.status || defaults.status,
		  tags = parserConfig.tags || defaults.tags,
		  storage = parserConfig.storage || defaults.storage,
		  modifier = parserConfig.modifier || defaults.modifier,
		  accessTypes = parserConfig.accessTypes|| defaults.accessTypes,
		  multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,
		  indentStatements = parserConfig.indentStatements !== false;
	  var isOperatorChar = /[\|\^]/;
	  var curPunc;
	
	  function tokenBase(stream, state) {
		var ch = stream.next();
		if (ch == '"' || ch == "'") {
		  state.tokenize = tokenString(ch);
		  return state.tokenize(stream, state);
		}
		if (/[\[\]\(\){}:=,;]/.test(ch)) {
		  curPunc = ch;
		  return "punctuation";
		}
		if (ch == "-"){
		  if (stream.eat("-")) {
			stream.skipToEnd();
			return "comment";
		  }
		}
		if (/\d/.test(ch)) {
		  stream.eatWhile(/[\w\.]/);
		  return "number";
		}
		if (isOperatorChar.test(ch)) {
		  stream.eatWhile(isOperatorChar);
		  return "operator";
		}
	
		stream.eatWhile(/[\w\-]/);
		var cur = stream.current();
		if (keywords.propertyIsEnumerable(cur)) return "keyword";
		if (cmipVerbs.propertyIsEnumerable(cur)) return "variableName";
		if (compareTypes.propertyIsEnumerable(cur)) return "atom";
		if (status.propertyIsEnumerable(cur)) return "comment";
		if (tags.propertyIsEnumerable(cur)) return "typeName";
		if (storage.propertyIsEnumerable(cur)) return "modifier";
		if (modifier.propertyIsEnumerable(cur)) return "modifier";
		if (accessTypes.propertyIsEnumerable(cur)) return "modifier";
	
		return "variableName";
	  }
	
	  function tokenString(quote) {
		return function(stream, state) {
		  var escaped = false, next, end = false;
		  while ((next = stream.next()) != null) {
			if (next == quote && !escaped){
			  var afterNext = stream.peek();
			  //look if the character if the quote is like the B in '10100010'B
			  if (afterNext){
				afterNext = afterNext.toLowerCase();
				if(afterNext == "b" || afterNext == "h" || afterNext == "o")
				  stream.next();
			  }
			  end = true; break;
			}
			escaped = !escaped && next == "\\";
		  }
		  if (end || !(escaped || multiLineStrings))
			state.tokenize = null;
		  return "string";
		};
	  }
	
	  function Context(indented, column, type, align, prev) {
		this.indented = indented;
		this.column = column;
		this.type = type;
		this.align = align;
		this.prev = prev;
	  }
	  function pushContext(state, col, type) {
		var indent = state.indented;
		if (state.context && state.context.type == "statement")
		  indent = state.context.indented;
		return state.context = new Context(indent, col, type, null, state.context);
	  }
	  function popContext(state) {
		var t = state.context.type;
		if (t == ")" || t == "]" || t == "}")
		  state.indented = state.context.indented;
		return state.context = state.context.prev;
	  }
	
	  //Interface
	  return {
		name: "asn1",
		startState: function() {
		  return {
			tokenize: null,
			context: new Context(-2, 0, "top", false),
			indented: 0,
			startOfLine: true
		  };
		},
	
		token: function(stream, state) {
		  var ctx = state.context;
		  if (stream.sol()) {
			if (ctx.align == null) ctx.align = false;
			state.indented = stream.indentation();
			state.startOfLine = true;
		  }
		  if (stream.eatSpace()) return null;
		  curPunc = null;
		  var style = (state.tokenize || tokenBase)(stream, state);
		  if (style == "comment") return style;
		  if (ctx.align == null) ctx.align = true;
	
		  if ((curPunc == ";" || curPunc == ":" || curPunc == ",")
			  && ctx.type == "statement"){
			popContext(state);
		  }
		  else if (curPunc == "{") pushContext(state, stream.column(), "}");
		  else if (curPunc == "[") pushContext(state, stream.column(), "]");
		  else if (curPunc == "(") pushContext(state, stream.column(), ")");
		  else if (curPunc == "}") {
			while (ctx.type == "statement") ctx = popContext(state);
			if (ctx.type == "}") ctx = popContext(state);
			while (ctx.type == "statement") ctx = popContext(state);
		  }
		  else if (curPunc == ctx.type) popContext(state);
		  else if (indentStatements && (((ctx.type == "}" || ctx.type == "top")
										 && curPunc != ';') || (ctx.type == "statement"
																&& curPunc == "newstatement")))
			pushContext(state, stream.column(), "statement");
	
		  state.startOfLine = false;
		  return style;
		},
	
		languageData: {
		  indentOnInput: /^\s*[{}]$/,
		  commentTokens: {line: "--"}
		}
	  };
	}
	
	exports.asn1 = asn1;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/asterisk.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/asterisk.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var atoms    = ["exten", "same", "include","ignorepat","switch"],
		dpcmd    = ["#include","#exec"],
		apps     = [
		  "addqueuemember","adsiprog","aelsub","agentlogin","agentmonitoroutgoing","agi",
		  "alarmreceiver","amd","answer","authenticate","background","backgrounddetect",
		  "bridge","busy","callcompletioncancel","callcompletionrequest","celgenuserevent",
		  "changemonitor","chanisavail","channelredirect","chanspy","clearhash","confbridge",
		  "congestion","continuewhile","controlplayback","dahdiacceptr2call","dahdibarge",
		  "dahdiras","dahdiscan","dahdisendcallreroutingfacility","dahdisendkeypadfacility",
		  "datetime","dbdel","dbdeltree","deadagi","dial","dictate","directory","disa",
		  "dumpchan","eagi","echo","endwhile","exec","execif","execiftime","exitwhile","extenspy",
		  "externalivr","festival","flash","followme","forkcdr","getcpeid","gosub","gosubif",
		  "goto","gotoif","gotoiftime","hangup","iax2provision","ices","importvar","incomplete",
		  "ivrdemo","jabberjoin","jabberleave","jabbersend","jabbersendgroup","jabberstatus",
		  "jack","log","macro","macroexclusive","macroexit","macroif","mailboxexists","meetme",
		  "meetmeadmin","meetmechanneladmin","meetmecount","milliwatt","minivmaccmess","minivmdelete",
		  "minivmgreet","minivmmwi","minivmnotify","minivmrecord","mixmonitor","monitor","morsecode",
		  "mp3player","mset","musiconhold","nbscat","nocdr","noop","odbc","odbc","odbcfinish",
		  "originate","ospauth","ospfinish","osplookup","ospnext","page","park","parkandannounce",
		  "parkedcall","pausemonitor","pausequeuemember","pickup","pickupchan","playback","playtones",
		  "privacymanager","proceeding","progress","queue","queuelog","raiseexception","read","readexten",
		  "readfile","receivefax","receivefax","receivefax","record","removequeuemember",
		  "resetcdr","retrydial","return","ringing","sayalpha","saycountedadj","saycountednoun",
		  "saycountpl","saydigits","saynumber","sayphonetic","sayunixtime","senddtmf","sendfax",
		  "sendfax","sendfax","sendimage","sendtext","sendurl","set","setamaflags",
		  "setcallerpres","setmusiconhold","sipaddheader","sipdtmfmode","sipremoveheader","skel",
		  "slastation","slatrunk","sms","softhangup","speechactivategrammar","speechbackground",
		  "speechcreate","speechdeactivategrammar","speechdestroy","speechloadgrammar","speechprocessingsound",
		  "speechstart","speechunloadgrammar","stackpop","startmusiconhold","stopmixmonitor","stopmonitor",
		  "stopmusiconhold","stopplaytones","system","testclient","testserver","transfer","tryexec",
		  "trysystem","unpausemonitor","unpausequeuemember","userevent","verbose","vmauthenticate",
		  "vmsayname","voicemail","voicemailmain","wait","waitexten","waitfornoise","waitforring",
		  "waitforsilence","waitmusiconhold","waituntil","while","zapateller"
		];
	
	function basicToken(stream,state){
	  var cur = '';
	  var ch = stream.next();
	  // comment
	  if (state.blockComment) {
		if (ch == "-" && stream.match("-;", true)) {
		  state.blockComment = false;
		} else if (stream.skipTo("--;")) {
		  stream.next();
		  stream.next();
		  stream.next();
		  state.blockComment = false;
		} else {
		  stream.skipToEnd();
		}
		return "comment";
	  }
	  if(ch == ";") {
		if (stream.match("--", true)) {
		  if (!stream.match("-", false)) {  // Except ;--- is not a block comment
			state.blockComment = true;
			return "comment";
		  }
		}
		stream.skipToEnd();
		return "comment";
	  }
	  // context
	  if(ch == '[') {
		stream.skipTo(']');
		stream.eat(']');
		return "header";
	  }
	  // string
	  if(ch == '"') {
		stream.skipTo('"');
		return "string";
	  }
	  if(ch == "'") {
		stream.skipTo("'");
		return "string.special";
	  }
	  // dialplan commands
	  if(ch == '#') {
		stream.eatWhile(/\w/);
		cur = stream.current();
		if(dpcmd.indexOf(cur) !== -1) {
		  stream.skipToEnd();
		  return "strong";
		}
	  }
	  // application args
	  if(ch == '$'){
		var ch1 = stream.peek();
		if(ch1 == '{'){
		  stream.skipTo('}');
		  stream.eat('}');
		  return "variableName.special";
		}
	  }
	  // extension
	  stream.eatWhile(/\w/);
	  cur = stream.current();
	  if(atoms.indexOf(cur) !== -1) {
		state.extenStart = true;
		switch(cur) {
		case 'same': state.extenSame = true; break;
		case 'include':
		case 'switch':
		case 'ignorepat':
		  state.extenInclude = true;break;
		}
		return "atom";
	  }
	}
	
	const asterisk = {
	  name: "asterisk",
	  startState: function() {
		return {
		  blockComment: false,
		  extenStart: false,
		  extenSame:  false,
		  extenInclude: false,
		  extenExten: false,
		  extenPriority: false,
		  extenApplication: false
		};
	  },
	  token: function(stream, state) {
	
		var cur = '';
		if(stream.eatSpace()) return null;
		// extension started
		if(state.extenStart){
		  stream.eatWhile(/[^\s]/);
		  cur = stream.current();
		  if(/^=>?$/.test(cur)){
			state.extenExten = true;
			state.extenStart = false;
			return "strong";
		  } else {
			state.extenStart = false;
			stream.skipToEnd();
			return "error";
		  }
		} else if(state.extenExten) {
		  // set exten and priority
		  state.extenExten = false;
		  state.extenPriority = true;
		  stream.eatWhile(/[^,]/);
		  if(state.extenInclude) {
			stream.skipToEnd();
			state.extenPriority = false;
			state.extenInclude = false;
		  }
		  if(state.extenSame) {
			state.extenPriority = false;
			state.extenSame = false;
			state.extenApplication = true;
		  }
		  return "tag";
		} else if(state.extenPriority) {
		  state.extenPriority = false;
		  state.extenApplication = true;
		  stream.next(); // get comma
		  if(state.extenSame) return null;
		  stream.eatWhile(/[^,]/);
		  return "number";
		} else if(state.extenApplication) {
		  stream.eatWhile(/,/);
		  cur = stream.current();
		  if(cur === ',') return null;
		  stream.eatWhile(/\w/);
		  cur = stream.current().toLowerCase();
		  state.extenApplication = false;
		  if(apps.indexOf(cur) !== -1){
			return "def";
		  }
		} else {
		  return basicToken(stream,state);
		}
	
		return null;
	  },
	
	  languageData: {
		commentTokens: {line: ";", block: {open: ";--", close: "--;"}}
	  }
	};
	
	exports.asterisk = asterisk;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/brainfuck.cjs":
	/*!**************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/brainfuck.cjs ***!
	  \**************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var reserve = "><+-.,[]".split("");
	/*
	  comments can be either:
	  placed behind lines
	
	  +++    this is a comment
	
	  where reserved characters cannot be used
	  or in a loop
	  [
	  this is ok to use [ ] and stuff
	  ]
	  or preceded by #
	*/
	const brainfuck = {
	  name: "brainfuck",
	  startState: function() {
		return {
		  commentLine: false,
		  left: 0,
		  right: 0,
		  commentLoop: false
		}
	  },
	  token: function(stream, state) {
		if (stream.eatSpace()) return null
		if(stream.sol()){
		  state.commentLine = false;
		}
		var ch = stream.next().toString();
		if(reserve.indexOf(ch) !== -1){
		  if(state.commentLine === true){
			if(stream.eol()){
			  state.commentLine = false;
			}
			return "comment";
		  }
		  if(ch === "]" || ch === "["){
			if(ch === "["){
			  state.left++;
			}
			else {
			  state.right++;
			}
			return "bracket";
		  }
		  else if(ch === "+" || ch === "-"){
			return "keyword";
		  }
		  else if(ch === "<" || ch === ">"){
			return "atom";
		  }
		  else if(ch === "." || ch === ","){
			return "def";
		  }
		}
		else {
		  state.commentLine = true;
		  if(stream.eol()){
			state.commentLine = false;
		  }
		  return "comment";
		}
		if(stream.eol()){
		  state.commentLine = false;
		}
	  }
	};
	
	exports.brainfuck = brainfuck;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/clike.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function Context(indented, column, type, info, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.info = info;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type, info) {
	  var indent = state.indented;
	  if (state.context && state.context.type == "statement" && type != "statement")
		indent = state.context.indented;
	  return state.context = new Context(indent, col, type, info, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	function typeBefore(stream, state, pos) {
	  if (state.prevToken == "variable" || state.prevToken == "type") return true;
	  if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos))) return true;
	  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;
	}
	
	function isTopScope(context) {
	  for (;;) {
		if (!context || context.type == "top") return true;
		if (context.type == "}" && context.prev.info != "namespace") return false;
		context = context.prev;
	  }
	}
	
	function clike(parserConfig) {
	  var statementIndentUnit = parserConfig.statementIndentUnit,
		  dontAlignCalls = parserConfig.dontAlignCalls,
		  keywords = parserConfig.keywords || {},
		  types = parserConfig.types || {},
		  builtin = parserConfig.builtin || {},
		  blockKeywords = parserConfig.blockKeywords || {},
		  defKeywords = parserConfig.defKeywords || {},
		  atoms = parserConfig.atoms || {},
		  hooks = parserConfig.hooks || {},
		  multiLineStrings = parserConfig.multiLineStrings,
		  indentStatements = parserConfig.indentStatements !== false,
		  indentSwitch = parserConfig.indentSwitch !== false,
		  namespaceSeparator = parserConfig.namespaceSeparator,
		  isPunctuationChar = parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/,
		  numberStart = parserConfig.numberStart || /[\d\.]/,
		  number = parserConfig.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,
		  isOperatorChar = parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/,
		  isIdentifierChar = parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/,
		  // An optional function that takes a {string} token and returns true if it
		  // should be treated as a builtin.
		  isReservedIdentifier = parserConfig.isReservedIdentifier || false;
	
	  var curPunc, isDefKeyword;
	
	  function tokenBase(stream, state) {
		var ch = stream.next();
		if (hooks[ch]) {
		  var result = hooks[ch](stream, state);
		  if (result !== false) return result;
		}
		if (ch == '"' || ch == "'") {
		  state.tokenize = tokenString(ch);
		  return state.tokenize(stream, state);
		}
		if (numberStart.test(ch)) {
		  stream.backUp(1);
		  if (stream.match(number)) return "number"
		  stream.next();
		}
		if (isPunctuationChar.test(ch)) {
		  curPunc = ch;
		  return null;
		}
		if (ch == "/") {
		  if (stream.eat("*")) {
			state.tokenize = tokenComment;
			return tokenComment(stream, state);
		  }
		  if (stream.eat("/")) {
			stream.skipToEnd();
			return "comment";
		  }
		}
		if (isOperatorChar.test(ch)) {
		  while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar)) {}
		  return "operator";
		}
		stream.eatWhile(isIdentifierChar);
		if (namespaceSeparator) while (stream.match(namespaceSeparator))
		  stream.eatWhile(isIdentifierChar);
	
		var cur = stream.current();
		if (contains(keywords, cur)) {
		  if (contains(blockKeywords, cur)) curPunc = "newstatement";
		  if (contains(defKeywords, cur)) isDefKeyword = true;
		  return "keyword";
		}
		if (contains(types, cur)) return "type";
		if (contains(builtin, cur)
			|| (isReservedIdentifier && isReservedIdentifier(cur))) {
		  if (contains(blockKeywords, cur)) curPunc = "newstatement";
		  return "builtin";
		}
		if (contains(atoms, cur)) return "atom";
		return "variable";
	  }
	
	  function tokenString(quote) {
		return function(stream, state) {
		  var escaped = false, next, end = false;
		  while ((next = stream.next()) != null) {
			if (next == quote && !escaped) {end = true; break;}
			escaped = !escaped && next == "\\";
		  }
		  if (end || !(escaped || multiLineStrings))
			state.tokenize = null;
		  return "string";
		};
	  }
	
	  function tokenComment(stream, state) {
		var maybeEnd = false, ch;
		while (ch = stream.next()) {
		  if (ch == "/" && maybeEnd) {
			state.tokenize = null;
			break;
		  }
		  maybeEnd = (ch == "*");
		}
		return "comment";
	  }
	
	  function maybeEOL(stream, state) {
		if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
		  state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
	  }
	
	  // Interface
	
	  return {
		name: parserConfig.name,
		startState: function(indentUnit) {
		  return {
			tokenize: null,
			context: new Context(-indentUnit, 0, "top", null, false),
			indented: 0,
			startOfLine: true,
			prevToken: null
		  };
		},
	
		token: function(stream, state) {
		  var ctx = state.context;
		  if (stream.sol()) {
			if (ctx.align == null) ctx.align = false;
			state.indented = stream.indentation();
			state.startOfLine = true;
		  }
		  if (stream.eatSpace()) { maybeEOL(stream, state); return null; }
		  curPunc = isDefKeyword = null;
		  var style = (state.tokenize || tokenBase)(stream, state);
		  if (style == "comment" || style == "meta") return style;
		  if (ctx.align == null) ctx.align = true;
	
		  if (curPunc == ";" || curPunc == ":" || (curPunc == "," && stream.match(/^\s*(?:\/\/.*)?$/, false)))
			while (state.context.type == "statement") popContext(state);
		  else if (curPunc == "{") pushContext(state, stream.column(), "}");
		  else if (curPunc == "[") pushContext(state, stream.column(), "]");
		  else if (curPunc == "(") pushContext(state, stream.column(), ")");
		  else if (curPunc == "}") {
			while (ctx.type == "statement") ctx = popContext(state);
			if (ctx.type == "}") ctx = popContext(state);
			while (ctx.type == "statement") ctx = popContext(state);
		  }
		  else if (curPunc == ctx.type) popContext(state);
		  else if (indentStatements &&
				   (((ctx.type == "}" || ctx.type == "top") && curPunc != ";") ||
					(ctx.type == "statement" && curPunc == "newstatement"))) {
			pushContext(state, stream.column(), "statement", stream.current());
		  }
	
		  if (style == "variable" &&
			  ((state.prevToken == "def" ||
				(parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&
				 isTopScope(state.context) && stream.match(/^\s*\(/, false)))))
			style = "def";
	
		  if (hooks.token) {
			var result = hooks.token(stream, state, style);
			if (result !== undefined) style = result;
		  }
	
		  if (style == "def" && parserConfig.styleDefs === false) style = "variable";
	
		  state.startOfLine = false;
		  state.prevToken = isDefKeyword ? "def" : style || curPunc;
		  maybeEOL(stream, state);
		  return style;
		},
	
		indent: function(state, textAfter, context) {
		  if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine && isTopScope(state.context))
			return null;
		  var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
		  var closing = firstChar == ctx.type;
		  if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
		  if (parserConfig.dontIndentStatements)
			while (ctx.type == "statement" && parserConfig.dontIndentStatements.test(ctx.info))
			  ctx = ctx.prev;
		  if (hooks.indent) {
			var hook = hooks.indent(state, ctx, textAfter, context.unit);
			if (typeof hook == "number") return hook
		  }
		  var switchBlock = ctx.prev && ctx.prev.info == "switch";
		  if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {
			while (ctx.type != "top" && ctx.type != "}") ctx = ctx.prev;
			return ctx.indented
		  }
		  if (ctx.type == "statement")
			return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || context.unit);
		  if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
			return ctx.column + (closing ? 0 : 1);
		  if (ctx.type == ")" && !closing)
			return ctx.indented + (statementIndentUnit || context.unit);
	
		  return ctx.indented + (closing ? 0 : context.unit) +
			(!closing && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
		},
	
		languageData: {
		  indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
		  commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		  autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms)),
		  ...parserConfig.languageData
		}
	  };
	}
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	function contains(words, word) {
	  if (typeof words === "function") {
		return words(word);
	  } else {
		return words.propertyIsEnumerable(word);
	  }
	}
	var cKeywords = "auto if break case register continue return default do sizeof " +
		"static else struct switch extern typedef union for goto while enum const " +
		"volatile inline restrict asm fortran";
	
	// Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.
	var cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch " +
		"class compl concept constexpr const_cast decltype delete dynamic_cast " +
		"explicit export final friend import module mutable namespace new noexcept " +
		"not not_eq operator or or_eq override private protected public " +
		"reinterpret_cast requires static_assert static_cast template this " +
		"thread_local throw try typeid typename using virtual xor xor_eq";
	
	var objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy " +
		"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd " +
		"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class " +
		"@public @package @private @protected @required @optional @try @catch @finally @import " +
		"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";
	
	var objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION " +
		" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER " +
		"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION " +
		"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";
	
	// Do not use this. Use the cTypes function below. This is global just to avoid
	// excessive calls when cTypes is being called multiple times during a parse.
	var basicCTypes = words("int long char short double float unsigned signed " +
							"void bool");
	
	// Do not use this. Use the objCTypes function below. This is global just to avoid
	// excessive calls when objCTypes is being called multiple times during a parse.
	var basicObjCTypes = words("SEL instancetype id Class Protocol BOOL");
	
	// Returns true if identifier is a "C" type.
	// C type is defined as those that are reserved by the compiler (basicTypes),
	// and those that end in _t (Reserved by POSIX for types)
	// http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html
	function cTypes(identifier) {
	  return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);
	}
	
	// Returns true if identifier is a "Objective C" type.
	function objCTypes(identifier) {
	  return cTypes(identifier) || contains(basicObjCTypes, identifier);
	}
	
	var cBlockKeywords = "case do else for if switch while struct enum union";
	var cDefKeywords = "struct enum union";
	
	function cppHook(stream, state) {
	  if (!state.startOfLine) return false
	  for (var ch, next = null; ch = stream.peek();) {
		if (ch == "\\" && stream.match(/^.$/)) {
		  next = cppHook;
		  break
		} else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
		  break
		}
		stream.next();
	  }
	  state.tokenize = next;
	  return "meta"
	}
	
	function pointerHook(_stream, state) {
	  if (state.prevToken == "type") return "type";
	  return false;
	}
	
	// For C and C++ (and ObjC): identifiers starting with __
	// or _ followed by a capital letter are reserved for the compiler.
	function cIsReservedIdentifier(token) {
	  if (!token || token.length < 2) return false;
	  if (token[0] != '_') return false;
	  return (token[1] == '_') || (token[1] !== token[1].toLowerCase());
	}
	
	function cpp14Literal(stream) {
	  stream.eatWhile(/[\w\.']/);
	  return "number";
	}
	
	function cpp11StringHook(stream, state) {
	  stream.backUp(1);
	  // Raw strings.
	  if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
		var match = stream.match(/^"([^\s\\()]{0,16})\(/);
		if (!match) {
		  return false;
		}
		state.cpp11RawStringDelim = match[1];
		state.tokenize = tokenRawString;
		return tokenRawString(stream, state);
	  }
	  // Unicode strings/chars.
	  if (stream.match(/^(?:u8|u|U|L)/)) {
		if (stream.match(/^["']/, /* eat */ false)) {
		  return "string";
		}
		return false;
	  }
	  // Ignore this hook.
	  stream.next();
	  return false;
	}
	
	function cppLooksLikeConstructor(word) {
	  var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
	  return lastTwo && lastTwo[1] == lastTwo[2];
	}
	
	// C#-style strings where "" escapes a quote.
	function tokenAtString(stream, state) {
	  var next;
	  while ((next = stream.next()) != null) {
		if (next == '"' && !stream.eat('"')) {
		  state.tokenize = null;
		  break;
		}
	  }
	  return "string";
	}
	
	// C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where
	// <delim> can be a string up to 16 characters long.
	function tokenRawString(stream, state) {
	  // Escape characters that have special regex meanings.
	  var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, '\\$&');
	  var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
	  if (match)
		state.tokenize = null;
	  else
		stream.skipToEnd();
	  return "string";
	}
	
	const c = clike({
	  name: "c",
	  keywords: words(cKeywords),
	  types: cTypes,
	  blockKeywords: words(cBlockKeywords),
	  defKeywords: words(cDefKeywords),
	  typeFirstDefinitions: true,
	  atoms: words("NULL true false"),
	  isReservedIdentifier: cIsReservedIdentifier,
	  hooks: {
		"#": cppHook,
		"*": pointerHook,
	  }
	});
	
	const cpp = clike({
	  name: "cpp",
	  keywords: words(cKeywords + " " + cppKeywords),
	  types: cTypes,
	  blockKeywords: words(cBlockKeywords + " class try catch"),
	  defKeywords: words(cDefKeywords + " class namespace"),
	  typeFirstDefinitions: true,
	  atoms: words("true false NULL nullptr"),
	  dontIndentStatements: /^template$/,
	  isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
	  isReservedIdentifier: cIsReservedIdentifier,
	  hooks: {
		"#": cppHook,
		"*": pointerHook,
		"u": cpp11StringHook,
		"U": cpp11StringHook,
		"L": cpp11StringHook,
		"R": cpp11StringHook,
		"0": cpp14Literal,
		"1": cpp14Literal,
		"2": cpp14Literal,
		"3": cpp14Literal,
		"4": cpp14Literal,
		"5": cpp14Literal,
		"6": cpp14Literal,
		"7": cpp14Literal,
		"8": cpp14Literal,
		"9": cpp14Literal,
		token: function(stream, state, style) {
		  if (style == "variable" && stream.peek() == "(" &&
			  (state.prevToken == ";" || state.prevToken == null ||
			   state.prevToken == "}") &&
			  cppLooksLikeConstructor(stream.current()))
			return "def";
		}
	  },
	  namespaceSeparator: "::"
	});
	
	const java = clike({
	  name: "java",
	  keywords: words("abstract assert break case catch class const continue default " +
					  "do else enum extends final finally for goto if implements import " +
					  "instanceof interface native new package private protected public " +
					  "return static strictfp super switch synchronized this throw throws transient " +
					  "try volatile while @interface"),
	  types: words("var byte short int long float double boolean char void Boolean Byte Character Double Float " +
				   "Integer Long Number Object Short String StringBuffer StringBuilder Void"),
	  blockKeywords: words("catch class do else finally for if switch try while"),
	  defKeywords: words("class interface enum @interface"),
	  typeFirstDefinitions: true,
	  atoms: words("true false null"),
	  number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
	  hooks: {
		"@": function(stream) {
		  // Don't match the @interface keyword.
		  if (stream.match('interface', false)) return false;
	
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		},
		'"': function(stream, state) {
		  if (!stream.match(/""$/)) return false;
		  state.tokenize = tokenTripleString;
		  return state.tokenize(stream, state);
		}
	  }
	});
	
	const csharp = clike({
	  name: "csharp",
	  keywords: words("abstract as async await base break case catch checked class const continue" +
					  " default delegate do else enum event explicit extern finally fixed for" +
					  " foreach goto if implicit in init interface internal is lock namespace new" +
					  " operator out override params private protected public readonly record ref required return sealed" +
					  " sizeof stackalloc static struct switch this throw try typeof unchecked" +
					  " unsafe using virtual void volatile while add alias ascending descending dynamic from get" +
					  " global group into join let orderby partial remove select set value var yield"),
	  types: words("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func" +
				   " Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32" +
				   " UInt64 bool byte char decimal double short int long object"  +
				   " sbyte float string ushort uint ulong"),
	  blockKeywords: words("catch class do else finally for foreach if struct switch try while"),
	  defKeywords: words("class interface namespace record struct var"),
	  typeFirstDefinitions: true,
	  atoms: words("true false null"),
	  hooks: {
		"@": function(stream, state) {
		  if (stream.eat('"')) {
			state.tokenize = tokenAtString;
			return tokenAtString(stream, state);
		  }
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		}
	  }
	});
	
	function tokenTripleString(stream, state) {
	  var escaped = false;
	  while (!stream.eol()) {
		if (!escaped && stream.match('"""')) {
		  state.tokenize = null;
		  break;
		}
		escaped = stream.next() == "\\" && !escaped;
	  }
	  return "string";
	}
	
	function tokenNestedComment(depth) {
	  return function (stream, state) {
		var ch;
		while (ch = stream.next()) {
		  if (ch == "*" && stream.eat("/")) {
			if (depth == 1) {
			  state.tokenize = null;
			  break
			} else {
			  state.tokenize = tokenNestedComment(depth - 1);
			  return state.tokenize(stream, state)
			}
		  } else if (ch == "/" && stream.eat("*")) {
			state.tokenize = tokenNestedComment(depth + 1);
			return state.tokenize(stream, state)
		  }
		}
		return "comment"
	  }
	}
	
	const scala = clike({
	  name: "scala",
	  keywords: words(
		/* scala */
		"abstract case catch class def do else extends final finally for forSome if " +
		  "implicit import lazy match new null object override package private protected return " +
		  "sealed super this throw trait try type val var while with yield _ " +
	
		/* package scala */
		"assert assume require print println printf readLine readBoolean readByte readShort " +
		  "readChar readInt readLong readFloat readDouble"
	  ),
	  types: words(
		"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either " +
		  "Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable " +
		  "Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering " +
		  "Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder " +
		  "StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector " +
	
		/* package java.lang */
		"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
		  "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
		  "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
		  "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
	  ),
	  multiLineStrings: true,
	  blockKeywords: words("catch class enum do else finally for forSome if match switch try while"),
	  defKeywords: words("class enum def object package trait type val var"),
	  atoms: words("true false null"),
	  indentStatements: false,
	  indentSwitch: false,
	  isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
	  hooks: {
		"@": function(stream) {
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		},
		'"': function(stream, state) {
		  if (!stream.match('""')) return false;
		  state.tokenize = tokenTripleString;
		  return state.tokenize(stream, state);
		},
		"'": function(stream) {
		  if (stream.match(/^(\\[^'\s]+|[^\\'])'/)) return "character"
		  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
		  return "atom";
		},
		"=": function(stream, state) {
		  var cx = state.context;
		  if (cx.type == "}" && cx.align && stream.eat(">")) {
			state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);
			return "operator"
		  } else {
			return false
		  }
		},
	
		"/": function(stream, state) {
		  if (!stream.eat("*")) return false
		  state.tokenize = tokenNestedComment(1);
		  return state.tokenize(stream, state)
		}
	  },
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
	  }
	});
	
	function tokenKotlinString(tripleString){
	  return function (stream, state) {
		var escaped = false, next, end = false;
		while (!stream.eol()) {
		  if (!tripleString && !escaped && stream.match('"') ) {end = true; break;}
		  if (tripleString && stream.match('"""')) {end = true; break;}
		  next = stream.next();
		  if(!escaped && next == "$" && stream.match('{'))
			stream.skipTo("}");
		  escaped = !escaped && next == "\\" && !tripleString;
		}
		if (end || !tripleString)
		  state.tokenize = null;
		return "string";
	  }
	}
	
	const kotlin = clike({
	  name: "kotlin",
	  keywords: words(
		/*keywords*/
		"package as typealias class interface this super val operator " +
		  "var fun for is in This throw return annotation " +
		  "break continue object if else while do try when !in !is as? " +
	
		/*soft keywords*/
		"file import where by get set abstract enum open inner override private public internal " +
		  "protected catch finally out final vararg reified dynamic companion constructor init " +
		  "sealed field property receiver param sparam lateinit data inline noinline tailrec " +
		  "external annotation crossinline const operator infix suspend actual expect setparam"
	  ),
	  types: words(
		/* package java.lang */
		"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
		  "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
		  "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
		  "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray " +
		  "ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy " +
		  "LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
	  ),
	  intendSwitch: false,
	  indentStatements: false,
	  multiLineStrings: true,
	  number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
	  blockKeywords: words("catch class do else finally for if where try while enum"),
	  defKeywords: words("class val var object interface fun"),
	  atoms: words("true false null this"),
	  hooks: {
		"@": function(stream) {
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		},
		'*': function(_stream, state) {
		  return state.prevToken == '.' ? 'variable' : 'operator';
		},
		'"': function(stream, state) {
		  state.tokenize = tokenKotlinString(stream.match('""'));
		  return state.tokenize(stream, state);
		},
		"/": function(stream, state) {
		  if (!stream.eat("*")) return false;
		  state.tokenize = tokenNestedComment(1);
		  return state.tokenize(stream, state)
		},
		indent: function(state, ctx, textAfter, indentUnit) {
		  var firstChar = textAfter && textAfter.charAt(0);
		  if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
			return state.indented;
		  if ((state.prevToken == "operator" && textAfter != "}" && state.context.type != "}") ||
			  state.prevToken == "variable" && firstChar == "." ||
			  (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
			return indentUnit * 2 + ctx.indented;
		  if (ctx.align && ctx.type == "}")
			return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit);
		}
	  },
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
	  }
	});
	
	const shader = clike({
	  name: "shader",
	  keywords: words("sampler1D sampler2D sampler3D samplerCube " +
					  "sampler1DShadow sampler2DShadow " +
					  "const attribute uniform varying " +
					  "break continue discard return " +
					  "for while do if else struct " +
					  "in out inout"),
	  types: words("float int bool void " +
				   "vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 " +
				   "mat2 mat3 mat4"),
	  blockKeywords: words("for while do if else struct"),
	  builtin: words("radians degrees sin cos tan asin acos atan " +
					 "pow exp log exp2 sqrt inversesqrt " +
					 "abs sign floor ceil fract mod min max clamp mix step smoothstep " +
					 "length distance dot cross normalize ftransform faceforward " +
					 "reflect refract matrixCompMult " +
					 "lessThan lessThanEqual greaterThan greaterThanEqual " +
					 "equal notEqual any all not " +
					 "texture1D texture1DProj texture1DLod texture1DProjLod " +
					 "texture2D texture2DProj texture2DLod texture2DProjLod " +
					 "texture3D texture3DProj texture3DLod texture3DProjLod " +
					 "textureCube textureCubeLod " +
					 "shadow1D shadow2D shadow1DProj shadow2DProj " +
					 "shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod " +
					 "dFdx dFdy fwidth " +
					 "noise1 noise2 noise3 noise4"),
	  atoms: words("true false " +
				   "gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex " +
				   "gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 " +
				   "gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 " +
				   "gl_FogCoord gl_PointCoord " +
				   "gl_Position gl_PointSize gl_ClipVertex " +
				   "gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor " +
				   "gl_TexCoord gl_FogFragCoord " +
				   "gl_FragCoord gl_FrontFacing " +
				   "gl_FragData gl_FragDepth " +
				   "gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix " +
				   "gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse " +
				   "gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse " +
				   "gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose " +
				   "gl_ProjectionMatrixInverseTranspose " +
				   "gl_ModelViewProjectionMatrixInverseTranspose " +
				   "gl_TextureMatrixInverseTranspose " +
				   "gl_NormalScale gl_DepthRange gl_ClipPlane " +
				   "gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel " +
				   "gl_FrontLightModelProduct gl_BackLightModelProduct " +
				   "gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ " +
				   "gl_FogParameters " +
				   "gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords " +
				   "gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats " +
				   "gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits " +
				   "gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits " +
				   "gl_MaxDrawBuffers"),
	  indentSwitch: false,
	  hooks: {"#": cppHook}
	});
	
	const nesC = clike({
	  name: "nesc",
	  keywords: words(cKeywords + " as atomic async call command component components configuration event generic " +
					  "implementation includes interface module new norace nx_struct nx_union post provides " +
					  "signal task uses abstract extends"),
	  types: cTypes,
	  blockKeywords: words(cBlockKeywords),
	  atoms: words("null true false"),
	  hooks: {"#": cppHook}
	});
	
	const objectiveC = clike({
	  name: "objectivec",
	  keywords: words(cKeywords + " " + objCKeywords),
	  types: objCTypes,
	  builtin: words(objCBuiltins),
	  blockKeywords: words(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
	  defKeywords: words(cDefKeywords + " @interface @implementation @protocol @class"),
	  dontIndentStatements: /^@.*$/,
	  typeFirstDefinitions: true,
	  atoms: words("YES NO NULL Nil nil true false nullptr"),
	  isReservedIdentifier: cIsReservedIdentifier,
	  hooks: {
		"#": cppHook,
		"*": pointerHook,
	  }
	});
	
	const objectiveCpp = clike({
	  name: "objectivecpp",
	  keywords: words(cKeywords + " " + objCKeywords + " " + cppKeywords),
	  types: objCTypes,
	  builtin: words(objCBuiltins),
	  blockKeywords: words(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
	  defKeywords: words(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
	  dontIndentStatements: /^@.*$|^template$/,
	  typeFirstDefinitions: true,
	  atoms: words("YES NO NULL Nil nil true false nullptr"),
	  isReservedIdentifier: cIsReservedIdentifier,
	  hooks: {
		"#": cppHook,
		"*": pointerHook,
		"u": cpp11StringHook,
		"U": cpp11StringHook,
		"L": cpp11StringHook,
		"R": cpp11StringHook,
		"0": cpp14Literal,
		"1": cpp14Literal,
		"2": cpp14Literal,
		"3": cpp14Literal,
		"4": cpp14Literal,
		"5": cpp14Literal,
		"6": cpp14Literal,
		"7": cpp14Literal,
		"8": cpp14Literal,
		"9": cpp14Literal,
		token: function(stream, state, style) {
		  if (style == "variable" && stream.peek() == "(" &&
			  (state.prevToken == ";" || state.prevToken == null ||
			   state.prevToken == "}") &&
			  cppLooksLikeConstructor(stream.current()))
			return "def";
		}
	  },
	  namespaceSeparator: "::"
	});
	
	const squirrel = clike({
	  name: "squirrel",
	  keywords: words("base break clone continue const default delete enum extends function in class" +
					  " foreach local resume return this throw typeof yield constructor instanceof static"),
	  types: cTypes,
	  blockKeywords: words("case catch class else for foreach if switch try while"),
	  defKeywords: words("function local class"),
	  typeFirstDefinitions: true,
	  atoms: words("true false null"),
	  hooks: {"#": cppHook}
	});
	
	// Ceylon Strings need to deal with interpolation
	var stringTokenizer = null;
	function tokenCeylonString(type) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while (!stream.eol()) {
		  if (!escaped && stream.match('"') &&
			  (type == "single" || stream.match('""'))) {
			end = true;
			break;
		  }
		  if (!escaped && stream.match('``')) {
			stringTokenizer = tokenCeylonString(type);
			end = true;
			break;
		  }
		  next = stream.next();
		  escaped = type == "single" && !escaped && next == "\\";
		}
		if (end)
		  state.tokenize = null;
		return "string";
	  }
	}
	
	const ceylon = clike({
	  name: "ceylon",
	  keywords: words("abstracts alias assembly assert assign break case catch class continue dynamic else" +
					  " exists extends finally for function given if import in interface is let module new" +
					  " nonempty object of out outer package return satisfies super switch then this throw" +
					  " try value void while"),
	  types: function(word) {
		// In Ceylon all identifiers that start with an uppercase are types
		var first = word.charAt(0);
		return (first === first.toUpperCase() && first !== first.toLowerCase());
	  },
	  blockKeywords: words("case catch class dynamic else finally for function if interface module new object switch try while"),
	  defKeywords: words("class dynamic function interface module object package value"),
	  builtin: words("abstract actual aliased annotation by default deprecated doc final formal late license" +
					 " native optional sealed see serializable shared suppressWarnings tagged throws variable"),
	  isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
	  isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
	  numberStart: /[\d#$]/,
	  number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
	  multiLineStrings: true,
	  typeFirstDefinitions: true,
	  atoms: words("true false null larger smaller equal empty finished"),
	  indentSwitch: false,
	  styleDefs: false,
	  hooks: {
		"@": function(stream) {
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		},
		'"': function(stream, state) {
		  state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
		  return state.tokenize(stream, state);
		},
		'`': function(stream, state) {
		  if (!stringTokenizer || !stream.match('`')) return false;
		  state.tokenize = stringTokenizer;
		  stringTokenizer = null;
		  return state.tokenize(stream, state);
		},
		"'": function(stream) {
		  if (stream.match(/^(\\[^'\s]+|[^\\'])'/)) return "string.special"
		  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
		  return "atom";
		},
		token: function(_stream, state, style) {
		  if ((style == "variable" || style == "type") &&
			  state.prevToken == ".") {
			return "variableName.special";
		  }
		}
	  },
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
	  }
	});
	
	function pushInterpolationStack(state) {
	  (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
	}
	
	function popInterpolationStack(state) {
	  return (state.interpolationStack || (state.interpolationStack = [])).pop();
	}
	
	function sizeInterpolationStack(state) {
	  return state.interpolationStack ? state.interpolationStack.length : 0;
	}
	
	function tokenDartString(quote, stream, state, raw) {
	  var tripleQuoted = false;
	  if (stream.eat(quote)) {
		if (stream.eat(quote)) tripleQuoted = true;
		else return "string"; //empty string
	  }
	  function tokenStringHelper(stream, state) {
		var escaped = false;
		while (!stream.eol()) {
		  if (!raw && !escaped && stream.peek() == "$") {
			pushInterpolationStack(state);
			state.tokenize = tokenInterpolation;
			return "string";
		  }
		  var next = stream.next();
		  if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {
			state.tokenize = null;
			break;
		  }
		  escaped = !raw && !escaped && next == "\\";
		}
		return "string";
	  }
	  state.tokenize = tokenStringHelper;
	  return tokenStringHelper(stream, state);
	}
	
	function tokenInterpolation(stream, state) {
	  stream.eat("$");
	  if (stream.eat("{")) {
		// let clike handle the content of ${...},
		// we take over again when "}" appears (see hooks).
		state.tokenize = null;
	  } else {
		state.tokenize = tokenInterpolationIdentifier;
	  }
	  return null;
	}
	
	function tokenInterpolationIdentifier(stream, state) {
	  stream.eatWhile(/[\w_]/);
	  state.tokenize = popInterpolationStack(state);
	  return "variable";
	}
	
	const dart = clike({
	  name: "dart",
	  keywords: words("this super static final const abstract class extends external factory " +
					  "implements mixin get native set typedef with enum throw rethrow assert break case " +
					  "continue default in return new deferred async await covariant try catch finally " +
					  "do else for if switch while import library export part of show hide is as extension " +
					  "on yield late required sealed base interface when inline"),
	  blockKeywords: words("try catch finally do else for if switch while"),
	  builtin: words("void bool num int double dynamic var String Null Never"),
	  atoms: words("true false null"),
	  hooks: {
		"@": function(stream) {
		  stream.eatWhile(/[\w\$_\.]/);
		  return "meta";
		},
	
		// custom string handling to deal with triple-quoted strings and string interpolation
		"'": function(stream, state) {
		  return tokenDartString("'", stream, state, false);
		},
		"\"": function(stream, state) {
		  return tokenDartString("\"", stream, state, false);
		},
		"r": function(stream, state) {
		  var peek = stream.peek();
		  if (peek == "'" || peek == "\"") {
			return tokenDartString(stream.next(), stream, state, true);
		  }
		  return false;
		},
	
		"}": function(_stream, state) {
		  // "}" is end of interpolation, if interpolation stack is non-empty
		  if (sizeInterpolationStack(state) > 0) {
			state.tokenize = popInterpolationStack(state);
			return null;
		  }
		  return false;
		},
	
		"/": function(stream, state) {
		  if (!stream.eat("*")) return false
		  state.tokenize = tokenNestedComment(1);
		  return state.tokenize(stream, state)
		},
		token: function(stream, _, style) {
		  if (style == "variable") {
			// Assume uppercase symbols are classes
			var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$','g');
			if (isUpper.test(stream.current())) {
			  return 'type';
			}
		  }
		}
	  }
	});
	
	exports.c = c;
	exports.ceylon = ceylon;
	exports.clike = clike;
	exports.cpp = cpp;
	exports.csharp = csharp;
	exports.dart = dart;
	exports.java = java;
	exports.kotlin = kotlin;
	exports.nesC = nesC;
	exports.objectiveC = objectiveC;
	exports.objectiveCpp = objectiveCpp;
	exports.scala = scala;
	exports.shader = shader;
	exports.squirrel = squirrel;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/clojure.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/clojure.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var atoms = ["false", "nil", "true"];
	var specialForms = [".", "catch", "def", "do", "if", "monitor-enter",
						"monitor-exit", "new", "quote", "recur", "set!", "throw", "try", "var"];
	var coreSymbols = ["*", "*'", "*1", "*2", "*3", "*agent*",
					   "*allow-unresolved-vars*", "*assert*", "*clojure-version*",
					   "*command-line-args*", "*compile-files*", "*compile-path*",
					   "*compiler-options*", "*data-readers*", "*default-data-reader-fn*", "*e",
					   "*err*", "*file*", "*flush-on-newline*", "*fn-loader*", "*in*",
					   "*math-context*", "*ns*", "*out*", "*print-dup*", "*print-length*",
					   "*print-level*", "*print-meta*", "*print-namespace-maps*",
					   "*print-readably*", "*read-eval*", "*reader-resolver*", "*source-path*",
					   "*suppress-read*", "*unchecked-math*", "*use-context-classloader*",
					   "*verbose-defrecords*", "*warn-on-reflection*", "+", "+'", "-", "-'",
					   "->", "->>", "->ArrayChunk", "->Eduction", "->Vec", "->VecNode",
					   "->VecSeq", "-cache-protocol-fn", "-reset-methods", "..", "/", "<", "<=",
					   "=", "==", ">", ">=", "EMPTY-NODE", "Inst", "StackTraceElement->vec",
					   "Throwable->map", "accessor", "aclone", "add-classpath", "add-watch",
					   "agent", "agent-error", "agent-errors", "aget", "alength", "alias",
					   "all-ns", "alter", "alter-meta!", "alter-var-root", "amap", "ancestors",
					   "and", "any?", "apply", "areduce", "array-map", "as->", "aset",
					   "aset-boolean", "aset-byte", "aset-char", "aset-double", "aset-float",
					   "aset-int", "aset-long", "aset-short", "assert", "assoc", "assoc!",
					   "assoc-in", "associative?", "atom", "await", "await-for", "await1",
					   "bases", "bean", "bigdec", "bigint", "biginteger", "binding", "bit-and",
					   "bit-and-not", "bit-clear", "bit-flip", "bit-not", "bit-or", "bit-set",
					   "bit-shift-left", "bit-shift-right", "bit-test", "bit-xor", "boolean",
					   "boolean-array", "boolean?", "booleans", "bound-fn", "bound-fn*",
					   "bound?", "bounded-count", "butlast", "byte", "byte-array", "bytes",
					   "bytes?", "case", "cast", "cat", "char", "char-array",
					   "char-escape-string", "char-name-string", "char?", "chars", "chunk",
					   "chunk-append", "chunk-buffer", "chunk-cons", "chunk-first", "chunk-next",
					   "chunk-rest", "chunked-seq?", "class", "class?", "clear-agent-errors",
					   "clojure-version", "coll?", "comment", "commute", "comp", "comparator",
					   "compare", "compare-and-set!", "compile", "complement", "completing",
					   "concat", "cond", "cond->", "cond->>", "condp", "conj", "conj!", "cons",
					   "constantly", "construct-proxy", "contains?", "count", "counted?",
					   "create-ns", "create-struct", "cycle", "dec", "dec'", "decimal?",
					   "declare", "dedupe", "default-data-readers", "definline", "definterface",
					   "defmacro", "defmethod", "defmulti", "defn", "defn-", "defonce",
					   "defprotocol", "defrecord", "defstruct", "deftype", "delay", "delay?",
					   "deliver", "denominator", "deref", "derive", "descendants", "destructure",
					   "disj", "disj!", "dissoc", "dissoc!", "distinct", "distinct?", "doall",
					   "dorun", "doseq", "dosync", "dotimes", "doto", "double", "double-array",
					   "double?", "doubles", "drop", "drop-last", "drop-while", "eduction",
					   "empty", "empty?", "ensure", "ensure-reduced", "enumeration-seq",
					   "error-handler", "error-mode", "eval", "even?", "every-pred", "every?",
					   "ex-data", "ex-info", "extend", "extend-protocol", "extend-type",
					   "extenders", "extends?", "false?", "ffirst", "file-seq", "filter",
					   "filterv", "find", "find-keyword", "find-ns", "find-protocol-impl",
					   "find-protocol-method", "find-var", "first", "flatten", "float",
					   "float-array", "float?", "floats", "flush", "fn", "fn?", "fnext", "fnil",
					   "for", "force", "format", "frequencies", "future", "future-call",
					   "future-cancel", "future-cancelled?", "future-done?", "future?",
					   "gen-class", "gen-interface", "gensym", "get", "get-in", "get-method",
					   "get-proxy-class", "get-thread-bindings", "get-validator", "group-by",
					   "halt-when", "hash", "hash-combine", "hash-map", "hash-ordered-coll",
					   "hash-set", "hash-unordered-coll", "ident?", "identical?", "identity",
					   "if-let", "if-not", "if-some", "ifn?", "import", "in-ns", "inc", "inc'",
					   "indexed?", "init-proxy", "inst-ms", "inst-ms*", "inst?", "instance?",
					   "int", "int-array", "int?", "integer?", "interleave", "intern",
					   "interpose", "into", "into-array", "ints", "io!", "isa?", "iterate",
					   "iterator-seq", "juxt", "keep", "keep-indexed", "key", "keys", "keyword",
					   "keyword?", "last", "lazy-cat", "lazy-seq", "let", "letfn", "line-seq",
					   "list", "list*", "list?", "load", "load-file", "load-reader",
					   "load-string", "loaded-libs", "locking", "long", "long-array", "longs",
					   "loop", "macroexpand", "macroexpand-1", "make-array", "make-hierarchy",
					   "map", "map-entry?", "map-indexed", "map?", "mapcat", "mapv", "max",
					   "max-key", "memfn", "memoize", "merge", "merge-with", "meta",
					   "method-sig", "methods", "min", "min-key", "mix-collection-hash", "mod",
					   "munge", "name", "namespace", "namespace-munge", "nat-int?", "neg-int?",
					   "neg?", "newline", "next", "nfirst", "nil?", "nnext", "not", "not-any?",
					   "not-empty", "not-every?", "not=", "ns", "ns-aliases", "ns-imports",
					   "ns-interns", "ns-map", "ns-name", "ns-publics", "ns-refers",
					   "ns-resolve", "ns-unalias", "ns-unmap", "nth", "nthnext", "nthrest",
					   "num", "number?", "numerator", "object-array", "odd?", "or", "parents",
					   "partial", "partition", "partition-all", "partition-by", "pcalls", "peek",
					   "persistent!", "pmap", "pop", "pop!", "pop-thread-bindings", "pos-int?",
					   "pos?", "pr", "pr-str", "prefer-method", "prefers",
					   "primitives-classnames", "print", "print-ctor", "print-dup",
					   "print-method", "print-simple", "print-str", "printf", "println",
					   "println-str", "prn", "prn-str", "promise", "proxy",
					   "proxy-call-with-super", "proxy-mappings", "proxy-name", "proxy-super",
					   "push-thread-bindings", "pvalues", "qualified-ident?",
					   "qualified-keyword?", "qualified-symbol?", "quot", "rand", "rand-int",
					   "rand-nth", "random-sample", "range", "ratio?", "rational?",
					   "rationalize", "re-find", "re-groups", "re-matcher", "re-matches",
					   "re-pattern", "re-seq", "read", "read-line", "read-string",
					   "reader-conditional", "reader-conditional?", "realized?", "record?",
					   "reduce", "reduce-kv", "reduced", "reduced?", "reductions", "ref",
					   "ref-history-count", "ref-max-history", "ref-min-history", "ref-set",
					   "refer", "refer-clojure", "reify", "release-pending-sends", "rem",
					   "remove", "remove-all-methods", "remove-method", "remove-ns",
					   "remove-watch", "repeat", "repeatedly", "replace", "replicate", "require",
					   "reset!", "reset-meta!", "reset-vals!", "resolve", "rest",
					   "restart-agent", "resultset-seq", "reverse", "reversible?", "rseq",
					   "rsubseq", "run!", "satisfies?", "second", "select-keys", "send",
					   "send-off", "send-via", "seq", "seq?", "seqable?", "seque", "sequence",
					   "sequential?", "set", "set-agent-send-executor!",
					   "set-agent-send-off-executor!", "set-error-handler!", "set-error-mode!",
					   "set-validator!", "set?", "short", "short-array", "shorts", "shuffle",
					   "shutdown-agents", "simple-ident?", "simple-keyword?", "simple-symbol?",
					   "slurp", "some", "some->", "some->>", "some-fn", "some?", "sort",
					   "sort-by", "sorted-map", "sorted-map-by", "sorted-set", "sorted-set-by",
					   "sorted?", "special-symbol?", "spit", "split-at", "split-with", "str",
					   "string?", "struct", "struct-map", "subs", "subseq", "subvec", "supers",
					   "swap!", "swap-vals!", "symbol", "symbol?", "sync", "tagged-literal",
					   "tagged-literal?", "take", "take-last", "take-nth", "take-while", "test",
					   "the-ns", "thread-bound?", "time", "to-array", "to-array-2d",
					   "trampoline", "transduce", "transient", "tree-seq", "true?", "type",
					   "unchecked-add", "unchecked-add-int", "unchecked-byte", "unchecked-char",
					   "unchecked-dec", "unchecked-dec-int", "unchecked-divide-int",
					   "unchecked-double", "unchecked-float", "unchecked-inc",
					   "unchecked-inc-int", "unchecked-int", "unchecked-long",
					   "unchecked-multiply", "unchecked-multiply-int", "unchecked-negate",
					   "unchecked-negate-int", "unchecked-remainder-int", "unchecked-short",
					   "unchecked-subtract", "unchecked-subtract-int", "underive", "unquote",
					   "unquote-splicing", "unreduced", "unsigned-bit-shift-right", "update",
					   "update-in", "update-proxy", "uri?", "use", "uuid?", "val", "vals",
					   "var-get", "var-set", "var?", "vary-meta", "vec", "vector", "vector-of",
					   "vector?", "volatile!", "volatile?", "vreset!", "vswap!", "when",
					   "when-first", "when-let", "when-not", "when-some", "while",
					   "with-bindings", "with-bindings*", "with-in-str", "with-loading-context",
					   "with-local-vars", "with-meta", "with-open", "with-out-str",
					   "with-precision", "with-redefs", "with-redefs-fn", "xml-seq", "zero?",
					   "zipmap"];
	var haveBodyParameter = [
	  "->", "->>", "as->", "binding", "bound-fn", "case", "catch", "comment",
	  "cond", "cond->", "cond->>", "condp", "def", "definterface", "defmethod",
	  "defn", "defmacro", "defprotocol", "defrecord", "defstruct", "deftype",
	  "do", "doseq", "dotimes", "doto", "extend", "extend-protocol",
	  "extend-type", "fn", "for", "future", "if", "if-let", "if-not", "if-some",
	  "let", "letfn", "locking", "loop", "ns", "proxy", "reify", "struct-map",
	  "some->", "some->>", "try", "when", "when-first", "when-let", "when-not",
	  "when-some", "while", "with-bindings", "with-bindings*", "with-in-str",
	  "with-loading-context", "with-local-vars", "with-meta", "with-open",
	  "with-out-str", "with-precision", "with-redefs", "with-redefs-fn"];
	
	var atom = createLookupMap(atoms);
	var specialForm = createLookupMap(specialForms);
	var coreSymbol = createLookupMap(coreSymbols);
	var hasBodyParameter = createLookupMap(haveBodyParameter);
	var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
	var numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
	var characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;
	
	// simple-namespace := /^[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*/
	// simple-symbol    := /^(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)/
	// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>
	var qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
	
	function base(stream, state) {
	  if (stream.eatSpace() || stream.eat(",")) return ["space", null];
	  if (stream.match(numberLiteral)) return [null, "number"];
	  if (stream.match(characterLiteral)) return [null, "string.special"];
	  if (stream.eat(/^"/)) return (state.tokenize = inString)(stream, state);
	  if (stream.eat(/^[(\[{]/)) return ["open", "bracket"];
	  if (stream.eat(/^[)\]}]/)) return ["close", "bracket"];
	  if (stream.eat(/^;/)) {stream.skipToEnd(); return ["space", "comment"];}
	  if (stream.eat(/^[#'@^`~]/)) return [null, "meta"];
	
	  var matches = stream.match(qualifiedSymbol);
	  var symbol = matches && matches[0];
	
	  if (!symbol) {
		// advance stream by at least one character so we don't get stuck.
		stream.next();
		stream.eatWhile(function (c) {return !is(c, delimiter);});
		return [null, "error"];
	  }
	
	  if (symbol === "comment" && state.lastToken === "(")
		return (state.tokenize = inComment)(stream, state);
	  if (is(symbol, atom) || symbol.charAt(0) === ":") return ["symbol", "atom"];
	  if (is(symbol, specialForm) || is(symbol, coreSymbol)) return ["symbol", "keyword"];
	  if (state.lastToken === "(") return ["symbol", "builtin"]; // other operator
	
	  return ["symbol", "variable"];
	}
	
	function inString(stream, state) {
	  var escaped = false, next;
	
	  while (next = stream.next()) {
		if (next === "\"" && !escaped) {state.tokenize = base; break;}
		escaped = !escaped && next === "\\";
	  }
	
	  return [null, "string"];
	}
	
	function inComment(stream, state) {
	  var parenthesisCount = 1;
	  var next;
	
	  while (next = stream.next()) {
		if (next === ")") parenthesisCount--;
		if (next === "(") parenthesisCount++;
		if (parenthesisCount === 0) {
		  stream.backUp(1);
		  state.tokenize = base;
		  break;
		}
	  }
	
	  return ["space", "comment"];
	}
	
	function createLookupMap(words) {
	  var obj = {};
	
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	
	  return obj;
	}
	
	function is(value, test) {
	  if (test instanceof RegExp) return test.test(value);
	  if (test instanceof Object) return test.propertyIsEnumerable(value);
	}
	
	const clojure = {
	  name: "clojure",
	  startState: function () {
		return {
		  ctx: {prev: null, start: 0, indentTo: 0},
		  lastToken: null,
		  tokenize: base
		};
	  },
	
	  token: function (stream, state) {
		if (stream.sol() && (typeof state.ctx.indentTo !== "number"))
		  state.ctx.indentTo = state.ctx.start + 1;
	
		var typeStylePair = state.tokenize(stream, state);
		var type = typeStylePair[0];
		var style = typeStylePair[1];
		var current = stream.current();
	
		if (type !== "space") {
		  if (state.lastToken === "(" && state.ctx.indentTo === null) {
			if (type === "symbol" && is(current, hasBodyParameter))
			  state.ctx.indentTo = state.ctx.start + stream.indentUnit;
			else state.ctx.indentTo = "next";
		  } else if (state.ctx.indentTo === "next") {
			state.ctx.indentTo = stream.column();
		  }
	
		  state.lastToken = current;
		}
	
		if (type === "open")
		  state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
		else if (type === "close") state.ctx = state.ctx.prev || state.ctx;
	
		return style;
	  },
	
	  indent: function (state) {
		var i = state.ctx.indentTo;
	
		return (typeof i === "number") ?
		  i :
		  state.ctx.start + 1;
	  },
	
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", '"']},
		commentTokens: {line: ";;"},
		autocomplete: [].concat(atoms, specialForms, coreSymbols)
	  }
	};
	
	exports.clojure = clojure;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/cmake.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/cmake.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;
	
	function tokenString(stream, state) {
	  var current, prev, found_var = false;
	  while (!stream.eol() && (current = stream.next()) != state.pending) {
		if (current === '$' && prev != '\\' && state.pending == '"') {
		  found_var = true;
		  break;
		}
		prev = current;
	  }
	  if (found_var) {
		stream.backUp(1);
	  }
	  if (current == state.pending) {
		state.continueString = false;
	  } else {
		state.continueString = true;
	  }
	  return "string";
	}
	
	function tokenize(stream, state) {
	  var ch = stream.next();
	
	  // Have we found a variable?
	  if (ch === '$') {
		if (stream.match(variable_regex)) {
		  return 'variableName.special';
		}
		return 'variable';
	  }
	  // Should we still be looking for the end of a string?
	  if (state.continueString) {
		// If so, go through the loop again
		stream.backUp(1);
		return tokenString(stream, state);
	  }
	  // Do we just have a function on our hands?
	  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
	  if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
		stream.backUp(1);
		return 'def';
	  }
	  if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  }
	  // Have we found a string?
	  if (ch == "'" || ch == '"') {
		// Store the type (single or double)
		state.pending = ch;
		// Perform the looping function to find the end
		return tokenString(stream, state);
	  }
	  if (ch == '(' || ch == ')') {
		return 'bracket';
	  }
	  if (ch.match(/[0-9]/)) {
		return 'number';
	  }
	  stream.eatWhile(/[\w-]/);
	  return null;
	}
	const cmake = {
	  name: "cmake",
	  startState: function () {
		var state = {};
		state.inDefinition = false;
		state.inInclude = false;
		state.continueString = false;
		state.pending = false;
		return state;
	  },
	  token: function (stream, state) {
		if (stream.eatSpace()) return null;
		return tokenize(stream, state);
	  }
	};
	
	exports.cmake = cmake;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/cobol.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/cobol.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var BUILTIN = "builtin", COMMENT = "comment", STRING = "string",
		ATOM = "atom", NUMBER = "number", KEYWORD = "keyword", MODTAG = "header",
		COBOLLINENUM = "def", PERIOD = "link";
	function makeKeywords(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	var atoms = makeKeywords("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
	var keywords = makeKeywords(
	  "ACCEPT ACCESS ACQUIRE ADD ADDRESS " +
		"ADVANCING AFTER ALIAS ALL ALPHABET " +
		"ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED " +
		"ALSO ALTER ALTERNATE AND ANY " +
		"ARE AREA AREAS ARITHMETIC ASCENDING " +
		"ASSIGN AT ATTRIBUTE AUTHOR AUTO " +
		"AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS " +
		"B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP " +
		"BEFORE BELL BINARY BIT BITS " +
		"BLANK BLINK BLOCK BOOLEAN BOTTOM " +
		"BY CALL CANCEL CD CF " +
		"CH CHARACTER CHARACTERS CLASS CLOCK-UNITS " +
		"CLOSE COBOL CODE CODE-SET COL " +
		"COLLATING COLUMN COMMA COMMIT COMMITMENT " +
		"COMMON COMMUNICATION COMP COMP-0 COMP-1 " +
		"COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 " +
		"COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 " +
		"COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 " +
		"COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE " +
		"CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS " +
		"CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS " +
		"CONVERTING COPY CORR CORRESPONDING COUNT " +
		"CRT CRT-UNDER CURRENCY CURRENT CURSOR " +
		"DATA DATE DATE-COMPILED DATE-WRITTEN DAY " +
		"DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION " +
		"DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS " +
		"DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE " +
		"DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING " +
		"DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED " +
		"DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION " +
		"DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 " +
		"DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 " +
		"DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION " +
		"DOWN DROP DUPLICATE DUPLICATES DYNAMIC " +
		"EBCDIC EGI EJECT ELSE EMI " +
		"EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. " +
		"END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY " +
		"END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY " +
		"END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN " +
		"END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT " +
		"END-UNSTRING END-WRITE END-XML ENTER ENTRY " +
		"ENVIRONMENT EOP EQUAL EQUALS ERASE " +
		"ERROR ESI EVALUATE EVERY EXCEEDS " +
		"EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL " +
		"EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL " +
		"FILE-STREAM FILES FILLER FINAL FIND " +
		"FINISH FIRST FOOTING FOR FOREGROUND-COLOR " +
		"FOREGROUND-COLOUR FORMAT FREE FROM FULL " +
		"FUNCTION GENERATE GET GIVING GLOBAL " +
		"GO GOBACK GREATER GROUP HEADING " +
		"HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL " +
		"ID IDENTIFICATION IF IN INDEX " +
		"INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 " +
		"INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED " +
		"INDIC INDICATE INDICATOR INDICATORS INITIAL " +
		"INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT " +
		"INSTALLATION INTO INVALID INVOKE IS " +
		"JUST JUSTIFIED KANJI KEEP KEY " +
		"LABEL LAST LD LEADING LEFT " +
		"LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY " +
		"LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER " +
		"LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE " +
		"LOCALE LOCALLY LOCK " +
		"MEMBER MEMORY MERGE MESSAGE METACLASS " +
		"MODE MODIFIED MODIFY MODULES MOVE " +
		"MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE " +
		"NEXT NO NO-ECHO NONE NOT " +
		"NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER " +
		"NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS " +
		"OF OFF OMITTED ON ONLY " +
		"OPEN OPTIONAL OR ORDER ORGANIZATION " +
		"OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL " +
		"PADDING PAGE PAGE-COUNTER PARSE PERFORM " +
		"PF PH PIC PICTURE PLUS " +
		"POINTER POSITION POSITIVE PREFIX PRESENT " +
		"PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES " +
		"PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID " +
		"PROMPT PROTECTED PURGE QUEUE QUOTE " +
		"QUOTES RANDOM RD READ READY " +
		"REALM RECEIVE RECONNECT RECORD RECORD-NAME " +
		"RECORDS RECURSIVE REDEFINES REEL REFERENCE " +
		"REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE " +
		"REMAINDER REMOVAL RENAMES REPEATED REPLACE " +
		"REPLACING REPORT REPORTING REPORTS REPOSITORY " +
		"REQUIRED RERUN RESERVE RESET RETAINING " +
		"RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO " +
		"REVERSED REWIND REWRITE RF RH " +
		"RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED " +
		"RUN SAME SCREEN SD SEARCH " +
		"SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT " +
		"SELECT SEND SENTENCE SEPARATE SEQUENCE " +
		"SEQUENTIAL SET SHARED SIGN SIZE " +
		"SKIP1 SKIP2 SKIP3 SORT SORT-MERGE " +
		"SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL " +
		"SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 " +
		"START STARTING STATUS STOP STORE " +
		"STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA " +
		"SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS " +
		"SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT " +
		"TABLE TALLYING TAPE TENANT TERMINAL " +
		"TERMINATE TEST TEXT THAN THEN " +
		"THROUGH THRU TIME TIMES TITLE " +
		"TO TOP TRAILING TRAILING-SIGN TRANSACTION " +
		"TYPE TYPEDEF UNDERLINE UNEQUAL UNIT " +
		"UNSTRING UNTIL UP UPDATE UPON " +
		"USAGE USAGE-MODE USE USING VALID " +
		"VALIDATE VALUE VALUES VARYING VLR " +
		"WAIT WHEN WHEN-COMPILED WITH WITHIN " +
		"WORDS WORKING-STORAGE WRITE XML XML-CODE " +
		"XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL " );
	
	var builtins = makeKeywords("- * ** / + < <= = > >= ");
	var tests = {
	  digit: /\d/,
	  digit_or_colon: /[\d:]/,
	  hex: /[0-9a-f]/i,
	  sign: /[+-]/,
	  exponent: /e/i,
	  keyword_char: /[^\s\(\[\;\)\]]/,
	  symbol: /[\w*+\-]/
	};
	function isNumber(ch, stream){
	  // hex
	  if ( ch === '0' && stream.eat(/x/i) ) {
		stream.eatWhile(tests.hex);
		return true;
	  }
	  // leading sign
	  if ( ( ch == '+' || ch == '-' ) && ( tests.digit.test(stream.peek()) ) ) {
		stream.eat(tests.sign);
		ch = stream.next();
	  }
	  if ( tests.digit.test(ch) ) {
		stream.eat(ch);
		stream.eatWhile(tests.digit);
		if ( '.' == stream.peek()) {
		  stream.eat('.');
		  stream.eatWhile(tests.digit);
		}
		if ( stream.eat(tests.exponent) ) {
		  stream.eat(tests.sign);
		  stream.eatWhile(tests.digit);
		}
		return true;
	  }
	  return false;
	}
	const cobol = {
	  name: "cobol",
	  startState: function () {
		return {
		  indentStack: null,
		  indentation: 0,
		  mode: false
		};
	  },
	  token: function (stream, state) {
		if (state.indentStack == null && stream.sol()) {
		  // update indentation, but only if indentStack is empty
		  state.indentation = 6 ; //stream.indentation();
		}
		// skip spaces
		if (stream.eatSpace()) {
		  return null;
		}
		var returnType = null;
		switch(state.mode){
		case "string": // multi-line string parsing mode
		  var next = false;
		  while ((next = stream.next()) != null) {
			if ((next == "\"" || next == "\'") && !stream.match(/['"]/, false)) {
			  state.mode = false;
			  break;
			}
		  }
		  returnType = STRING; // continue on in string mode
		  break;
		default: // default parsing mode
		  var ch = stream.next();
		  var col = stream.column();
		  if (col >= 0 && col <= 5) {
			returnType = COBOLLINENUM;
		  } else if (col >= 72 && col <= 79) {
			stream.skipToEnd();
			returnType = MODTAG;
		  } else if (ch == "*" && col == 6) { // comment
			stream.skipToEnd(); // rest of the line is a comment
			returnType = COMMENT;
		  } else if (ch == "\"" || ch == "\'") {
			state.mode = "string";
			returnType = STRING;
		  } else if (ch == "'" && !( tests.digit_or_colon.test(stream.peek()) )) {
			returnType = ATOM;
		  } else if (ch == ".") {
			returnType = PERIOD;
		  } else if (isNumber(ch,stream)){
			returnType = NUMBER;
		  } else {
			if (stream.current().match(tests.symbol)) {
			  while (col < 71) {
				if (stream.eat(tests.symbol) === undefined) {
				  break;
				} else {
				  col++;
				}
			  }
			}
			if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {
			  returnType = KEYWORD;
			} else if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) {
			  returnType = BUILTIN;
			} else if (atoms && atoms.propertyIsEnumerable(stream.current().toUpperCase())) {
			  returnType = ATOM;
			} else returnType = null;
		  }
		}
		return returnType;
	  },
	  indent: function (state) {
		if (state.indentStack == null) return state.indentation;
		return state.indentStack.indent;
	  }
	};
	
	exports.cobol = cobol;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/coffeescript.cjs":
	/*!*****************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/coffeescript.cjs ***!
	  \*****************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var ERRORCLASS = "error";
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	
	var operators = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
	var delimiters = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
	var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;
	var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;
	
	var wordOperators = wordRegexp(["and", "or", "not",
									"is", "isnt", "in",
									"instanceof", "typeof"]);
	var indentKeywords = ["for", "while", "loop", "if", "unless", "else",
						  "switch", "try", "catch", "finally", "class"];
	var commonKeywords = ["break", "by", "continue", "debugger", "delete",
						  "do", "in", "of", "new", "return", "then",
						  "this", "@", "throw", "when", "until", "extends"];
	
	var keywords = wordRegexp(indentKeywords.concat(commonKeywords));
	
	indentKeywords = wordRegexp(indentKeywords);
	
	
	var stringPrefixes = /^('{3}|\"{3}|['\"])/;
	var regexPrefixes = /^(\/{3}|\/)/;
	var commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
	var constants = wordRegexp(commonConstants);
	
	// Tokenizers
	function tokenBase(stream, state) {
	  // Handle scope changes
	  if (stream.sol()) {
		if (state.scope.align === null) state.scope.align = false;
		var scopeOffset = state.scope.offset;
		if (stream.eatSpace()) {
		  var lineOffset = stream.indentation();
		  if (lineOffset > scopeOffset && state.scope.type == "coffee") {
			return "indent";
		  } else if (lineOffset < scopeOffset) {
			return "dedent";
		  }
		  return null;
		} else {
		  if (scopeOffset > 0) {
			dedent(stream, state);
		  }
		}
	  }
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  var ch = stream.peek();
	
	  // Handle docco title comment (single line)
	  if (stream.match("####")) {
		stream.skipToEnd();
		return "comment";
	  }
	
	  // Handle multi line comments
	  if (stream.match("###")) {
		state.tokenize = longComment;
		return state.tokenize(stream, state);
	  }
	
	  // Single line comment
	  if (ch === "#") {
		stream.skipToEnd();
		return "comment";
	  }
	
	  // Handle number literals
	  if (stream.match(/^-?[0-9\.]/, false)) {
		var floatLiteral = false;
		// Floats
		if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
		  floatLiteral = true;
		}
		if (stream.match(/^-?\d+\.\d*/)) {
		  floatLiteral = true;
		}
		if (stream.match(/^-?\.\d+/)) {
		  floatLiteral = true;
		}
	
		if (floatLiteral) {
		  // prevent from getting extra . on 1..
		  if (stream.peek() == "."){
			stream.backUp(1);
		  }
		  return "number";
		}
		// Integers
		var intLiteral = false;
		// Hex
		if (stream.match(/^-?0x[0-9a-f]+/i)) {
		  intLiteral = true;
		}
		// Decimal
		if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
		  intLiteral = true;
		}
		// Zero by itself with no other piece of number.
		if (stream.match(/^-?0(?![\dx])/i)) {
		  intLiteral = true;
		}
		if (intLiteral) {
		  return "number";
		}
	  }
	
	  // Handle strings
	  if (stream.match(stringPrefixes)) {
		state.tokenize = tokenFactory(stream.current(), false, "string");
		return state.tokenize(stream, state);
	  }
	  // Handle regex literals
	  if (stream.match(regexPrefixes)) {
		if (stream.current() != "/" || stream.match(/^.*\//, false)) { // prevent highlight of division
		  state.tokenize = tokenFactory(stream.current(), true, "string.special");
		  return state.tokenize(stream, state);
		} else {
		  stream.backUp(1);
		}
	  }
	
	
	
	  // Handle operators and delimiters
	  if (stream.match(operators) || stream.match(wordOperators)) {
		return "operator";
	  }
	  if (stream.match(delimiters)) {
		return "punctuation";
	  }
	
	  if (stream.match(constants)) {
		return "atom";
	  }
	
	  if (stream.match(atProp) || state.prop && stream.match(identifiers)) {
		return "property";
	  }
	
	  if (stream.match(keywords)) {
		return "keyword";
	  }
	
	  if (stream.match(identifiers)) {
		return "variable";
	  }
	
	  // Handle non-detected items
	  stream.next();
	  return ERRORCLASS;
	}
	
	function tokenFactory(delimiter, singleline, outclass) {
	  return function(stream, state) {
		while (!stream.eol()) {
		  stream.eatWhile(/[^'"\/\\]/);
		  if (stream.eat("\\")) {
			stream.next();
			if (singleline && stream.eol()) {
			  return outclass;
			}
		  } else if (stream.match(delimiter)) {
			state.tokenize = tokenBase;
			return outclass;
		  } else {
			stream.eat(/['"\/]/);
		  }
		}
		if (singleline) {
		  state.tokenize = tokenBase;
		}
		return outclass;
	  };
	}
	
	function longComment(stream, state) {
	  while (!stream.eol()) {
		stream.eatWhile(/[^#]/);
		if (stream.match("###")) {
		  state.tokenize = tokenBase;
		  break;
		}
		stream.eatWhile("#");
	  }
	  return "comment";
	}
	
	function indent(stream, state, type = "coffee") {
	  var offset = 0, align = false, alignOffset = null;
	  for (var scope = state.scope; scope; scope = scope.prev) {
		if (scope.type === "coffee" || scope.type == "}") {
		  offset = scope.offset + stream.indentUnit;
		  break;
		}
	  }
	  if (type !== "coffee") {
		align = null;
		alignOffset = stream.column() + stream.current().length;
	  } else if (state.scope.align) {
		state.scope.align = false;
	  }
	  state.scope = {
		offset: offset,
		type: type,
		prev: state.scope,
		align: align,
		alignOffset: alignOffset
	  };
	}
	
	function dedent(stream, state) {
	  if (!state.scope.prev) return;
	  if (state.scope.type === "coffee") {
		var _indent = stream.indentation();
		var matched = false;
		for (var scope = state.scope; scope; scope = scope.prev) {
		  if (_indent === scope.offset) {
			matched = true;
			break;
		  }
		}
		if (!matched) {
		  return true;
		}
		while (state.scope.prev && state.scope.offset !== _indent) {
		  state.scope = state.scope.prev;
		}
		return false;
	  } else {
		state.scope = state.scope.prev;
		return false;
	  }
	}
	
	function tokenLexer(stream, state) {
	  var style = state.tokenize(stream, state);
	  var current = stream.current();
	
	  // Handle scope changes.
	  if (current === "return") {
		state.dedent = true;
	  }
	  if (((current === "->" || current === "=>") && stream.eol())
		  || style === "indent") {
		indent(stream, state);
	  }
	  var delimiter_index = "[({".indexOf(current);
	  if (delimiter_index !== -1) {
		indent(stream, state, "])}".slice(delimiter_index, delimiter_index+1));
	  }
	  if (indentKeywords.exec(current)){
		indent(stream, state);
	  }
	  if (current == "then"){
		dedent(stream, state);
	  }
	
	
	  if (style === "dedent") {
		if (dedent(stream, state)) {
		  return ERRORCLASS;
		}
	  }
	  delimiter_index = "])}".indexOf(current);
	  if (delimiter_index !== -1) {
		while (state.scope.type == "coffee" && state.scope.prev)
		  state.scope = state.scope.prev;
		if (state.scope.type == current)
		  state.scope = state.scope.prev;
	  }
	  if (state.dedent && stream.eol()) {
		if (state.scope.type == "coffee" && state.scope.prev)
		  state.scope = state.scope.prev;
		state.dedent = false;
	  }
	
	  return style == "indent" || style == "dedent" ? null : style;
	}
	
	const coffeeScript = {
	  name: "coffeescript",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  scope: {offset: 0, type:"coffee", prev: null, align: false},
		  prop: false,
		  dedent: 0
		};
	  },
	
	  token: function(stream, state) {
		var fillAlign = state.scope.align === null && state.scope;
		if (fillAlign && stream.sol()) fillAlign.align = false;
	
		var style = tokenLexer(stream, state);
		if (style && style != "comment") {
		  if (fillAlign) fillAlign.align = true;
		  state.prop = style == "punctuation" && stream.current() == ".";
		}
	
		return style;
	  },
	
	  indent: function(state, text) {
		if (state.tokenize != tokenBase) return 0;
		var scope = state.scope;
		var closer = text && "])}".indexOf(text.charAt(0)) > -1;
		if (closer) while (scope.type == "coffee" && scope.prev) scope = scope.prev;
		var closes = closer && scope.type === text.charAt(0);
		if (scope.align)
		  return scope.alignOffset - (closes ? 1 : 0);
		else
		  return (closes ? scope.prev : scope).offset;
	  },
	
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.coffeeScript = coffeeScript;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/commonlisp.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/commonlisp.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
	var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
	var numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
	var symbol = /[^\s'`,@()\[\]";]/;
	var type;
	
	function readSym(stream) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch == "\\") stream.next();
		else if (!symbol.test(ch)) { stream.backUp(1); break; }
	  }
	  return stream.current();
	}
	
	function base(stream, state) {
	  if (stream.eatSpace()) {type = "ws"; return null;}
	  if (stream.match(numLiteral)) return "number";
	  var ch = stream.next();
	  if (ch == "\\") ch = stream.next();
	
	  if (ch == '"') return (state.tokenize = inString)(stream, state);
	  else if (ch == "(") { type = "open"; return "bracket"; }
	  else if (ch == ")" || ch == "]") { type = "close"; return "bracket"; }
	  else if (ch == ";") { stream.skipToEnd(); type = "ws"; return "comment"; }
	  else if (/['`,@]/.test(ch)) return null;
	  else if (ch == "|") {
		if (stream.skipTo("|")) { stream.next(); return "variableName"; }
		else { stream.skipToEnd(); return "error"; }
	  } else if (ch == "#") {
		var ch = stream.next();
		if (ch == "(") { type = "open"; return "bracket"; }
		else if (/[+\-=\.']/.test(ch)) return null;
		else if (/\d/.test(ch) && stream.match(/^\d*#/)) return null;
		else if (ch == "|") return (state.tokenize = inComment)(stream, state);
		else if (ch == ":") { readSym(stream); return "meta"; }
		else if (ch == "\\") { stream.next(); readSym(stream); return "string.special" }
		else return "error";
	  } else {
		var name = readSym(stream);
		if (name == ".") return null;
		type = "symbol";
		if (name == "nil" || name == "t" || name.charAt(0) == ":") return "atom";
		if (state.lastType == "open" && (specialForm.test(name) || assumeBody.test(name))) return "keyword";
		if (name.charAt(0) == "&") return "variableName.special";
		return "variableName";
	  }
	}
	
	function inString(stream, state) {
	  var escaped = false, next;
	  while (next = stream.next()) {
		if (next == '"' && !escaped) { state.tokenize = base; break; }
		escaped = !escaped && next == "\\";
	  }
	  return "string";
	}
	
	function inComment(stream, state) {
	  var next, last;
	  while (next = stream.next()) {
		if (next == "#" && last == "|") { state.tokenize = base; break; }
		last = next;
	  }
	  type = "ws";
	  return "comment";
	}
	
	const commonLisp = {
	  name: "commonlisp",
	  startState: function () {
		return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};
	  },
	
	  token: function (stream, state) {
		if (stream.sol() && typeof state.ctx.indentTo != "number")
		  state.ctx.indentTo = state.ctx.start + 1;
	
		type = null;
		var style = state.tokenize(stream, state);
		if (type != "ws") {
		  if (state.ctx.indentTo == null) {
			if (type == "symbol" && assumeBody.test(stream.current()))
			  state.ctx.indentTo = state.ctx.start + stream.indentUnit;
			else
			  state.ctx.indentTo = "next";
		  } else if (state.ctx.indentTo == "next") {
			state.ctx.indentTo = stream.column();
		  }
		  state.lastType = type;
		}
		if (type == "open") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
		else if (type == "close") state.ctx = state.ctx.prev || state.ctx;
		return style;
	  },
	
	  indent: function (state) {
		var i = state.ctx.indentTo;
		return typeof i == "number" ? i : state.ctx.start + 1;
	  },
	
	  languageData: {
		commentTokens: {line: ";;", block: {open: "#|", close: "|#"}},
		closeBrackets: {brackets: ["(", "[", "{", '"']}
	  }
	};
	
	exports.commonLisp = commonLisp;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/crystal.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/crystal.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegExp(words, end) {
	  return new RegExp((end ? "" : "^") + "(?:" + words.join("|") + ")" + (end ? "$" : "\\b"));
	}
	
	function chain(tokenize, stream, state) {
	  state.tokenize.push(tokenize);
	  return tokenize(stream, state);
	}
	
	var operators = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
	var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
	var indexingOperators = /^(?:\[\][?=]?)/;
	var anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
	var idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
	var types = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
	var keywords = wordRegExp([
	  "abstract", "alias", "as", "asm", "begin", "break", "case", "class", "def", "do",
	  "else", "elsif", "end", "ensure", "enum", "extend", "for", "fun", "if",
	  "include", "instance_sizeof", "lib", "macro", "module", "next", "of", "out", "pointerof",
	  "private", "protected", "rescue", "return", "require", "select", "sizeof", "struct",
	  "super", "then", "type", "typeof", "uninitialized", "union", "unless", "until", "when", "while", "with",
	  "yield", "__DIR__", "__END_LINE__", "__FILE__", "__LINE__"
	]);
	var atomWords = wordRegExp(["true", "false", "nil", "self"]);
	var indentKeywordsArray = [
	  "def", "fun", "macro",
	  "class", "module", "struct", "lib", "enum", "union",
	  "do", "for"
	];
	var indentKeywords = wordRegExp(indentKeywordsArray);
	var indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
	var indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
	var dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
	var dedentKeywords = wordRegExp(dedentKeywordsArray);
	var dedentPunctualsArray = ["\\)", "\\}", "\\]"];
	var dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
	var nextTokenizer = {
	  "def": tokenFollowIdent, "fun": tokenFollowIdent, "macro": tokenMacroDef,
	  "class": tokenFollowType, "module": tokenFollowType, "struct": tokenFollowType,
	  "lib": tokenFollowType, "enum": tokenFollowType, "union": tokenFollowType
	};
	var matching = {"[": "]", "{": "}", "(": ")", "<": ">"};
	
	function tokenBase(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  // Macros
	  if (state.lastToken != "\\" && stream.match("{%", false)) {
		return chain(tokenMacro("%", "%"), stream, state);
	  }
	
	  if (state.lastToken != "\\" && stream.match("{{", false)) {
		return chain(tokenMacro("{", "}"), stream, state);
	  }
	
	  // Comments
	  if (stream.peek() == "#") {
		stream.skipToEnd();
		return "comment";
	  }
	
	  // Variables and keywords
	  var matched;
	  if (stream.match(idents)) {
		stream.eat(/[?!]/);
	
		matched = stream.current();
		if (stream.eat(":")) {
		  return "atom";
		} else if (state.lastToken == ".") {
		  return "property";
		} else if (keywords.test(matched)) {
		  if (indentKeywords.test(matched)) {
			if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
			  state.blocks.push(matched);
			  state.currentIndent += 1;
			}
		  } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
			state.blocks.push(matched);
			state.currentIndent += 1;
		  } else if (matched == "end") {
			state.blocks.pop();
			state.currentIndent -= 1;
		  }
	
		  if (nextTokenizer.hasOwnProperty(matched)) {
			state.tokenize.push(nextTokenizer[matched]);
		  }
	
		  return "keyword";
		} else if (atomWords.test(matched)) {
		  return "atom";
		}
	
		return "variable";
	  }
	
	  // Class variables and instance variables
	  // or attributes
	  if (stream.eat("@")) {
		if (stream.peek() == "[") {
		  return chain(tokenNest("[", "]", "meta"), stream, state);
		}
	
		stream.eat("@");
		stream.match(idents) || stream.match(types);
		return "propertyName";
	  }
	
	  // Constants and types
	  if (stream.match(types)) {
		return "tag";
	  }
	
	  // Symbols or ':' operator
	  if (stream.eat(":")) {
		if (stream.eat("\"")) {
		  return chain(tokenQuote("\"", "atom", false), stream, state);
		} else if (stream.match(idents) || stream.match(types) ||
				   stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
		  return "atom";
		}
		stream.eat(":");
		return "operator";
	  }
	
	  // Strings
	  if (stream.eat("\"")) {
		return chain(tokenQuote("\"", "string", true), stream, state);
	  }
	
	  // Strings or regexps or macro variables or '%' operator
	  if (stream.peek() == "%") {
		var style = "string";
		var embed = true;
		var delim;
	
		if (stream.match("%r")) {
		  // Regexps
		  style = "string.special";
		  delim = stream.next();
		} else if (stream.match("%w")) {
		  embed = false;
		  delim = stream.next();
		} else if (stream.match("%q")) {
		  embed = false;
		  delim = stream.next();
		} else {
		  if(delim = stream.match(/^%([^\w\s=])/)) {
			delim = delim[1];
		  } else if (stream.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/)) {
			// Macro variables
			return "meta";
		  } else if (stream.eat('%')) {
			// '%' operator
			return "operator";
		  }
		}
	
		if (matching.hasOwnProperty(delim)) {
		  delim = matching[delim];
		}
		return chain(tokenQuote(delim, style, embed), stream, state);
	  }
	
	  // Here Docs
	  if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
		return chain(tokenHereDoc(matched[2], !matched[1]), stream, state)
	  }
	
	  // Characters
	  if (stream.eat("'")) {
		stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
		stream.eat("'");
		return "atom";
	  }
	
	  // Numbers
	  if (stream.eat("0")) {
		if (stream.eat("x")) {
		  stream.match(/^[0-9a-fA-F_]+/);
		} else if (stream.eat("o")) {
		  stream.match(/^[0-7_]+/);
		} else if (stream.eat("b")) {
		  stream.match(/^[01_]+/);
		}
		return "number";
	  }
	
	  if (stream.eat(/^\d/)) {
		stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
		return "number";
	  }
	
	  // Operators
	  if (stream.match(operators)) {
		stream.eat("="); // Operators can follow assign symbol.
		return "operator";
	  }
	
	  if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
		return "operator";
	  }
	
	  // Parens and braces
	  if (matched = stream.match(/[({[]/, false)) {
		matched = matched[0];
		return chain(tokenNest(matched, matching[matched], null), stream, state);
	  }
	
	  // Escapes
	  if (stream.eat("\\")) {
		stream.next();
		return "meta";
	  }
	
	  stream.next();
	  return null;
	}
	
	function tokenNest(begin, end, style, started) {
	  return function (stream, state) {
		if (!started && stream.match(begin)) {
		  state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);
		  state.currentIndent += 1;
		  return style;
		}
	
		var nextStyle = tokenBase(stream, state);
		if (stream.current() === end) {
		  state.tokenize.pop();
		  state.currentIndent -= 1;
		  nextStyle = style;
		}
	
		return nextStyle;
	  };
	}
	
	function tokenMacro(begin, end, started) {
	  return function (stream, state) {
		if (!started && stream.match("{" + begin)) {
		  state.currentIndent += 1;
		  state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);
		  return "meta";
		}
	
		if (stream.match(end + "}")) {
		  state.currentIndent -= 1;
		  state.tokenize.pop();
		  return "meta";
		}
	
		return tokenBase(stream, state);
	  };
	}
	
	function tokenMacroDef(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  var matched;
	  if (matched = stream.match(idents)) {
		if (matched == "def") {
		  return "keyword";
		}
		stream.eat(/[?!]/);
	  }
	
	  state.tokenize.pop();
	  return "def";
	}
	
	function tokenFollowIdent(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  if (stream.match(idents)) {
		stream.eat(/[!?]/);
	  } else {
		stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators);
	  }
	  state.tokenize.pop();
	  return "def";
	}
	
	function tokenFollowType(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  stream.match(types);
	  state.tokenize.pop();
	  return "def";
	}
	
	function tokenQuote(end, style, embed) {
	  return function (stream, state) {
		var escaped = false;
	
		while (stream.peek()) {
		  if (!escaped) {
			if (stream.match("{%", false)) {
			  state.tokenize.push(tokenMacro("%", "%"));
			  return style;
			}
	
			if (stream.match("{{", false)) {
			  state.tokenize.push(tokenMacro("{", "}"));
			  return style;
			}
	
			if (embed && stream.match("#{", false)) {
			  state.tokenize.push(tokenNest("#{", "}", "meta"));
			  return style;
			}
	
			var ch = stream.next();
	
			if (ch == end) {
			  state.tokenize.pop();
			  return style;
			}
	
			escaped = embed && ch == "\\";
		  } else {
			stream.next();
			escaped = false;
		  }
		}
	
		return style;
	  };
	}
	
	function tokenHereDoc(phrase, embed) {
	  return function (stream, state) {
		if (stream.sol()) {
		  stream.eatSpace();
		  if (stream.match(phrase)) {
			state.tokenize.pop();
			return "string";
		  }
		}
	
		var escaped = false;
		while (stream.peek()) {
		  if (!escaped) {
			if (stream.match("{%", false)) {
			  state.tokenize.push(tokenMacro("%", "%"));
			  return "string";
			}
	
			if (stream.match("{{", false)) {
			  state.tokenize.push(tokenMacro("{", "}"));
			  return "string";
			}
	
			if (embed && stream.match("#{", false)) {
			  state.tokenize.push(tokenNest("#{", "}", "meta"));
			  return "string";
			}
	
			escaped = embed && stream.next() == "\\";
		  } else {
			stream.next();
			escaped = false;
		  }
		}
	
		return "string";
	  }
	}
	
	const crystal = {
	  name: "crystal",
	  startState: function () {
		return {
		  tokenize: [tokenBase],
		  currentIndent: 0,
		  lastToken: null,
		  lastStyle: null,
		  blocks: []
		};
	  },
	
	  token: function (stream, state) {
		var style = state.tokenize[state.tokenize.length - 1](stream, state);
		var token = stream.current();
	
		if (style && style != "comment") {
		  state.lastToken = token;
		  state.lastStyle = style;
		}
	
		return style;
	  },
	
	  indent: function (state, textAfter, cx) {
		textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");
	
		if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
		  return cx.unit * (state.currentIndent - 1);
		}
	
		return cx.unit * state.currentIndent;
	  },
	
	  languageData: {
		indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
		commentTokens: {line: "#"}
	  }
	};
	
	exports.crystal = crystal;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/css.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/css.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkCSS(parserConfig) {
	  parserConfig = {...defaults, ...parserConfig};
	  var inline = parserConfig.inline;
	
	  var tokenHooks = parserConfig.tokenHooks,
		  documentTypes = parserConfig.documentTypes || {},
		  mediaTypes = parserConfig.mediaTypes || {},
		  mediaFeatures = parserConfig.mediaFeatures || {},
		  mediaValueKeywords = parserConfig.mediaValueKeywords || {},
		  propertyKeywords = parserConfig.propertyKeywords || {},
		  nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},
		  fontProperties = parserConfig.fontProperties || {},
		  counterDescriptors = parserConfig.counterDescriptors || {},
		  colorKeywords = parserConfig.colorKeywords || {},
		  valueKeywords = parserConfig.valueKeywords || {},
		  allowNested = parserConfig.allowNested,
		  lineComment = parserConfig.lineComment,
		  supportsAtComponent = parserConfig.supportsAtComponent === true,
		  highlightNonStandardPropertyKeywords = parserConfig.highlightNonStandardPropertyKeywords !== false;
	
	  var type, override;
	  function ret(style, tp) { type = tp; return style; }
	
	  // Tokenizers
	
	  function tokenBase(stream, state) {
		var ch = stream.next();
		if (tokenHooks[ch]) {
		  var result = tokenHooks[ch](stream, state);
		  if (result !== false) return result;
		}
		if (ch == "@") {
		  stream.eatWhile(/[\w\\\-]/);
		  return ret("def", stream.current());
		} else if (ch == "=" || (ch == "~" || ch == "|") && stream.eat("=")) {
		  return ret(null, "compare");
		} else if (ch == "\"" || ch == "'") {
		  state.tokenize = tokenString(ch);
		  return state.tokenize(stream, state);
		} else if (ch == "#") {
		  stream.eatWhile(/[\w\\\-]/);
		  return ret("atom", "hash");
		} else if (ch == "!") {
		  stream.match(/^\s*\w*/);
		  return ret("keyword", "important");
		} else if (/\d/.test(ch) || ch == "." && stream.eat(/\d/)) {
		  stream.eatWhile(/[\w.%]/);
		  return ret("number", "unit");
		} else if (ch === "-") {
		  if (/[\d.]/.test(stream.peek())) {
			stream.eatWhile(/[\w.%]/);
			return ret("number", "unit");
		  } else if (stream.match(/^-[\w\\\-]*/)) {
			stream.eatWhile(/[\w\\\-]/);
			if (stream.match(/^\s*:/, false))
			  return ret("def", "variable-definition");
			return ret("variableName", "variable");
		  } else if (stream.match(/^\w+-/)) {
			return ret("meta", "meta");
		  }
		} else if (/[,+>*\/]/.test(ch)) {
		  return ret(null, "select-op");
		} else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
		  return ret("qualifier", "qualifier");
		} else if (/[:;{}\[\]\(\)]/.test(ch)) {
		  return ret(null, ch);
		} else if (stream.match(/^[\w-.]+(?=\()/)) {
		  if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {
			state.tokenize = tokenParenthesized;
		  }
		  return ret("variableName.function", "variable");
		} else if (/[\w\\\-]/.test(ch)) {
		  stream.eatWhile(/[\w\\\-]/);
		  return ret("property", "word");
		} else {
		  return ret(null, null);
		}
	  }
	
	  function tokenString(quote) {
		return function(stream, state) {
		  var escaped = false, ch;
		  while ((ch = stream.next()) != null) {
			if (ch == quote && !escaped) {
			  if (quote == ")") stream.backUp(1);
			  break;
			}
			escaped = !escaped && ch == "\\";
		  }
		  if (ch == quote || !escaped && quote != ")") state.tokenize = null;
		  return ret("string", "string");
		};
	  }
	
	  function tokenParenthesized(stream, state) {
		stream.next(); // Must be '('
		if (!stream.match(/^\s*[\"\')]/, false))
		  state.tokenize = tokenString(")");
		else
		  state.tokenize = null;
		return ret(null, "(");
	  }
	
	  // Context management
	
	  function Context(type, indent, prev) {
		this.type = type;
		this.indent = indent;
		this.prev = prev;
	  }
	
	  function pushContext(state, stream, type, indent) {
		state.context = new Context(type, stream.indentation() + (indent === false ? 0 : stream.indentUnit), state.context);
		return type;
	  }
	
	  function popContext(state) {
		if (state.context.prev)
		  state.context = state.context.prev;
		return state.context.type;
	  }
	
	  function pass(type, stream, state) {
		return states[state.context.type](type, stream, state);
	  }
	  function popAndPass(type, stream, state, n) {
		for (var i = n || 1; i > 0; i--)
		  state.context = state.context.prev;
		return pass(type, stream, state);
	  }
	
	  // Parser
	
	  function wordAsValue(stream) {
		var word = stream.current().toLowerCase();
		if (valueKeywords.hasOwnProperty(word))
		  override = "atom";
		else if (colorKeywords.hasOwnProperty(word))
		  override = "keyword";
		else
		  override = "variable";
	  }
	
	  var states = {};
	
	  states.top = function(type, stream, state) {
		if (type == "{") {
		  return pushContext(state, stream, "block");
		} else if (type == "}" && state.context.prev) {
		  return popContext(state);
		} else if (supportsAtComponent && /@component/i.test(type)) {
		  return pushContext(state, stream, "atComponentBlock");
		} else if (/^@(-moz-)?document$/i.test(type)) {
		  return pushContext(state, stream, "documentTypes");
		} else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {
		  return pushContext(state, stream, "atBlock");
		} else if (/^@(font-face|counter-style)/i.test(type)) {
		  state.stateArg = type;
		  return "restricted_atBlock_before";
		} else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {
		  return "keyframes";
		} else if (type && type.charAt(0) == "@") {
		  return pushContext(state, stream, "at");
		} else if (type == "hash") {
		  override = "builtin";
		} else if (type == "word") {
		  override = "tag";
		} else if (type == "variable-definition") {
		  return "maybeprop";
		} else if (type == "interpolation") {
		  return pushContext(state, stream, "interpolation");
		} else if (type == ":") {
		  return "pseudo";
		} else if (allowNested && type == "(") {
		  return pushContext(state, stream, "parens");
		}
		return state.context.type;
	  };
	
	  states.block = function(type, stream, state) {
		if (type == "word") {
		  var word = stream.current().toLowerCase();
		  if (propertyKeywords.hasOwnProperty(word)) {
			override = "property";
			return "maybeprop";
		  } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {
			override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
			return "maybeprop";
		  } else if (allowNested) {
			override = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
			return "block";
		  } else {
			override = "error";
			return "maybeprop";
		  }
		} else if (type == "meta") {
		  return "block";
		} else if (!allowNested && (type == "hash" || type == "qualifier")) {
		  override = "error";
		  return "block";
		} else {
		  return states.top(type, stream, state);
		}
	  };
	
	  states.maybeprop = function(type, stream, state) {
		if (type == ":") return pushContext(state, stream, "prop");
		return pass(type, stream, state);
	  };
	
	  states.prop = function(type, stream, state) {
		if (type == ";") return popContext(state);
		if (type == "{" && allowNested) return pushContext(state, stream, "propBlock");
		if (type == "}" || type == "{") return popAndPass(type, stream, state);
		if (type == "(") return pushContext(state, stream, "parens");
	
		if (type == "hash" && !/^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(stream.current())) {
		  override = "error";
		} else if (type == "word") {
		  wordAsValue(stream);
		} else if (type == "interpolation") {
		  return pushContext(state, stream, "interpolation");
		}
		return "prop";
	  };
	
	  states.propBlock = function(type, _stream, state) {
		if (type == "}") return popContext(state);
		if (type == "word") { override = "property"; return "maybeprop"; }
		return state.context.type;
	  };
	
	  states.parens = function(type, stream, state) {
		if (type == "{" || type == "}") return popAndPass(type, stream, state);
		if (type == ")") return popContext(state);
		if (type == "(") return pushContext(state, stream, "parens");
		if (type == "interpolation") return pushContext(state, stream, "interpolation");
		if (type == "word") wordAsValue(stream);
		return "parens";
	  };
	
	  states.pseudo = function(type, stream, state) {
		if (type == "meta") return "pseudo";
	
		if (type == "word") {
		  override = "variableName.constant";
		  return state.context.type;
		}
		return pass(type, stream, state);
	  };
	
	  states.documentTypes = function(type, stream, state) {
		if (type == "word" && documentTypes.hasOwnProperty(stream.current())) {
		  override = "tag";
		  return state.context.type;
		} else {
		  return states.atBlock(type, stream, state);
		}
	  };
	
	  states.atBlock = function(type, stream, state) {
		if (type == "(") return pushContext(state, stream, "atBlock_parens");
		if (type == "}" || type == ";") return popAndPass(type, stream, state);
		if (type == "{") return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top");
	
		if (type == "interpolation") return pushContext(state, stream, "interpolation");
	
		if (type == "word") {
		  var word = stream.current().toLowerCase();
		  if (word == "only" || word == "not" || word == "and" || word == "or")
			override = "keyword";
		  else if (mediaTypes.hasOwnProperty(word))
			override = "attribute";
		  else if (mediaFeatures.hasOwnProperty(word))
			override = "property";
		  else if (mediaValueKeywords.hasOwnProperty(word))
			override = "keyword";
		  else if (propertyKeywords.hasOwnProperty(word))
			override = "property";
		  else if (nonStandardPropertyKeywords.hasOwnProperty(word))
			override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
		  else if (valueKeywords.hasOwnProperty(word))
			override = "atom";
		  else if (colorKeywords.hasOwnProperty(word))
			override = "keyword";
		  else
			override = "error";
		}
		return state.context.type;
	  };
	
	  states.atComponentBlock = function(type, stream, state) {
		if (type == "}")
		  return popAndPass(type, stream, state);
		if (type == "{")
		  return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top", false);
		if (type == "word")
		  override = "error";
		return state.context.type;
	  };
	
	  states.atBlock_parens = function(type, stream, state) {
		if (type == ")") return popContext(state);
		if (type == "{" || type == "}") return popAndPass(type, stream, state, 2);
		return states.atBlock(type, stream, state);
	  };
	
	  states.restricted_atBlock_before = function(type, stream, state) {
		if (type == "{")
		  return pushContext(state, stream, "restricted_atBlock");
		if (type == "word" && state.stateArg == "@counter-style") {
		  override = "variable";
		  return "restricted_atBlock_before";
		}
		return pass(type, stream, state);
	  };
	
	  states.restricted_atBlock = function(type, stream, state) {
		if (type == "}") {
		  state.stateArg = null;
		  return popContext(state);
		}
		if (type == "word") {
		  if ((state.stateArg == "@font-face" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||
			  (state.stateArg == "@counter-style" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))
			override = "error";
		  else
			override = "property";
		  return "maybeprop";
		}
		return "restricted_atBlock";
	  };
	
	  states.keyframes = function(type, stream, state) {
		if (type == "word") { override = "variable"; return "keyframes"; }
		if (type == "{") return pushContext(state, stream, "top");
		return pass(type, stream, state);
	  };
	
	  states.at = function(type, stream, state) {
		if (type == ";") return popContext(state);
		if (type == "{" || type == "}") return popAndPass(type, stream, state);
		if (type == "word") override = "tag";
		else if (type == "hash") override = "builtin";
		return "at";
	  };
	
	  states.interpolation = function(type, stream, state) {
		if (type == "}") return popContext(state);
		if (type == "{" || type == ";") return popAndPass(type, stream, state);
		if (type == "word") override = "variable";
		else if (type != "variable" && type != "(" && type != ")") override = "error";
		return "interpolation";
	  };
	
	  return {
		name: parserConfig.name,
		startState: function() {
		  return {tokenize: null,
				  state: inline ? "block" : "top",
				  stateArg: null,
				  context: new Context(inline ? "block" : "top", 0, null)};
		},
	
		token: function(stream, state) {
		  if (!state.tokenize && stream.eatSpace()) return null;
		  var style = (state.tokenize || tokenBase)(stream, state);
		  if (style && typeof style == "object") {
			type = style[1];
			style = style[0];
		  }
		  override = style;
		  if (type != "comment")
			state.state = states[state.state](type, stream, state);
		  return override;
		},
	
		indent: function(state, textAfter, iCx) {
		  var cx = state.context, ch = textAfter && textAfter.charAt(0);
		  var indent = cx.indent;
		  if (cx.type == "prop" && (ch == "}" || ch == ")")) cx = cx.prev;
		  if (cx.prev) {
			if (ch == "}" && (cx.type == "block" || cx.type == "top" ||
							  cx.type == "interpolation" || cx.type == "restricted_atBlock")) {
			  // Resume indentation from parent context.
			  cx = cx.prev;
			  indent = cx.indent;
			} else if (ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
					   ch == "{" && (cx.type == "at" || cx.type == "atBlock")) {
			  // Dedent relative to current context.
			  indent = Math.max(0, cx.indent - iCx.unit);
			}
		  }
		  return indent;
		},
	
		languageData: {
		  indentOnInput: /^\s*\}$/,
		  commentTokens: {line: lineComment, block: {open: "/*", close: "*/"}},
		  autocomplete: allWords
		}
	  };
	}
	function keySet(array) {
	  var keys = {};
	  for (var i = 0; i < array.length; ++i) {
		keys[array[i].toLowerCase()] = true;
	  }
	  return keys;
	}
	
	var documentTypes_ = [
	  "domain", "regexp", "url", "url-prefix"
	], documentTypes = keySet(documentTypes_);
	
	var mediaTypes_ = [
	  "all", "aural", "braille", "handheld", "print", "projection", "screen",
	  "tty", "tv", "embossed"
	], mediaTypes = keySet(mediaTypes_);
	
	var mediaFeatures_ = [
	  "width", "min-width", "max-width", "height", "min-height", "max-height",
	  "device-width", "min-device-width", "max-device-width", "device-height",
	  "min-device-height", "max-device-height", "aspect-ratio",
	  "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio",
	  "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color",
	  "max-color", "color-index", "min-color-index", "max-color-index",
	  "monochrome", "min-monochrome", "max-monochrome", "resolution",
	  "min-resolution", "max-resolution", "scan", "grid", "orientation",
	  "device-pixel-ratio", "min-device-pixel-ratio", "max-device-pixel-ratio",
	  "pointer", "any-pointer", "hover", "any-hover", "prefers-color-scheme",
	  "dynamic-range", "video-dynamic-range"
	], mediaFeatures = keySet(mediaFeatures_);
	
	var mediaValueKeywords_ = [
	  "landscape", "portrait", "none", "coarse", "fine", "on-demand", "hover",
	  "interlace", "progressive",
	  "dark", "light",
	  "standard", "high"
	], mediaValueKeywords = keySet(mediaValueKeywords_);
	
	var propertyKeywords_ = [
	  "align-content", "align-items", "align-self", "alignment-adjust",
	  "alignment-baseline", "all", "anchor-point", "animation", "animation-delay",
	  "animation-direction", "animation-duration", "animation-fill-mode",
	  "animation-iteration-count", "animation-name", "animation-play-state",
	  "animation-timing-function", "appearance", "azimuth", "backdrop-filter",
	  "backface-visibility", "background", "background-attachment",
	  "background-blend-mode", "background-clip", "background-color",
	  "background-image", "background-origin", "background-position",
	  "background-position-x", "background-position-y", "background-repeat",
	  "background-size", "baseline-shift", "binding", "bleed", "block-size",
	  "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target",
	  "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius",
	  "border-bottom-right-radius", "border-bottom-style", "border-bottom-width",
	  "border-collapse", "border-color", "border-image", "border-image-outset",
	  "border-image-repeat", "border-image-slice", "border-image-source",
	  "border-image-width", "border-left", "border-left-color", "border-left-style",
	  "border-left-width", "border-radius", "border-right", "border-right-color",
	  "border-right-style", "border-right-width", "border-spacing", "border-style",
	  "border-top", "border-top-color", "border-top-left-radius",
	  "border-top-right-radius", "border-top-style", "border-top-width",
	  "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing",
	  "break-after", "break-before", "break-inside", "caption-side", "caret-color",
	  "clear", "clip", "color", "color-profile", "column-count", "column-fill",
	  "column-gap", "column-rule", "column-rule-color", "column-rule-style",
	  "column-rule-width", "column-span", "column-width", "columns", "contain",
	  "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after",
	  "cue-before", "cursor", "direction", "display", "dominant-baseline",
	  "drop-initial-after-adjust", "drop-initial-after-align",
	  "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size",
	  "drop-initial-value", "elevation", "empty-cells", "fit", "fit-content", "fit-position",
	  "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow",
	  "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into",
	  "font", "font-family", "font-feature-settings", "font-kerning",
	  "font-language-override", "font-optical-sizing", "font-size",
	  "font-size-adjust", "font-stretch", "font-style", "font-synthesis",
	  "font-variant", "font-variant-alternates", "font-variant-caps",
	  "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric",
	  "font-variant-position", "font-variation-settings", "font-weight", "gap",
	  "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows",
	  "grid-column", "grid-column-end", "grid-column-gap", "grid-column-start",
	  "grid-gap", "grid-row", "grid-row-end", "grid-row-gap", "grid-row-start",
	  "grid-template", "grid-template-areas", "grid-template-columns",
	  "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon",
	  "image-orientation", "image-rendering", "image-resolution", "inline-box-align",
	  "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline",
	  "inset-inline-end", "inset-inline-start", "isolation", "justify-content",
	  "justify-items", "justify-self", "left", "letter-spacing", "line-break",
	  "line-height", "line-height-step", "line-stacking", "line-stacking-ruby",
	  "line-stacking-shift", "line-stacking-strategy", "list-style",
	  "list-style-image", "list-style-position", "list-style-type", "margin",
	  "margin-bottom", "margin-left", "margin-right", "margin-top", "marks",
	  "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed",
	  "marquee-style", "mask-clip", "mask-composite", "mask-image", "mask-mode",
	  "mask-origin", "mask-position", "mask-repeat", "mask-size","mask-type",
	  "max-block-size", "max-height", "max-inline-size",
	  "max-width", "min-block-size", "min-height", "min-inline-size", "min-width",
	  "mix-blend-mode", "move-to", "nav-down", "nav-index", "nav-left", "nav-right",
	  "nav-up", "object-fit", "object-position", "offset", "offset-anchor",
	  "offset-distance", "offset-path", "offset-position", "offset-rotate",
	  "opacity", "order", "orphans", "outline", "outline-color", "outline-offset",
	  "outline-style", "outline-width", "overflow", "overflow-style",
	  "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom",
	  "padding-left", "padding-right", "padding-top", "page", "page-break-after",
	  "page-break-before", "page-break-inside", "page-policy", "pause",
	  "pause-after", "pause-before", "perspective", "perspective-origin", "pitch",
	  "pitch-range", "place-content", "place-items", "place-self", "play-during",
	  "position", "presentation-level", "punctuation-trim", "quotes",
	  "region-break-after", "region-break-before", "region-break-inside",
	  "region-fragment", "rendering-intent", "resize", "rest", "rest-after",
	  "rest-before", "richness", "right", "rotate", "rotation", "rotation-point",
	  "row-gap", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span",
	  "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block",
	  "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom",
	  "scroll-margin-inline", "scroll-margin-inline-end",
	  "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right",
	  "scroll-margin-top", "scroll-padding", "scroll-padding-block",
	  "scroll-padding-block-end", "scroll-padding-block-start",
	  "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end",
	  "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right",
	  "scroll-padding-top", "scroll-snap-align", "scroll-snap-type",
	  "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside",
	  "size", "speak", "speak-as", "speak-header", "speak-numeral",
	  "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size",
	  "table-layout", "target", "target-name", "target-new", "target-position",
	  "text-align", "text-align-last", "text-combine-upright", "text-decoration",
	  "text-decoration-color", "text-decoration-line", "text-decoration-skip",
	  "text-decoration-skip-ink", "text-decoration-style", "text-emphasis",
	  "text-emphasis-color", "text-emphasis-position", "text-emphasis-style",
	  "text-height", "text-indent", "text-justify", "text-orientation",
	  "text-outline", "text-overflow", "text-rendering", "text-shadow",
	  "text-size-adjust", "text-space-collapse", "text-transform",
	  "text-underline-position", "text-wrap", "top", "touch-action", "transform", "transform-origin",
	  "transform-style", "transition", "transition-delay", "transition-duration",
	  "transition-property", "transition-timing-function", "translate",
	  "unicode-bidi", "user-select", "vertical-align", "visibility", "voice-balance",
	  "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate",
	  "voice-stress", "voice-volume", "volume", "white-space", "widows", "width",
	  "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index",
	  // SVG-specific
	  "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color",
	  "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events",
	  "color-interpolation", "color-interpolation-filters",
	  "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering",
	  "marker", "marker-end", "marker-mid", "marker-start", "paint-order", "shape-rendering", "stroke",
	  "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin",
	  "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering",
	  "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal",
	  "glyph-orientation-vertical", "text-anchor", "writing-mode",
	], propertyKeywords = keySet(propertyKeywords_);
	
	var nonStandardPropertyKeywords_ = [
	  "accent-color", "aspect-ratio", "border-block", "border-block-color", "border-block-end",
	  "border-block-end-color", "border-block-end-style", "border-block-end-width",
	  "border-block-start", "border-block-start-color", "border-block-start-style",
	  "border-block-start-width", "border-block-style", "border-block-width",
	  "border-inline", "border-inline-color", "border-inline-end",
	  "border-inline-end-color", "border-inline-end-style",
	  "border-inline-end-width", "border-inline-start", "border-inline-start-color",
	  "border-inline-start-style", "border-inline-start-width",
	  "border-inline-style", "border-inline-width", "content-visibility", "margin-block",
	  "margin-block-end", "margin-block-start", "margin-inline", "margin-inline-end",
	  "margin-inline-start", "overflow-anchor", "overscroll-behavior", "padding-block", "padding-block-end",
	  "padding-block-start", "padding-inline", "padding-inline-end",
	  "padding-inline-start", "scroll-snap-stop", "scrollbar-3d-light-color",
	  "scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color",
	  "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color",
	  "scrollbar-track-color", "searchfield-cancel-button", "searchfield-decoration",
	  "searchfield-results-button", "searchfield-results-decoration", "shape-inside", "zoom"
	], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);
	
	var fontProperties_ = [
	  "font-display", "font-family", "src", "unicode-range", "font-variant",
	  "font-feature-settings", "font-stretch", "font-weight", "font-style"
	], fontProperties = keySet(fontProperties_);
	
	var counterDescriptors_ = [
	  "additive-symbols", "fallback", "negative", "pad", "prefix", "range",
	  "speak-as", "suffix", "symbols", "system"
	], counterDescriptors = keySet(counterDescriptors_);
	
	var colorKeywords_ = [
	  "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
	  "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
	  "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
	  "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
	  "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen",
	  "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
	  "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet",
	  "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick",
	  "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
	  "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
	  "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
	  "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
	  "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink",
	  "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey",
	  "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
	  "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
	  "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
	  "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
	  "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
	  "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
	  "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
	  "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
	  "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
	  "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan",
	  "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
	  "whitesmoke", "yellow", "yellowgreen"
	], colorKeywords = keySet(colorKeywords_);
	
	var valueKeywords_ = [
	  "above", "absolute", "activeborder", "additive", "activecaption", "afar",
	  "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate",
	  "always", "amharic", "amharic-abegede", "antialiased", "appworkspace",
	  "arabic-indic", "armenian", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page",
	  "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "binary",
	  "bengali", "blink", "block", "block-axis", "blur", "bold", "bolder", "border", "border-box",
	  "both", "bottom", "break", "break-all", "break-word", "brightness", "bullets", "button",
	  "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian",
	  "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret",
	  "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch",
	  "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote",
	  "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse",
	  "compact", "condensed", "conic-gradient", "contain", "content", "contents",
	  "content-box", "context-menu", "continuous", "contrast", "copy", "counter", "counters", "cover", "crop",
	  "cross", "crosshair", "cubic-bezier", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
	  "decimal-leading-zero", "default", "default-button", "dense", "destination-atop",
	  "destination-in", "destination-out", "destination-over", "devanagari", "difference",
	  "disc", "discard", "disclosure-closed", "disclosure-open", "document",
	  "dot-dash", "dot-dot-dash",
	  "dotted", "double", "down", "drop-shadow", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out",
	  "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede",
	  "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er",
	  "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er",
	  "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et",
	  "ethiopic-halehame-gez", "ethiopic-halehame-om-et",
	  "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et",
	  "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig",
	  "ethiopic-numeric", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed",
	  "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes",
	  "forwards", "from", "geometricPrecision", "georgian", "grayscale", "graytext", "grid", "groove",
	  "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hard-light", "hebrew",
	  "help", "hidden", "hide", "higher", "highlight", "highlighttext",
	  "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "hue", "hue-rotate", "icon", "ignore",
	  "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite",
	  "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis",
	  "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert",
	  "italic", "japanese-formal", "japanese-informal", "justify", "kannada",
	  "katakana", "katakana-iroha", "keep-all", "khmer",
	  "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal",
	  "landscape", "lao", "large", "larger", "left", "level", "lighter", "lighten",
	  "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem",
	  "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian",
	  "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian",
	  "lower-roman", "lowercase", "ltr", "luminosity", "malayalam", "manipulation", "match", "matrix", "matrix3d",
	  "media-play-button", "media-slider", "media-sliderthumb",
	  "media-volume-slider", "media-volume-sliderthumb", "medium",
	  "menu", "menulist", "menulist-button",
	  "menutext", "message-box", "middle", "min-intrinsic",
	  "mix", "mongolian", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "myanmar", "n-resize",
	  "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop",
	  "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap",
	  "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "opacity", "open-quote",
	  "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset",
	  "outside", "outside-shape", "overlay", "overline", "padding", "padding-box",
	  "painted", "page", "paused", "persian", "perspective", "pinch-zoom", "plus-darker", "plus-lighter",
	  "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d",
	  "progress", "push-button", "radial-gradient", "radio", "read-only",
	  "read-write", "read-write-plaintext-only", "rectangle", "region",
	  "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient",
	  "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse",
	  "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY",
	  "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running",
	  "s-resize", "sans-serif", "saturate", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen",
	  "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield",
	  "searchfield-cancel-button", "searchfield-decoration",
	  "searchfield-results-button", "searchfield-results-decoration", "self-start", "self-end",
	  "semi-condensed", "semi-expanded", "separate", "sepia", "serif", "show", "sidama",
	  "simp-chinese-formal", "simp-chinese-informal", "single",
	  "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
	  "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow",
	  "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "somali",
	  "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square",
	  "square-button", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub",
	  "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table",
	  "table-caption", "table-cell", "table-column", "table-column-group",
	  "table-footer-group", "table-header-group", "table-row", "table-row-group",
	  "tamil",
	  "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai",
	  "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight",
	  "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er",
	  "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top",
	  "trad-chinese-formal", "trad-chinese-informal", "transform",
	  "translate", "translate3d", "translateX", "translateY", "translateZ",
	  "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up",
	  "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal",
	  "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url",
	  "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted",
	  "visibleStroke", "visual", "w-resize", "wait", "wave", "wider",
	  "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor",
	  "xx-large", "xx-small"
	], valueKeywords = keySet(valueKeywords_);
	
	var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_)
		.concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_)
		.concat(valueKeywords_);
	
	const keywords = {properties: propertyKeywords_, colors: colorKeywords_,
							 fonts: fontProperties_, values: valueKeywords_, all: allWords};
	
	const defaults = {
	  documentTypes: documentTypes,
	  mediaTypes: mediaTypes,
	  mediaFeatures: mediaFeatures,
	  mediaValueKeywords: mediaValueKeywords,
	  propertyKeywords: propertyKeywords,
	  nonStandardPropertyKeywords: nonStandardPropertyKeywords,
	  fontProperties: fontProperties,
	  counterDescriptors: counterDescriptors,
	  colorKeywords: colorKeywords,
	  valueKeywords: valueKeywords,
	  tokenHooks: {
		"/": function(stream, state) {
		  if (!stream.eat("*")) return false;
		  state.tokenize = tokenCComment;
		  return tokenCComment(stream, state);
		}
	  }
	};
	
	const css = mkCSS({name: "css"});
	
	function tokenCComment(stream, state) {
	  var maybeEnd = false, ch;
	  while ((ch = stream.next()) != null) {
		if (maybeEnd && ch == "/") {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return ["comment", "comment"];
	}
	
	const sCSS = mkCSS({
	  name: "scss",
	  mediaTypes: mediaTypes,
	  mediaFeatures: mediaFeatures,
	  mediaValueKeywords: mediaValueKeywords,
	  propertyKeywords: propertyKeywords,
	  nonStandardPropertyKeywords: nonStandardPropertyKeywords,
	  colorKeywords: colorKeywords,
	  valueKeywords: valueKeywords,
	  fontProperties: fontProperties,
	  allowNested: true,
	  lineComment: "//",
	  tokenHooks: {
		"/": function(stream, state) {
		  if (stream.eat("/")) {
			stream.skipToEnd();
			return ["comment", "comment"];
		  } else if (stream.eat("*")) {
			state.tokenize = tokenCComment;
			return tokenCComment(stream, state);
		  } else {
			return ["operator", "operator"];
		  }
		},
		":": function(stream) {
		  if (stream.match(/^\s*\{/, false))
			return [null, null]
		  return false;
		},
		"$": function(stream) {
		  stream.match(/^[\w-]+/);
		  if (stream.match(/^\s*:/, false))
			return ["def", "variable-definition"];
		  return ["variableName.special", "variable"];
		},
		"#": function(stream) {
		  if (!stream.eat("{")) return false;
		  return [null, "interpolation"];
		}
	  }
	});
	
	const less = mkCSS({
	  name: "less",
	  mediaTypes: mediaTypes,
	  mediaFeatures: mediaFeatures,
	  mediaValueKeywords: mediaValueKeywords,
	  propertyKeywords: propertyKeywords,
	  nonStandardPropertyKeywords: nonStandardPropertyKeywords,
	  colorKeywords: colorKeywords,
	  valueKeywords: valueKeywords,
	  fontProperties: fontProperties,
	  allowNested: true,
	  lineComment: "//",
	  tokenHooks: {
		"/": function(stream, state) {
		  if (stream.eat("/")) {
			stream.skipToEnd();
			return ["comment", "comment"];
		  } else if (stream.eat("*")) {
			state.tokenize = tokenCComment;
			return tokenCComment(stream, state);
		  } else {
			return ["operator", "operator"];
		  }
		},
		"@": function(stream) {
		  if (stream.eat("{")) return [null, "interpolation"];
		  if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false)) return false;
		  stream.eatWhile(/[\w\\\-]/);
		  if (stream.match(/^\s*:/, false))
			return ["def", "variable-definition"];
		  return ["variableName", "variable"];
		},
		"&": function() {
		  return ["atom", "atom"];
		}
	  }
	});
	
	const gss = mkCSS({
	  name: "gss",
	  documentTypes: documentTypes,
	  mediaTypes: mediaTypes,
	  mediaFeatures: mediaFeatures,
	  propertyKeywords: propertyKeywords,
	  nonStandardPropertyKeywords: nonStandardPropertyKeywords,
	  fontProperties: fontProperties,
	  counterDescriptors: counterDescriptors,
	  colorKeywords: colorKeywords,
	  valueKeywords: valueKeywords,
	  supportsAtComponent: true,
	  tokenHooks: {
		"/": function(stream, state) {
		  if (!stream.eat("*")) return false;
		  state.tokenize = tokenCComment;
		  return tokenCComment(stream, state);
		}
	  }
	});
	
	exports.css = css;
	exports.gss = gss;
	exports.keywords = keywords;
	exports.less = less;
	exports.mkCSS = mkCSS;
	exports.sCSS = sCSS;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/cypher.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/cypher.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var wordRegexp = function(words) {
	  return new RegExp("^(?:" + words.join("|") + ")$", "i");
	};
	
	var tokenBase = function(stream/*, state*/) {
	  curPunc = null;
	  var ch = stream.next();
	  if (ch ==='"') {
		stream.match(/^.*?"/);
		return "string";
	  }
	  if (ch === "'") {
		stream.match(/^.*?'/);
		return "string";
	  }
	  if (/[{}\(\),\.;\[\]]/.test(ch)) {
		curPunc = ch;
		return "punctuation";
	  } else if (ch === "/" && stream.eat("/")) {
		stream.skipToEnd();
		return "comment";
	  } else if (operatorChars.test(ch)) {
		stream.eatWhile(operatorChars);
		return null;
	  } else {
		stream.eatWhile(/[_\w\d]/);
		if (stream.eat(":")) {
		  stream.eatWhile(/[\w\d_\-]/);
		  return "atom";
		}
		var word = stream.current();
		if (funcs.test(word)) return "builtin";
		if (preds.test(word)) return "def";
		if (keywords.test(word) || systemKeywords.test(word)) return "keyword";
		return "variable";
	  }
	};
	var pushContext = function(state, type, col) {
	  return state.context = {
		prev: state.context,
		indent: state.indent,
		col: col,
		type: type
	  };
	};
	var popContext = function(state) {
	  state.indent = state.context.indent;
	  return state.context = state.context.prev;
	};
	var curPunc;
	var funcs = wordRegexp(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
	var preds = wordRegexp(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
	var keywords = wordRegexp(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
	var systemKeywords = wordRegexp(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
	var operatorChars = /[*+\-<>=&|~%^]/;
	
	const cypher = {
	  name: "cypher",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  context: null,
		  indent: 0,
		  col: 0
		};
	  },
	  token: function(stream, state) {
		if (stream.sol()) {
		  if (state.context && (state.context.align == null)) {
			state.context.align = false;
		  }
		  state.indent = stream.indentation();
		}
		if (stream.eatSpace()) {
		  return null;
		}
		var style = state.tokenize(stream, state);
		if (style !== "comment" && state.context && (state.context.align == null) && state.context.type !== "pattern") {
		  state.context.align = true;
		}
		if (curPunc === "(") {
		  pushContext(state, ")", stream.column());
		} else if (curPunc === "[") {
		  pushContext(state, "]", stream.column());
		} else if (curPunc === "{") {
		  pushContext(state, "}", stream.column());
		} else if (/[\]\}\)]/.test(curPunc)) {
		  while (state.context && state.context.type === "pattern") {
			popContext(state);
		  }
		  if (state.context && curPunc === state.context.type) {
			popContext(state);
		  }
		} else if (curPunc === "." && state.context && state.context.type === "pattern") {
		  popContext(state);
		} else if (/atom|string|variable/.test(style) && state.context) {
		  if (/[\}\]]/.test(state.context.type)) {
			pushContext(state, "pattern", stream.column());
		  } else if (state.context.type === "pattern" && !state.context.align) {
			state.context.align = true;
			state.context.col = stream.column();
		  }
		}
		return style;
	  },
	  indent: function(state, textAfter, cx) {
		var firstChar = textAfter && textAfter.charAt(0);
		var context = state.context;
		if (/[\]\}]/.test(firstChar)) {
		  while (context && context.type === "pattern") {
			context = context.prev;
		  }
		}
		var closing = context && firstChar === context.type;
		if (!context) return 0;
		if (context.type === "keywords") return null
		if (context.align) return context.col + (closing ? 0 : 1);
		return context.indent + (closing ? 0 : cx.unit);
	  }
	};
	
	exports.cypher = cypher;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/d.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/d.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var blockKeywordsStr = "body catch class do else enum for foreach foreach_reverse if in interface mixin " +
		"out scope struct switch try union unittest version while with";
	
	const parserConfig = {
	  keywords: words("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue " +
					  "debug default delegate delete deprecated export extern final finally function goto immutable " +
					  "import inout invariant is lazy macro module new nothrow override package pragma private " +
					  "protected public pure ref return shared short static super synchronized template this " +
					  "throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " +
					  blockKeywordsStr),
	  blockKeywords: words(blockKeywordsStr),
	  builtin: words("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte " +
					 "ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
	  atoms: words("exit failure success true false null"),
	  hooks: {
		"@": function(stream, _state) {
		  stream.eatWhile(/[\w\$_]/);
		  return "meta";
		}
	  }
	};
	
	var statementIndentUnit = parserConfig.statementIndentUnit,
		keywords = parserConfig.keywords,
		builtin = parserConfig.builtin,
		blockKeywords = parserConfig.blockKeywords,
		atoms = parserConfig.atoms,
		hooks = parserConfig.hooks,
		multiLineStrings = parserConfig.multiLineStrings;
	var isOperatorChar = /[+\-*&%=<>!?|\/]/;
	
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (hooks[ch]) {
		var result = hooks[ch](stream, state);
		if (result !== false) return result;
	  }
	  if (ch == '"' || ch == "'" || ch == "`") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (ch == "/") {
		if (stream.eat("+")) {
		  state.tokenize = tokenNestedComment;
		  return tokenNestedComment(stream, state);
		}
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
	  var cur = stream.current();
	  if (keywords.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "keyword";
	  }
	  if (builtin.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "builtin";
	  }
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && next == "\\";
		}
		if (end || !(escaped || multiLineStrings))
		  state.tokenize = null;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenNestedComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "+");
	  }
	  return "comment";
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  var indent = state.indented;
	  if (state.context && state.context.type == "statement")
		indent = state.context.indented;
	  return state.context = new Context(indent, col, type, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	
	const d = {
	  name: "d",
	  startState: function(indentUnit) {
		return {
		  tokenize: null,
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment" || style == "meta") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement") popContext(state);
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (((ctx.type == "}" || ctx.type == "top") && curPunc != ';') || (ctx.type == "statement" && curPunc == "newstatement"))
		  pushContext(state, stream.column(), "statement");
		state.startOfLine = false;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase && state.tokenize != null) return null;
		var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
		if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
		var closing = firstChar == ctx.type;
		if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);
		else if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.d = d;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/diff.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/diff.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var TOKEN_NAMES = {
	  '+': 'inserted',
	  '-': 'deleted',
	  '@': 'meta'
	};
	
	const diff = {
	  name: "diff",
	  token: function(stream) {
		var tw_pos = stream.string.search(/[\t ]+?$/);
	
		if (!stream.sol() || tw_pos === 0) {
		  stream.skipToEnd();
		  return ("error " + (
			TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');
		}
	
		var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();
	
		if (tw_pos === -1) {
		  stream.skipToEnd();
		} else {
		  stream.pos = tw_pos;
		}
	
		return token_name;
	  }
	};
	
	exports.diff = diff;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/dockerfile.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/dockerfile.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function simpleMode(states) {
	  ensureState(states, "start");
	  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
	  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
		var list = states_[state] = [], orig = states[state];
		for (var i = 0; i < orig.length; i++) {
		  var data = orig[i];
		  list.push(new Rule(data, states));
		  if (data.indent || data.dedent) hasIndentation = true;
		}
	  }
	  return {
		name: meta.name,
		startState: function() {
		  return {state: "start", pending: null, indent: hasIndentation ? [] : null};
		},
		copyState: function(state) {
		  var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
		  if (state.stack)
			s.stack = state.stack.slice(0);
		  return s;
		},
		token: tokenFunction(states_),
		indent: indentFunction(states_, meta),
		languageData: meta
	  }
	}
	function ensureState(states, name) {
	  if (!states.hasOwnProperty(name))
		throw new Error("Undefined state " + name + " in simple mode");
	}
	
	function toRegex(val, caret) {
	  if (!val) return /(?:)/;
	  var flags = "";
	  if (val instanceof RegExp) {
		if (val.ignoreCase) flags = "i";
		val = val.source;
	  } else {
		val = String(val);
	  }
	  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
	}
	
	function asToken(val) {
	  if (!val) return null;
	  if (val.apply) return val
	  if (typeof val == "string") return val.replace(/\./g, " ");
	  var result = [];
	  for (var i = 0; i < val.length; i++)
		result.push(val[i] && val[i].replace(/\./g, " "));
	  return result;
	}
	
	function Rule(data, states) {
	  if (data.next || data.push) ensureState(states, data.next || data.push);
	  this.regex = toRegex(data.regex);
	  this.token = asToken(data.token);
	  this.data = data;
	}
	
	function tokenFunction(states) {
	  return function(stream, state) {
		if (state.pending) {
		  var pend = state.pending.shift();
		  if (state.pending.length == 0) state.pending = null;
		  stream.pos += pend.text.length;
		  return pend.token;
		}
	
		var curState = states[state.state];
		for (var i = 0; i < curState.length; i++) {
		  var rule = curState[i];
		  var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
		  if (matches) {
			if (rule.data.next) {
			  state.state = rule.data.next;
			} else if (rule.data.push) {
			  (state.stack || (state.stack = [])).push(state.state);
			  state.state = rule.data.push;
			} else if (rule.data.pop && state.stack && state.stack.length) {
			  state.state = state.stack.pop();
			}
	
			if (rule.data.indent)
			  state.indent.push(stream.indentation() + stream.indentUnit);
			if (rule.data.dedent)
			  state.indent.pop();
			var token = rule.token;
			if (token && token.apply) token = token(matches);
			if (matches.length > 2 && rule.token && typeof rule.token != "string") {
			  state.pending = [];
			  for (var j = 2; j < matches.length; j++)
				if (matches[j])
				  state.pending.push({text: matches[j], token: rule.token[j - 1]});
			  stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
			  return token[0];
			} else if (token && token.join) {
			  return token[0];
			} else {
			  return token;
			}
		  }
		}
		stream.next();
		return null;
	  };
	}
	
	function indentFunction(states, meta) {
	  return function(state, textAfter) {
		if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
		  return null
	
		var pos = state.indent.length - 1, rules = states[state.state];
		scan: for (;;) {
		  for (var i = 0; i < rules.length; i++) {
			var rule = rules[i];
			if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
			  var m = rule.regex.exec(textAfter);
			  if (m && m[0]) {
				pos--;
				if (rule.next || rule.push) rules = states[rule.next || rule.push];
				textAfter = textAfter.slice(m[0].length);
				continue scan;
			  }
			}
		  }
		  break;
		}
		return pos < 0 ? 0 : state.indent[pos];
	  };
	}
	
	var from = "from";
	var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");
	
	var shells = ["run", "cmd", "entrypoint", "shell"];
	var shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join('|') + ")(\\s+\\[)", "i");
	
	var expose = "expose";
	var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");
	
	var others = [
	  "arg", "from", "maintainer", "label", "env",
	  "add", "copy", "volume", "user",
	  "workdir", "onbuild", "stopsignal", "healthcheck", "shell"
	];
	
	// Collect all Dockerfile directives
	var instructions = [from, expose].concat(shells).concat(others),
		instructionRegex = "(" + instructions.join('|') + ")",
		instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i"),
		instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");
	
	const dockerFile = simpleMode({
	  start: [
		// Block comment: This is a line starting with a comment
		{
		  regex: /^\s*#.*$/,
		  sol: true,
		  token: "comment"
		},
		{
		  regex: fromRegex,
		  token: [null, "keyword"],
		  sol: true,
		  next: "from"
		},
		// Highlight an instruction without any arguments (for convenience)
		{
		  regex: instructionOnlyLine,
		  token: [null, "keyword", null, "error"],
		  sol: true
		},
		{
		  regex: shellsAsArrayRegex,
		  token: [null, "keyword", null],
		  sol: true,
		  next: "array"
		},
		{
		  regex: exposeRegex,
		  token: [null, "keyword", null],
		  sol: true,
		  next: "expose"
		},
		// Highlight an instruction followed by arguments
		{
		  regex: instructionWithArguments,
		  token: [null, "keyword", null],
		  sol: true,
		  next: "arguments"
		},
		{
		  regex: /./,
		  token: null
		}
	  ],
	  from: [
		{
		  regex: /\s*$/,
		  token: null,
		  next: "start"
		},
		{
		  // Line comment without instruction arguments is an error
		  regex: /(\s*)(#.*)$/,
		  token: [null, "error"],
		  next: "start"
		},
		{
		  regex: /(\s*\S+\s+)(as)/i,
		  token: [null, "keyword"],
		  next: "start"
		},
		// Fail safe return to start
		{
		  token: null,
		  next: "start"
		}
	  ],
	  single: [
		{
		  regex: /(?:[^\\']|\\.)/,
		  token: "string"
		},
		{
		  regex: /'/,
		  token: "string",
		  pop: true
		}
	  ],
	  double: [
		{
		  regex: /(?:[^\\"]|\\.)/,
		  token: "string"
		},
		{
		  regex: /"/,
		  token: "string",
		  pop: true
		}
	  ],
	  array: [
		{
		  regex: /\]/,
		  token: null,
		  next: "start"
		},
		{
		  regex: /"(?:[^\\"]|\\.)*"?/,
		  token: "string"
		}
	  ],
	  expose: [
		{
		  regex: /\d+$/,
		  token: "number",
		  next: "start"
		},
		{
		  regex: /[^\d]+$/,
		  token: null,
		  next: "start"
		},
		{
		  regex: /\d+/,
		  token: "number"
		},
		{
		  regex: /[^\d]+/,
		  token: null
		},
		// Fail safe return to start
		{
		  token: null,
		  next: "start"
		}
	  ],
	  arguments: [
		{
		  regex: /^\s*#.*$/,
		  sol: true,
		  token: "comment"
		},
		{
		  regex: /"(?:[^\\"]|\\.)*"?$/,
		  token: "string",
		  next: "start"
		},
		{
		  regex: /"/,
		  token: "string",
		  push: "double"
		},
		{
		  regex: /'(?:[^\\']|\\.)*'?$/,
		  token: "string",
		  next: "start"
		},
		{
		  regex: /'/,
		  token: "string",
		  push: "single"
		},
		{
		  regex: /[^#"']+[\\`]$/,
		  token: null
		},
		{
		  regex: /[^#"']+$/,
		  token: null,
		  next: "start"
		},
		{
		  regex: /[^#"']+/,
		  token: null
		},
		// Fail safe return to start
		{
		  token: null,
		  next: "start"
		}
	  ],
	  languageData: {
		commentTokens: {line: "#"}
	  }
	});
	
	exports.dockerFile = dockerFile;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/dtd.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/dtd.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var type;
	function ret(style, tp) {type = tp; return style;}
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	
	  if (ch == "<" && stream.eat("!") ) {
		if (stream.eatWhile(/[\-]/)) {
		  state.tokenize = tokenSGMLComment;
		  return tokenSGMLComment(stream, state);
		} else if (stream.eatWhile(/[\w]/)) return ret("keyword", "doindent");
	  } else if (ch == "<" && stream.eat("?")) { //xml declaration
		state.tokenize = inBlock("meta", "?>");
		return ret("meta", ch);
	  } else if (ch == "#" && stream.eatWhile(/[\w]/)) return ret("atom", "tag");
	  else if (ch == "|") return ret("keyword", "separator");
	  else if (ch.match(/[\(\)\[\]\-\.,\+\?>]/)) return ret(null, ch);//if(ch === ">") return ret(null, "endtag"); else
	  else if (ch.match(/[\[\]]/)) return ret("rule", ch);
	  else if (ch == "\"" || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
		var sc = stream.current();
		if( sc.substr(sc.length-1,sc.length).match(/\?|\+/) !== null )stream.backUp(1);
		return ret("tag", "tag");
	  } else if (ch == "%" || ch == "*" ) return ret("number", "number");
	  else {
		stream.eatWhile(/[\w\\\-_%.{,]/);
		return ret(null, null);
	  }
	}
	
	function tokenSGMLComment(stream, state) {
	  var dashes = 0, ch;
	  while ((ch = stream.next()) != null) {
		if (dashes >= 2 && ch == ">") {
		  state.tokenize = tokenBase;
		  break;
		}
		dashes = (ch == "-") ? dashes + 1 : 0;
	  }
	  return ret("comment", "comment");
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped) {
			state.tokenize = tokenBase;
			break;
		  }
		  escaped = !escaped && ch == "\\";
		}
		return ret("string", "tag");
	  };
	}
	
	function inBlock(style, terminator) {
	  return function(stream, state) {
		while (!stream.eol()) {
		  if (stream.match(terminator)) {
			state.tokenize = tokenBase;
			break;
		  }
		  stream.next();
		}
		return style;
	  };
	}
	
	const dtd = {
	  name: "dtd",
	  startState: function() {
		return {tokenize: tokenBase,
				baseIndent: 0,
				stack: []};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
	
		var context = state.stack[state.stack.length-1];
		if (stream.current() == "[" || type === "doindent" || type == "[") state.stack.push("rule");
		else if (type === "endtag") state.stack[state.stack.length-1] = "endtag";
		else if (stream.current() == "]" || type == "]" || (type == ">" && context == "rule")) state.stack.pop();
		else if (type == "[") state.stack.push("[");
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var n = state.stack.length;
	
		if( textAfter.charAt(0) === ']' )n--;
		else if(textAfter.substr(textAfter.length-1, textAfter.length) === ">"){
		  if(textAfter.substr(0,1) === "<") ;
		  else if( type == "doindent" && textAfter.length > 1 ) ;
		  else if( type == "doindent")n--;
		  else if( type == ">" && textAfter.length > 1) ;
		  else if( type == "tag" && textAfter !== ">") ;
		  else if( type == "tag" && state.stack[state.stack.length-1] == "rule")n--;
		  else if( type == "tag")n++;
		  else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule" && type === ">")n--;
		  else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule") ;
		  else if( textAfter.substr(0,1) !== "<" && textAfter.substr(0,1) === ">" )n=n-1;
		  else if( textAfter === ">") ;
		  else n=n-1;
		  //over rule them all
		  if(type == null || type == "]")n--;
		}
	
		return state.baseIndent + n * cx.unit;
	  },
	
	  languageData: {
		indentOnInput: /^\s*[\]>]$/
	  }
	};
	
	exports.dtd = dtd;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/dylan.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/dylan.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function forEach(arr, f) {
	  for (var i = 0; i < arr.length; i++) f(arr[i], i);
	}
	function some(arr, f) {
	  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true
	  return false
	}
	
	// Words
	var words = {
	  // Words that introduce unnamed definitions like "define interface"
	  unnamedDefinition: ["interface"],
	
	  // Words that introduce simple named definitions like "define library"
	  namedDefinition: ["module", "library", "macro",
						"C-struct", "C-union",
						"C-function", "C-callable-wrapper"
					   ],
	
	  // Words that introduce type definitions like "define class".
	  // These are also parameterized like "define method" and are
	  // appended to otherParameterizedDefinitionWords
	  typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],
	
	  // Words that introduce trickier definitions like "define method".
	  // These require special definitions to be added to startExpressions
	  otherParameterizedDefinition: ["method", "function",
									 "C-variable", "C-address"
									],
	
	  // Words that introduce module constant definitions.
	  // These must also be simple definitions and are
	  // appended to otherSimpleDefinitionWords
	  constantSimpleDefinition: ["constant"],
	
	  // Words that introduce module variable definitions.
	  // These must also be simple definitions and are
	  // appended to otherSimpleDefinitionWords
	  variableSimpleDefinition: ["variable"],
	
	  // Other words that introduce simple definitions
	  // (without implicit bodies).
	  otherSimpleDefinition: ["generic", "domain",
							  "C-pointer-type",
							  "table"
							 ],
	
	  // Words that begin statements with implicit bodies.
	  statement: ["if", "block", "begin", "method", "case",
				  "for", "select", "when", "unless", "until",
				  "while", "iterate", "profiling", "dynamic-bind"
				 ],
	
	  // Patterns that act as separators in compound statements.
	  // This may include any general pattern that must be indented
	  // specially.
	  separator: ["finally", "exception", "cleanup", "else",
				  "elseif", "afterwards"
				 ],
	
	  // Keywords that do not require special indentation handling,
	  // but which should be highlighted
	  other: ["above", "below", "by", "from", "handler", "in",
			  "instance", "let", "local", "otherwise", "slot",
			  "subclass", "then", "to", "keyed-by", "virtual"
			 ],
	
	  // Condition signaling function calls
	  signalingCalls: ["signal", "error", "cerror",
					   "break", "check-type", "abort"
					  ]
	};
	
	words["otherDefinition"] =
	  words["unnamedDefinition"]
	  .concat(words["namedDefinition"])
	  .concat(words["otherParameterizedDefinition"]);
	
	words["definition"] =
	  words["typeParameterizedDefinition"]
	  .concat(words["otherDefinition"]);
	
	words["parameterizedDefinition"] =
	  words["typeParameterizedDefinition"]
	  .concat(words["otherParameterizedDefinition"]);
	
	words["simpleDefinition"] =
	  words["constantSimpleDefinition"]
	  .concat(words["variableSimpleDefinition"])
	  .concat(words["otherSimpleDefinition"]);
	
	words["keyword"] =
	  words["statement"]
	  .concat(words["separator"])
	  .concat(words["other"]);
	
	// Patterns
	var symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
	var symbol = new RegExp("^" + symbolPattern);
	var patterns = {
	  // Symbols with special syntax
	  symbolKeyword: symbolPattern + ":",
	  symbolClass: "<" + symbolPattern + ">",
	  symbolGlobal: "\\*" + symbolPattern + "\\*",
	  symbolConstant: "\\$" + symbolPattern
	};
	var patternStyles = {
	  symbolKeyword: "atom",
	  symbolClass: "tag",
	  symbolGlobal: "variableName.standard",
	  symbolConstant: "variableName.constant"
	};
	
	// Compile all patterns to regular expressions
	for (var patternName in patterns)
	  if (patterns.hasOwnProperty(patternName))
		patterns[patternName] = new RegExp("^" + patterns[patternName]);
	
	// Names beginning "with-" and "without-" are commonly
	// used as statement macro
	patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];
	
	var styles = {};
	styles["keyword"] = "keyword";
	styles["definition"] = "def";
	styles["simpleDefinition"] = "def";
	styles["signalingCalls"] = "builtin";
	
	// protected words lookup table
	var wordLookup = {};
	var styleLookup = {};
	
	forEach([
	  "keyword",
	  "definition",
	  "simpleDefinition",
	  "signalingCalls"
	], function(type) {
	  forEach(words[type], function(word) {
		wordLookup[word] = type;
		styleLookup[word] = styles[type];
	  });
	});
	
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	
	function tokenBase(stream, state) {
	  // String
	  var ch = stream.peek();
	  if (ch == "'" || ch == '"') {
		stream.next();
		return chain(stream, state, tokenString(ch, "string"));
	  }
	  // Comment
	  else if (ch == "/") {
		stream.next();
		if (stream.eat("*")) {
		  return chain(stream, state, tokenComment);
		} else if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
		stream.backUp(1);
	  }
	  // Decimal
	  else if (/[+\-\d\.]/.test(ch)) {
		if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||
			stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||
			stream.match(/^[+-]?\d+/)) {
		  return "number";
		}
	  }
	  // Hash
	  else if (ch == "#") {
		stream.next();
		// Symbol with string syntax
		ch = stream.peek();
		if (ch == '"') {
		  stream.next();
		  return chain(stream, state, tokenString('"', "string"));
		}
		// Binary number
		else if (ch == "b") {
		  stream.next();
		  stream.eatWhile(/[01]/);
		  return "number";
		}
		// Hex number
		else if (ch == "x") {
		  stream.next();
		  stream.eatWhile(/[\da-f]/i);
		  return "number";
		}
		// Octal number
		else if (ch == "o") {
		  stream.next();
		  stream.eatWhile(/[0-7]/);
		  return "number";
		}
		// Token concatenation in macros
		else if (ch == '#') {
		  stream.next();
		  return "punctuation";
		}
		// Sequence literals
		else if ((ch == '[') || (ch == '(')) {
		  stream.next();
		  return "bracket";
		  // Hash symbol
		} else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
		  return "atom";
		} else {
		  stream.eatWhile(/[-a-zA-Z]/);
		  return "error";
		}
	  } else if (ch == "~") {
		stream.next();
		ch = stream.peek();
		if (ch == "=") {
		  stream.next();
		  ch = stream.peek();
		  if (ch == "=") {
			stream.next();
			return "operator";
		  }
		  return "operator";
		}
		return "operator";
	  } else if (ch == ":") {
		stream.next();
		ch = stream.peek();
		if (ch == "=") {
		  stream.next();
		  return "operator";
		} else if (ch == ":") {
		  stream.next();
		  return "punctuation";
		}
	  } else if ("[](){}".indexOf(ch) != -1) {
		stream.next();
		return "bracket";
	  } else if (".,".indexOf(ch) != -1) {
		stream.next();
		return "punctuation";
	  } else if (stream.match("end")) {
		return "keyword";
	  }
	  for (var name in patterns) {
		if (patterns.hasOwnProperty(name)) {
		  var pattern = patterns[name];
		  if ((pattern instanceof Array && some(pattern, function(p) {
			return stream.match(p);
		  })) || stream.match(pattern))
			return patternStyles[name];
		}
	  }
	  if (/[+\-*\/^=<>&|]/.test(ch)) {
		stream.next();
		return "operator";
	  }
	  if (stream.match("define")) {
		return "def";
	  } else {
		stream.eatWhile(/[\w\-]/);
		// Keyword
		if (wordLookup.hasOwnProperty(stream.current())) {
		  return styleLookup[stream.current()];
		} else if (stream.current().match(symbol)) {
		  return "variable";
		} else {
		  stream.next();
		  return "variableName.standard";
		}
	  }
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
	  while ((ch = stream.next())) {
		if (ch == "/" && maybeEnd) {
		  if (nestedCount > 0) {
			nestedCount--;
		  } else {
			state.tokenize = tokenBase;
			break;
		  }
		} else if (ch == "*" && maybeNested) {
		  nestedCount++;
		}
		maybeEnd = (ch == "*");
		maybeNested = (ch == "/");
	  }
	  return "comment";
	}
	
	function tokenString(quote, style) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			end = true;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped) {
		  state.tokenize = tokenBase;
		}
		return style;
	  };
	}
	
	// Interface
	const dylan = {
	  name: "dylan",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  currentIndent: 0
		};
	  },
	  token: function(stream, state) {
		if (stream.eatSpace())
		  return null;
		var style = state.tokenize(stream, state);
		return style;
	  },
	  languageData: {
		commentTokens: {block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.dylan = dylan;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ebnf.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ebnf.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var commentType = {slash: 0, parenthesis: 1};
	var stateType = {comment: 0, _string: 1, characterClass: 2};
	
	const ebnf = {
	  name: "ebnf",
	  startState: function () {
		return {
		  stringType: null,
		  commentType: null,
		  braced: 0,
		  lhs: true,
		  localState: null,
		  stack: [],
		  inDefinition: false
		};
	  },
	  token: function (stream, state) {
		if (!stream) return;
	
		//check for state changes
		if (state.stack.length === 0) {
		  //strings
		  if ((stream.peek() == '"') || (stream.peek() == "'")) {
			state.stringType = stream.peek();
			stream.next(); // Skip quote
			state.stack.unshift(stateType._string);
		  } else if (stream.match('/*')) { //comments starting with /*
			state.stack.unshift(stateType.comment);
			state.commentType = commentType.slash;
		  } else if (stream.match('(*')) { //comments starting with (*
			state.stack.unshift(stateType.comment);
			state.commentType = commentType.parenthesis;
		  }
		}
	
		//return state
		//stack has
		switch (state.stack[0]) {
		case stateType._string:
		  while (state.stack[0] === stateType._string && !stream.eol()) {
			if (stream.peek() === state.stringType) {
			  stream.next(); // Skip quote
			  state.stack.shift(); // Clear flag
			} else if (stream.peek() === "\\") {
			  stream.next();
			  stream.next();
			} else {
			  stream.match(/^.[^\\\"\']*/);
			}
		  }
		  return state.lhs ? "property" : "string"; // Token style
	
		case stateType.comment:
		  while (state.stack[0] === stateType.comment && !stream.eol()) {
			if (state.commentType === commentType.slash && stream.match('*/')) {
			  state.stack.shift(); // Clear flag
			  state.commentType = null;
			} else if (state.commentType === commentType.parenthesis && stream.match('*)')) {
			  state.stack.shift(); // Clear flag
			  state.commentType = null;
			} else {
			  stream.match(/^.[^\*]*/);
			}
		  }
		  return "comment";
	
		case stateType.characterClass:
		  while (state.stack[0] === stateType.characterClass && !stream.eol()) {
			if (!(stream.match(/^[^\]\\]+/) || stream.match('.'))) {
			  state.stack.shift();
			}
		  }
		  return "operator";
		}
	
		var peek = stream.peek();
	
		//no stack
		switch (peek) {
		case "[":
		  stream.next();
		  state.stack.unshift(stateType.characterClass);
		  return "bracket";
		case ":":
		case "|":
		case ";":
		  stream.next();
		  return "operator";
		case "%":
		  if (stream.match("%%")) {
			return "header";
		  } else if (stream.match(/[%][A-Za-z]+/)) {
			return "keyword";
		  } else if (stream.match(/[%][}]/)) {
			return "bracket";
		  }
		  break;
		case "/":
		  if (stream.match(/[\/][A-Za-z]+/)) {
			return "keyword";
		  }
		case "\\":
		  if (stream.match(/[\][a-z]+/)) {
			return "string.special";
		  }
		case ".":
		  if (stream.match(".")) {
			return "atom";
		  }
		case "*":
		case "-":
		case "+":
		case "^":
		  if (stream.match(peek)) {
			return "atom";
		  }
		case "$":
		  if (stream.match("$$")) {
			return "builtin";
		  } else if (stream.match(/[$][0-9]+/)) {
			return "variableName.special";
		  }
		case "<":
		  if (stream.match(/<<[a-zA-Z_]+>>/)) {
			return "builtin";
		  }
		}
	
		if (stream.match('//')) {
		  stream.skipToEnd();
		  return "comment";
		} else if (stream.match('return')) {
		  return "operator";
		} else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
		  if (stream.match(/(?=[\(.])/)) {
			return "variable";
		  } else if (stream.match(/(?=[\s\n]*[:=])/)) {
			return "def";
		  }
		  return "variableName.special";
		} else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
		  stream.next();
		  return "bracket";
		} else if (!stream.eatSpace()) {
		  stream.next();
		}
		return null;
	  }
	};
	
	exports.ebnf = ebnf;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ecl.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ecl.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	function metaHook(stream, state) {
	  if (!state.startOfLine) return false;
	  stream.skipToEnd();
	  return "meta";
	}
	
	var keyword = words("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
	var variable = words("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
	var variable_2 = words("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
	var variable_3 = words("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
	var builtin = words("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
	var blockKeywords = words("catch class do else finally for if switch try while");
	var atoms = words("true false null");
	var hooks = {"#": metaHook};
	var isOperatorChar = /[+\-*&%=<>!?|\/]/;
	
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (hooks[ch]) {
		var result = hooks[ch](stream, state);
		if (result !== false) return result;
	  }
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (ch == "/") {
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_]/);
	  var cur = stream.current().toLowerCase();
	  if (keyword.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "keyword";
	  } else if (variable.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "variable";
	  } else if (variable_2.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "modifier";
	  } else if (variable_3.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "type";
	  } else if (builtin.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "builtin";
	  } else { //Data types are of from KEYWORD##
		var i = cur.length - 1;
		while(i >= 0 && (!isNaN(cur[i]) || cur[i] == '_'))
		  --i;
	
		if (i > 0) {
		  var cur2 = cur.substr(0, i + 1);
		  if (variable_3.propertyIsEnumerable(cur2)) {
			if (blockKeywords.propertyIsEnumerable(cur2)) curPunc = "newstatement";
			return "type";
		  }
		}
	  }
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return null;
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped)
		  state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  return state.context = new Context(state.indented, col, type, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	
	const ecl = {
	  name: "ecl",
	  startState: function(indentUnit) {
		return {
		  tokenize: null,
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment" || style == "meta") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))
		  pushContext(state, stream.column(), "statement");
		state.startOfLine = false;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase && state.tokenize != null) return 0;
		var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
		if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
		var closing = firstChar == ctx.type;
		if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
		else if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/
	  }
	};
	
	exports.ecl = ecl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/eiffel.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/eiffel.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordObj(words) {
	  var o = {};
	  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
	  return o;
	}
	var keywords = wordObj([
	  'note',
	  'across',
	  'when',
	  'variant',
	  'until',
	  'unique',
	  'undefine',
	  'then',
	  'strip',
	  'select',
	  'retry',
	  'rescue',
	  'require',
	  'rename',
	  'reference',
	  'redefine',
	  'prefix',
	  'once',
	  'old',
	  'obsolete',
	  'loop',
	  'local',
	  'like',
	  'is',
	  'inspect',
	  'infix',
	  'include',
	  'if',
	  'frozen',
	  'from',
	  'external',
	  'export',
	  'ensure',
	  'end',
	  'elseif',
	  'else',
	  'do',
	  'creation',
	  'create',
	  'check',
	  'alias',
	  'agent',
	  'separate',
	  'invariant',
	  'inherit',
	  'indexing',
	  'feature',
	  'expanded',
	  'deferred',
	  'class',
	  'Void',
	  'True',
	  'Result',
	  'Precursor',
	  'False',
	  'Current',
	  'create',
	  'attached',
	  'detachable',
	  'as',
	  'and',
	  'implies',
	  'not',
	  'or'
	]);
	var operators = wordObj([":=", "and then","and", "or","<<",">>"]);
	
	function chain(newtok, stream, state) {
	  state.tokenize.push(newtok);
	  return newtok(stream, state);
	}
	
	function tokenBase(stream, state) {
	  if (stream.eatSpace()) return null;
	  var ch = stream.next();
	  if (ch == '"'||ch == "'") {
		return chain(readQuoted(ch, "string"), stream, state);
	  } else if (ch == "-"&&stream.eat("-")) {
		stream.skipToEnd();
		return "comment";
	  } else if (ch == ":"&&stream.eat("=")) {
		return "operator";
	  } else if (/[0-9]/.test(ch)) {
		stream.eatWhile(/[xXbBCc0-9\.]/);
		stream.eat(/[\?\!]/);
		return "variable";
	  } else if (/[a-zA-Z_0-9]/.test(ch)) {
		stream.eatWhile(/[a-zA-Z_0-9]/);
		stream.eat(/[\?\!]/);
		return "variable";
	  } else if (/[=+\-\/*^%<>~]/.test(ch)) {
		stream.eatWhile(/[=+\-\/*^%<>~]/);
		return "operator";
	  } else {
		return null;
	  }
	}
	
	function readQuoted(quote, style,  unescaped) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && (unescaped || !escaped)) {
			state.tokenize.pop();
			break;
		  }
		  escaped = !escaped && ch == "%";
		}
		return style;
	  };
	}
	
	const eiffel = {
	  name: "eiffel",
	  startState: function() {
		return {tokenize: [tokenBase]};
	  },
	
	  token: function(stream, state) {
		var style = state.tokenize[state.tokenize.length-1](stream, state);
		if (style == "variable") {
		  var word = stream.current();
		  style = keywords.propertyIsEnumerable(stream.current()) ? "keyword"
			: operators.propertyIsEnumerable(stream.current()) ? "operator"
			: /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag"
			: /^0[bB][0-1]+$/g.test(word) ? "number"
			: /^0[cC][0-7]+$/g.test(word) ? "number"
			: /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number"
			: /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word) ? "number"
			: /^[0-9]+$/g.test(word) ? "number"
			: "variable";
		}
		return style;
	  },
	  languageData: {
		commentTokens: {line: "--"}
	  }
	};
	
	exports.eiffel = eiffel;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/elm.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/elm.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function switchState(source, setState, f)
	{
	  setState(f);
	  return f(source, setState);
	}
	
	var lowerRE = /[a-z]/;
	var upperRE = /[A-Z]/;
	var innerRE = /[a-zA-Z0-9_]/;
	
	var digitRE = /[0-9]/;
	var hexRE = /[0-9A-Fa-f]/;
	var symbolRE = /[-&*+.\\/<>=?^|:]/;
	var specialRE = /[(),[\]{}]/;
	var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer
	
	function normal()
	{
	  return function(source, setState)
	  {
		if (source.eatWhile(spacesRE))
		{
		  return null;
		}
	
		var char = source.next();
	
		if (specialRE.test(char))
		{
		  return (char === '{' && source.eat('-'))
			? switchState(source, setState, chompMultiComment(1))
			: (char === '[' && source.match('glsl|'))
			? switchState(source, setState, chompGlsl)
			: 'builtin';
		}
	
		if (char === '\'')
		{
		  return switchState(source, setState, chompChar);
		}
	
		if (char === '"')
		{
		  return source.eat('"')
			? source.eat('"')
			? switchState(source, setState, chompMultiString)
			: 'string'
		  : switchState(source, setState, chompSingleString);
		}
	
		if (upperRE.test(char))
		{
		  source.eatWhile(innerRE);
		  return 'type';
		}
	
		if (lowerRE.test(char))
		{
		  var isDef = source.pos === 1;
		  source.eatWhile(innerRE);
		  return isDef ? "def" : "variable";
		}
	
		if (digitRE.test(char))
		{
		  if (char === '0')
		  {
			if (source.eat(/[xX]/))
			{
			  source.eatWhile(hexRE); // should require at least 1
			  return "number";
			}
		  }
		  else
		  {
			source.eatWhile(digitRE);
		  }
		  if (source.eat('.'))
		  {
			source.eatWhile(digitRE); // should require at least 1
		  }
		  if (source.eat(/[eE]/))
		  {
			source.eat(/[-+]/);
			source.eatWhile(digitRE); // should require at least 1
		  }
		  return "number";
		}
	
		if (symbolRE.test(char))
		{
		  if (char === '-' && source.eat('-'))
		  {
			source.skipToEnd();
			return "comment";
		  }
		  source.eatWhile(symbolRE);
		  return "keyword";
		}
	
		if (char === '_')
		{
		  return "keyword";
		}
	
		return "error";
	  }
	}
	
	function chompMultiComment(nest)
	{
	  if (nest == 0)
	  {
		return normal();
	  }
	  return function(source, setState)
	  {
		while (!source.eol())
		{
		  var char = source.next();
		  if (char == '{' && source.eat('-'))
		  {
			++nest;
		  }
		  else if (char == '-' && source.eat('}'))
		  {
			--nest;
			if (nest === 0)
			{
			  setState(normal());
			  return 'comment';
			}
		  }
		}
		setState(chompMultiComment(nest));
		return 'comment';
	  }
	}
	
	function chompMultiString(source, setState)
	{
	  while (!source.eol())
	  {
		var char = source.next();
		if (char === '"' && source.eat('"') && source.eat('"'))
		{
		  setState(normal());
		  return 'string';
		}
	  }
	  return 'string';
	}
	
	function chompSingleString(source, setState)
	{
	  while (source.skipTo('\\"')) { source.next(); source.next(); }
	  if (source.skipTo('"'))
	  {
		source.next();
		setState(normal());
		return 'string';
	  }
	  source.skipToEnd();
	  setState(normal());
	  return 'error';
	}
	
	function chompChar(source, setState)
	{
	  while (source.skipTo("\\'")) { source.next(); source.next(); }
	  if (source.skipTo("'"))
	  {
		source.next();
		setState(normal());
		return 'string';
	  }
	  source.skipToEnd();
	  setState(normal());
	  return 'error';
	}
	
	function chompGlsl(source, setState)
	{
	  while (!source.eol())
	  {
		var char = source.next();
		if (char === '|' && source.eat(']'))
		{
		  setState(normal());
		  return 'string';
		}
	  }
	  return 'string';
	}
	
	var wellKnownWords = {
	  case: 1,
	  of: 1,
	  as: 1,
	  if: 1,
	  then: 1,
	  else: 1,
	  let: 1,
		in: 1,
	  type: 1,
	  alias: 1,
	  module: 1,
	  where: 1,
	  import: 1,
	  exposing: 1,
	  port: 1
	};
	
	const elm = {
	  name: "elm",
	  startState: function ()  { return { f: normal() }; },
	  copyState:  function (s) { return { f: s.f }; },
	
	  token: function(stream, state) {
		var type = state.f(stream, function(s) { state.f = s; });
		var word = stream.current();
		return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;
	  },
	
	  languageData: {
		commentTokens: {line: "--"}
	  }
	};
	
	exports.elm = elm;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/erlang.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/erlang.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	/////////////////////////////////////////////////////////////////////////////
	// constants
	
	var typeWords = [
	  "-type", "-spec", "-export_type", "-opaque"];
	
	var keywordWords = [
	  "after","begin","catch","case","cond","end","fun","if",
	  "let","of","query","receive","try","when"];
	
	var separatorRE    = /[\->,;]/;
	var separatorWords = [
	  "->",";",","];
	
	var operatorAtomWords = [
	  "and","andalso","band","bnot","bor","bsl","bsr","bxor",
	  "div","not","or","orelse","rem","xor"];
	
	var operatorSymbolRE    = /[\+\-\*\/<>=\|:!]/;
	var operatorSymbolWords = [
	  "=","+","-","*","/",">",">=","<","=<","=:=","==","=/=","/=","||","<-","!"];
	
	var openParenRE    = /[<\(\[\{]/;
	var openParenWords = [
	  "<<","(","[","{"];
	
	var closeParenRE    = /[>\)\]\}]/;
	var closeParenWords = [
	  "}","]",")",">>"];
	
	var guardWords = [
	  "is_atom","is_binary","is_bitstring","is_boolean","is_float",
	  "is_function","is_integer","is_list","is_number","is_pid",
	  "is_port","is_record","is_reference","is_tuple",
	  "atom","binary","bitstring","boolean","function","integer","list",
	  "number","pid","port","record","reference","tuple"];
	
	var bifWords = [
	  "abs","adler32","adler32_combine","alive","apply","atom_to_binary",
	  "atom_to_list","binary_to_atom","binary_to_existing_atom",
	  "binary_to_list","binary_to_term","bit_size","bitstring_to_list",
	  "byte_size","check_process_code","contact_binary","crc32",
	  "crc32_combine","date","decode_packet","delete_module",
	  "disconnect_node","element","erase","exit","float","float_to_list",
	  "garbage_collect","get","get_keys","group_leader","halt","hd",
	  "integer_to_list","internal_bif","iolist_size","iolist_to_binary",
	  "is_alive","is_atom","is_binary","is_bitstring","is_boolean",
	  "is_float","is_function","is_integer","is_list","is_number","is_pid",
	  "is_port","is_process_alive","is_record","is_reference","is_tuple",
	  "length","link","list_to_atom","list_to_binary","list_to_bitstring",
	  "list_to_existing_atom","list_to_float","list_to_integer",
	  "list_to_pid","list_to_tuple","load_module","make_ref","module_loaded",
	  "monitor_node","node","node_link","node_unlink","nodes","notalive",
	  "now","open_port","pid_to_list","port_close","port_command",
	  "port_connect","port_control","pre_loaded","process_flag",
	  "process_info","processes","purge_module","put","register",
	  "registered","round","self","setelement","size","spawn","spawn_link",
	  "spawn_monitor","spawn_opt","split_binary","statistics",
	  "term_to_binary","time","throw","tl","trunc","tuple_size",
	  "tuple_to_list","unlink","unregister","whereis"];
	
	// upper case: [A-Z] [Ø-Þ] [À-Ö]
	// lower case: [a-z] [ß-ö] [ø-ÿ]
	var anumRE       = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
	var escapesRE    =
		/[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;
	
	/////////////////////////////////////////////////////////////////////////////
	// tokenizer
	
	function tokenizer(stream,state) {
	  // in multi-line string
	  if (state.in_string) {
		state.in_string = (!doubleQuote(stream));
		return rval(state,stream,"string");
	  }
	
	  // in multi-line atom
	  if (state.in_atom) {
		state.in_atom = (!singleQuote(stream));
		return rval(state,stream,"atom");
	  }
	
	  // whitespace
	  if (stream.eatSpace()) {
		return rval(state,stream,"whitespace");
	  }
	
	  // attributes and type specs
	  if (!peekToken(state) &&
		  stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
		if (is_member(stream.current(),typeWords)) {
		  return rval(state,stream,"type");
		}else {
		  return rval(state,stream,"attribute");
		}
	  }
	
	  var ch = stream.next();
	
	  // comment
	  if (ch == '%') {
		stream.skipToEnd();
		return rval(state,stream,"comment");
	  }
	
	  // colon
	  if (ch == ":") {
		return rval(state,stream,"colon");
	  }
	
	  // macro
	  if (ch == '?') {
		stream.eatSpace();
		stream.eatWhile(anumRE);
		return rval(state,stream,"macro");
	  }
	
	  // record
	  if (ch == "#") {
		stream.eatSpace();
		stream.eatWhile(anumRE);
		return rval(state,stream,"record");
	  }
	
	  // dollar escape
	  if (ch == "$") {
		if (stream.next() == "\\" && !stream.match(escapesRE)) {
		  return rval(state,stream,"error");
		}
		return rval(state,stream,"number");
	  }
	
	  // dot
	  if (ch == ".") {
		return rval(state,stream,"dot");
	  }
	
	  // quoted atom
	  if (ch == '\'') {
		if (!(state.in_atom = (!singleQuote(stream)))) {
		  if (stream.match(/\s*\/\s*[0-9]/,false)) {
			stream.match(/\s*\/\s*[0-9]/,true);
			return rval(state,stream,"fun");      // 'f'/0 style fun
		  }
		  if (stream.match(/\s*\(/,false) || stream.match(/\s*:/,false)) {
			return rval(state,stream,"function");
		  }
		}
		return rval(state,stream,"atom");
	  }
	
	  // string
	  if (ch == '"') {
		state.in_string = (!doubleQuote(stream));
		return rval(state,stream,"string");
	  }
	
	  // variable
	  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {
		stream.eatWhile(anumRE);
		return rval(state,stream,"variable");
	  }
	
	  // atom/keyword/BIF/function
	  if (/[a-z_ß-öø-ÿ]/.test(ch)) {
		stream.eatWhile(anumRE);
	
		if (stream.match(/\s*\/\s*[0-9]/,false)) {
		  stream.match(/\s*\/\s*[0-9]/,true);
		  return rval(state,stream,"fun");      // f/0 style fun
		}
	
		var w = stream.current();
	
		if (is_member(w,keywordWords)) {
		  return rval(state,stream,"keyword");
		}else if (is_member(w,operatorAtomWords)) {
		  return rval(state,stream,"operator");
		}else if (stream.match(/\s*\(/,false)) {
		  // 'put' and 'erlang:put' are bifs, 'foo:put' is not
		  if (is_member(w,bifWords) &&
			  ((peekToken(state).token != ":") ||
			   (peekToken(state,2).token == "erlang"))) {
			return rval(state,stream,"builtin");
		  }else if (is_member(w,guardWords)) {
			return rval(state,stream,"guard");
		  }else {
			return rval(state,stream,"function");
		  }
		}else if (lookahead(stream) == ":") {
		  if (w == "erlang") {
			return rval(state,stream,"builtin");
		  } else {
			return rval(state,stream,"function");
		  }
		}else if (is_member(w,["true","false"])) {
		  return rval(state,stream,"boolean");
		}else {
		  return rval(state,stream,"atom");
		}
	  }
	
	  // number
	  var digitRE      = /[0-9]/;
	  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int
	  if (digitRE.test(ch)) {
		stream.eatWhile(digitRE);
		if (stream.eat('#')) {                // 36#aZ  style integer
		  if (!stream.eatWhile(radixRE)) {
			stream.backUp(1);                 //"36#" - syntax error
		  }
		} else if (stream.eat('.')) {       // float
		  if (!stream.eatWhile(digitRE)) {
			stream.backUp(1);        // "3." - probably end of function
		  } else {
			if (stream.eat(/[eE]/)) {        // float with exponent
			  if (stream.eat(/[-+]/)) {
				if (!stream.eatWhile(digitRE)) {
				  stream.backUp(2);            // "2e-" - syntax error
				}
			  } else {
				if (!stream.eatWhile(digitRE)) {
				  stream.backUp(1);            // "2e" - syntax error
				}
			  }
			}
		  }
		}
		return rval(state,stream,"number");   // normal integer
	  }
	
	  // open parens
	  if (nongreedy(stream,openParenRE,openParenWords)) {
		return rval(state,stream,"open_paren");
	  }
	
	  // close parens
	  if (nongreedy(stream,closeParenRE,closeParenWords)) {
		return rval(state,stream,"close_paren");
	  }
	
	  // separators
	  if (greedy(stream,separatorRE,separatorWords)) {
		return rval(state,stream,"separator");
	  }
	
	  // operators
	  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {
		return rval(state,stream,"operator");
	  }
	
	  return rval(state,stream,null);
	}
	
	/////////////////////////////////////////////////////////////////////////////
	// utilities
	function nongreedy(stream,re,words) {
	  if (stream.current().length == 1 && re.test(stream.current())) {
		stream.backUp(1);
		while (re.test(stream.peek())) {
		  stream.next();
		  if (is_member(stream.current(),words)) {
			return true;
		  }
		}
		stream.backUp(stream.current().length-1);
	  }
	  return false;
	}
	
	function greedy(stream,re,words) {
	  if (stream.current().length == 1 && re.test(stream.current())) {
		while (re.test(stream.peek())) {
		  stream.next();
		}
		while (0 < stream.current().length) {
		  if (is_member(stream.current(),words)) {
			return true;
		  }else {
			stream.backUp(1);
		  }
		}
		stream.next();
	  }
	  return false;
	}
	
	function doubleQuote(stream) {
	  return quote(stream, '"', '\\');
	}
	
	function singleQuote(stream) {
	  return quote(stream,'\'','\\');
	}
	
	function quote(stream,quoteChar,escapeChar) {
	  while (!stream.eol()) {
		var ch = stream.next();
		if (ch == quoteChar) {
		  return true;
		}else if (ch == escapeChar) {
		  stream.next();
		}
	  }
	  return false;
	}
	
	function lookahead(stream) {
	  var m = stream.match(/^\s*([^\s%])/, false);
	  return m ? m[1] : "";
	}
	
	function is_member(element,list) {
	  return (-1 < list.indexOf(element));
	}
	
	function rval(state,stream,type) {
	
	  // parse stack
	  pushToken(state,realToken(type,stream));
	
	  // map erlang token type to CodeMirror style class
	  //     erlang             -> CodeMirror tag
	  switch (type) {
	  case "atom":        return "atom";
	  case "attribute":   return "attribute";
	  case "boolean":     return "atom";
	  case "builtin":     return "builtin";
	  case "close_paren": return null;
	  case "colon":       return null;
	  case "comment":     return "comment";
	  case "dot":         return null;
	  case "error":       return "error";
	  case "fun":         return "meta";
	  case "function":    return "tag";
	  case "guard":       return "property";
	  case "keyword":     return "keyword";
	  case "macro":       return "macroName";
	  case "number":      return "number";
	  case "open_paren":  return null;
	  case "operator":    return "operator";
	  case "record":      return "bracket";
	  case "separator":   return null;
	  case "string":      return "string";
	  case "type":        return "def";
	  case "variable":    return "variable";
	  default:            return null;
	  }
	}
	
	function aToken(tok,col,ind,typ) {
	  return {token:  tok,
			  column: col,
			  indent: ind,
			  type:   typ};
	}
	
	function realToken(type,stream) {
	  return aToken(stream.current(),
					stream.column(),
					stream.indentation(),
					type);
	}
	
	function fakeToken(type) {
	  return aToken(type,0,0,type);
	}
	
	function peekToken(state,depth) {
	  var len = state.tokenStack.length;
	  var dep = (depth ? depth : 1);
	
	  if (len < dep) {
		return false;
	  }else {
		return state.tokenStack[len-dep];
	  }
	}
	
	function pushToken(state,token) {
	
	  if (!(token.type == "comment" || token.type == "whitespace")) {
		state.tokenStack = maybe_drop_pre(state.tokenStack,token);
		state.tokenStack = maybe_drop_post(state.tokenStack);
	  }
	}
	
	function maybe_drop_pre(s,token) {
	  var last = s.length-1;
	
	  if (0 < last && s[last].type === "record" && token.type === "dot") {
		s.pop();
	  }else if (0 < last && s[last].type === "group") {
		s.pop();
		s.push(token);
	  }else {
		s.push(token);
	  }
	  return s;
	}
	
	function maybe_drop_post(s) {
	  if (!s.length) return s
	  var last = s.length-1;
	
	  if (s[last].type === "dot") {
		return [];
	  }
	  if (last > 1 && s[last].type === "fun" && s[last-1].token === "fun") {
		return s.slice(0,last-1);
	  }
	  switch (s[last].token) {
	  case "}":    return d(s,{g:["{"]});
	  case "]":    return d(s,{i:["["]});
	  case ")":    return d(s,{i:["("]});
	  case ">>":   return d(s,{i:["<<"]});
	  case "end":  return d(s,{i:["begin","case","fun","if","receive","try"]});
	  case ",":    return d(s,{e:["begin","try","when","->",
								  ",","(","[","{","<<"]});
	  case "->":   return d(s,{r:["when"],
							   m:["try","if","case","receive"]});
	  case ";":    return d(s,{E:["case","fun","if","receive","try","when"]});
	  case "catch":return d(s,{e:["try"]});
	  case "of":   return d(s,{e:["case"]});
	  case "after":return d(s,{e:["receive","try"]});
	  default:     return s;
	  }
	}
	
	function d(stack,tt) {
	  // stack is a stack of Token objects.
	  // tt is an object; {type:tokens}
	  // type is a char, tokens is a list of token strings.
	  // The function returns (possibly truncated) stack.
	  // It will descend the stack, looking for a Token such that Token.token
	  //  is a member of tokens. If it does not find that, it will normally (but
	  //  see "E" below) return stack. If it does find a match, it will remove
	  //  all the Tokens between the top and the matched Token.
	  // If type is "m", that is all it does.
	  // If type is "i", it will also remove the matched Token and the top Token.
	  // If type is "g", like "i", but add a fake "group" token at the top.
	  // If type is "r", it will remove the matched Token, but not the top Token.
	  // If type is "e", it will keep the matched Token but not the top Token.
	  // If type is "E", it behaves as for type "e", except if there is no match,
	  //  in which case it will return an empty stack.
	
	  for (var type in tt) {
		var len = stack.length-1;
		var tokens = tt[type];
		for (var i = len-1; -1 < i ; i--) {
		  if (is_member(stack[i].token,tokens)) {
			var ss = stack.slice(0,i);
			switch (type) {
			case "m": return ss.concat(stack[i]).concat(stack[len]);
			case "r": return ss.concat(stack[len]);
			case "i": return ss;
			case "g": return ss.concat(fakeToken("group"));
			case "E": return ss.concat(stack[i]);
			case "e": return ss.concat(stack[i]);
			}
		  }
		}
	  }
	  return (type == "E" ? [] : stack);
	}
	
	/////////////////////////////////////////////////////////////////////////////
	// indenter
	
	function indenter(state, textAfter, cx) {
	  var t;
	  var wordAfter = wordafter(textAfter);
	  var currT = peekToken(state,1);
	  var prevT = peekToken(state,2);
	
	  if (state.in_string || state.in_atom) {
		return null;
	  }else if (!prevT) {
		return 0;
	  }else if (currT.token == "when") {
		return currT.column + cx.unit;
	  }else if (wordAfter === "when" && prevT.type === "function") {
		return prevT.indent+cx.unit;
	  }else if (wordAfter === "(" && currT.token === "fun") {
		return  currT.column+3;
	  }else if (wordAfter === "catch" && (t = getToken(state,["try"]))) {
		return t.column;
	  }else if (is_member(wordAfter,["end","after","of"])) {
		t = getToken(state,["begin","case","fun","if","receive","try"]);
		return t ? t.column : null;
	  }else if (is_member(wordAfter,closeParenWords)) {
		t = getToken(state,openParenWords);
		return t ? t.column : null;
	  }else if (is_member(currT.token,[",","|","||"]) ||
				is_member(wordAfter,[",","|","||"])) {
		t = postcommaToken(state);
		return t ? t.column+t.token.length : cx.unit;
	  }else if (currT.token == "->") {
		if (is_member(prevT.token, ["receive","case","if","try"])) {
		  return prevT.column+cx.unit+cx.unit;
		}else {
		  return prevT.column+cx.unit;
		}
	  }else if (is_member(currT.token,openParenWords)) {
		return currT.column+currT.token.length;
	  }else {
		t = defaultToken(state);
		return truthy(t) ? t.column+cx.unit : 0;
	  }
	}
	
	function wordafter(str) {
	  var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);
	
	  return truthy(m) && (m.index === 0) ? m[0] : "";
	}
	
	function postcommaToken(state) {
	  var objs = state.tokenStack.slice(0,-1);
	  var i = getTokenIndex(objs,"type",["open_paren"]);
	
	  return truthy(objs[i]) ? objs[i] : false;
	}
	
	function defaultToken(state) {
	  var objs = state.tokenStack;
	  var stop = getTokenIndex(objs,"type",["open_paren","separator","keyword"]);
	  var oper = getTokenIndex(objs,"type",["operator"]);
	
	  if (truthy(stop) && truthy(oper) && stop < oper) {
		return objs[stop+1];
	  } else if (truthy(stop)) {
		return objs[stop];
	  } else {
		return false;
	  }
	}
	
	function getToken(state,tokens) {
	  var objs = state.tokenStack;
	  var i = getTokenIndex(objs,"token",tokens);
	
	  return truthy(objs[i]) ? objs[i] : false;
	}
	
	function getTokenIndex(objs,propname,propvals) {
	
	  for (var i = objs.length-1; -1 < i ; i--) {
		if (is_member(objs[i][propname],propvals)) {
		  return i;
		}
	  }
	  return false;
	}
	
	function truthy(x) {
	  return (x !== false) && (x != null);
	}
	
	/////////////////////////////////////////////////////////////////////////////
	// this object defines the mode
	
	const erlang = {
	  name: "erlang",
	  startState() {
		return {tokenStack: [],
				in_string:  false,
				in_atom:    false};
	  },
	
	  token: tokenizer,
	
	  indent: indenter,
	
	  languageData: {
		commentTokens: {line: "%"}
	  }
	};
	
	exports.erlang = erlang;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/factor.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/factor.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function simpleMode(states) {
	  ensureState(states, "start");
	  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
	  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
		var list = states_[state] = [], orig = states[state];
		for (var i = 0; i < orig.length; i++) {
		  var data = orig[i];
		  list.push(new Rule(data, states));
		  if (data.indent || data.dedent) hasIndentation = true;
		}
	  }
	  return {
		name: meta.name,
		startState: function() {
		  return {state: "start", pending: null, indent: hasIndentation ? [] : null};
		},
		copyState: function(state) {
		  var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
		  if (state.stack)
			s.stack = state.stack.slice(0);
		  return s;
		},
		token: tokenFunction(states_),
		indent: indentFunction(states_, meta),
		languageData: meta
	  }
	}
	function ensureState(states, name) {
	  if (!states.hasOwnProperty(name))
		throw new Error("Undefined state " + name + " in simple mode");
	}
	
	function toRegex(val, caret) {
	  if (!val) return /(?:)/;
	  var flags = "";
	  if (val instanceof RegExp) {
		if (val.ignoreCase) flags = "i";
		val = val.source;
	  } else {
		val = String(val);
	  }
	  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
	}
	
	function asToken(val) {
	  if (!val) return null;
	  if (val.apply) return val
	  if (typeof val == "string") return val.replace(/\./g, " ");
	  var result = [];
	  for (var i = 0; i < val.length; i++)
		result.push(val[i] && val[i].replace(/\./g, " "));
	  return result;
	}
	
	function Rule(data, states) {
	  if (data.next || data.push) ensureState(states, data.next || data.push);
	  this.regex = toRegex(data.regex);
	  this.token = asToken(data.token);
	  this.data = data;
	}
	
	function tokenFunction(states) {
	  return function(stream, state) {
		if (state.pending) {
		  var pend = state.pending.shift();
		  if (state.pending.length == 0) state.pending = null;
		  stream.pos += pend.text.length;
		  return pend.token;
		}
	
		var curState = states[state.state];
		for (var i = 0; i < curState.length; i++) {
		  var rule = curState[i];
		  var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
		  if (matches) {
			if (rule.data.next) {
			  state.state = rule.data.next;
			} else if (rule.data.push) {
			  (state.stack || (state.stack = [])).push(state.state);
			  state.state = rule.data.push;
			} else if (rule.data.pop && state.stack && state.stack.length) {
			  state.state = state.stack.pop();
			}
	
			if (rule.data.indent)
			  state.indent.push(stream.indentation() + stream.indentUnit);
			if (rule.data.dedent)
			  state.indent.pop();
			var token = rule.token;
			if (token && token.apply) token = token(matches);
			if (matches.length > 2 && rule.token && typeof rule.token != "string") {
			  state.pending = [];
			  for (var j = 2; j < matches.length; j++)
				if (matches[j])
				  state.pending.push({text: matches[j], token: rule.token[j - 1]});
			  stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
			  return token[0];
			} else if (token && token.join) {
			  return token[0];
			} else {
			  return token;
			}
		  }
		}
		stream.next();
		return null;
	  };
	}
	
	function indentFunction(states, meta) {
	  return function(state, textAfter) {
		if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
		  return null
	
		var pos = state.indent.length - 1, rules = states[state.state];
		scan: for (;;) {
		  for (var i = 0; i < rules.length; i++) {
			var rule = rules[i];
			if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
			  var m = rule.regex.exec(textAfter);
			  if (m && m[0]) {
				pos--;
				if (rule.next || rule.push) rules = states[rule.next || rule.push];
				textAfter = textAfter.slice(m[0].length);
				continue scan;
			  }
			}
		  }
		  break;
		}
		return pos < 0 ? 0 : state.indent[pos];
	  };
	}
	
	const factor = simpleMode({
		start: [
		  // comments
		  {regex: /#?!.*/, token: "comment"},
		  // strings """, multiline --> state
		  {regex: /"""/, token: "string", next: "string3"},
		  {regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2"},
		  {regex: /\S*?"/, token: "string", next: "string"},
		  // numbers: dec, hex, unicode, bin, fractional, complex
		  {regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number"},
		  //{regex: /[+-]?/} //fractional
		  // definition: defining word, defined word, etc
		  {regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack"},
		  // method definition: defining word, type, defined word, etc
		  {regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"]},
		  // vocabulary using --> state
		  {regex: /USING\:/, token: "keyword", next: "vocabulary"},
		  // vocabulary definition/use
		  {regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"]},
		  // definition: a defining word, defined word
		  {regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"]},
		  // "keywords", incl. ; t f . [ ] { } defining words
		  {regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword"},
		  // <constructors> and the like
		  {regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin"},
		  {regex: /[\)><]+\S+(?=\s|$)/, token: "builtin"},
		  // operators
		  {regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword"},
		  // any id (?)
		  {regex: /\S+/, token: "variable"},
		  {regex: /\s+|./, token: null}
		],
		vocabulary: [
		  {regex: /;/, token: "keyword", next: "start"},
		  {regex: /\S+/, token: "tag"},
		  {regex: /\s+|./, token: null}
		],
		string: [
		  {regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start"},
		  {regex: /.*/, token: "string"}
		],
		string2: [
		  {regex: /^;/, token: "keyword", next: "start"},
		  {regex: /.*/, token: "string"}
		],
		string3: [
		  {regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start"},
		  {regex: /.*/, token: "string"}
		],
		stack: [
		  {regex: /\)/, token: "bracket", next: "start"},
		  {regex: /--/, token: "bracket"},
		  {regex: /\S+/, token: "meta"},
		  {regex: /\s+|./, token: null}
		],
		languageData: {
		  name: "factor",
		  dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
		  commentTokens: {line: "!"}
		}
	  });
	
	exports.factor = factor;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/fcl.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/fcl.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var keywords = {
	  "term": true,
	  "method": true, "accu": true,
	  "rule": true, "then": true, "is": true, "and": true, "or": true,
	  "if": true, "default": true
	};
	
	var start_blocks = {
	  "var_input": true,
	  "var_output": true,
	  "fuzzify": true,
	  "defuzzify": true,
	  "function_block": true,
	  "ruleblock": true
	};
	
	var end_blocks = {
	  "end_ruleblock": true,
	  "end_defuzzify": true,
	  "end_function_block": true,
	  "end_fuzzify": true,
	  "end_var": true
	};
	
	var atoms = {
	  "true": true, "false": true, "nan": true,
	  "real": true, "min": true, "max": true, "cog": true, "cogs": true
	};
	
	var isOperatorChar = /[+\-*&^%:=<>!|\/]/;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	
	  if (/[\d\.]/.test(ch)) {
		if (ch == ".") {
		  stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
		} else if (ch == "0") {
		  stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
		} else {
		  stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
		}
		return "number";
	  }
	
	  if (ch == "/" || ch == "(") {
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
	
	  var cur = stream.current().toLowerCase();
	  if (keywords.propertyIsEnumerable(cur) ||
		  start_blocks.propertyIsEnumerable(cur) ||
		  end_blocks.propertyIsEnumerable(cur)) {
		return "keyword";
	  }
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return "variable";
	}
	
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if ((ch == "/" || ch == ")") && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	
	function pushContext(state, col, type) {
	  return state.context = new Context(state.indented, col, type, null, state.context);
	}
	
	function popContext(state) {
	  if (!state.context.prev) return;
	  var t = state.context.type;
	  if (t == "end_block")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	
	const fcl = {
	  name: "fcl",
	  startState: function(indentUnit) {
		return {
		  tokenize: null,
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
	
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment") return style;
		if (ctx.align == null) ctx.align = true;
	
		var cur = stream.current().toLowerCase();
	
		if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), "end_block");
		else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);
	
		state.startOfLine = false;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase && state.tokenize != null) return 0;
		var ctx = state.context;
	
		var closing = end_blocks.propertyIsEnumerable(textAfter);
		if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		commentTokens: {line: "//", block: {open: "(*", close: "*)"}}
	  }
	};
	
	exports.fcl = fcl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/forth.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/forth.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function toWordList(words) {
	  var ret = [];
	  words.split(' ').forEach(function(e){
		ret.push({name: e});
	  });
	  return ret;
	}
	
	var coreWordList = toWordList(
	  'INVERT AND OR XOR\
	 2* 2/ LSHIFT RSHIFT\
	 0= = 0< < > U< MIN MAX\
	 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\
	 >R R> R@\
	 + - 1+ 1- ABS NEGATE\
	 S>D * M* UM*\
	 FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\
	 HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\
	 ALIGN ALIGNED +! ALLOT\
	 CHAR [CHAR] [ ] BL\
	 FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\
	 ; DOES> >BODY\
	 EVALUATE\
	 SOURCE >IN\
	 <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\
	 FILL MOVE\
	 . CR EMIT SPACE SPACES TYPE U. .R U.R\
	 ACCEPT\
	 TRUE FALSE\
	 <> U> 0<> 0>\
	 NIP TUCK ROLL PICK\
	 2>R 2R@ 2R>\
	 WITHIN UNUSED MARKER\
	 I J\
	 TO\
	 COMPILE, [COMPILE]\
	 SAVE-INPUT RESTORE-INPUT\
	 PAD ERASE\
	 2LITERAL DNEGATE\
	 D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\
	 M+ M*/ D. D.R 2ROT DU<\
	 CATCH THROW\
	 FREE RESIZE ALLOCATE\
	 CS-PICK CS-ROLL\
	 GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\
	 PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\
	 -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');
	
	var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');
	
	function searchWordList (wordList, word) {
	  var i;
	  for (i = wordList.length - 1; i >= 0; i--) {
		if (wordList[i].name === word.toUpperCase()) {
		  return wordList[i];
		}
	  }
	  return undefined;
	}
	const forth = {
	  name: "forth",
	  startState: function() {
		return {
		  state: '',
		  base: 10,
		  coreWordList: coreWordList,
		  immediateWordList: immediateWordList,
		  wordList: []
		};
	  },
	  token: function (stream, stt) {
		var mat;
		if (stream.eatSpace()) {
		  return null;
		}
		if (stt.state === '') { // interpretation
		  if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
			stt.state = ' compilation';
			return 'builtin';
		  }
		  mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
		  if (mat) {
			stt.wordList.push({name: mat[2].toUpperCase()});
			stt.state = ' compilation';
			return 'def';
		  }
		  mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
		  if (mat) {
			stt.wordList.push({name: mat[2].toUpperCase()});
			return 'def';
		  }
		  mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
		  if (mat) {
			return 'builtin'
		  }
		} else { // compilation
		  // ; [
		  if (stream.match(/^(\;|\[)(\s)/)) {
			stt.state = '';
			stream.backUp(1);
			return 'builtin';
		  }
		  if (stream.match(/^(\;|\[)($)/)) {
			stt.state = '';
			return 'builtin';
		  }
		  if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
			return 'builtin';
		  }
		}
	
		// dynamic wordlist
		mat = stream.match(/^(\S+)(\s+|$)/);
		if (mat) {
		  if (searchWordList(stt.wordList, mat[1]) !== undefined) {
			return 'variable';
		  }
	
		  // comments
		  if (mat[1] === '\\') {
			stream.skipToEnd();
			return 'comment';
		  }
	
		  // core words
		  if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {
			return 'builtin';
		  }
		  if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {
			return 'keyword';
		  }
	
		  if (mat[1] === '(') {
			stream.eatWhile(function (s) { return s !== ')'; });
			stream.eat(')');
			return 'comment';
		  }
	
		  // // strings
		  if (mat[1] === '.(') {
			stream.eatWhile(function (s) { return s !== ')'; });
			stream.eat(')');
			return 'string';
		  }
		  if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
			stream.eatWhile(function (s) { return s !== '"'; });
			stream.eat('"');
			return 'string';
		  }
	
		  // numbers
		  if (mat[1] - 0xfffffffff) {
			return 'number';
		  }
		  // if (mat[1].match(/^[-+]?[0-9]+\.[0-9]*/)) {
		  //     return 'number';
		  // }
	
		  return 'atom';
		}
	  }
	};
	
	exports.forth = forth;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/fortran.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/fortran.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(array) {
	  var keys = {};
	  for (var i = 0; i < array.length; ++i) {
		keys[array[i]] = true;
	  }
	  return keys;
	}
	
	var keywords = words([
	  "abstract", "accept", "allocatable", "allocate",
	  "array", "assign", "asynchronous", "backspace",
	  "bind", "block", "byte", "call", "case",
	  "class", "close", "common", "contains",
	  "continue", "cycle", "data", "deallocate",
	  "decode", "deferred", "dimension", "do",
	  "elemental", "else", "encode", "end",
	  "endif", "entry", "enumerator", "equivalence",
	  "exit", "external", "extrinsic", "final",
	  "forall", "format", "function", "generic",
	  "go", "goto", "if", "implicit", "import", "include",
	  "inquire", "intent", "interface", "intrinsic",
	  "module", "namelist", "non_intrinsic",
	  "non_overridable", "none", "nopass",
	  "nullify", "open", "optional", "options",
	  "parameter", "pass", "pause", "pointer",
	  "print", "private", "program", "protected",
	  "public", "pure", "read", "recursive", "result",
	  "return", "rewind", "save", "select", "sequence",
	  "stop", "subroutine", "target", "then", "to", "type",
	  "use", "value", "volatile", "where", "while",
	  "write"]);
	var builtins = words(["abort", "abs", "access", "achar", "acos",
						  "adjustl", "adjustr", "aimag", "aint", "alarm",
						  "all", "allocated", "alog", "amax", "amin",
						  "amod", "and", "anint", "any", "asin",
						  "associated", "atan", "besj", "besjn", "besy",
						  "besyn", "bit_size", "btest", "cabs", "ccos",
						  "ceiling", "cexp", "char", "chdir", "chmod",
						  "clog", "cmplx", "command_argument_count",
						  "complex", "conjg", "cos", "cosh", "count",
						  "cpu_time", "cshift", "csin", "csqrt", "ctime",
						  "c_funloc", "c_loc", "c_associated", "c_null_ptr",
						  "c_null_funptr", "c_f_pointer", "c_null_char",
						  "c_alert", "c_backspace", "c_form_feed",
						  "c_new_line", "c_carriage_return",
						  "c_horizontal_tab", "c_vertical_tab", "dabs",
						  "dacos", "dasin", "datan", "date_and_time",
						  "dbesj", "dbesj", "dbesjn", "dbesy", "dbesy",
						  "dbesyn", "dble", "dcos", "dcosh", "ddim", "derf",
						  "derfc", "dexp", "digits", "dim", "dint", "dlog",
						  "dlog", "dmax", "dmin", "dmod", "dnint",
						  "dot_product", "dprod", "dsign", "dsinh",
						  "dsin", "dsqrt", "dtanh", "dtan", "dtime",
						  "eoshift", "epsilon", "erf", "erfc", "etime",
						  "exit", "exp", "exponent", "extends_type_of",
						  "fdate", "fget", "fgetc", "float", "floor",
						  "flush", "fnum", "fputc", "fput", "fraction",
						  "fseek", "fstat", "ftell", "gerror", "getarg",
						  "get_command", "get_command_argument",
						  "get_environment_variable", "getcwd",
						  "getenv", "getgid", "getlog", "getpid",
						  "getuid", "gmtime", "hostnm", "huge", "iabs",
						  "iachar", "iand", "iargc", "ibclr", "ibits",
						  "ibset", "ichar", "idate", "idim", "idint",
						  "idnint", "ieor", "ierrno", "ifix", "imag",
						  "imagpart", "index", "int", "ior", "irand",
						  "isatty", "ishft", "ishftc", "isign",
						  "iso_c_binding", "is_iostat_end", "is_iostat_eor",
						  "itime", "kill", "kind", "lbound", "len", "len_trim",
						  "lge", "lgt", "link", "lle", "llt", "lnblnk", "loc",
						  "log", "logical", "long", "lshift", "lstat", "ltime",
						  "matmul", "max", "maxexponent", "maxloc", "maxval",
						  "mclock", "merge", "move_alloc", "min", "minexponent",
						  "minloc", "minval", "mod", "modulo", "mvbits",
						  "nearest", "new_line", "nint", "not", "or", "pack",
						  "perror", "precision", "present", "product", "radix",
						  "rand", "random_number", "random_seed", "range",
						  "real", "realpart", "rename", "repeat", "reshape",
						  "rrspacing", "rshift", "same_type_as", "scale",
						  "scan", "second", "selected_int_kind",
						  "selected_real_kind", "set_exponent", "shape",
						  "short", "sign", "signal", "sinh", "sin", "sleep",
						  "sngl", "spacing", "spread", "sqrt", "srand", "stat",
						  "sum", "symlnk", "system", "system_clock", "tan",
						  "tanh", "time", "tiny", "transfer", "transpose",
						  "trim", "ttynam", "ubound", "umask", "unlink",
						  "unpack", "verify", "xor", "zabs", "zcos", "zexp",
						  "zlog", "zsin", "zsqrt"]);
	
	var dataTypes =  words(["c_bool", "c_char", "c_double", "c_double_complex",
							"c_float", "c_float_complex", "c_funptr", "c_int",
							"c_int16_t", "c_int32_t", "c_int64_t", "c_int8_t",
							"c_int_fast16_t", "c_int_fast32_t", "c_int_fast64_t",
							"c_int_fast8_t", "c_int_least16_t", "c_int_least32_t",
							"c_int_least64_t", "c_int_least8_t", "c_intmax_t",
							"c_intptr_t", "c_long", "c_long_double",
							"c_long_double_complex", "c_long_long", "c_ptr",
							"c_short", "c_signed_char", "c_size_t", "character",
							"complex", "double", "integer", "logical", "real"]);
	var isOperatorChar = /[+\-*&=<>\/\:]/;
	var litOperator = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;
	
	function tokenBase(stream, state) {
	
	  if (stream.match(litOperator)){
		return 'operator';
	  }
	
	  var ch = stream.next();
	  if (ch == "!") {
		stream.skipToEnd();
		return "comment";
	  }
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\[\]\(\),]/.test(ch)) {
		return null;
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_]/);
	  var word = stream.current().toLowerCase();
	
	  if (keywords.hasOwnProperty(word)){
		return 'keyword';
	  }
	  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {
		return 'builtin';
	  }
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			end = true;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped) state.tokenize = null;
		return "string";
	  };
	}
	
	// Interface
	
	const fortran = {
	  name: "fortran",
	  startState: function() {
		return {tokenize: null};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment" || style == "meta") return style;
		return style;
	  }
	};
	
	exports.fortran = fortran;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/gas.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/gas.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkGas(arch) {
	  // If an architecture is specified, its initialization function may
	  // populate this array with custom parsing functions which will be
	  // tried in the event that the standard functions do not find a match.
	  var custom = [];
	
	  // The symbol used to start a line comment changes based on the target
	  // architecture.
	  // If no architecture is pased in "parserConfig" then only multiline
	  // comments will have syntax support.
	  var lineCommentStartSymbol = "";
	
	  // These directives are architecture independent.
	  // Machine specific directives should go in their respective
	  // architecture initialization function.
	  // Reference:
	  // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops
	  var directives = {
		".abort" : "builtin",
		".align" : "builtin",
		".altmacro" : "builtin",
		".ascii" : "builtin",
		".asciz" : "builtin",
		".balign" : "builtin",
		".balignw" : "builtin",
		".balignl" : "builtin",
		".bundle_align_mode" : "builtin",
		".bundle_lock" : "builtin",
		".bundle_unlock" : "builtin",
		".byte" : "builtin",
		".cfi_startproc" : "builtin",
		".comm" : "builtin",
		".data" : "builtin",
		".def" : "builtin",
		".desc" : "builtin",
		".dim" : "builtin",
		".double" : "builtin",
		".eject" : "builtin",
		".else" : "builtin",
		".elseif" : "builtin",
		".end" : "builtin",
		".endef" : "builtin",
		".endfunc" : "builtin",
		".endif" : "builtin",
		".equ" : "builtin",
		".equiv" : "builtin",
		".eqv" : "builtin",
		".err" : "builtin",
		".error" : "builtin",
		".exitm" : "builtin",
		".extern" : "builtin",
		".fail" : "builtin",
		".file" : "builtin",
		".fill" : "builtin",
		".float" : "builtin",
		".func" : "builtin",
		".global" : "builtin",
		".gnu_attribute" : "builtin",
		".hidden" : "builtin",
		".hword" : "builtin",
		".ident" : "builtin",
		".if" : "builtin",
		".incbin" : "builtin",
		".include" : "builtin",
		".int" : "builtin",
		".internal" : "builtin",
		".irp" : "builtin",
		".irpc" : "builtin",
		".lcomm" : "builtin",
		".lflags" : "builtin",
		".line" : "builtin",
		".linkonce" : "builtin",
		".list" : "builtin",
		".ln" : "builtin",
		".loc" : "builtin",
		".loc_mark_labels" : "builtin",
		".local" : "builtin",
		".long" : "builtin",
		".macro" : "builtin",
		".mri" : "builtin",
		".noaltmacro" : "builtin",
		".nolist" : "builtin",
		".octa" : "builtin",
		".offset" : "builtin",
		".org" : "builtin",
		".p2align" : "builtin",
		".popsection" : "builtin",
		".previous" : "builtin",
		".print" : "builtin",
		".protected" : "builtin",
		".psize" : "builtin",
		".purgem" : "builtin",
		".pushsection" : "builtin",
		".quad" : "builtin",
		".reloc" : "builtin",
		".rept" : "builtin",
		".sbttl" : "builtin",
		".scl" : "builtin",
		".section" : "builtin",
		".set" : "builtin",
		".short" : "builtin",
		".single" : "builtin",
		".size" : "builtin",
		".skip" : "builtin",
		".sleb128" : "builtin",
		".space" : "builtin",
		".stab" : "builtin",
		".string" : "builtin",
		".struct" : "builtin",
		".subsection" : "builtin",
		".symver" : "builtin",
		".tag" : "builtin",
		".text" : "builtin",
		".title" : "builtin",
		".type" : "builtin",
		".uleb128" : "builtin",
		".val" : "builtin",
		".version" : "builtin",
		".vtable_entry" : "builtin",
		".vtable_inherit" : "builtin",
		".warning" : "builtin",
		".weak" : "builtin",
		".weakref" : "builtin",
		".word" : "builtin"
	  };
	
	  var registers = {};
	
	  function x86() {
		lineCommentStartSymbol = "#";
	
		registers.al  = "variable";
		registers.ah  = "variable";
		registers.ax  = "variable";
		registers.eax = "variableName.special";
		registers.rax = "variableName.special";
	
		registers.bl  = "variable";
		registers.bh  = "variable";
		registers.bx  = "variable";
		registers.ebx = "variableName.special";
		registers.rbx = "variableName.special";
	
		registers.cl  = "variable";
		registers.ch  = "variable";
		registers.cx  = "variable";
		registers.ecx = "variableName.special";
		registers.rcx = "variableName.special";
	
		registers.dl  = "variable";
		registers.dh  = "variable";
		registers.dx  = "variable";
		registers.edx = "variableName.special";
		registers.rdx = "variableName.special";
	
		registers.si  = "variable";
		registers.esi = "variableName.special";
		registers.rsi = "variableName.special";
	
		registers.di  = "variable";
		registers.edi = "variableName.special";
		registers.rdi = "variableName.special";
	
		registers.sp  = "variable";
		registers.esp = "variableName.special";
		registers.rsp = "variableName.special";
	
		registers.bp  = "variable";
		registers.ebp = "variableName.special";
		registers.rbp = "variableName.special";
	
		registers.ip  = "variable";
		registers.eip = "variableName.special";
		registers.rip = "variableName.special";
	
		registers.cs  = "keyword";
		registers.ds  = "keyword";
		registers.ss  = "keyword";
		registers.es  = "keyword";
		registers.fs  = "keyword";
		registers.gs  = "keyword";
	  }
	
	  function armv6() {
		// Reference:
		// http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf
		// http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf
		lineCommentStartSymbol = "@";
		directives.syntax = "builtin";
	
		registers.r0  = "variable";
		registers.r1  = "variable";
		registers.r2  = "variable";
		registers.r3  = "variable";
		registers.r4  = "variable";
		registers.r5  = "variable";
		registers.r6  = "variable";
		registers.r7  = "variable";
		registers.r8  = "variable";
		registers.r9  = "variable";
		registers.r10 = "variable";
		registers.r11 = "variable";
		registers.r12 = "variable";
	
		registers.sp  = "variableName.special";
		registers.lr  = "variableName.special";
		registers.pc  = "variableName.special";
		registers.r13 = registers.sp;
		registers.r14 = registers.lr;
		registers.r15 = registers.pc;
	
		custom.push(function(ch, stream) {
		  if (ch === '#') {
			stream.eatWhile(/\w/);
			return "number";
		  }
		});
	  }
	
	  if (arch === "x86") {
		x86();
	  } else if (arch === "arm" || arch === "armv6") {
		armv6();
	  }
	
	  function nextUntilUnescaped(stream, end) {
		var escaped = false, next;
		while ((next = stream.next()) != null) {
		  if (next === end && !escaped) {
			return false;
		  }
		  escaped = !escaped && next === "\\";
		}
		return escaped;
	  }
	
	  function clikeComment(stream, state) {
		var maybeEnd = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch === "/" && maybeEnd) {
			state.tokenize = null;
			break;
		  }
		  maybeEnd = (ch === "*");
		}
		return "comment";
	  }
	
	  return {
		name: "gas",
		startState: function() {
		  return {
			tokenize: null
		  };
		},
	
		token: function(stream, state) {
		  if (state.tokenize) {
			return state.tokenize(stream, state);
		  }
	
		  if (stream.eatSpace()) {
			return null;
		  }
	
		  var style, cur, ch = stream.next();
	
		  if (ch === "/") {
			if (stream.eat("*")) {
			  state.tokenize = clikeComment;
			  return clikeComment(stream, state);
			}
		  }
	
		  if (ch === lineCommentStartSymbol) {
			stream.skipToEnd();
			return "comment";
		  }
	
		  if (ch === '"') {
			nextUntilUnescaped(stream, '"');
			return "string";
		  }
	
		  if (ch === '.') {
			stream.eatWhile(/\w/);
			cur = stream.current().toLowerCase();
			style = directives[cur];
			return style || null;
		  }
	
		  if (ch === '=') {
			stream.eatWhile(/\w/);
			return "tag";
		  }
	
		  if (ch === '{') {
			return "bracket";
		  }
	
		  if (ch === '}') {
			return "bracket";
		  }
	
		  if (/\d/.test(ch)) {
			if (ch === "0" && stream.eat("x")) {
			  stream.eatWhile(/[0-9a-fA-F]/);
			  return "number";
			}
			stream.eatWhile(/\d/);
			return "number";
		  }
	
		  if (/\w/.test(ch)) {
			stream.eatWhile(/\w/);
			if (stream.eat(":")) {
			  return 'tag';
			}
			cur = stream.current().toLowerCase();
			style = registers[cur];
			return style || null;
		  }
	
		  for (var i = 0; i < custom.length; i++) {
			style = custom[i](ch, stream, state);
			if (style) {
			  return style;
			}
		  }
		},
	
		languageData: {
		  commentTokens: {
			line: lineCommentStartSymbol,
			block: {open: "/*", close: "*/"}
		  }
		}
	  };
	}
	const gas = mkGas("x86");
	const gasArm = mkGas("arm");
	
	exports.gas = gas;
	exports.gasArm = gasArm;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/gherkin.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/gherkin.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	const gherkin = {
	  name: "gherkin",
	  startState: function () {
		return {
		  lineNumber: 0,
		  tableHeaderLine: false,
		  allowFeature: true,
		  allowBackground: false,
		  allowScenario: false,
		  allowSteps: false,
		  allowPlaceholders: false,
		  allowMultilineArgument: false,
		  inMultilineString: false,
		  inMultilineTable: false,
		  inKeywordLine: false
		};
	  },
	  token: function (stream, state) {
		if (stream.sol()) {
		  state.lineNumber++;
		  state.inKeywordLine = false;
		  if (state.inMultilineTable) {
			state.tableHeaderLine = false;
			if (!stream.match(/\s*\|/, false)) {
			  state.allowMultilineArgument = false;
			  state.inMultilineTable = false;
			}
		  }
		}
	
		stream.eatSpace();
	
		if (state.allowMultilineArgument) {
	
		  // STRING
		  if (state.inMultilineString) {
			if (stream.match('"""')) {
			  state.inMultilineString = false;
			  state.allowMultilineArgument = false;
			} else {
			  stream.match(/.*/);
			}
			return "string";
		  }
	
		  // TABLE
		  if (state.inMultilineTable) {
			if (stream.match(/\|\s*/)) {
			  return "bracket";
			} else {
			  stream.match(/[^\|]*/);
			  return state.tableHeaderLine ? "header" : "string";
			}
		  }
	
		  // DETECT START
		  if (stream.match('"""')) {
			// String
			state.inMultilineString = true;
			return "string";
		  } else if (stream.match("|")) {
			// Table
			state.inMultilineTable = true;
			state.tableHeaderLine = true;
			return "bracket";
		  }
	
		}
	
		// LINE COMMENT
		if (stream.match(/#.*/)) {
		  return "comment";
	
		  // TAG
		} else if (!state.inKeywordLine && stream.match(/@\S+/)) {
		  return "tag";
	
		  // FEATURE
		} else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
		  state.allowScenario = true;
		  state.allowBackground = true;
		  state.allowPlaceholders = false;
		  state.allowSteps = false;
		  state.allowMultilineArgument = false;
		  state.inKeywordLine = true;
		  return "keyword";
	
		  // BACKGROUND
		} else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
		  state.allowPlaceholders = false;
		  state.allowSteps = true;
		  state.allowBackground = false;
		  state.allowMultilineArgument = false;
		  state.inKeywordLine = true;
		  return "keyword";
	
		  // SCENARIO OUTLINE
		} else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
		  state.allowPlaceholders = true;
		  state.allowSteps = true;
		  state.allowMultilineArgument = false;
		  state.inKeywordLine = true;
		  return "keyword";
	
		  // EXAMPLES
		} else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
		  state.allowPlaceholders = false;
		  state.allowSteps = true;
		  state.allowBackground = false;
		  state.allowMultilineArgument = true;
		  return "keyword";
	
		  // SCENARIO
		} else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
		  state.allowPlaceholders = false;
		  state.allowSteps = true;
		  state.allowBackground = false;
		  state.allowMultilineArgument = false;
		  state.inKeywordLine = true;
		  return "keyword";
	
		  // STEPS
		} else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
		  state.inStep = true;
		  state.allowPlaceholders = true;
		  state.allowMultilineArgument = true;
		  state.inKeywordLine = true;
		  return "keyword";
	
		  // INLINE STRING
		} else if (stream.match(/"[^"]*"?/)) {
		  return "string";
	
		  // PLACEHOLDER
		} else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
		  return "variable";
	
		  // Fall through
		} else {
		  stream.next();
		  stream.eatWhile(/[^@"<#]/);
		  return null;
		}
	  }
	};
	
	exports.gherkin = gherkin;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/go.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/go.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var keywords = {
	  "break":true, "case":true, "chan":true, "const":true, "continue":true,
	  "default":true, "defer":true, "else":true, "fallthrough":true, "for":true,
	  "func":true, "go":true, "goto":true, "if":true, "import":true,
	  "interface":true, "map":true, "package":true, "range":true, "return":true,
	  "select":true, "struct":true, "switch":true, "type":true, "var":true,
	  "bool":true, "byte":true, "complex64":true, "complex128":true,
	  "float32":true, "float64":true, "int8":true, "int16":true, "int32":true,
	  "int64":true, "string":true, "uint8":true, "uint16":true, "uint32":true,
	  "uint64":true, "int":true, "uint":true, "uintptr":true, "error": true,
	  "rune":true, "any":true, "comparable":true
	};
	
	var atoms = {
	  "true":true, "false":true, "iota":true, "nil":true, "append":true,
	  "cap":true, "close":true, "complex":true, "copy":true, "delete":true, "imag":true,
	  "len":true, "make":true, "new":true, "panic":true, "print":true,
	  "println":true, "real":true, "recover":true
	};
	
	var isOperatorChar = /[+\-*&^%:=<>!|\/]/;
	
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == '"' || ch == "'" || ch == "`") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\d\.]/.test(ch)) {
		if (ch == ".") {
		  stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
		} else if (ch == "0") {
		  stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
		} else {
		  stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
		}
		return "number";
	  }
	  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  if (ch == "/") {
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
	  var cur = stream.current();
	  if (keywords.propertyIsEnumerable(cur)) {
		if (cur == "case" || cur == "default") curPunc = "case";
		return "keyword";
	  }
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && quote != "`" && next == "\\";
		}
		if (end || !(escaped || quote == "`"))
		  state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  return state.context = new Context(state.indented, col, type, null, state.context);
	}
	function popContext(state) {
	  if (!state.context.prev) return;
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	
	const go = {
	  name: "go",
	  startState: function(indentUnit) {
		return {
		  tokenize: null,
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		  if (ctx.type == "case") ctx.type = "}";
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment") return style;
		if (ctx.align == null) ctx.align = true;
	
		if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "case") ctx.type = "case";
		else if (curPunc == "}" && ctx.type == "}") popContext(state);
		else if (curPunc == ctx.type) popContext(state);
		state.startOfLine = false;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase && state.tokenize != null) return null;
		var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
		if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter)) return ctx.indented;
		var closing = firstChar == ctx.type;
		if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s([{}]|case |default\s*:)$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.go = go;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/groovy.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/groovy.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	var keywords = words(
	  "abstract as assert boolean break byte case catch char class const continue def default " +
		"do double else enum extends final finally float for goto if implements import in " +
		"instanceof int interface long native new package private protected public return " +
		"short static strictfp super switch synchronized threadsafe throw throws trait transient " +
		"try void volatile while");
	var blockKeywords = words("catch class def do else enum finally for if interface switch trait try while");
	var standaloneKeywords = words("return break continue");
	var atoms = words("null true false this");
	
	var curPunc;
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == '"' || ch == "'") {
		return startString(ch, stream, state);
	  }
	  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		if (stream.eat(/eE/)) { stream.eat(/\+\-/); stream.eatWhile(/\d/); }
		return "number";
	  }
	  if (ch == "/") {
		if (stream.eat("*")) {
		  state.tokenize.push(tokenComment);
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
		if (expectExpression(state.lastToken, false)) {
		  return startString(ch, stream, state);
		}
	  }
	  if (ch == "-" && stream.eat(">")) {
		curPunc = "->";
		return null;
	  }
	  if (/[+\-*&%=<>!?|\/~]/.test(ch)) {
		stream.eatWhile(/[+\-*&%=<>|~]/);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_]/);
	  if (ch == "@") { stream.eatWhile(/[\w\$_\.]/); return "meta"; }
	  if (state.lastToken == ".") return "property";
	  if (stream.eat(":")) { curPunc = "proplabel"; return "property"; }
	  var cur = stream.current();
	  if (atoms.propertyIsEnumerable(cur)) { return "atom"; }
	  if (keywords.propertyIsEnumerable(cur)) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = "standalone";
		return "keyword";
	  }
	  return "variable";
	}
	tokenBase.isBase = true;
	
	function startString(quote, stream, state) {
	  var tripleQuoted = false;
	  if (quote != "/" && stream.eat(quote)) {
		if (stream.eat(quote)) tripleQuoted = true;
		else return "string";
	  }
	  function t(stream, state) {
		var escaped = false, next, end = !tripleQuoted;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			if (!tripleQuoted) { break; }
			if (stream.match(quote + quote)) { end = true; break; }
		  }
		  if (quote == '"' && next == "$" && !escaped) {
			if (stream.eat("{")) {
			  state.tokenize.push(tokenBaseUntilBrace());
			  return "string";
			} else if (stream.match(/^\w/, false)) {
			  state.tokenize.push(tokenVariableDeref);
			  return "string";
			}
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end) state.tokenize.pop();
		return "string";
	  }
	  state.tokenize.push(t);
	  return t(stream, state);
	}
	
	function tokenBaseUntilBrace() {
	  var depth = 1;
	  function t(stream, state) {
		if (stream.peek() == "}") {
		  depth--;
		  if (depth == 0) {
			state.tokenize.pop();
			return state.tokenize[state.tokenize.length-1](stream, state);
		  }
		} else if (stream.peek() == "{") {
		  depth++;
		}
		return tokenBase(stream, state);
	  }
	  t.isBase = true;
	  return t;
	}
	
	function tokenVariableDeref(stream, state) {
	  var next = stream.match(/^(\.|[\w\$_]+)/);
	  if (!next) {
		state.tokenize.pop();
		return state.tokenize[state.tokenize.length-1](stream, state)
	  }
	  return next[0] == "." ? null : "variable"
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize.pop();
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function expectExpression(last, newline) {
	  return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) ||
		last == "newstatement" || last == "keyword" || last == "proplabel" ||
		(last == "standalone" && !newline);
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  return state.context = new Context(state.indented, col, type, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	
	const groovy = {
	  name: "groovy",
	  startState: function(indentUnit) {
		return {
		  tokenize: [tokenBase],
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true,
		  lastToken: null
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		  // Automatic semicolon insertion
		  if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
			popContext(state); ctx = state.context;
		  }
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = state.tokenize[state.tokenize.length-1](stream, state);
		if (style == "comment") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);
		// Handle indentation for {x -> \n ... }
		else if (curPunc == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
		  popContext(state);
		  state.context.align = false;
		}
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))
		  pushContext(state, stream.column(), "statement");
		state.startOfLine = false;
		state.lastToken = curPunc || style;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (!state.tokenize[state.tokenize.length-1].isBase) return null;
		var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
		if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;
		var closing = firstChar == ctx.type;
		if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
		else if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
	  }
	};
	
	exports.groovy = groovy;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/haskell.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/haskell.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function switchState(source, setState, f) {
	  setState(f);
	  return f(source, setState);
	}
	
	// These should all be Unicode extended, as per the Haskell 2010 report
	var smallRE = /[a-z_]/;
	var largeRE = /[A-Z]/;
	var digitRE = /\d/;
	var hexitRE = /[0-9A-Fa-f]/;
	var octitRE = /[0-7]/;
	var idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
	var symbolRE = /[-!#$%&*+.\/<=>?@\\^|~:]/;
	var specialRE = /[(),;[\]`{}]/;
	var whiteCharRE = /[ \t\v\f]/; // newlines are handled in tokenizer
	
	function normal(source, setState) {
	  if (source.eatWhile(whiteCharRE)) {
		return null;
	  }
	
	  var ch = source.next();
	  if (specialRE.test(ch)) {
		if (ch == '{' && source.eat('-')) {
		  var t = "comment";
		  if (source.eat('#')) {
			t = "meta";
		  }
		  return switchState(source, setState, ncomment(t, 1));
		}
		return null;
	  }
	
	  if (ch == '\'') {
		if (source.eat('\\')) {
		  source.next();  // should handle other escapes here
		}
		else {
		  source.next();
		}
		if (source.eat('\'')) {
		  return "string";
		}
		return "error";
	  }
	
	  if (ch == '"') {
		return switchState(source, setState, stringLiteral);
	  }
	
	  if (largeRE.test(ch)) {
		source.eatWhile(idRE);
		if (source.eat('.')) {
		  return "qualifier";
		}
		return "type";
	  }
	
	  if (smallRE.test(ch)) {
		source.eatWhile(idRE);
		return "variable";
	  }
	
	  if (digitRE.test(ch)) {
		if (ch == '0') {
		  if (source.eat(/[xX]/)) {
			source.eatWhile(hexitRE); // should require at least 1
			return "integer";
		  }
		  if (source.eat(/[oO]/)) {
			source.eatWhile(octitRE); // should require at least 1
			return "number";
		  }
		}
		source.eatWhile(digitRE);
		var t = "number";
		if (source.match(/^\.\d+/)) {
		  t = "number";
		}
		if (source.eat(/[eE]/)) {
		  t = "number";
		  source.eat(/[-+]/);
		  source.eatWhile(digitRE); // should require at least 1
		}
		return t;
	  }
	
	  if (ch == "." && source.eat("."))
		return "keyword";
	
	  if (symbolRE.test(ch)) {
		if (ch == '-' && source.eat(/-/)) {
		  source.eatWhile(/-/);
		  if (!source.eat(symbolRE)) {
			source.skipToEnd();
			return "comment";
		  }
		}
		source.eatWhile(symbolRE);
		return "variable"
	  }
	
	  return "error";
	}
	
	function ncomment(type, nest) {
	  if (nest == 0) {
		return normal;
	  }
	  return function(source, setState) {
		var currNest = nest;
		while (!source.eol()) {
		  var ch = source.next();
		  if (ch == '{' && source.eat('-')) {
			++currNest;
		  }
		  else if (ch == '-' && source.eat('}')) {
			--currNest;
			if (currNest == 0) {
			  setState(normal);
			  return type;
			}
		  }
		}
		setState(ncomment(type, currNest));
		return type;
	  };
	}
	
	function stringLiteral(source, setState) {
	  while (!source.eol()) {
		var ch = source.next();
		if (ch == '"') {
		  setState(normal);
		  return "string";
		}
		if (ch == '\\') {
		  if (source.eol() || source.eat(whiteCharRE)) {
			setState(stringGap);
			return "string";
		  }
		  if (source.eat('&')) ;
		  else {
			source.next(); // should handle other escapes here
		  }
		}
	  }
	  setState(normal);
	  return "error";
	}
	
	function stringGap(source, setState) {
	  if (source.eat('\\')) {
		return switchState(source, setState, stringLiteral);
	  }
	  source.next();
	  setState(normal);
	  return "error";
	}
	
	
	var wellKnownWords = (function() {
	  var wkw = {};
	  function setType(t) {
		return function () {
		  for (var i = 0; i < arguments.length; i++)
			wkw[arguments[i]] = t;
		};
	  }
	
	  setType("keyword")(
		"case", "class", "data", "default", "deriving", "do", "else", "foreign",
		"if", "import", "in", "infix", "infixl", "infixr", "instance", "let",
		"module", "newtype", "of", "then", "type", "where", "_");
	
	  setType("keyword")(
		"\.\.", ":", "::", "=", "\\", "<-", "->", "@", "~", "=>");
	
	  setType("builtin")(
		"!!", "$!", "$", "&&", "+", "++", "-", ".", "/", "/=", "<", "<*", "<=",
		"<$>", "<*>", "=<<", "==", ">", ">=", ">>", ">>=", "^", "^^", "||", "*",
		"*>", "**");
	
	  setType("builtin")(
		"Applicative", "Bool", "Bounded", "Char", "Double", "EQ", "Either", "Enum",
		"Eq", "False", "FilePath", "Float", "Floating", "Fractional", "Functor",
		"GT", "IO", "IOError", "Int", "Integer", "Integral", "Just", "LT", "Left",
		"Maybe", "Monad", "Nothing", "Num", "Ord", "Ordering", "Rational", "Read",
		"ReadS", "Real", "RealFloat", "RealFrac", "Right", "Show", "ShowS",
		"String", "True");
	
	  setType("builtin")(
		"abs", "acos", "acosh", "all", "and", "any", "appendFile", "asTypeOf",
		"asin", "asinh", "atan", "atan2", "atanh", "break", "catch", "ceiling",
		"compare", "concat", "concatMap", "const", "cos", "cosh", "curry",
		"cycle", "decodeFloat", "div", "divMod", "drop", "dropWhile", "either",
		"elem", "encodeFloat", "enumFrom", "enumFromThen", "enumFromThenTo",
		"enumFromTo", "error", "even", "exp", "exponent", "fail", "filter",
		"flip", "floatDigits", "floatRadix", "floatRange", "floor", "fmap",
		"foldl", "foldl1", "foldr", "foldr1", "fromEnum", "fromInteger",
		"fromIntegral", "fromRational", "fst", "gcd", "getChar", "getContents",
		"getLine", "head", "id", "init", "interact", "ioError", "isDenormalized",
		"isIEEE", "isInfinite", "isNaN", "isNegativeZero", "iterate", "last",
		"lcm", "length", "lex", "lines", "log", "logBase", "lookup", "map",
		"mapM", "mapM_", "max", "maxBound", "maximum", "maybe", "min", "minBound",
		"minimum", "mod", "negate", "not", "notElem", "null", "odd", "or",
		"otherwise", "pi", "pred", "print", "product", "properFraction", "pure",
		"putChar", "putStr", "putStrLn", "quot", "quotRem", "read", "readFile",
		"readIO", "readList", "readLn", "readParen", "reads", "readsPrec",
		"realToFrac", "recip", "rem", "repeat", "replicate", "return", "reverse",
		"round", "scaleFloat", "scanl", "scanl1", "scanr", "scanr1", "seq",
		"sequence", "sequence_", "show", "showChar", "showList", "showParen",
		"showString", "shows", "showsPrec", "significand", "signum", "sin",
		"sinh", "snd", "span", "splitAt", "sqrt", "subtract", "succ", "sum",
		"tail", "take", "takeWhile", "tan", "tanh", "toEnum", "toInteger",
		"toRational", "truncate", "uncurry", "undefined", "unlines", "until",
		"unwords", "unzip", "unzip3", "userError", "words", "writeFile", "zip",
		"zip3", "zipWith", "zipWith3");
	
	  return wkw;
	})();
	
	const haskell = {
	  name: "haskell",
	  startState: function ()  { return { f: normal }; },
	  copyState:  function (s) { return { f: s.f }; },
	
	  token: function(stream, state) {
		var t = state.f(stream, function(s) { state.f = s; });
		var w = stream.current();
		return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;
	  },
	
	  languageData: {
		commentTokens: {line: "--", block: {open: "{-", close: "-}"}}
	  }
	};
	
	exports.haskell = haskell;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/haxe.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/haxe.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// Tokenizer
	
	function kw(type) {return {type: type, style: "keyword"};}
	var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c");
	var operator = kw("operator"), atom = {type: "atom", style: "atom"}, attribute = {type:"attribute", style: "attribute"};
	var type = kw("typedef");
	var keywords = {
	  "if": A, "while": A, "else": B, "do": B, "try": B,
	  "return": C, "break": C, "continue": C, "new": C, "throw": C,
	  "var": kw("var"), "inline":attribute, "static": attribute, "using":kw("import"),
	  "public": attribute, "private": attribute, "cast": kw("cast"), "import": kw("import"), "macro": kw("macro"),
	  "function": kw("function"), "catch": kw("catch"), "untyped": kw("untyped"), "callback": kw("cb"),
	  "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
	  "in": operator, "never": kw("property_access"), "trace":kw("trace"),
	  "class": type, "abstract":type, "enum":type, "interface":type, "typedef":type, "extends":type, "implements":type, "dynamic":type,
	  "true": atom, "false": atom, "null": atom
	};
	
	var isOperatorChar = /[+\-*&%=<>!?|]/;
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	
	function toUnescaped(stream, end) {
	  var escaped = false, next;
	  while ((next = stream.next()) != null) {
		if (next == end && !escaped)
		  return true;
		escaped = !escaped && next == "\\";
	  }
	}
	
	// Used as scratch variables to communicate multiple values without
	// consing up tons of objects.
	var type, content;
	function ret(tp, style, cont) {
	  type = tp; content = cont;
	  return style;
	}
	
	function haxeTokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == '"' || ch == "'") {
		return chain(stream, state, haxeTokenString(ch));
	  } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		return ret(ch);
	  } else if (ch == "0" && stream.eat(/x/i)) {
		stream.eatWhile(/[\da-f]/i);
		return ret("number", "number");
	  } else if (/\d/.test(ch) || ch == "-" && stream.eat(/\d/)) {
		stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
		return ret("number", "number");
	  } else if (state.reAllowed && (ch == "~" && stream.eat(/\//))) {
		toUnescaped(stream, "/");
		stream.eatWhile(/[gimsu]/);
		return ret("regexp", "string.special");
	  } else if (ch == "/") {
		if (stream.eat("*")) {
		  return chain(stream, state, haxeTokenComment);
		} else if (stream.eat("/")) {
		  stream.skipToEnd();
		  return ret("comment", "comment");
		} else {
		  stream.eatWhile(isOperatorChar);
		  return ret("operator", null, stream.current());
		}
	  } else if (ch == "#") {
		stream.skipToEnd();
		return ret("conditional", "meta");
	  } else if (ch == "@") {
		stream.eat(/:/);
		stream.eatWhile(/[\w_]/);
		return ret ("metadata", "meta");
	  } else if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return ret("operator", null, stream.current());
	  } else {
		var word;
		if(/[A-Z]/.test(ch)) {
		  stream.eatWhile(/[\w_<>]/);
		  word = stream.current();
		  return ret("type", "type", word);
		} else {
		  stream.eatWhile(/[\w_]/);
		  var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];
		  return (known && state.kwAllowed) ? ret(known.type, known.style, word) :
			ret("variable", "variable", word);
		}
	  }
	}
	
	function haxeTokenString(quote) {
	  return function(stream, state) {
		if (toUnescaped(stream, quote))
		  state.tokenize = haxeTokenBase;
		return ret("string", "string");
	  };
	}
	
	function haxeTokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = haxeTokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return ret("comment", "comment");
	}
	
	// Parser
	
	var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true, "regexp": true};
	
	function HaxeLexical(indented, column, type, align, prev, info) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.prev = prev;
	  this.info = info;
	  if (align != null) this.align = align;
	}
	
	function inScope(state, varname) {
	  for (var v = state.localVars; v; v = v.next)
		if (v.name == varname) return true;
	}
	
	function parseHaxe(state, style, type, content, stream) {
	  var cc = state.cc;
	  // Communicate our context to the combinators.
	  // (Less wasteful than consing up a hundred closures on every call.)
	  cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;
	
	  if (!state.lexical.hasOwnProperty("align"))
		state.lexical.align = true;
	
	  while(true) {
		var combinator = cc.length ? cc.pop() : statement;
		if (combinator(type, content)) {
		  while(cc.length && cc[cc.length - 1].lex)
			cc.pop()();
		  if (cx.marked) return cx.marked;
		  if (type == "variable" && inScope(state, content)) return "variableName.local";
		  if (type == "variable" && imported(state, content)) return "variableName.special";
		  return style;
		}
	  }
	}
	
	function imported(state, typename) {
	  if (/[a-z]/.test(typename.charAt(0)))
		return false;
	  var len = state.importedtypes.length;
	  for (var i = 0; i<len; i++)
		if(state.importedtypes[i]==typename) return true;
	}
	
	function registerimport(importname) {
	  var state = cx.state;
	  for (var t = state.importedtypes; t; t = t.next)
		if(t.name == importname) return;
	  state.importedtypes = { name: importname, next: state.importedtypes };
	}
	// Combinator utils
	
	var cx = {state: null, column: null, marked: null, cc: null};
	function pass() {
	  for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
	}
	function cont() {
	  pass.apply(null, arguments);
	  return true;
	}
	function inList(name, list) {
	  for (var v = list; v; v = v.next)
		if (v.name == name) return true;
	  return false;
	}
	function register(varname) {
	  var state = cx.state;
	  if (state.context) {
		cx.marked = "def";
		if (inList(varname, state.localVars)) return;
		state.localVars = {name: varname, next: state.localVars};
	  } else if (state.globalVars) {
		if (inList(varname, state.globalVars)) return;
		state.globalVars = {name: varname, next: state.globalVars};
	  }
	}
	
	// Combinators
	
	var defaultVars = {name: "this", next: null};
	function pushcontext() {
	  if (!cx.state.context) cx.state.localVars = defaultVars;
	  cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};
	}
	function popcontext() {
	  cx.state.localVars = cx.state.context.vars;
	  cx.state.context = cx.state.context.prev;
	}
	popcontext.lex = true;
	function pushlex(type, info) {
	  var result = function() {
		var state = cx.state;
		state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);
	  };
	  result.lex = true;
	  return result;
	}
	function poplex() {
	  var state = cx.state;
	  if (state.lexical.prev) {
		if (state.lexical.type == ")")
		  state.indented = state.lexical.indented;
		state.lexical = state.lexical.prev;
	  }
	}
	poplex.lex = true;
	
	function expect(wanted) {
	  function f(type) {
		if (type == wanted) return cont();
		else if (wanted == ";") return pass();
		else return cont(f);
	  }
	  return f;
	}
	
	function statement(type) {
	  if (type == "@") return cont(metadef);
	  if (type == "var") return cont(pushlex("vardef"), vardef1, expect(";"), poplex);
	  if (type == "keyword a") return cont(pushlex("form"), expression, statement, poplex);
	  if (type == "keyword b") return cont(pushlex("form"), statement, poplex);
	  if (type == "{") return cont(pushlex("}"), pushcontext, block, poplex, popcontext);
	  if (type == ";") return cont();
	  if (type == "attribute") return cont(maybeattribute);
	  if (type == "function") return cont(functiondef);
	  if (type == "for") return cont(pushlex("form"), expect("("), pushlex(")"), forspec1, expect(")"),
									 poplex, statement, poplex);
	  if (type == "variable") return cont(pushlex("stat"), maybelabel);
	  if (type == "switch") return cont(pushlex("form"), expression, pushlex("}", "switch"), expect("{"),
										block, poplex, poplex);
	  if (type == "case") return cont(expression, expect(":"));
	  if (type == "default") return cont(expect(":"));
	  if (type == "catch") return cont(pushlex("form"), pushcontext, expect("("), funarg, expect(")"),
									   statement, poplex, popcontext);
	  if (type == "import") return cont(importdef, expect(";"));
	  if (type == "typedef") return cont(typedef);
	  return pass(pushlex("stat"), expression, expect(";"), poplex);
	}
	function expression(type) {
	  if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);
	  if (type == "type" ) return cont(maybeoperator);
	  if (type == "function") return cont(functiondef);
	  if (type == "keyword c") return cont(maybeexpression);
	  if (type == "(") return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
	  if (type == "operator") return cont(expression);
	  if (type == "[") return cont(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
	  if (type == "{") return cont(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
	  return cont();
	}
	function maybeexpression(type) {
	  if (type.match(/[;\}\)\],]/)) return pass();
	  return pass(expression);
	}
	
	function maybeoperator(type, value) {
	  if (type == "operator" && /\+\+|--/.test(value)) return cont(maybeoperator);
	  if (type == "operator" || type == ":") return cont(expression);
	  if (type == ";") return;
	  if (type == "(") return cont(pushlex(")"), commasep(expression, ")"), poplex, maybeoperator);
	  if (type == ".") return cont(property, maybeoperator);
	  if (type == "[") return cont(pushlex("]"), expression, expect("]"), poplex, maybeoperator);
	}
	
	function maybeattribute(type) {
	  if (type == "attribute") return cont(maybeattribute);
	  if (type == "function") return cont(functiondef);
	  if (type == "var") return cont(vardef1);
	}
	
	function metadef(type) {
	  if(type == ":") return cont(metadef);
	  if(type == "variable") return cont(metadef);
	  if(type == "(") return cont(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
	}
	function metaargs(type) {
	  if(type == "variable") return cont();
	}
	
	function importdef (type, value) {
	  if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }
	  else if(type == "variable" || type == "property" || type == "." || value == "*") return cont(importdef);
	}
	
	function typedef (type, value)
	{
	  if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }
	  else if (type == "type" && /[A-Z]/.test(value.charAt(0))) { return cont(); }
	}
	
	function maybelabel(type) {
	  if (type == ":") return cont(poplex, statement);
	  return pass(maybeoperator, expect(";"), poplex);
	}
	function property(type) {
	  if (type == "variable") {cx.marked = "property"; return cont();}
	}
	function objprop(type) {
	  if (type == "variable") cx.marked = "property";
	  if (atomicTypes.hasOwnProperty(type)) return cont(expect(":"), expression);
	}
	function commasep(what, end) {
	  function proceed(type) {
		if (type == ",") return cont(what, proceed);
		if (type == end) return cont();
		return cont(expect(end));
	  }
	  return function(type) {
		if (type == end) return cont();
		else return pass(what, proceed);
	  };
	}
	function block(type) {
	  if (type == "}") return cont();
	  return pass(statement, block);
	}
	function vardef1(type, value) {
	  if (type == "variable"){register(value); return cont(typeuse, vardef2);}
	  return cont();
	}
	function vardef2(type, value) {
	  if (value == "=") return cont(expression, vardef2);
	  if (type == ",") return cont(vardef1);
	}
	function forspec1(type, value) {
	  if (type == "variable") {
		register(value);
		return cont(forin, expression)
	  } else {
		return pass()
	  }
	}
	function forin(_type, value) {
	  if (value == "in") return cont();
	}
	function functiondef(type, value) {
	  //function names starting with upper-case letters are recognised as types, so cludging them together here.
	  if (type == "variable" || type == "type") {register(value); return cont(functiondef);}
	  if (value == "new") return cont(functiondef);
	  if (type == "(") return cont(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
	}
	function typeuse(type) {
	  if(type == ":") return cont(typestring);
	}
	function typestring(type) {
	  if(type == "type") return cont();
	  if(type == "variable") return cont();
	  if(type == "{") return cont(pushlex("}"), commasep(typeprop, "}"), poplex);
	}
	function typeprop(type) {
	  if(type == "variable") return cont(typeuse);
	}
	function funarg(type, value) {
	  if (type == "variable") {register(value); return cont(typeuse);}
	}
	
	// Interface
	const haxe = {
	  name: "haxe",
	  startState: function(indentUnit) {
		var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
		var state = {
		  tokenize: haxeTokenBase,
		  reAllowed: true,
		  kwAllowed: true,
		  cc: [],
		  lexical: new HaxeLexical(-indentUnit, 0, "block", false),
		  importedtypes: defaulttypes,
		  context: null,
		  indented: 0
		};
		return state;
	  },
	
	  token: function(stream, state) {
		if (stream.sol()) {
		  if (!state.lexical.hasOwnProperty("align"))
			state.lexical.align = false;
		  state.indented = stream.indentation();
		}
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
		if (type == "comment") return style;
		state.reAllowed = !!(type == "operator" || type == "keyword c" || type.match(/^[\[{}\(,;:]$/));
		state.kwAllowed = type != '.';
		return parseHaxe(state, style, type, content, stream);
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != haxeTokenBase) return 0;
		var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
		if (lexical.type == "stat" && firstChar == "}") lexical = lexical.prev;
		var type = lexical.type, closing = firstChar == type;
		if (type == "vardef") return lexical.indented + 4;
		else if (type == "form" && firstChar == "{") return lexical.indented;
		else if (type == "stat" || type == "form") return lexical.indented + cx.unit;
		else if (lexical.info == "switch" && !closing)
		  return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
		else if (lexical.align) return lexical.column + (closing ? 0 : 1);
		else return lexical.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
	  }
	};
	
	const hxml = {
	  name: "hxml",
	  startState: function () {
		return {
		  define: false,
		  inString: false
		};
	  },
	  token: function (stream, state) {
		var ch = stream.peek();
		var sol = stream.sol();
	
		///* comments */
		if (ch == "#") {
		  stream.skipToEnd();
		  return "comment";
		}
		if (sol && ch == "-") {
		  var style = "variable-2";
	
		  stream.eat(/-/);
	
		  if (stream.peek() == "-") {
			stream.eat(/-/);
			style = "keyword a";
		  }
	
		  if (stream.peek() == "D") {
			stream.eat(/[D]/);
			style = "keyword c";
			state.define = true;
		  }
	
		  stream.eatWhile(/[A-Z]/i);
		  return style;
		}
	
		var ch = stream.peek();
	
		if (state.inString == false && ch == "'") {
		  state.inString = true;
		  stream.next();
		}
	
		if (state.inString == true) {
		  if (stream.skipTo("'")) ; else {
			stream.skipToEnd();
		  }
	
		  if (stream.peek() == "'") {
			stream.next();
			state.inString = false;
		  }
	
		  return "string";
		}
	
		stream.next();
		return null;
	  },
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.haxe = haxe;
	exports.hxml = hxml;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/http.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/http.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function failFirstLine(stream, state) {
	  stream.skipToEnd();
	  state.cur = header;
	  return "error";
	}
	
	function start(stream, state) {
	  if (stream.match(/^HTTP\/\d\.\d/)) {
		state.cur = responseStatusCode;
		return "keyword";
	  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
		state.cur = requestPath;
		return "keyword";
	  } else {
		return failFirstLine(stream, state);
	  }
	}
	
	function responseStatusCode(stream, state) {
	  var code = stream.match(/^\d+/);
	  if (!code) return failFirstLine(stream, state);
	
	  state.cur = responseStatusText;
	  var status = Number(code[0]);
	  if (status >= 100 && status < 400) {
		return "atom";
	  } else {
		return "error";
	  }
	}
	
	function responseStatusText(stream, state) {
	  stream.skipToEnd();
	  state.cur = header;
	  return null;
	}
	
	function requestPath(stream, state) {
	  stream.eatWhile(/\S/);
	  state.cur = requestProtocol;
	  return "string.special";
	}
	
	function requestProtocol(stream, state) {
	  if (stream.match(/^HTTP\/\d\.\d$/)) {
		state.cur = header;
		return "keyword";
	  } else {
		return failFirstLine(stream, state);
	  }
	}
	
	function header(stream) {
	  if (stream.sol() && !stream.eat(/[ \t]/)) {
		if (stream.match(/^.*?:/)) {
		  return "atom";
		} else {
		  stream.skipToEnd();
		  return "error";
		}
	  } else {
		stream.skipToEnd();
		return "string";
	  }
	}
	
	function body(stream) {
	  stream.skipToEnd();
	  return null;
	}
	
	const http = {
	  name: "http",
	  token: function(stream, state) {
		var cur = state.cur;
		if (cur != header && cur != body && stream.eatSpace()) return null;
		return cur(stream, state);
	  },
	
	  blankLine: function(state) {
		state.cur = body;
	  },
	
	  startState: function() {
		return {cur: start};
	  }
	};
	
	exports.http = http;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/idl.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/idl.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp('^((' + words.join(')|(') + '))\\b', 'i');
	}
	var builtinArray = [
	  'a_correlate', 'abs', 'acos', 'adapt_hist_equal', 'alog',
	  'alog2', 'alog10', 'amoeba', 'annotate', 'app_user_dir',
	  'app_user_dir_query', 'arg_present', 'array_equal', 'array_indices',
	  'arrow', 'ascii_template', 'asin', 'assoc', 'atan',
	  'axis', 'axis', 'bandpass_filter', 'bandreject_filter', 'barplot',
	  'bar_plot', 'beseli', 'beselj', 'beselk', 'besely',
	  'beta', 'biginteger', 'bilinear', 'bin_date', 'binary_template',
	  'bindgen', 'binomial', 'bit_ffs', 'bit_population', 'blas_axpy',
	  'blk_con', 'boolarr', 'boolean', 'boxplot', 'box_cursor',
	  'breakpoint', 'broyden', 'bubbleplot', 'butterworth', 'bytarr',
	  'byte', 'byteorder', 'bytscl', 'c_correlate', 'calendar',
	  'caldat', 'call_external', 'call_function', 'call_method',
	  'call_procedure', 'canny', 'catch', 'cd', 'cdf', 'ceil',
	  'chebyshev', 'check_math', 'chisqr_cvf', 'chisqr_pdf', 'choldc',
	  'cholsol', 'cindgen', 'cir_3pnt', 'clipboard', 'close',
	  'clust_wts', 'cluster', 'cluster_tree', 'cmyk_convert', 'code_coverage',
	  'color_convert', 'color_exchange', 'color_quan', 'color_range_map',
	  'colorbar', 'colorize_sample', 'colormap_applicable',
	  'colormap_gradient', 'colormap_rotation', 'colortable',
	  'comfit', 'command_line_args', 'common', 'compile_opt', 'complex',
	  'complexarr', 'complexround', 'compute_mesh_normals', 'cond', 'congrid',
	  'conj', 'constrained_min', 'contour', 'contour', 'convert_coord',
	  'convol', 'convol_fft', 'coord2to3', 'copy_lun', 'correlate',
	  'cos', 'cosh', 'cpu', 'cramer', 'createboxplotdata',
	  'create_cursor', 'create_struct', 'create_view', 'crossp', 'crvlength',
	  'ct_luminance', 'cti_test', 'cursor', 'curvefit', 'cv_coord',
	  'cvttobm', 'cw_animate', 'cw_animate_getp', 'cw_animate_load',
	  'cw_animate_run', 'cw_arcball', 'cw_bgroup', 'cw_clr_index',
	  'cw_colorsel', 'cw_defroi', 'cw_field', 'cw_filesel', 'cw_form',
	  'cw_fslider', 'cw_light_editor', 'cw_light_editor_get',
	  'cw_light_editor_set', 'cw_orient', 'cw_palette_editor',
	  'cw_palette_editor_get', 'cw_palette_editor_set', 'cw_pdmenu',
	  'cw_rgbslider', 'cw_tmpl', 'cw_zoom', 'db_exists',
	  'dblarr', 'dcindgen', 'dcomplex', 'dcomplexarr', 'define_key',
	  'define_msgblk', 'define_msgblk_from_file', 'defroi', 'defsysv',
	  'delvar', 'dendro_plot', 'dendrogram', 'deriv', 'derivsig',
	  'determ', 'device', 'dfpmin', 'diag_matrix', 'dialog_dbconnect',
	  'dialog_message', 'dialog_pickfile', 'dialog_printersetup',
	  'dialog_printjob', 'dialog_read_image',
	  'dialog_write_image', 'dictionary', 'digital_filter', 'dilate', 'dindgen',
	  'dissolve', 'dist', 'distance_measure', 'dlm_load', 'dlm_register',
	  'doc_library', 'double', 'draw_roi', 'edge_dog', 'efont',
	  'eigenql', 'eigenvec', 'ellipse', 'elmhes', 'emboss',
	  'empty', 'enable_sysrtn', 'eof', 'eos', 'erase',
	  'erf', 'erfc', 'erfcx', 'erode', 'errorplot',
	  'errplot', 'estimator_filter', 'execute', 'exit', 'exp',
	  'expand', 'expand_path', 'expint', 'extract', 'extract_slice',
	  'f_cvf', 'f_pdf', 'factorial', 'fft', 'file_basename',
	  'file_chmod', 'file_copy', 'file_delete', 'file_dirname',
	  'file_expand_path', 'file_gunzip', 'file_gzip', 'file_info',
	  'file_lines', 'file_link', 'file_mkdir', 'file_move',
	  'file_poll_input', 'file_readlink', 'file_same',
	  'file_search', 'file_tar', 'file_test', 'file_untar', 'file_unzip',
	  'file_which', 'file_zip', 'filepath', 'findgen', 'finite',
	  'fix', 'flick', 'float', 'floor', 'flow3',
	  'fltarr', 'flush', 'format_axis_values', 'forward_function', 'free_lun',
	  'fstat', 'fulstr', 'funct', 'function', 'fv_test',
	  'fx_root', 'fz_roots', 'gamma', 'gamma_ct', 'gauss_cvf',
	  'gauss_pdf', 'gauss_smooth', 'gauss2dfit', 'gaussfit',
	  'gaussian_function', 'gaussint', 'get_drive_list', 'get_dxf_objects',
	  'get_kbrd', 'get_login_info',
	  'get_lun', 'get_screen_size', 'getenv', 'getwindows', 'greg2jul',
	  'grib', 'grid_input', 'grid_tps', 'grid3', 'griddata',
	  'gs_iter', 'h_eq_ct', 'h_eq_int', 'hanning', 'hash',
	  'hdf', 'hdf5', 'heap_free', 'heap_gc', 'heap_nosave',
	  'heap_refcount', 'heap_save', 'help', 'hilbert', 'hist_2d',
	  'hist_equal', 'histogram', 'hls', 'hough', 'hqr',
	  'hsv', 'i18n_multibytetoutf8',
	  'i18n_multibytetowidechar', 'i18n_utf8tomultibyte',
	  'i18n_widechartomultibyte',
	  'ibeta', 'icontour', 'iconvertcoord', 'idelete', 'identity',
	  'idl_base64', 'idl_container', 'idl_validname',
	  'idlexbr_assistant', 'idlitsys_createtool',
	  'idlunit', 'iellipse', 'igamma', 'igetcurrent', 'igetdata',
	  'igetid', 'igetproperty', 'iimage', 'image', 'image_cont',
	  'image_statistics', 'image_threshold', 'imaginary', 'imap', 'indgen',
	  'int_2d', 'int_3d', 'int_tabulated', 'intarr', 'interpol',
	  'interpolate', 'interval_volume', 'invert', 'ioctl', 'iopen',
	  'ir_filter', 'iplot', 'ipolygon', 'ipolyline', 'iputdata',
	  'iregister', 'ireset', 'iresolve', 'irotate', 'isa',
	  'isave', 'iscale', 'isetcurrent', 'isetproperty', 'ishft',
	  'isocontour', 'isosurface', 'isurface', 'itext', 'itranslate',
	  'ivector', 'ivolume', 'izoom', 'journal', 'json_parse',
	  'json_serialize', 'jul2greg', 'julday', 'keyword_set', 'krig2d',
	  'kurtosis', 'kw_test', 'l64indgen', 'la_choldc', 'la_cholmprove',
	  'la_cholsol', 'la_determ', 'la_eigenproblem', 'la_eigenql', 'la_eigenvec',
	  'la_elmhes', 'la_gm_linear_model', 'la_hqr', 'la_invert',
	  'la_least_square_equality', 'la_least_squares', 'la_linear_equation',
	  'la_ludc', 'la_lumprove', 'la_lusol',
	  'la_svd', 'la_tridc', 'la_trimprove', 'la_triql', 'la_trired',
	  'la_trisol', 'label_date', 'label_region', 'ladfit', 'laguerre',
	  'lambda', 'lambdap', 'lambertw', 'laplacian', 'least_squares_filter',
	  'leefilt', 'legend', 'legendre', 'linbcg', 'lindgen',
	  'linfit', 'linkimage', 'list', 'll_arc_distance', 'lmfit',
	  'lmgr', 'lngamma', 'lnp_test', 'loadct', 'locale_get',
	  'logical_and', 'logical_or', 'logical_true', 'lon64arr', 'lonarr',
	  'long', 'long64', 'lsode', 'lu_complex', 'ludc',
	  'lumprove', 'lusol', 'm_correlate', 'machar', 'make_array',
	  'make_dll', 'make_rt', 'map', 'mapcontinents', 'mapgrid',
	  'map_2points', 'map_continents', 'map_grid', 'map_image', 'map_patch',
	  'map_proj_forward', 'map_proj_image', 'map_proj_info',
	  'map_proj_init', 'map_proj_inverse',
	  'map_set', 'matrix_multiply', 'matrix_power', 'max', 'md_test',
	  'mean', 'meanabsdev', 'mean_filter', 'median', 'memory',
	  'mesh_clip', 'mesh_decimate', 'mesh_issolid',
	  'mesh_merge', 'mesh_numtriangles',
	  'mesh_obj', 'mesh_smooth', 'mesh_surfacearea',
	  'mesh_validate', 'mesh_volume',
	  'message', 'min', 'min_curve_surf', 'mk_html_help', 'modifyct',
	  'moment', 'morph_close', 'morph_distance',
	  'morph_gradient', 'morph_hitormiss',
	  'morph_open', 'morph_thin', 'morph_tophat', 'multi', 'n_elements',
	  'n_params', 'n_tags', 'ncdf', 'newton', 'noise_hurl',
	  'noise_pick', 'noise_scatter', 'noise_slur', 'norm', 'obj_class',
	  'obj_destroy', 'obj_hasmethod', 'obj_isa', 'obj_new', 'obj_valid',
	  'objarr', 'on_error', 'on_ioerror', 'online_help', 'openr',
	  'openu', 'openw', 'oplot', 'oploterr', 'orderedhash',
	  'p_correlate', 'parse_url', 'particle_trace', 'path_cache', 'path_sep',
	  'pcomp', 'plot', 'plot3d', 'plot', 'plot_3dbox',
	  'plot_field', 'ploterr', 'plots', 'polar_contour', 'polar_surface',
	  'polyfill', 'polyshade', 'pnt_line', 'point_lun', 'polarplot',
	  'poly', 'poly_2d', 'poly_area', 'poly_fit', 'polyfillv',
	  'polygon', 'polyline', 'polywarp', 'popd', 'powell',
	  'pref_commit', 'pref_get', 'pref_set', 'prewitt', 'primes',
	  'print', 'printf', 'printd', 'pro', 'product',
	  'profile', 'profiler', 'profiles', 'project_vol', 'ps_show_fonts',
	  'psafm', 'pseudo', 'ptr_free', 'ptr_new', 'ptr_valid',
	  'ptrarr', 'pushd', 'qgrid3', 'qhull', 'qromb',
	  'qromo', 'qsimp', 'query_*', 'query_ascii', 'query_bmp',
	  'query_csv', 'query_dicom', 'query_gif', 'query_image', 'query_jpeg',
	  'query_jpeg2000', 'query_mrsid', 'query_pict', 'query_png', 'query_ppm',
	  'query_srf', 'query_tiff', 'query_video', 'query_wav', 'r_correlate',
	  'r_test', 'radon', 'randomn', 'randomu', 'ranks',
	  'rdpix', 'read', 'readf', 'read_ascii', 'read_binary',
	  'read_bmp', 'read_csv', 'read_dicom', 'read_gif', 'read_image',
	  'read_interfile', 'read_jpeg', 'read_jpeg2000', 'read_mrsid', 'read_pict',
	  'read_png', 'read_ppm', 'read_spr', 'read_srf', 'read_sylk',
	  'read_tiff', 'read_video', 'read_wav', 'read_wave', 'read_x11_bitmap',
	  'read_xwd', 'reads', 'readu', 'real_part', 'rebin',
	  'recall_commands', 'recon3', 'reduce_colors', 'reform', 'region_grow',
	  'register_cursor', 'regress', 'replicate',
	  'replicate_inplace', 'resolve_all',
	  'resolve_routine', 'restore', 'retall', 'return', 'reverse',
	  'rk4', 'roberts', 'rot', 'rotate', 'round',
	  'routine_filepath', 'routine_info', 'rs_test', 's_test', 'save',
	  'savgol', 'scale3', 'scale3d', 'scatterplot', 'scatterplot3d',
	  'scope_level', 'scope_traceback', 'scope_varfetch',
	  'scope_varname', 'search2d',
	  'search3d', 'sem_create', 'sem_delete', 'sem_lock', 'sem_release',
	  'set_plot', 'set_shading', 'setenv', 'sfit', 'shade_surf',
	  'shade_surf_irr', 'shade_volume', 'shift', 'shift_diff', 'shmdebug',
	  'shmmap', 'shmunmap', 'shmvar', 'show3', 'showfont',
	  'signum', 'simplex', 'sin', 'sindgen', 'sinh',
	  'size', 'skewness', 'skip_lun', 'slicer3', 'slide_image',
	  'smooth', 'sobel', 'socket', 'sort', 'spawn',
	  'sph_4pnt', 'sph_scat', 'spher_harm', 'spl_init', 'spl_interp',
	  'spline', 'spline_p', 'sprsab', 'sprsax', 'sprsin',
	  'sprstp', 'sqrt', 'standardize', 'stddev', 'stop',
	  'strarr', 'strcmp', 'strcompress', 'streamline', 'streamline',
	  'stregex', 'stretch', 'string', 'strjoin', 'strlen',
	  'strlowcase', 'strmatch', 'strmessage', 'strmid', 'strpos',
	  'strput', 'strsplit', 'strtrim', 'struct_assign', 'struct_hide',
	  'strupcase', 'surface', 'surface', 'surfr', 'svdc',
	  'svdfit', 'svsol', 'swap_endian', 'swap_endian_inplace', 'symbol',
	  'systime', 't_cvf', 't_pdf', 't3d', 'tag_names',
	  'tan', 'tanh', 'tek_color', 'temporary', 'terminal_size',
	  'tetra_clip', 'tetra_surface', 'tetra_volume', 'text', 'thin',
	  'thread', 'threed', 'tic', 'time_test2', 'timegen',
	  'timer', 'timestamp', 'timestamptovalues', 'tm_test', 'toc',
	  'total', 'trace', 'transpose', 'tri_surf', 'triangulate',
	  'trigrid', 'triql', 'trired', 'trisol', 'truncate_lun',
	  'ts_coef', 'ts_diff', 'ts_fcast', 'ts_smooth', 'tv',
	  'tvcrs', 'tvlct', 'tvrd', 'tvscl', 'typename',
	  'uindgen', 'uint', 'uintarr', 'ul64indgen', 'ulindgen',
	  'ulon64arr', 'ulonarr', 'ulong', 'ulong64', 'uniq',
	  'unsharp_mask', 'usersym', 'value_locate', 'variance', 'vector',
	  'vector_field', 'vel', 'velovect', 'vert_t3d', 'voigt',
	  'volume', 'voronoi', 'voxel_proj', 'wait', 'warp_tri',
	  'watershed', 'wdelete', 'wf_draw', 'where', 'widget_base',
	  'widget_button', 'widget_combobox', 'widget_control',
	  'widget_displaycontextmenu', 'widget_draw',
	  'widget_droplist', 'widget_event', 'widget_info',
	  'widget_label', 'widget_list',
	  'widget_propertysheet', 'widget_slider', 'widget_tab',
	  'widget_table', 'widget_text',
	  'widget_tree', 'widget_tree_move', 'widget_window',
	  'wiener_filter', 'window',
	  'window', 'write_bmp', 'write_csv', 'write_gif', 'write_image',
	  'write_jpeg', 'write_jpeg2000', 'write_nrif', 'write_pict', 'write_png',
	  'write_ppm', 'write_spr', 'write_srf', 'write_sylk', 'write_tiff',
	  'write_video', 'write_wav', 'write_wave', 'writeu', 'wset',
	  'wshow', 'wtn', 'wv_applet', 'wv_cwt', 'wv_cw_wavelet',
	  'wv_denoise', 'wv_dwt', 'wv_fn_coiflet',
	  'wv_fn_daubechies', 'wv_fn_gaussian',
	  'wv_fn_haar', 'wv_fn_morlet', 'wv_fn_paul',
	  'wv_fn_symlet', 'wv_import_data',
	  'wv_import_wavelet', 'wv_plot3d_wps', 'wv_plot_multires',
	  'wv_pwt', 'wv_tool_denoise',
	  'xbm_edit', 'xdisplayfile', 'xdxf', 'xfont', 'xinteranimate',
	  'xloadct', 'xmanager', 'xmng_tmpl', 'xmtool', 'xobjview',
	  'xobjview_rotate', 'xobjview_write_image',
	  'xpalette', 'xpcolor', 'xplot3d',
	  'xregistered', 'xroi', 'xsq_test', 'xsurface', 'xvaredit',
	  'xvolume', 'xvolume_rotate', 'xvolume_write_image',
	  'xyouts', 'zlib_compress', 'zlib_uncompress', 'zoom', 'zoom_24'
	];
	var builtins = wordRegexp(builtinArray);
	
	var keywordArray = [
	  'begin', 'end', 'endcase', 'endfor',
	  'endwhile', 'endif', 'endrep', 'endforeach',
	  'break', 'case', 'continue', 'for',
	  'foreach', 'goto', 'if', 'then', 'else',
	  'repeat', 'until', 'switch', 'while',
	  'do', 'pro', 'function'
	];
	var keywords = wordRegexp(keywordArray);
	
	var identifiers = new RegExp('^[_a-z\xa1-\uffff][_a-z0-9\xa1-\uffff]*', 'i');
	
	var singleOperators = /[+\-*&=<>\/@#~$]/;
	var boolOperators = new RegExp('(and|or|eq|lt|le|gt|ge|ne|not)', 'i');
	
	function tokenBase(stream) {
	  // whitespaces
	  if (stream.eatSpace()) return null;
	
	  // Handle one line Comments
	  if (stream.match(';')) {
		stream.skipToEnd();
		return 'comment';
	  }
	
	  // Handle Number Literals
	  if (stream.match(/^[0-9\.+-]/, false)) {
		if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
		  return 'number';
		if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
		  return 'number';
		if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
		  return 'number';
	  }
	
	  // Handle Strings
	  if (stream.match(/^"([^"]|(""))*"/)) { return 'string'; }
	  if (stream.match(/^'([^']|(''))*'/)) { return 'string'; }
	
	  // Handle words
	  if (stream.match(keywords)) { return 'keyword'; }
	  if (stream.match(builtins)) { return 'builtin'; }
	  if (stream.match(identifiers)) { return 'variable'; }
	
	  if (stream.match(singleOperators) || stream.match(boolOperators)) {
		return 'operator'; }
	
	  // Handle non-detected items
	  stream.next();
	  return null;
	}
	const idl = {
	  name: "idl",
	  token: function(stream) {
		return tokenBase(stream);
	  },
	  languageData: {
		autocomplete: builtinArray.concat(keywordArray)
	  }
	};
	
	exports.idl = idl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/javascript.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/javascript.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkJavaScript(parserConfig) {
	  var statementIndent = parserConfig.statementIndent;
	  var jsonldMode = parserConfig.jsonld;
	  var jsonMode = parserConfig.json || jsonldMode;
	  var isTS = parserConfig.typescript;
	  var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;
	
	  // Tokenizer
	
	  var keywords = function(){
		function kw(type) {return {type: type, style: "keyword"};}
		var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");
		var operator = kw("operator"), atom = {type: "atom", style: "atom"};
	
		return {
		  "if": kw("if"), "while": A, "with": A, "else": B, "do": B, "try": B, "finally": B,
		  "return": D, "break": D, "continue": D, "new": kw("new"), "delete": C, "void": C, "throw": C,
		  "debugger": kw("debugger"), "var": kw("var"), "const": kw("var"), "let": kw("var"),
		  "function": kw("function"), "catch": kw("catch"),
		  "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
		  "in": operator, "typeof": operator, "instanceof": operator,
		  "true": atom, "false": atom, "null": atom, "undefined": atom, "NaN": atom, "Infinity": atom,
		  "this": kw("this"), "class": kw("class"), "super": kw("atom"),
		  "yield": C, "export": kw("export"), "import": kw("import"), "extends": C,
		  "await": C
		};
	  }();
	
	  var isOperatorChar = /[+\-*&%=<>!?|~^@]/;
	  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;
	
	  function readRegexp(stream) {
		var escaped = false, next, inSet = false;
		while ((next = stream.next()) != null) {
		  if (!escaped) {
			if (next == "/" && !inSet) return;
			if (next == "[") inSet = true;
			else if (inSet && next == "]") inSet = false;
		  }
		  escaped = !escaped && next == "\\";
		}
	  }
	
	  // Used as scratch variables to communicate multiple values without
	  // consing up tons of objects.
	  var type, content;
	  function ret(tp, style, cont) {
		type = tp; content = cont;
		return style;
	  }
	  function tokenBase(stream, state) {
		var ch = stream.next();
		if (ch == '"' || ch == "'") {
		  state.tokenize = tokenString(ch);
		  return state.tokenize(stream, state);
		} else if (ch == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
		  return ret("number", "number");
		} else if (ch == "." && stream.match("..")) {
		  return ret("spread", "meta");
		} else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		  return ret(ch);
		} else if (ch == "=" && stream.eat(">")) {
		  return ret("=>", "operator");
		} else if (ch == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
		  return ret("number", "number");
		} else if (/\d/.test(ch)) {
		  stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
		  return ret("number", "number");
		} else if (ch == "/") {
		  if (stream.eat("*")) {
			state.tokenize = tokenComment;
			return tokenComment(stream, state);
		  } else if (stream.eat("/")) {
			stream.skipToEnd();
			return ret("comment", "comment");
		  } else if (expressionAllowed(stream, state, 1)) {
			readRegexp(stream);
			stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
			return ret("regexp", "string.special");
		  } else {
			stream.eat("=");
			return ret("operator", "operator", stream.current());
		  }
		} else if (ch == "`") {
		  state.tokenize = tokenQuasi;
		  return tokenQuasi(stream, state);
		} else if (ch == "#" && stream.peek() == "!") {
		  stream.skipToEnd();
		  return ret("meta", "meta");
		} else if (ch == "#" && stream.eatWhile(wordRE)) {
		  return ret("variable", "property")
		} else if (ch == "<" && stream.match("!--") ||
				   (ch == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start)))) {
		  stream.skipToEnd();
		  return ret("comment", "comment")
		} else if (isOperatorChar.test(ch)) {
		  if (ch != ">" || !state.lexical || state.lexical.type != ">") {
			if (stream.eat("=")) {
			  if (ch == "!" || ch == "=") stream.eat("=");
			} else if (/[<>*+\-|&?]/.test(ch)) {
			  stream.eat(ch);
			  if (ch == ">") stream.eat(ch);
			}
		  }
		  if (ch == "?" && stream.eat(".")) return ret(".")
		  return ret("operator", "operator", stream.current());
		} else if (wordRE.test(ch)) {
		  stream.eatWhile(wordRE);
		  var word = stream.current();
		  if (state.lastType != ".") {
			if (keywords.propertyIsEnumerable(word)) {
			  var kw = keywords[word];
			  return ret(kw.type, kw.style, word)
			}
			if (word == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
			  return ret("async", "keyword", word)
		  }
		  return ret("variable", "variable", word)
		}
	  }
	
	  function tokenString(quote) {
		return function(stream, state) {
		  var escaped = false, next;
		  if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)){
			state.tokenize = tokenBase;
			return ret("jsonld-keyword", "meta");
		  }
		  while ((next = stream.next()) != null) {
			if (next == quote && !escaped) break;
			escaped = !escaped && next == "\\";
		  }
		  if (!escaped) state.tokenize = tokenBase;
		  return ret("string", "string");
		};
	  }
	
	  function tokenComment(stream, state) {
		var maybeEnd = false, ch;
		while (ch = stream.next()) {
		  if (ch == "/" && maybeEnd) {
			state.tokenize = tokenBase;
			break;
		  }
		  maybeEnd = (ch == "*");
		}
		return ret("comment", "comment");
	  }
	
	  function tokenQuasi(stream, state) {
		var escaped = false, next;
		while ((next = stream.next()) != null) {
		  if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {
			state.tokenize = tokenBase;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		return ret("quasi", "string.special", stream.current());
	  }
	
	  var brackets = "([{}])";
	  // This is a crude lookahead trick to try and notice that we're
	  // parsing the argument patterns for a fat-arrow function before we
	  // actually hit the arrow token. It only works if the arrow is on
	  // the same line as the arguments and there's no strange noise
	  // (comments) in between. Fallback is to only notice when we hit the
	  // arrow, and not declare the arguments as locals for the arrow
	  // body.
	  function findFatArrow(stream, state) {
		if (state.fatArrowAt) state.fatArrowAt = null;
		var arrow = stream.string.indexOf("=>", stream.start);
		if (arrow < 0) return;
	
		if (isTS) { // Try to skip TypeScript return type declarations after the arguments
		  var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
		  if (m) arrow = m.index;
		}
	
		var depth = 0, sawSomething = false;
		for (var pos = arrow - 1; pos >= 0; --pos) {
		  var ch = stream.string.charAt(pos);
		  var bracket = brackets.indexOf(ch);
		  if (bracket >= 0 && bracket < 3) {
			if (!depth) { ++pos; break; }
			if (--depth == 0) { if (ch == "(") sawSomething = true; break; }
		  } else if (bracket >= 3 && bracket < 6) {
			++depth;
		  } else if (wordRE.test(ch)) {
			sawSomething = true;
		  } else if (/["'\/`]/.test(ch)) {
			for (;; --pos) {
			  if (pos == 0) return
			  var next = stream.string.charAt(pos - 1);
			  if (next == ch && stream.string.charAt(pos - 2) != "\\") { pos--; break }
			}
		  } else if (sawSomething && !depth) {
			++pos;
			break;
		  }
		}
		if (sawSomething && !depth) state.fatArrowAt = pos;
	  }
	
	  // Parser
	
	  var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true,
						 "regexp": true, "this": true, "import": true, "jsonld-keyword": true};
	
	  function JSLexical(indented, column, type, align, prev, info) {
		this.indented = indented;
		this.column = column;
		this.type = type;
		this.prev = prev;
		this.info = info;
		if (align != null) this.align = align;
	  }
	
	  function inScope(state, varname) {
		for (var v = state.localVars; v; v = v.next)
		  if (v.name == varname) return true;
		for (var cx = state.context; cx; cx = cx.prev) {
		  for (var v = cx.vars; v; v = v.next)
			if (v.name == varname) return true;
		}
	  }
	
	  function parseJS(state, style, type, content, stream) {
		var cc = state.cc;
		// Communicate our context to the combinators.
		// (Less wasteful than consing up a hundred closures on every call.)
		cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;
	
		if (!state.lexical.hasOwnProperty("align"))
		  state.lexical.align = true;
	
		while(true) {
		  var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;
		  if (combinator(type, content)) {
			while(cc.length && cc[cc.length - 1].lex)
			  cc.pop()();
			if (cx.marked) return cx.marked;
			if (type == "variable" && inScope(state, content)) return "variableName.local";
			return style;
		  }
		}
	  }
	
	  // Combinator utils
	
	  var cx = {state: null, column: null, marked: null, cc: null};
	  function pass() {
		for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
	  }
	  function cont() {
		pass.apply(null, arguments);
		return true;
	  }
	  function inList(name, list) {
		for (var v = list; v; v = v.next) if (v.name == name) return true
		return false;
	  }
	  function register(varname) {
		var state = cx.state;
		cx.marked = "def";
		if (state.context) {
		  if (state.lexical.info == "var" && state.context && state.context.block) {
			// FIXME function decls are also not block scoped
			var newContext = registerVarScoped(varname, state.context);
			if (newContext != null) {
			  state.context = newContext;
			  return
			}
		  } else if (!inList(varname, state.localVars)) {
			state.localVars = new Var(varname, state.localVars);
			return
		  }
		}
		// Fall through means this is global
		if (parserConfig.globalVars && !inList(varname, state.globalVars))
		  state.globalVars = new Var(varname, state.globalVars);
	  }
	  function registerVarScoped(varname, context) {
		if (!context) {
		  return null
		} else if (context.block) {
		  var inner = registerVarScoped(varname, context.prev);
		  if (!inner) return null
		  if (inner == context.prev) return context
		  return new Context(inner, context.vars, true)
		} else if (inList(varname, context.vars)) {
		  return context
		} else {
		  return new Context(context.prev, new Var(varname, context.vars), false)
		}
	  }
	
	  function isModifier(name) {
		return name == "public" || name == "private" || name == "protected" || name == "abstract" || name == "readonly"
	  }
	
	  // Combinators
	
	  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block; }
	  function Var(name, next) { this.name = name; this.next = next; }
	
	  var defaultVars = new Var("this", new Var("arguments", null));
	  function pushcontext() {
		cx.state.context = new Context(cx.state.context, cx.state.localVars, false);
		cx.state.localVars = defaultVars;
	  }
	  function pushblockcontext() {
		cx.state.context = new Context(cx.state.context, cx.state.localVars, true);
		cx.state.localVars = null;
	  }
	  pushcontext.lex = pushblockcontext.lex = true;
	  function popcontext() {
		cx.state.localVars = cx.state.context.vars;
		cx.state.context = cx.state.context.prev;
	  }
	  popcontext.lex = true;
	  function pushlex(type, info) {
		var result = function() {
		  var state = cx.state, indent = state.indented;
		  if (state.lexical.type == "stat") indent = state.lexical.indented;
		  else for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
			indent = outer.indented;
		  state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);
		};
		result.lex = true;
		return result;
	  }
	  function poplex() {
		var state = cx.state;
		if (state.lexical.prev) {
		  if (state.lexical.type == ")")
			state.indented = state.lexical.indented;
		  state.lexical = state.lexical.prev;
		}
	  }
	  poplex.lex = true;
	
	  function expect(wanted) {
		function exp(type) {
		  if (type == wanted) return cont();
		  else if (wanted == ";" || type == "}" || type == ")" || type == "]") return pass();
		  else return cont(exp);
		}    return exp;
	  }
	
	  function statement(type, value) {
		if (type == "var") return cont(pushlex("vardef", value), vardef, expect(";"), poplex);
		if (type == "keyword a") return cont(pushlex("form"), parenExpr, statement, poplex);
		if (type == "keyword b") return cont(pushlex("form"), statement, poplex);
		if (type == "keyword d") return cx.stream.match(/^\s*$/, false) ? cont() : cont(pushlex("stat"), maybeexpression, expect(";"), poplex);
		if (type == "debugger") return cont(expect(";"));
		if (type == "{") return cont(pushlex("}"), pushblockcontext, block, poplex, popcontext);
		if (type == ";") return cont();
		if (type == "if") {
		  if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)
			cx.state.cc.pop()();
		  return cont(pushlex("form"), parenExpr, statement, poplex, maybeelse);
		}
		if (type == "function") return cont(functiondef);
		if (type == "for") return cont(pushlex("form"), pushblockcontext, forspec, statement, popcontext, poplex);
		if (type == "class" || (isTS && value == "interface")) {
		  cx.marked = "keyword";
		  return cont(pushlex("form", type == "class" ? type : value), className, poplex)
		}
		if (type == "variable") {
		  if (isTS && value == "declare") {
			cx.marked = "keyword";
			return cont(statement)
		  } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx.stream.match(/^\s*\w/, false)) {
			cx.marked = "keyword";
			if (value == "enum") return cont(enumdef);
			else if (value == "type") return cont(typename, expect("operator"), typeexpr, expect(";"));
			else return cont(pushlex("form"), pattern, expect("{"), pushlex("}"), block, poplex, poplex)
		  } else if (isTS && value == "namespace") {
			cx.marked = "keyword";
			return cont(pushlex("form"), expression, statement, poplex)
		  } else if (isTS && value == "abstract") {
			cx.marked = "keyword";
			return cont(statement)
		  } else {
			return cont(pushlex("stat"), maybelabel);
		  }
		}
		if (type == "switch") return cont(pushlex("form"), parenExpr, expect("{"), pushlex("}", "switch"), pushblockcontext,
										  block, poplex, poplex, popcontext);
		if (type == "case") return cont(expression, expect(":"));
		if (type == "default") return cont(expect(":"));
		if (type == "catch") return cont(pushlex("form"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);
		if (type == "export") return cont(pushlex("stat"), afterExport, poplex);
		if (type == "import") return cont(pushlex("stat"), afterImport, poplex);
		if (type == "async") return cont(statement)
		if (value == "@") return cont(expression, statement)
		return pass(pushlex("stat"), expression, expect(";"), poplex);
	  }
	  function maybeCatchBinding(type) {
		if (type == "(") return cont(funarg, expect(")"))
	  }
	  function expression(type, value) {
		return expressionInner(type, value, false);
	  }
	  function expressionNoComma(type, value) {
		return expressionInner(type, value, true);
	  }
	  function parenExpr(type) {
		if (type != "(") return pass()
		return cont(pushlex(")"), maybeexpression, expect(")"), poplex)
	  }
	  function expressionInner(type, value, noComma) {
		if (cx.state.fatArrowAt == cx.stream.start) {
		  var body = noComma ? arrowBodyNoComma : arrowBody;
		  if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, expect("=>"), body, popcontext);
		  else if (type == "variable") return pass(pushcontext, pattern, expect("=>"), body, popcontext);
		}
	
		var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
		if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);
		if (type == "function") return cont(functiondef, maybeop);
		if (type == "class" || (isTS && value == "interface")) { cx.marked = "keyword"; return cont(pushlex("form"), classExpression, poplex); }
		if (type == "keyword c" || type == "async") return cont(noComma ? expressionNoComma : expression);
		if (type == "(") return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeop);
		if (type == "operator" || type == "spread") return cont(noComma ? expressionNoComma : expression);
		if (type == "[") return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
		if (type == "{") return contCommasep(objprop, "}", null, maybeop);
		if (type == "quasi") return pass(quasi, maybeop);
		if (type == "new") return cont(maybeTarget(noComma));
		return cont();
	  }
	  function maybeexpression(type) {
		if (type.match(/[;\}\)\],]/)) return pass();
		return pass(expression);
	  }
	
	  function maybeoperatorComma(type, value) {
		if (type == ",") return cont(maybeexpression);
		return maybeoperatorNoComma(type, value, false);
	  }
	  function maybeoperatorNoComma(type, value, noComma) {
		var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
		var expr = noComma == false ? expression : expressionNoComma;
		if (type == "=>") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);
		if (type == "operator") {
		  if (/\+\+|--/.test(value) || isTS && value == "!") return cont(me);
		  if (isTS && value == "<" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
			return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, me);
		  if (value == "?") return cont(expression, expect(":"), expr);
		  return cont(expr);
		}
		if (type == "quasi") { return pass(quasi, me); }
		if (type == ";") return;
		if (type == "(") return contCommasep(expressionNoComma, ")", "call", me);
		if (type == ".") return cont(property, me);
		if (type == "[") return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);
		if (isTS && value == "as") { cx.marked = "keyword"; return cont(typeexpr, me) }
		if (type == "regexp") {
		  cx.state.lastType = cx.marked = "operator";
		  cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);
		  return cont(expr)
		}
	  }
	  function quasi(type, value) {
		if (type != "quasi") return pass();
		if (value.slice(value.length - 2) != "${") return cont(quasi);
		return cont(maybeexpression, continueQuasi);
	  }
	  function continueQuasi(type) {
		if (type == "}") {
		  cx.marked = "string.special";
		  cx.state.tokenize = tokenQuasi;
		  return cont(quasi);
		}
	  }
	  function arrowBody(type) {
		findFatArrow(cx.stream, cx.state);
		return pass(type == "{" ? statement : expression);
	  }
	  function arrowBodyNoComma(type) {
		findFatArrow(cx.stream, cx.state);
		return pass(type == "{" ? statement : expressionNoComma);
	  }
	  function maybeTarget(noComma) {
		return function(type) {
		  if (type == ".") return cont(noComma ? targetNoComma : target);
		  else if (type == "variable" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)
		  else return pass(noComma ? expressionNoComma : expression);
		};
	  }
	  function target(_, value) {
		if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorComma); }
	  }
	  function targetNoComma(_, value) {
		if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorNoComma); }
	  }
	  function maybelabel(type) {
		if (type == ":") return cont(poplex, statement);
		return pass(maybeoperatorComma, expect(";"), poplex);
	  }
	  function property(type) {
		if (type == "variable") {cx.marked = "property"; return cont();}
	  }
	  function objprop(type, value) {
		if (type == "async") {
		  cx.marked = "property";
		  return cont(objprop);
		} else if (type == "variable" || cx.style == "keyword") {
		  cx.marked = "property";
		  if (value == "get" || value == "set") return cont(getterSetter);
		  var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params
		  if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\s*:\s*/, false)))
			cx.state.fatArrowAt = cx.stream.pos + m[0].length;
		  return cont(afterprop);
		} else if (type == "number" || type == "string") {
		  cx.marked = jsonldMode ? "property" : (cx.style + " property");
		  return cont(afterprop);
		} else if (type == "jsonld-keyword") {
		  return cont(afterprop);
		} else if (isTS && isModifier(value)) {
		  cx.marked = "keyword";
		  return cont(objprop)
		} else if (type == "[") {
		  return cont(expression, maybetype, expect("]"), afterprop);
		} else if (type == "spread") {
		  return cont(expressionNoComma, afterprop);
		} else if (value == "*") {
		  cx.marked = "keyword";
		  return cont(objprop);
		} else if (type == ":") {
		  return pass(afterprop)
		}
	  }
	  function getterSetter(type) {
		if (type != "variable") return pass(afterprop);
		cx.marked = "property";
		return cont(functiondef);
	  }
	  function afterprop(type) {
		if (type == ":") return cont(expressionNoComma);
		if (type == "(") return pass(functiondef);
	  }
	  function commasep(what, end, sep) {
		function proceed(type, value) {
		  if (sep ? sep.indexOf(type) > -1 : type == ",") {
			var lex = cx.state.lexical;
			if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
			return cont(function(type, value) {
			  if (type == end || value == end) return pass()
			  return pass(what)
			}, proceed);
		  }
		  if (type == end || value == end) return cont();
		  if (sep && sep.indexOf(";") > -1) return pass(what)
		  return cont(expect(end));
		}
		return function(type, value) {
		  if (type == end || value == end) return cont();
		  return pass(what, proceed);
		};
	  }
	  function contCommasep(what, end, info) {
		for (var i = 3; i < arguments.length; i++)
		  cx.cc.push(arguments[i]);
		return cont(pushlex(end, info), commasep(what, end), poplex);
	  }
	  function block(type) {
		if (type == "}") return cont();
		return pass(statement, block);
	  }
	  function maybetype(type, value) {
		if (isTS) {
		  if (type == ":") return cont(typeexpr);
		  if (value == "?") return cont(maybetype);
		}
	  }
	  function maybetypeOrIn(type, value) {
		if (isTS && (type == ":" || value == "in")) return cont(typeexpr)
	  }
	  function mayberettype(type) {
		if (isTS && type == ":") {
		  if (cx.stream.match(/^\s*\w+\s+is\b/, false)) return cont(expression, isKW, typeexpr)
		  else return cont(typeexpr)
		}
	  }
	  function isKW(_, value) {
		if (value == "is") {
		  cx.marked = "keyword";
		  return cont()
		}
	  }
	  function typeexpr(type, value) {
		if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
		  cx.marked = "keyword";
		  return cont(value == "typeof" ? expressionNoComma : typeexpr)
		}
		if (type == "variable" || value == "void") {
		  cx.marked = "type";
		  return cont(afterType)
		}
		if (value == "|" || value == "&") return cont(typeexpr)
		if (type == "string" || type == "number" || type == "atom") return cont(afterType);
		if (type == "[") return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType)
		if (type == "{") return cont(pushlex("}"), typeprops, poplex, afterType)
		if (type == "(") return cont(commasep(typearg, ")"), maybeReturnType, afterType)
		if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr)
		if (type == "quasi") return pass(quasiType, afterType)
	  }
	  function maybeReturnType(type) {
		if (type == "=>") return cont(typeexpr)
	  }
	  function typeprops(type) {
		if (type.match(/[\}\)\]]/)) return cont()
		if (type == "," || type == ";") return cont(typeprops)
		return pass(typeprop, typeprops)
	  }
	  function typeprop(type, value) {
		if (type == "variable" || cx.style == "keyword") {
		  cx.marked = "property";
		  return cont(typeprop)
		} else if (value == "?" || type == "number" || type == "string") {
		  return cont(typeprop)
		} else if (type == ":") {
		  return cont(typeexpr)
		} else if (type == "[") {
		  return cont(expect("variable"), maybetypeOrIn, expect("]"), typeprop)
		} else if (type == "(") {
		  return pass(functiondecl, typeprop)
		} else if (!type.match(/[;\}\)\],]/)) {
		  return cont()
		}
	  }
	  function quasiType(type, value) {
		if (type != "quasi") return pass();
		if (value.slice(value.length - 2) != "${") return cont(quasiType);
		return cont(typeexpr, continueQuasiType);
	  }
	  function continueQuasiType(type) {
	   if (type == "}") {
		  cx.marked = "string.special";
		  cx.state.tokenize = tokenQuasi;
		  return cont(quasiType);
		}
	  }
	  function typearg(type, value) {
		if (type == "variable" && cx.stream.match(/^\s*[?:]/, false) || value == "?") return cont(typearg)
		if (type == ":") return cont(typeexpr)
		if (type == "spread") return cont(typearg)
		return pass(typeexpr)
	  }
	  function afterType(type, value) {
		if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
		if (value == "|" || type == "." || value == "&") return cont(typeexpr)
		if (type == "[") return cont(typeexpr, expect("]"), afterType)
		if (value == "extends" || value == "implements") { cx.marked = "keyword"; return cont(typeexpr) }
		if (value == "?") return cont(typeexpr, expect(":"), typeexpr)
	  }
	  function maybeTypeArgs(_, value) {
		if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
	  }
	  function typeparam() {
		return pass(typeexpr, maybeTypeDefault)
	  }
	  function maybeTypeDefault(_, value) {
		if (value == "=") return cont(typeexpr)
	  }
	  function vardef(_, value) {
		if (value == "enum") {cx.marked = "keyword"; return cont(enumdef)}
		return pass(pattern, maybetype, maybeAssign, vardefCont);
	  }
	  function pattern(type, value) {
		if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(pattern) }
		if (type == "variable") { register(value); return cont(); }
		if (type == "spread") return cont(pattern);
		if (type == "[") return contCommasep(eltpattern, "]");
		if (type == "{") return contCommasep(proppattern, "}");
	  }
	  function proppattern(type, value) {
		if (type == "variable" && !cx.stream.match(/^\s*:/, false)) {
		  register(value);
		  return cont(maybeAssign);
		}
		if (type == "variable") cx.marked = "property";
		if (type == "spread") return cont(pattern);
		if (type == "}") return pass();
		if (type == "[") return cont(expression, expect(']'), expect(':'), proppattern);
		return cont(expect(":"), pattern, maybeAssign);
	  }
	  function eltpattern() {
		return pass(pattern, maybeAssign)
	  }
	  function maybeAssign(_type, value) {
		if (value == "=") return cont(expressionNoComma);
	  }
	  function vardefCont(type) {
		if (type == ",") return cont(vardef);
	  }
	  function maybeelse(type, value) {
		if (type == "keyword b" && value == "else") return cont(pushlex("form", "else"), statement, poplex);
	  }
	  function forspec(type, value) {
		if (value == "await") return cont(forspec);
		if (type == "(") return cont(pushlex(")"), forspec1, poplex);
	  }
	  function forspec1(type) {
		if (type == "var") return cont(vardef, forspec2);
		if (type == "variable") return cont(forspec2);
		return pass(forspec2)
	  }
	  function forspec2(type, value) {
		if (type == ")") return cont()
		if (type == ";") return cont(forspec2)
		if (value == "in" || value == "of") { cx.marked = "keyword"; return cont(expression, forspec2) }
		return pass(expression, forspec2)
	  }
	  function functiondef(type, value) {
		if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
		if (type == "variable") {register(value); return cont(functiondef);}
		if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
		if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef)
	  }
	  function functiondecl(type, value) {
		if (value == "*") {cx.marked = "keyword"; return cont(functiondecl);}
		if (type == "variable") {register(value); return cont(functiondecl);}
		if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, popcontext);
		if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondecl)
	  }
	  function typename(type, value) {
		if (type == "keyword" || type == "variable") {
		  cx.marked = "type";
		  return cont(typename)
		} else if (value == "<") {
		  return cont(pushlex(">"), commasep(typeparam, ">"), poplex)
		}
	  }
	  function funarg(type, value) {
		if (value == "@") cont(expression, funarg);
		if (type == "spread") return cont(funarg);
		if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(funarg); }
		if (isTS && type == "this") return cont(maybetype, maybeAssign)
		return pass(pattern, maybetype, maybeAssign);
	  }
	  function classExpression(type, value) {
		// Class expressions may have an optional name.
		if (type == "variable") return className(type, value);
		return classNameAfter(type, value);
	  }
	  function className(type, value) {
		if (type == "variable") {register(value); return cont(classNameAfter);}
	  }
	  function classNameAfter(type, value) {
		if (value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, classNameAfter)
		if (value == "extends" || value == "implements" || (isTS && type == ",")) {
		  if (value == "implements") cx.marked = "keyword";
		  return cont(isTS ? typeexpr : expression, classNameAfter);
		}
		if (type == "{") return cont(pushlex("}"), classBody, poplex);
	  }
	  function classBody(type, value) {
		if (type == "async" ||
			(type == "variable" &&
			 (value == "static" || value == "get" || value == "set" || (isTS && isModifier(value))) &&
			 cx.stream.match(/^\s+#?[\w$\xa1-\uffff]/, false))) {
		  cx.marked = "keyword";
		  return cont(classBody);
		}
		if (type == "variable" || cx.style == "keyword") {
		  cx.marked = "property";
		  return cont(classfield, classBody);
		}
		if (type == "number" || type == "string") return cont(classfield, classBody);
		if (type == "[")
		  return cont(expression, maybetype, expect("]"), classfield, classBody)
		if (value == "*") {
		  cx.marked = "keyword";
		  return cont(classBody);
		}
		if (isTS && type == "(") return pass(functiondecl, classBody)
		if (type == ";" || type == ",") return cont(classBody);
		if (type == "}") return cont();
		if (value == "@") return cont(expression, classBody)
	  }
	  function classfield(type, value) {
		if (value == "!" || value == "?") return cont(classfield)
		if (type == ":") return cont(typeexpr, maybeAssign)
		if (value == "=") return cont(expressionNoComma)
		var context = cx.state.lexical.prev, isInterface = context && context.info == "interface";
		return pass(isInterface ? functiondecl : functiondef)
	  }
	  function afterExport(type, value) {
		if (value == "*") { cx.marked = "keyword"; return cont(maybeFrom, expect(";")); }
		if (value == "default") { cx.marked = "keyword"; return cont(expression, expect(";")); }
		if (type == "{") return cont(commasep(exportField, "}"), maybeFrom, expect(";"));
		return pass(statement);
	  }
	  function exportField(type, value) {
		if (value == "as") { cx.marked = "keyword"; return cont(expect("variable")); }
		if (type == "variable") return pass(expressionNoComma, exportField);
	  }
	  function afterImport(type) {
		if (type == "string") return cont();
		if (type == "(") return pass(expression);
		if (type == ".") return pass(maybeoperatorComma);
		return pass(importSpec, maybeMoreImports, maybeFrom);
	  }
	  function importSpec(type, value) {
		if (type == "{") return contCommasep(importSpec, "}");
		if (type == "variable") register(value);
		if (value == "*") cx.marked = "keyword";
		return cont(maybeAs);
	  }
	  function maybeMoreImports(type) {
		if (type == ",") return cont(importSpec, maybeMoreImports)
	  }
	  function maybeAs(_type, value) {
		if (value == "as") { cx.marked = "keyword"; return cont(importSpec); }
	  }
	  function maybeFrom(_type, value) {
		if (value == "from") { cx.marked = "keyword"; return cont(expression); }
	  }
	  function arrayLiteral(type) {
		if (type == "]") return cont();
		return pass(commasep(expressionNoComma, "]"));
	  }
	  function enumdef() {
		return pass(pushlex("form"), pattern, expect("{"), pushlex("}"), commasep(enummember, "}"), poplex, poplex)
	  }
	  function enummember() {
		return pass(pattern, maybeAssign);
	  }
	
	  function isContinuedStatement(state, textAfter) {
		return state.lastType == "operator" || state.lastType == "," ||
		  isOperatorChar.test(textAfter.charAt(0)) ||
		  /[,.]/.test(textAfter.charAt(0));
	  }
	
	  function expressionAllowed(stream, state, backUp) {
		return state.tokenize == tokenBase &&
		  /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) ||
		  (state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))
	  }
	
	  // Interface
	
	  return {
		name: parserConfig.name,
	
		startState: function(indentUnit) {
		  var state = {
			tokenize: tokenBase,
			lastType: "sof",
			cc: [],
			lexical: new JSLexical(-indentUnit, 0, "block", false),
			localVars: parserConfig.localVars,
			context: parserConfig.localVars && new Context(null, null, false),
			indented: 0
		  };
		  if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
			state.globalVars = parserConfig.globalVars;
		  return state;
		},
	
		token: function(stream, state) {
		  if (stream.sol()) {
			if (!state.lexical.hasOwnProperty("align"))
			  state.lexical.align = false;
			state.indented = stream.indentation();
			findFatArrow(stream, state);
		  }
		  if (state.tokenize != tokenComment && stream.eatSpace()) return null;
		  var style = state.tokenize(stream, state);
		  if (type == "comment") return style;
		  state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;
		  return parseJS(state, style, type, content, stream);
		},
	
		indent: function(state, textAfter, cx) {
		  if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;
		  if (state.tokenize != tokenBase) return 0;
		  var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;
		  // Kludge to prevent 'maybelse' from blocking lexical scope pops
		  if (!/^\s*else\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {
			var c = state.cc[i];
			if (c == poplex) lexical = lexical.prev;
			else if (c != maybeelse && c != popcontext) break;
		  }
		  while ((lexical.type == "stat" || lexical.type == "form") &&
				 (firstChar == "}" || ((top = state.cc[state.cc.length - 1]) &&
									   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&
									   !/^[,\.=+\-*:?[\(]/.test(textAfter))))
			lexical = lexical.prev;
		  if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
			lexical = lexical.prev;
		  var type = lexical.type, closing = firstChar == type;
	
		  if (type == "vardef") return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
		  else if (type == "form" && firstChar == "{") return lexical.indented;
		  else if (type == "form") return lexical.indented + cx.unit;
		  else if (type == "stat")
			return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);
		  else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)
			return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
		  else if (lexical.align) return lexical.column + (closing ? 0 : 1);
		  else return lexical.indented + (closing ? 0 : cx.unit);
		},
	
		languageData: {
		  indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
		  commentTokens: jsonMode ? undefined : {line: "//", block: {open: "/*", close: "*/"}},
		  closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
		  wordChars: "$"
		}
	  };
	}
	const javascript = mkJavaScript({name: "javascript"});
	const json = mkJavaScript({name: "json", json: true});
	const jsonld = mkJavaScript({name: "json", jsonld: true});
	const typescript = mkJavaScript({name: "typescript", typescript: true});
	
	exports.javascript = javascript;
	exports.json = json;
	exports.jsonld = jsonld;
	exports.typescript = typescript;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/jinja2.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/jinja2.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var keywords = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif",
					"extends", "filter", "endfilter", "firstof", "do", "for",
					"endfor", "if", "endif", "ifchanged", "endifchanged",
					"ifequal", "endifequal", "ifnotequal", "set", "raw", "endraw",
					"endifnotequal", "in", "include", "load", "not", "now", "or",
					"parsed", "regroup", "reversed", "spaceless", "call", "endcall", "macro",
					"endmacro", "endspaceless", "ssi", "templatetag", "openblock",
					"closeblock", "openvariable", "closevariable", "without", "context",
					"openbrace", "closebrace", "opencomment",
					"closecomment", "widthratio", "url", "with", "endwith",
					"get_current_language", "trans", "endtrans", "noop", "blocktrans",
					"endblocktrans", "get_available_languages",
					"get_current_language_bidi", "pluralize", "autoescape", "endautoescape"],
		operator = /^[+\-*&%=<>!?|~^]/,
		sign = /^[:\[\(\{]/,
		atom = ["true", "false"],
		number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
	
	keywords = new RegExp("((" + keywords.join(")|(") + "))\\b");
	atom = new RegExp("((" + atom.join(")|(") + "))\\b");
	
	function tokenBase (stream, state) {
	  var ch = stream.peek();
	
	  //Comment
	  if (state.incomment) {
		if(!stream.skipTo("#}")) {
		  stream.skipToEnd();
		} else {
		  stream.eatWhile(/\#|}/);
		  state.incomment = false;
		}
		return "comment";
		//Tag
	  } else if (state.intag) {
		//After operator
		if(state.operator) {
		  state.operator = false;
		  if(stream.match(atom)) {
			return "atom";
		  }
		  if(stream.match(number)) {
			return "number";
		  }
		}
		//After sign
		if(state.sign) {
		  state.sign = false;
		  if(stream.match(atom)) {
			return "atom";
		  }
		  if(stream.match(number)) {
			return "number";
		  }
		}
	
		if(state.instring) {
		  if(ch == state.instring) {
			state.instring = false;
		  }
		  stream.next();
		  return "string";
		} else if(ch == "'" || ch == '"') {
		  state.instring = ch;
		  stream.next();
		  return "string";
		} else if (state.inbraces > 0 && ch ==")") {
		  stream.next();
		  state.inbraces--;
		}
		else if (ch == "(") {
		  stream.next();
		  state.inbraces++;
		}
		else if (state.inbrackets > 0 && ch =="]") {
		  stream.next();
		  state.inbrackets--;
		}
		else if (ch == "[") {
		  stream.next();
		  state.inbrackets++;
		} else if (!state.lineTag && (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}"))) {
		  state.intag = false;
		  return "tag";
		} else if(stream.match(operator)) {
		  state.operator = true;
		  return "operator";
		} else if(stream.match(sign)) {
		  state.sign = true;
		} else {
		  if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {
			//allow nospace after tag before the keyword
			return "keyword";
		  }
		  if(stream.eat(" ") || stream.sol()) {
			if(stream.match(keywords)) {
			  return "keyword";
			}
			if(stream.match(atom)) {
			  return "atom";
			}
			if(stream.match(number)) {
			  return "number";
			}
			if(stream.sol()) {
			  stream.next();
			}
		  } else {
			stream.next();
		  }
	
		}
		return "variable";
	  } else if (stream.eat("{")) {
		if (stream.eat("#")) {
		  state.incomment = true;
		  if(!stream.skipTo("#}")) {
			stream.skipToEnd();
		  } else {
			stream.eatWhile(/\#|}/);
			state.incomment = false;
		  }
		  return "comment";
		  //Open tag
		} else if (ch = stream.eat(/\{|%/)) {
		  //Cache close tag
		  state.intag = ch;
		  state.inbraces = 0;
		  state.inbrackets = 0;
		  if(ch == "{") {
			state.intag = "}";
		  }
		  stream.eat("-");
		  return "tag";
		}
		//Line statements
	  } else if (stream.eat('#')) {
		if (stream.peek() == '#') {
		  stream.skipToEnd();
		  return "comment"
		}
		else if (!stream.eol()) {
		  state.intag = true;
		  state.lineTag = true;
		  state.inbraces = 0;
		  state.inbrackets = 0;
		  return "tag";
		}
	  }
	  stream.next();
	}
	const jinja2 = {
	  name: "jinja2",
	  startState: function () {
		return {tokenize: tokenBase, inbrackets: 0, inbraces: 0};
	  },
	  token: function(stream, state) {
		var style = state.tokenize(stream, state);
		if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {
		  //Close line statement at the EOL
		  state.intag = false;
		  state.lineTag = false;
		}
		return style;
	  },
	  languageData: {
		commentTokens: {block: {open: "{#", close: "#}", line: "##"}}
	  }
	};
	
	exports.jinja2 = jinja2;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/julia.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/julia.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words, end, pre) {
	  if (typeof pre === "undefined") pre = "";
	  if (typeof end === "undefined") { end = "\\b"; }
	  return new RegExp("^" + pre + "((" + words.join(")|(") + "))" + end);
	}
	
	var octChar = "\\\\[0-7]{1,3}";
	var hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
	var sChar = "\\\\[abefnrtv0%?'\"\\\\]";
	var uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";
	
	var asciiOperatorsList = [
	  "[<>]:", "[<>=]=", "<<=?", ">>>?=?", "=>", "--?>", "<--[->]?", "\\/\\/",
	  "\\.{2,3}", "[\\.\\\\%*+\\-<>!\\/^|&]=?", "\\?", "\\$", "~", ":"
	];
	var operators = wordRegexp([
	  "[<>]:", "[<>=]=", "[!=]==", "<<=?", ">>>?=?", "=>?", "--?>", "<--[->]?", "\\/\\/",
	  "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?", "\\?", "\\$", "~", ":",
	  "\\u00D7", "\\u2208", "\\u2209", "\\u220B", "\\u220C", "\\u2218",
	  "\\u221A", "\\u221B", "\\u2229", "\\u222A", "\\u2260", "\\u2264",
	  "\\u2265", "\\u2286", "\\u2288", "\\u228A", "\\u22C5",
	  "\\b(in|isa)\\b(?!\.?\\()"
	], "");
	var delimiters = /^[;,()[\]{}]/;
	var identifiers = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;
	
	var chars = wordRegexp([octChar, hexChar, sChar, uChar], "'");
	
	var openersList = ["begin", "function", "type", "struct", "immutable", "let",
					   "macro", "for", "while", "quote", "if", "else", "elseif", "try",
					   "finally", "catch", "do"];
	
	var closersList = ["end", "else", "elseif", "catch", "finally"];
	
	var keywordsList = ["if", "else", "elseif", "while", "for", "begin", "let",
						"end", "do", "try", "catch", "finally", "return", "break", "continue",
						"global", "local", "const", "export", "import", "importall", "using",
						"function", "where", "macro", "module", "baremodule", "struct", "type",
						"mutable", "immutable", "quote", "typealias", "abstract", "primitive",
						"bitstype"];
	
	var builtinsList = ["true", "false", "nothing", "NaN", "Inf"];
	
	var openers = wordRegexp(openersList);
	var closers = wordRegexp(closersList);
	var keywords = wordRegexp(keywordsList);
	var builtins = wordRegexp(builtinsList);
	
	var macro = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
	var symbol = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
	var stringPrefixes = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;
	
	var macroOperators = wordRegexp(asciiOperatorsList, "", "@");
	var symbolOperators = wordRegexp(asciiOperatorsList, "", ":");
	
	function inArray(state) {
	  return (state.nestedArrays > 0);
	}
	
	function inGenerator(state) {
	  return (state.nestedGenerators > 0);
	}
	
	function currentScope(state, n) {
	  if (typeof(n) === "undefined") { n = 0; }
	  if (state.scopes.length <= n) {
		return null;
	  }
	  return state.scopes[state.scopes.length - (n + 1)];
	}
	
	// tokenizers
	function tokenBase(stream, state) {
	  // Handle multiline comments
	  if (stream.match('#=', false)) {
		state.tokenize = tokenComment;
		return state.tokenize(stream, state);
	  }
	
	  // Handle scope changes
	  var leavingExpr = state.leavingExpr;
	  if (stream.sol()) {
		leavingExpr = false;
	  }
	  state.leavingExpr = false;
	
	  if (leavingExpr) {
		if (stream.match(/^'+/)) {
		  return "operator";
		}
	  }
	
	  if (stream.match(/\.{4,}/)) {
		return "error";
	  } else if (stream.match(/\.{1,3}/)) {
		return "operator";
	  }
	
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  var ch = stream.peek();
	
	  // Handle single line comments
	  if (ch === '#') {
		stream.skipToEnd();
		return "comment";
	  }
	
	  if (ch === '[') {
		state.scopes.push('[');
		state.nestedArrays++;
	  }
	
	  if (ch === '(') {
		state.scopes.push('(');
		state.nestedGenerators++;
	  }
	
	  if (inArray(state) && ch === ']') {
		while (state.scopes.length && currentScope(state) !== "[") { state.scopes.pop(); }
		state.scopes.pop();
		state.nestedArrays--;
		state.leavingExpr = true;
	  }
	
	  if (inGenerator(state) && ch === ')') {
		while (state.scopes.length && currentScope(state) !== "(") { state.scopes.pop(); }
		state.scopes.pop();
		state.nestedGenerators--;
		state.leavingExpr = true;
	  }
	
	  if (inArray(state)) {
		if (state.lastToken == "end" && stream.match(':')) {
		  return "operator";
		}
		if (stream.match('end')) {
		  return "number";
		}
	  }
	
	  var match;
	  if (match = stream.match(openers, false)) {
		state.scopes.push(match[0]);
	  }
	
	  if (stream.match(closers, false)) {
		state.scopes.pop();
	  }
	
	  // Handle type annotations
	  if (stream.match(/^::(?![:\$])/)) {
		state.tokenize = tokenAnnotation;
		return state.tokenize(stream, state);
	  }
	
	  // Handle symbols
	  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {
		return "builtin";
	  }
	
	  // Handle parametric types
	  //if (stream.match(/^{[^}]*}(?=\()/)) {
	  //  return "builtin";
	  //}
	
	  // Handle operators and Delimiters
	  if (stream.match(operators)) {
		return "operator";
	  }
	
	  // Handle Number Literals
	  if (stream.match(/^\.?\d/, false)) {
		var imMatcher = RegExp(/^im\b/);
		var numberLiteral = false;
		if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) { numberLiteral = true; }
		// Integers
		if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex
		if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary
		if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal
		// Floats
		if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) { numberLiteral = true; }
		if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) { numberLiteral = true; } // Decimal
		if (numberLiteral) {
		  // Integer literals may be "long"
		  stream.match(imMatcher);
		  state.leavingExpr = true;
		  return "number";
		}
	  }
	
	  // Handle Chars
	  if (stream.match("'")) {
		state.tokenize = tokenChar;
		return state.tokenize(stream, state);
	  }
	
	  // Handle Strings
	  if (stream.match(stringPrefixes)) {
		state.tokenize = tokenStringFactory(stream.current());
		return state.tokenize(stream, state);
	  }
	
	  if (stream.match(macro) || stream.match(macroOperators)) {
		return "meta";
	  }
	
	  if (stream.match(delimiters)) {
		return null;
	  }
	
	  if (stream.match(keywords)) {
		return "keyword";
	  }
	
	  if (stream.match(builtins)) {
		return "builtin";
	  }
	
	  var isDefinition = state.isDefinition || state.lastToken == "function" ||
		  state.lastToken == "macro" || state.lastToken == "type" ||
		  state.lastToken == "struct" || state.lastToken == "immutable";
	
	  if (stream.match(identifiers)) {
		if (isDefinition) {
		  if (stream.peek() === '.') {
			state.isDefinition = true;
			return "variable";
		  }
		  state.isDefinition = false;
		  return "def";
		}
		state.leavingExpr = true;
		return "variable";
	  }
	
	  // Handle non-detected items
	  stream.next();
	  return "error";
	}
	
	function tokenAnnotation(stream, state) {
	  stream.match(/.*?(?=[,;{}()=\s]|$)/);
	  if (stream.match('{')) {
		state.nestedParameters++;
	  } else if (stream.match('}') && state.nestedParameters > 0) {
		state.nestedParameters--;
	  }
	  if (state.nestedParameters > 0) {
		stream.match(/.*?(?={|})/) || stream.next();
	  } else if (state.nestedParameters == 0) {
		state.tokenize = tokenBase;
	  }
	  return "builtin";
	}
	
	function tokenComment(stream, state) {
	  if (stream.match('#=')) {
		state.nestedComments++;
	  }
	  if (!stream.match(/.*?(?=(#=|=#))/)) {
		stream.skipToEnd();
	  }
	  if (stream.match('=#')) {
		state.nestedComments--;
		if (state.nestedComments == 0)
		  state.tokenize = tokenBase;
	  }
	  return "comment";
	}
	
	function tokenChar(stream, state) {
	  var isChar = false, match;
	  if (stream.match(chars)) {
		isChar = true;
	  } else if (match = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
		var value = parseInt(match[1], 16);
		if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)
		  isChar = true;
		  stream.next();
		}
	  } else if (match = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
		var value = parseInt(match[1], 16);
		if (value <= 1114111) { // U+10FFFF
		  isChar = true;
		  stream.next();
		}
	  }
	  if (isChar) {
		state.leavingExpr = true;
		state.tokenize = tokenBase;
		return "string";
	  }
	  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }
	  if (stream.match("'")) { state.tokenize = tokenBase; }
	  return "error";
	}
	
	function tokenStringFactory(delimiter) {
	  if (delimiter.substr(-3) === '"""') {
		delimiter = '"""';
	  } else if (delimiter.substr(-1) === '"') {
		delimiter = '"';
	  }
	  function tokenString(stream, state) {
		if (stream.eat('\\')) {
		  stream.next();
		} else if (stream.match(delimiter)) {
		  state.tokenize = tokenBase;
		  state.leavingExpr = true;
		  return "string";
		} else {
		  stream.eat(/[`"]/);
		}
		stream.eatWhile(/[^\\`"]/);
		return "string";
	  }
	  return tokenString;
	}
	
	const julia = {
	  name: "julia",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  scopes: [],
		  lastToken: null,
		  leavingExpr: false,
		  isDefinition: false,
		  nestedArrays: 0,
		  nestedComments: 0,
		  nestedGenerators: 0,
		  nestedParameters: 0,
		  firstParenPos: -1
		};
	  },
	
	  token: function(stream, state) {
		var style = state.tokenize(stream, state);
		var current = stream.current();
	
		if (current && style) {
		  state.lastToken = current;
		}
	
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var delta = 0;
		if ( textAfter === ']' || textAfter === ')' || /^end\b/.test(textAfter) ||
			 /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) ||
			 /^finally/.test(textAfter) ) {
		  delta = -1;
		}
		return (state.scopes.length + delta) * cx.unit;
	  },
	
	  languageData: {
		indentOnInput: /^\s*(end|else|catch|finally)\b$/,
		commentTokens: {line: "#", block: {open: "#=", close: "=#"}},
		closeBrackets: {brackets: ["(", "[", "{", '"']},
		autocomplete: keywordsList.concat(builtinsList)
	  }
	};
	
	exports.julia = julia;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/livescript.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/livescript.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var tokenBase = function(stream, state) {
	  var next_rule = state.next || "start";
	  if (next_rule) {
		state.next = state.next;
		var nr = Rules[next_rule];
		if (nr.splice) {
		  for (var i$ = 0; i$ < nr.length; ++i$) {
			var r = nr[i$];
			if (r.regex && stream.match(r.regex)) {
			  state.next = r.next || state.next;
			  return r.token;
			}
		  }
		  stream.next();
		  return 'error';
		}
		if (stream.match(r = Rules[next_rule])) {
		  if (r.regex && stream.match(r.regex)) {
			state.next = r.next;
			return r.token;
		  } else {
			stream.next();
			return 'error';
		  }
		}
	  }
	  stream.next();
	  return 'error';
	};
	
	var identifier = '(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*';
	var indenter = RegExp('(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*' + identifier + ')?))\\s*$');
	var keywordend = '(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))';
	var stringfill = {
	  token: 'string',
	  regex: '.+'
	};
	var Rules = {
	  start: [
		{
		  token: 'docComment',
		  regex: '/\\*',
		  next: 'comment'
		}, {
		  token: 'comment',
		  regex: '#.*'
		}, {
		  token: 'keyword',
		  regex: '(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)' + keywordend
		}, {
		  token: 'atom',
		  regex: '(?:true|false|yes|no|on|off|null|void|undefined)' + keywordend
		}, {
		  token: 'invalid',
		  regex: '(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)' + keywordend
		}, {
		  token: 'className.standard',
		  regex: '(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)' + keywordend
		}, {
		  token: 'variableName.function.standard',
		  regex: '(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)' + keywordend
		}, {
		  token: 'variableName.standard',
		  regex: '(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)' + keywordend
		}, {
		  token: 'variableName',
		  regex: identifier + '\\s*:(?![:=])'
		}, {
		  token: 'variableName',
		  regex: identifier
		}, {
		  token: 'operatorKeyword',
		  regex: '(?:\\.{3}|\\s+\\?)'
		}, {
		  token: 'keyword',
		  regex: '(?:@+|::|\\.\\.)',
		  next: 'key'
		}, {
		  token: 'operatorKeyword',
		  regex: '\\.\\s*',
		  next: 'key'
		}, {
		  token: 'string',
		  regex: '\\\\\\S[^\\s,;)}\\]]*'
		}, {
		  token: 'docString',
		  regex: '\'\'\'',
		  next: 'qdoc'
		}, {
		  token: 'docString',
		  regex: '"""',
		  next: 'qqdoc'
		}, {
		  token: 'string',
		  regex: '\'',
		  next: 'qstring'
		}, {
		  token: 'string',
		  regex: '"',
		  next: 'qqstring'
		}, {
		  token: 'string',
		  regex: '`',
		  next: 'js'
		}, {
		  token: 'string',
		  regex: '<\\[',
		  next: 'words'
		}, {
		  token: 'regexp',
		  regex: '//',
		  next: 'heregex'
		}, {
		  token: 'regexp',
		  regex: '\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}',
		  next: 'key'
		}, {
		  token: 'number',
		  regex: '(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)'
		}, {
		  token: 'paren',
		  regex: '[({[]'
		}, {
		  token: 'paren',
		  regex: '[)}\\]]',
		  next: 'key'
		}, {
		  token: 'operatorKeyword',
		  regex: '\\S+'
		}, {
		  token: 'content',
		  regex: '\\s+'
		}
	  ],
	  heregex: [
		{
		  token: 'regexp',
		  regex: '.*?//[gimy$?]{0,4}',
		  next: 'start'
		}, {
		  token: 'regexp',
		  regex: '\\s*#{'
		}, {
		  token: 'comment',
		  regex: '\\s+(?:#.*)?'
		}, {
		  token: 'regexp',
		  regex: '\\S+'
		}
	  ],
	  key: [
		{
		  token: 'operatorKeyword',
		  regex: '[.?@!]+'
		}, {
		  token: 'variableName',
		  regex: identifier,
		  next: 'start'
		}, {
		  token: 'content',
		  regex: '',
		  next: 'start'
		}
	  ],
	  comment: [
		{
		  token: 'docComment',
		  regex: '.*?\\*/',
		  next: 'start'
		}, {
		  token: 'docComment',
		  regex: '.+'
		}
	  ],
	  qdoc: [
		{
		  token: 'string',
		  regex: ".*?'''",
		  next: 'key'
		}, stringfill
	  ],
	  qqdoc: [
		{
		  token: 'string',
		  regex: '.*?"""',
		  next: 'key'
		}, stringfill
	  ],
	  qstring: [
		{
		  token: 'string',
		  regex: '[^\\\\\']*(?:\\\\.[^\\\\\']*)*\'',
		  next: 'key'
		}, stringfill
	  ],
	  qqstring: [
		{
		  token: 'string',
		  regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
		  next: 'key'
		}, stringfill
	  ],
	  js: [
		{
		  token: 'string',
		  regex: '[^\\\\`]*(?:\\\\.[^\\\\`]*)*`',
		  next: 'key'
		}, stringfill
	  ],
	  words: [
		{
		  token: 'string',
		  regex: '.*?\\]>',
		  next: 'key'
		}, stringfill
	  ]
	};
	for (var idx in Rules) {
	  var r = Rules[idx];
	  if (r.splice) {
		for (var i = 0, len = r.length; i < len; ++i) {
		  var rr = r[i];
		  if (typeof rr.regex === 'string') {
			Rules[idx][i].regex = new RegExp('^' + rr.regex);
		  }
		}
	  } else if (typeof rr.regex === 'string') {
		Rules[idx].regex = new RegExp('^' + r.regex);
	  }
	}
	
	const liveScript = {
	  name: "livescript",
	  startState: function(){
		return {
		  next: 'start',
		  lastToken: {style: null, indent: 0, content: ""}
		};
	  },
	  token: function(stream, state){
		while (stream.pos == stream.start)
		  var style = tokenBase(stream, state);
		state.lastToken = {
		  style: style,
		  indent: stream.indentation(),
		  content: stream.current()
		};
		return style.replace(/\./g, ' ');
	  },
	  indent: function(state){
		var indentation = state.lastToken.indent;
		if (state.lastToken.content.match(indenter)) {
		  indentation += 2;
		}
		return indentation;
	  }
	};
	
	exports.liveScript = liveScript;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/lua.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/lua.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function prefixRE(words) {
	  return new RegExp("^(?:" + words.join("|") + ")", "i");
	}
	function wordRE(words) {
	  return new RegExp("^(?:" + words.join("|") + ")$", "i");
	}
	
	// long list of standard functions from lua manual
	var builtins = wordRE([
	  "_G","_VERSION","assert","collectgarbage","dofile","error","getfenv","getmetatable","ipairs","load",
	  "loadfile","loadstring","module","next","pairs","pcall","print","rawequal","rawget","rawset","require",
	  "select","setfenv","setmetatable","tonumber","tostring","type","unpack","xpcall",
	
	  "coroutine.create","coroutine.resume","coroutine.running","coroutine.status","coroutine.wrap","coroutine.yield",
	
	  "debug.debug","debug.getfenv","debug.gethook","debug.getinfo","debug.getlocal","debug.getmetatable",
	  "debug.getregistry","debug.getupvalue","debug.setfenv","debug.sethook","debug.setlocal","debug.setmetatable",
	  "debug.setupvalue","debug.traceback",
	
	  "close","flush","lines","read","seek","setvbuf","write",
	
	  "io.close","io.flush","io.input","io.lines","io.open","io.output","io.popen","io.read","io.stderr","io.stdin",
	  "io.stdout","io.tmpfile","io.type","io.write",
	
	  "math.abs","math.acos","math.asin","math.atan","math.atan2","math.ceil","math.cos","math.cosh","math.deg",
	  "math.exp","math.floor","math.fmod","math.frexp","math.huge","math.ldexp","math.log","math.log10","math.max",
	  "math.min","math.modf","math.pi","math.pow","math.rad","math.random","math.randomseed","math.sin","math.sinh",
	  "math.sqrt","math.tan","math.tanh",
	
	  "os.clock","os.date","os.difftime","os.execute","os.exit","os.getenv","os.remove","os.rename","os.setlocale",
	  "os.time","os.tmpname",
	
	  "package.cpath","package.loaded","package.loaders","package.loadlib","package.path","package.preload",
	  "package.seeall",
	
	  "string.byte","string.char","string.dump","string.find","string.format","string.gmatch","string.gsub",
	  "string.len","string.lower","string.match","string.rep","string.reverse","string.sub","string.upper",
	
	  "table.concat","table.insert","table.maxn","table.remove","table.sort"
	]);
	var keywords = wordRE(["and","break","elseif","false","nil","not","or","return",
						   "true","function", "end", "if", "then", "else", "do",
						   "while", "repeat", "until", "for", "in", "local" ]);
	
	var indentTokens = wordRE(["function", "if","repeat","do", "\\(", "{"]);
	var dedentTokens = wordRE(["end", "until", "\\)", "}"]);
	var dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);
	
	function readBracket(stream) {
	  var level = 0;
	  while (stream.eat("=")) ++level;
	  stream.eat("[");
	  return level;
	}
	
	function normal(stream, state) {
	  var ch = stream.next();
	  if (ch == "-" && stream.eat("-")) {
		if (stream.eat("[") && stream.eat("["))
		  return (state.cur = bracketed(readBracket(stream), "comment"))(stream, state);
		stream.skipToEnd();
		return "comment";
	  }
	  if (ch == "\"" || ch == "'")
		return (state.cur = string(ch))(stream, state);
	  if (ch == "[" && /[\[=]/.test(stream.peek()))
		return (state.cur = bracketed(readBracket(stream), "string"))(stream, state);
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w.%]/);
		return "number";
	  }
	  if (/[\w_]/.test(ch)) {
		stream.eatWhile(/[\w\\\-_.]/);
		return "variable";
	  }
	  return null;
	}
	
	function bracketed(level, style) {
	  return function(stream, state) {
		var curlev = null, ch;
		while ((ch = stream.next()) != null) {
		  if (curlev == null) {if (ch == "]") curlev = 0;}
		  else if (ch == "=") ++curlev;
		  else if (ch == "]" && curlev == level) { state.cur = normal; break; }
		  else curlev = null;
		}
		return style;
	  };
	}
	
	function string(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped) break;
		  escaped = !escaped && ch == "\\";
		}
		if (!escaped) state.cur = normal;
		return "string";
	  };
	}
	
	const lua = {
	  name: "lua",
	
	  startState: function() {
		return {basecol: 0, indentDepth: 0, cur: normal};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		var style = state.cur(stream, state);
		var word = stream.current();
		if (style == "variable") {
		  if (keywords.test(word)) style = "keyword";
		  else if (builtins.test(word)) style = "builtin";
		}
		if ((style != "comment") && (style != "string")){
		  if (indentTokens.test(word)) ++state.indentDepth;
		  else if (dedentTokens.test(word)) --state.indentDepth;
		}
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var closing = dedentPartial.test(textAfter);
		return state.basecol + cx.unit * (state.indentDepth - (closing ? 1 : 0));
	  },
	
	  languageData: {
		indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
		commentTokens: {line: "--", block: {open: "--[[", close: "]]--"}}
	  }
	};
	
	exports.lua = lua;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mathematica.cjs":
	/*!****************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mathematica.cjs ***!
	  \****************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// used pattern building blocks
	var Identifier = '[a-zA-Z\\$][a-zA-Z0-9\\$]*';
	var pBase      = "(?:\\d+)";
	var pFloat     = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
	var pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
	var pPrecision = "(?:`(?:`?"+pFloat+")?)";
	
	// regular expressions
	var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\^\\^'+pFloatBase+pPrecision+'?(?:\\*\\^[+-]?\\d+)?))');
	var reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\*\\^[+-]?\\d+)?)');
	var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');
	
	function tokenBase(stream, state) {
	  var ch;
	
	  // get next character
	  ch = stream.next();
	
	  // string
	  if (ch === '"') {
		state.tokenize = tokenString;
		return state.tokenize(stream, state);
	  }
	
	  // comment
	  if (ch === '(') {
		if (stream.eat('*')) {
		  state.commentLevel++;
		  state.tokenize = tokenComment;
		  return state.tokenize(stream, state);
		}
	  }
	
	  // go back one character
	  stream.backUp(1);
	
	  // look for numbers
	  // Numbers in a baseform
	  if (stream.match(reBaseForm, true, false)) {
		return 'number';
	  }
	
	  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition
	  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.
	  if (stream.match(reFloatForm, true, false)) {
		return 'number';
	  }
	
	  /* In[23] and Out[34] */
	  if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
		return 'atom';
	  }
	
	  // usage
	  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
		return 'meta';
	  }
	
	  // message
	  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
		return 'string.special';
	  }
	
	  // this makes a look-ahead match for something like variable:{_Integer}
	  // the match is then forwarded to the mma-patterns tokenizer.
	  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
		return 'variableName.special';
	  }
	
	  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)
	  // Cannot start with a number, but can have numbers at any other position. Examples
	  // blub__Integer, a1_, b34_Integer32
	  if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
		return 'variableName.special';
	  }
	  if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
		return 'variableName.special';
	  }
	  if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
		return 'variableName.special';
	  }
	
	  // Named characters in Mathematica, like \[Gamma].
	  if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
		return 'character';
	  }
	
	  // Match all braces separately
	  if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
		return 'bracket';
	  }
	
	  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match
	  // only one.
	  if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
		return 'variableName.constant';
	  }
	
	  // Literals like variables, keywords, functions
	  if (stream.match(reIdInContext, true, false)) {
		return 'keyword';
	  }
	
	  // operators. Note that operators like @@ or /; are matched separately for each symbol.
	  if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
		return 'operator';
	  }
	
	  // everything else is an error
	  stream.next(); // advance the stream.
	  return 'error';
	}
	
	function tokenString(stream, state) {
	  var next, end = false, escaped = false;
	  while ((next = stream.next()) != null) {
		if (next === '"' && !escaped) {
		  end = true;
		  break;
		}
		escaped = !escaped && next === '\\';
	  }
	  if (end && !escaped) {
		state.tokenize = tokenBase;
	  }
	  return 'string';
	}
	function tokenComment(stream, state) {
	  var prev, next;
	  while(state.commentLevel > 0 && (next = stream.next()) != null) {
		if (prev === '(' && next === '*') state.commentLevel++;
		if (prev === '*' && next === ')') state.commentLevel--;
		prev = next;
	  }
	  if (state.commentLevel <= 0) {
		state.tokenize = tokenBase;
	  }
	  return 'comment';
	}
	
	const mathematica = {
	  name: "mathematica",
	  startState: function() {return {tokenize: tokenBase, commentLevel: 0};},
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  },
	  languageData: {
		commentTokens: {block: {open: "(*", close: "*)"}}
	  }
	};
	
	exports.mathematica = mathematica;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mbox.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mbox.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var rfc2822 = [
	  "From", "Sender", "Reply-To", "To", "Cc", "Bcc", "Message-ID",
	  "In-Reply-To", "References", "Resent-From", "Resent-Sender", "Resent-To",
	  "Resent-Cc", "Resent-Bcc", "Resent-Message-ID", "Return-Path", "Received"
	];
	var rfc2822NoEmail = [
	  "Date", "Subject", "Comments", "Keywords", "Resent-Date"
	];
	
	var whitespace = /^[ \t]/;
	var separator = /^From /; // See RFC 4155
	var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
	var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
	var header = /^[^:]+:/; // Optional fields defined in RFC 2822
	var email = /^[^ ]+@[^ ]+/;
	var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
	var bracketedEmail = /^<.*?>/;
	var untilBracketedEmail = /^.*?(?=<.*>)/;
	
	function styleForHeader(header) {
	  if (header === "Subject") return "header";
	  return "string";
	}
	
	function readToken(stream, state) {
	  if (stream.sol()) {
		// From last line
		state.inSeparator = false;
		if (state.inHeader && stream.match(whitespace)) {
		  // Header folding
		  return null;
		} else {
		  state.inHeader = false;
		  state.header = null;
		}
	
		if (stream.match(separator)) {
		  state.inHeaders = true;
		  state.inSeparator = true;
		  return "atom";
		}
	
		var match;
		var emailPermitted = false;
		if ((match = stream.match(rfc2822HeaderNoEmail)) ||
			(emailPermitted = true) && (match = stream.match(rfc2822Header))) {
		  state.inHeaders = true;
		  state.inHeader = true;
		  state.emailPermitted = emailPermitted;
		  state.header = match[1];
		  return "atom";
		}
	
		// Use vim's heuristics: recognize custom headers only if the line is in a
		// block of legitimate headers.
		if (state.inHeaders && (match = stream.match(header))) {
		  state.inHeader = true;
		  state.emailPermitted = true;
		  state.header = match[1];
		  return "atom";
		}
	
		state.inHeaders = false;
		stream.skipToEnd();
		return null;
	  }
	
	  if (state.inSeparator) {
		if (stream.match(email)) return "link";
		if (stream.match(untilEmail)) return "atom";
		stream.skipToEnd();
		return "atom";
	  }
	
	  if (state.inHeader) {
		var style = styleForHeader(state.header);
	
		if (state.emailPermitted) {
		  if (stream.match(bracketedEmail)) return style + " link";
		  if (stream.match(untilBracketedEmail)) return style;
		}
		stream.skipToEnd();
		return style;
	  }
	
	  stream.skipToEnd();
	  return null;
	}
	const mbox = {
	  name: "mbox",
	  startState: function() {
		return {
		  // Is in a mbox separator
		  inSeparator: false,
		  // Is in a mail header
		  inHeader: false,
		  // If bracketed email is permitted. Only applicable when inHeader
		  emailPermitted: false,
		  // Name of current header
		  header: null,
		  // Is in a region of mail headers
		  inHeaders: false
		};
	  },
	  token: readToken,
	  blankLine: function(state) {
		state.inHeaders = state.inSeparator = state.inHeader = false;
	  },
	  languageData: {
		autocomplete: rfc2822.concat(rfc2822NoEmail)
	  }
	};
	
	exports.mbox = mbox;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mirc.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mirc.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function parseWords(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	var specials = parseWords("$! $$ $& $? $+ $abook $abs $active $activecid " +
							  "$activewid $address $addtok $agent $agentname $agentstat $agentver " +
							  "$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime " +
							  "$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind " +
							  "$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes " +
							  "$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color " +
							  "$com $comcall $comchan $comerr $compact $compress $comval $cos $count " +
							  "$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight " +
							  "$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress " +
							  "$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll " +
							  "$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error " +
							  "$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir " +
							  "$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve " +
							  "$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt " +
							  "$group $halted $hash $height $hfind $hget $highlight $hnick $hotline " +
							  "$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil " +
							  "$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect " +
							  "$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile " +
							  "$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive " +
							  "$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock " +
							  "$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer " +
							  "$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext " +
							  "$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode " +
							  "$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile " +
							  "$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly " +
							  "$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree " +
							  "$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo " +
							  "$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex " +
							  "$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline " +
							  "$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin " +
							  "$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname " +
							  "$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped " +
							  "$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp " +
							  "$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel " +
							  "$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver " +
							  "$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
	var keywords = parseWords("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice " +
							  "away background ban bcopy beep bread break breplace bset btrunc bunset bwrite " +
							  "channel clear clearall cline clipboard close cnick color comclose comopen " +
							  "comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver " +
							  "debug dec describe dialog did didtok disable disconnect dlevel dline dll " +
							  "dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace " +
							  "drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable " +
							  "events exit fclose filter findtext finger firewall flash flist flood flush " +
							  "flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove " +
							  "gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd " +
							  "halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear " +
							  "ialmark identd if ignore iline inc invite iuser join kick linesep links list " +
							  "load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice " +
							  "notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice " +
							  "qme qmsg query queryn quit raw reload remini remote remove rename renwin " +
							  "reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini " +
							  "say scid scon server set showmirc signam sline sockaccept sockclose socklist " +
							  "socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite " +
							  "sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize " +
							  "toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho " +
							  "var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum " +
							  "isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower " +
							  "isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs " +
							  "elseif else goto menu nicklist status title icon size option text edit " +
							  "button check radio box scroll list combo link tab item");
	var functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
	var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	function tokenBase(stream, state) {
	  var beforeParams = state.beforeParams;
	  state.beforeParams = false;
	  var ch = stream.next();
	  if (/[\[\]{}\(\),\.]/.test(ch)) {
		if (ch == "(" && beforeParams) state.inParams = true;
		else if (ch == ")") state.inParams = false;
		return null;
	  }
	  else if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  else if (ch == "\\") {
		stream.eat("\\");
		stream.eat(/./);
		return "number";
	  }
	  else if (ch == "/" && stream.eat("*")) {
		return chain(stream, state, tokenComment);
	  }
	  else if (ch == ";" && stream.match(/ *\( *\(/)) {
		return chain(stream, state, tokenUnparsed);
	  }
	  else if (ch == ";" && !state.inParams) {
		stream.skipToEnd();
		return "comment";
	  }
	  else if (ch == '"') {
		stream.eat(/"/);
		return "keyword";
	  }
	  else if (ch == "$") {
		stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
		if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {
		  return "keyword";
		}
		else {
		  state.beforeParams = true;
		  return "builtin";
		}
	  }
	  else if (ch == "%") {
		stream.eatWhile(/[^,\s()]/);
		state.beforeParams = true;
		return "string";
	  }
	  else if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  else {
		stream.eatWhile(/[\w\$_{}]/);
		var word = stream.current().toLowerCase();
		if (keywords && keywords.propertyIsEnumerable(word))
		  return "keyword";
		if (functions && functions.propertyIsEnumerable(word)) {
		  state.beforeParams = true;
		  return "keyword";
		}
		return null;
	  }
	}
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	function tokenUnparsed(stream, state) {
	  var maybeEnd = 0, ch;
	  while (ch = stream.next()) {
		if (ch == ";" && maybeEnd == 2) {
		  state.tokenize = tokenBase;
		  break;
		}
		if (ch == ")")
		  maybeEnd++;
		else if (ch != " ")
		  maybeEnd = 0;
	  }
	  return "meta";
	}
	const mirc = {
	  name: "mirc",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  beforeParams: false,
		  inParams: false
		};
	  },
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  }
	};
	
	exports.mirc = mirc;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mllike.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mllike.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mlLike(parserConfig) {
	  var words = {
		'as': 'keyword',
		'do': 'keyword',
		'else': 'keyword',
		'end': 'keyword',
		'exception': 'keyword',
		'fun': 'keyword',
		'functor': 'keyword',
		'if': 'keyword',
		'in': 'keyword',
		'include': 'keyword',
		'let': 'keyword',
		'of': 'keyword',
		'open': 'keyword',
		'rec': 'keyword',
		'struct': 'keyword',
		'then': 'keyword',
		'type': 'keyword',
		'val': 'keyword',
		'while': 'keyword',
		'with': 'keyword'
	  };
	
	  var extraWords = parserConfig.extraWords || {};
	  for (var prop in extraWords) {
		if (extraWords.hasOwnProperty(prop)) {
		  words[prop] = parserConfig.extraWords[prop];
		}
	  }
	  var hintWords = [];
	  for (var k in words) { hintWords.push(k); }
	
	  function tokenBase(stream, state) {
		var ch = stream.next();
	
		if (ch === '"') {
		  state.tokenize = tokenString;
		  return state.tokenize(stream, state);
		}
		if (ch === '{') {
		  if (stream.eat('|')) {
			state.longString = true;
			state.tokenize = tokenLongString;
			return state.tokenize(stream, state);
		  }
		}
		if (ch === '(') {
		  if (stream.match(/^\*(?!\))/)) {
			state.commentLevel++;
			state.tokenize = tokenComment;
			return state.tokenize(stream, state);
		  }
		}
		if (ch === '~' || ch === '?') {
		  stream.eatWhile(/\w/);
		  return 'variableName.special';
		}
		if (ch === '`') {
		  stream.eatWhile(/\w/);
		  return 'quote';
		}
		if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {
		  stream.skipToEnd();
		  return 'comment';
		}
		if (/\d/.test(ch)) {
		  if (ch === '0' && stream.eat(/[bB]/)) {
			stream.eatWhile(/[01]/);
		  } if (ch === '0' && stream.eat(/[xX]/)) {
			stream.eatWhile(/[0-9a-fA-F]/);
		  } if (ch === '0' && stream.eat(/[oO]/)) {
			stream.eatWhile(/[0-7]/);
		  } else {
			stream.eatWhile(/[\d_]/);
			if (stream.eat('.')) {
			  stream.eatWhile(/[\d]/);
			}
			if (stream.eat(/[eE]/)) {
			  stream.eatWhile(/[\d\-+]/);
			}
		  }
		  return 'number';
		}
		if ( /[+\-*&%=<>!?|@\.~:]/.test(ch)) {
		  return 'operator';
		}
		if (/[\w\xa1-\uffff]/.test(ch)) {
		  stream.eatWhile(/[\w\xa1-\uffff]/);
		  var cur = stream.current();
		  return words.hasOwnProperty(cur) ? words[cur] : 'variable';
		}
		return null
	  }
	
	  function tokenString(stream, state) {
		var next, end = false, escaped = false;
		while ((next = stream.next()) != null) {
		  if (next === '"' && !escaped) {
			end = true;
			break;
		  }
		  escaped = !escaped && next === '\\';
		}
		if (end && !escaped) {
		  state.tokenize = tokenBase;
		}
		return 'string';
	  }
	  function tokenComment(stream, state) {
		var prev, next;
		while(state.commentLevel > 0 && (next = stream.next()) != null) {
		  if (prev === '(' && next === '*') state.commentLevel++;
		  if (prev === '*' && next === ')') state.commentLevel--;
		  prev = next;
		}
		if (state.commentLevel <= 0) {
		  state.tokenize = tokenBase;
		}
		return 'comment';
	  }
	
	  function tokenLongString(stream, state) {
		var prev, next;
		while (state.longString && (next = stream.next()) != null) {
		  if (prev === '|' && next === '}') state.longString = false;
		  prev = next;
		}
		if (!state.longString) {
		  state.tokenize = tokenBase;
		}
		return 'string';
	  }
	
	  return {
		startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},
		token: function(stream, state) {
		  if (stream.eatSpace()) return null;
		  return state.tokenize(stream, state);
		},
	
		languageData: {
		  autocomplete: hintWords,
		  commentTokens: {
			line: parserConfig.slashComments ? "//" : undefined,
			block: {open: "(*", close: "*)"}
		  }
		}
	  };
	}
	const oCaml = mlLike({
	  name: "ocaml",
	  extraWords: {
		'and': 'keyword',
		'assert': 'keyword',
		'begin': 'keyword',
		'class': 'keyword',
		'constraint': 'keyword',
		'done': 'keyword',
		'downto': 'keyword',
		'external': 'keyword',
		'function': 'keyword',
		'initializer': 'keyword',
		'lazy': 'keyword',
		'match': 'keyword',
		'method': 'keyword',
		'module': 'keyword',
		'mutable': 'keyword',
		'new': 'keyword',
		'nonrec': 'keyword',
		'object': 'keyword',
		'private': 'keyword',
		'sig': 'keyword',
		'to': 'keyword',
		'try': 'keyword',
		'value': 'keyword',
		'virtual': 'keyword',
		'when': 'keyword',
	
		// builtins
		'raise': 'builtin',
		'failwith': 'builtin',
		'true': 'builtin',
		'false': 'builtin',
	
		// Pervasives builtins
		'asr': 'builtin',
		'land': 'builtin',
		'lor': 'builtin',
		'lsl': 'builtin',
		'lsr': 'builtin',
		'lxor': 'builtin',
		'mod': 'builtin',
		'or': 'builtin',
	
		// More Pervasives
		'raise_notrace': 'builtin',
		'trace': 'builtin',
		'exit': 'builtin',
		'print_string': 'builtin',
		'print_endline': 'builtin',
	
		 'int': 'type',
		 'float': 'type',
		 'bool': 'type',
		 'char': 'type',
		 'string': 'type',
		 'unit': 'type',
	
		 // Modules
		 'List': 'builtin'
	  }
	});
	
	const fSharp = mlLike({
	  name: "fsharp",
	  extraWords: {
		'abstract': 'keyword',
		'assert': 'keyword',
		'base': 'keyword',
		'begin': 'keyword',
		'class': 'keyword',
		'default': 'keyword',
		'delegate': 'keyword',
		'do!': 'keyword',
		'done': 'keyword',
		'downcast': 'keyword',
		'downto': 'keyword',
		'elif': 'keyword',
		'extern': 'keyword',
		'finally': 'keyword',
		'for': 'keyword',
		'function': 'keyword',
		'global': 'keyword',
		'inherit': 'keyword',
		'inline': 'keyword',
		'interface': 'keyword',
		'internal': 'keyword',
		'lazy': 'keyword',
		'let!': 'keyword',
		'match': 'keyword',
		'member': 'keyword',
		'module': 'keyword',
		'mutable': 'keyword',
		'namespace': 'keyword',
		'new': 'keyword',
		'null': 'keyword',
		'override': 'keyword',
		'private': 'keyword',
		'public': 'keyword',
		'return!': 'keyword',
		'return': 'keyword',
		'select': 'keyword',
		'static': 'keyword',
		'to': 'keyword',
		'try': 'keyword',
		'upcast': 'keyword',
		'use!': 'keyword',
		'use': 'keyword',
		'void': 'keyword',
		'when': 'keyword',
		'yield!': 'keyword',
		'yield': 'keyword',
	
		// Reserved words
		'atomic': 'keyword',
		'break': 'keyword',
		'checked': 'keyword',
		'component': 'keyword',
		'const': 'keyword',
		'constraint': 'keyword',
		'constructor': 'keyword',
		'continue': 'keyword',
		'eager': 'keyword',
		'event': 'keyword',
		'external': 'keyword',
		'fixed': 'keyword',
		'method': 'keyword',
		'mixin': 'keyword',
		'object': 'keyword',
		'parallel': 'keyword',
		'process': 'keyword',
		'protected': 'keyword',
		'pure': 'keyword',
		'sealed': 'keyword',
		'tailcall': 'keyword',
		'trait': 'keyword',
		'virtual': 'keyword',
		'volatile': 'keyword',
	
		// builtins
		'List': 'builtin',
		'Seq': 'builtin',
		'Map': 'builtin',
		'Set': 'builtin',
		'Option': 'builtin',
		'int': 'builtin',
		'string': 'builtin',
		'not': 'builtin',
		'true': 'builtin',
		'false': 'builtin',
	
		'raise': 'builtin',
		'failwith': 'builtin'
	  },
	  slashComments: true
	});
	
	const sml = mlLike({
	  name: "sml",
	  extraWords: {
		'abstype': 'keyword',
		'and': 'keyword',
		'andalso': 'keyword',
		'case': 'keyword',
		'datatype': 'keyword',
		'fn': 'keyword',
		'handle': 'keyword',
		'infix': 'keyword',
		'infixr': 'keyword',
		'local': 'keyword',
		'nonfix': 'keyword',
		'op': 'keyword',
		'orelse': 'keyword',
		'raise': 'keyword',
		'withtype': 'keyword',
		'eqtype': 'keyword',
		'sharing': 'keyword',
		'sig': 'keyword',
		'signature': 'keyword',
		'structure': 'keyword',
		'where': 'keyword',
		'true': 'keyword',
		'false': 'keyword',
	
		// types
		'int': 'builtin',
		'real': 'builtin',
		'string': 'builtin',
		'char': 'builtin',
		'bool': 'builtin'
	  },
	  slashComments: true
	});
	
	exports.fSharp = fSharp;
	exports.oCaml = oCaml;
	exports.sml = sml;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/modelica.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/modelica.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i=0; i<words.length; ++i)
		obj[words[i]] = true;
	  return obj;
	}
	
	var keywords = words("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within");
	var builtin = words("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh");
	var atoms = words("Real Boolean Integer String");
	
	var completions = [].concat(Object.keys(keywords), Object.keys(builtin), Object.keys(atoms));
	
	var isSingleOperatorChar = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
	var isDoubleOperatorChar = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
	var isDigit = /[0-9]/;
	var isNonDigit = /[_a-zA-Z]/;
	
	function tokenLineComment(stream, state) {
	  stream.skipToEnd();
	  state.tokenize = null;
	  return "comment";
	}
	
	function tokenBlockComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (maybeEnd && ch == "/") {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenString(stream, state) {
	  var escaped = false, ch;
	  while ((ch = stream.next()) != null) {
		if (ch == '"' && !escaped) {
		  state.tokenize = null;
		  state.sol = false;
		  break;
		}
		escaped = !escaped && ch == "\\";
	  }
	
	  return "string";
	}
	
	function tokenIdent(stream, state) {
	  stream.eatWhile(isDigit);
	  while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }
	
	
	  var cur = stream.current();
	
	  if(state.sol && (cur == "package" || cur == "model" || cur == "when" || cur == "connector")) state.level++;
	  else if(state.sol && cur == "end" && state.level > 0) state.level--;
	
	  state.tokenize = null;
	  state.sol = false;
	
	  if (keywords.propertyIsEnumerable(cur)) return "keyword";
	  else if (builtin.propertyIsEnumerable(cur)) return "builtin";
	  else if (atoms.propertyIsEnumerable(cur)) return "atom";
	  else return "variable";
	}
	
	function tokenQIdent(stream, state) {
	  while (stream.eat(/[^']/)) { }
	
	  state.tokenize = null;
	  state.sol = false;
	
	  if(stream.eat("'"))
		return "variable";
	  else
		return "error";
	}
	
	function tokenUnsignedNumber(stream, state) {
	  stream.eatWhile(isDigit);
	  if (stream.eat('.')) {
		stream.eatWhile(isDigit);
	  }
	  if (stream.eat('e') || stream.eat('E')) {
		if (!stream.eat('-'))
		  stream.eat('+');
		stream.eatWhile(isDigit);
	  }
	
	  state.tokenize = null;
	  state.sol = false;
	  return "number";
	}
	
	// Interface
	const modelica = {
	  name: "modelica",
	  startState: function() {
		return {
		  tokenize: null,
		  level: 0,
		  sol: true
		};
	  },
	
	  token: function(stream, state) {
		if(state.tokenize != null) {
		  return state.tokenize(stream, state);
		}
	
		if(stream.sol()) {
		  state.sol = true;
		}
	
		// WHITESPACE
		if(stream.eatSpace()) {
		  state.tokenize = null;
		  return null;
		}
	
		var ch = stream.next();
	
		// LINECOMMENT
		if(ch == '/' && stream.eat('/')) {
		  state.tokenize = tokenLineComment;
		}
		// BLOCKCOMMENT
		else if(ch == '/' && stream.eat('*')) {
		  state.tokenize = tokenBlockComment;
		}
		// TWO SYMBOL TOKENS
		else if(isDoubleOperatorChar.test(ch+stream.peek())) {
		  stream.next();
		  state.tokenize = null;
		  return "operator";
		}
		// SINGLE SYMBOL TOKENS
		else if(isSingleOperatorChar.test(ch)) {
		  state.tokenize = null;
		  return "operator";
		}
		// IDENT
		else if(isNonDigit.test(ch)) {
		  state.tokenize = tokenIdent;
		}
		// Q-IDENT
		else if(ch == "'" && stream.peek() && stream.peek() != "'") {
		  state.tokenize = tokenQIdent;
		}
		// STRING
		else if(ch == '"') {
		  state.tokenize = tokenString;
		}
		// UNSIGNED_NUMBER
		else if(isDigit.test(ch)) {
		  state.tokenize = tokenUnsignedNumber;
		}
		// ERROR
		else {
		  state.tokenize = null;
		  return "error";
		}
	
		return state.tokenize(stream, state);
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != null) return null;
	
		var level = state.level;
		if(/(algorithm)/.test(textAfter)) level--;
		if(/(equation)/.test(textAfter)) level--;
		if(/(initial algorithm)/.test(textAfter)) level--;
		if(/(initial equation)/.test(textAfter)) level--;
		if(/(end)/.test(textAfter)) level--;
	
		if(level > 0)
		  return cx.unit*level;
		else
		  return 0;
	  },
	
	  languageData: {
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		autocomplete: completions
	  }
	};
	
	exports.modelica = modelica;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mscgen.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mscgen.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkParser(lang) {
	  return {
		name: "mscgen",
		startState: startStateFn,
		copyState: copyStateFn,
		token: produceTokenFunction(lang),
		languageData: {
		  commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
		}
	  }
	}
	
	const mscgen = mkParser({
	  "keywords" : ["msc"],
	  "options" : ["hscale", "width", "arcgradient", "wordwraparcs"],
	  "constants" : ["true", "false", "on", "off"],
	  "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
	  "brackets" : ["\\{", "\\}"], // [ and  ] are brackets too, but these get handled in with lists
	  "arcsWords" : ["note", "abox", "rbox", "box"],
	  "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
	  "singlecomment" : ["//", "#"],
	  "operators" : ["="]
	});
	
	const msgenny = mkParser({
	  "keywords" : null,
	  "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
	  "constants" : ["true", "false", "on", "off", "auto"],
	  "attributes" : null,
	  "brackets" : ["\\{", "\\}"],
	  "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
	  "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
	  "singlecomment" : ["//", "#"],
	  "operators" : ["="]
	});
	
	const xu = mkParser({
	  "keywords" : ["msc", "xu"],
	  "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
	  "constants" : ["true", "false", "on", "off", "auto"],
	  "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
	  "brackets" : ["\\{", "\\}"],  // [ and  ] are brackets too, but these get handled in with lists
	  "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
	  "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
	  "singlecomment" : ["//", "#"],
	  "operators" : ["="]
	});
	
	function wordRegexpBoundary(pWords) {
	  return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
	}
	
	function wordRegexp(pWords) {
	  return new RegExp("^(?:" + pWords.join("|") + ")", "i");
	}
	
	function startStateFn() {
	  return {
		inComment : false,
		inString : false,
		inAttributeList : false,
		inScript : false
	  };
	}
	
	function copyStateFn(pState) {
	  return {
		inComment : pState.inComment,
		inString : pState.inString,
		inAttributeList : pState.inAttributeList,
		inScript : pState.inScript
	  };
	}
	
	function produceTokenFunction(pConfig) {
	  return function(pStream, pState) {
		if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {
		  return "bracket";
		}
		/* comments */
		if (!pState.inComment) {
		  if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
			pState.inComment = true;
			return "comment";
		  }
		  if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {
			pStream.skipToEnd();
			return "comment";
		  }
		}
		if (pState.inComment) {
		  if (pStream.match(/[^\*\/]*\*\//, true, true))
			pState.inComment = false;
		  else
			pStream.skipToEnd();
		  return "comment";
		}
		/* strings */
		if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
		  pState.inString = true;
		  return "string";
		}
		if (pState.inString) {
		  if (pStream.match(/[^\"]*\"/, true, true))
			pState.inString = false;
		  else
			pStream.skipToEnd();
		  return "string";
		}
		/* keywords & operators */
		if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
		  return "keyword";
	
		if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
		  return "keyword";
	
		if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
		  return "keyword";
	
		if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))
		  return "keyword";
	
		if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))
		  return "operator";
	
		if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))
		  return "variable";
	
		/* attribute lists */
		if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {
		  pConfig.inAttributeList = true;
		  return "bracket";
		}
		if (pConfig.inAttributeList) {
		  if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
			return "attribute";
		  }
		  if (pStream.match(']', true, true)) {
			pConfig.inAttributeList = false;
			return "bracket";
		  }
		}
	
		pStream.next();
		return null
	  };
	}
	
	exports.mscgen = mscgen;
	exports.msgenny = msgenny;
	exports.xu = xu;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/mumps.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/mumps.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
	}
	
	var singleOperators = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
	var doubleOperators = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
	var singleDelimiters = new RegExp("^[\\.,:]");
	var brackets = new RegExp("[()]");
	var identifiers = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
	var commandKeywords = ["break","close","do","else","for","goto", "halt", "hang", "if", "job","kill","lock","merge","new","open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b","c","d","e","f","g", "h", "i", "j","k","l","m","n","o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
	// The following list includes intrinsic functions _and_ special variables
	var intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
	var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);
	var command = wordRegexp(commandKeywords);
	
	function tokenBase(stream, state) {
	  if (stream.sol()) {
		state.label = true;
		state.commandMode = 0;
	  }
	
	  // The <space> character has meaning in MUMPS. Ignoring consecutive
	  // spaces would interfere with interpreting whether the next non-space
	  // character belongs to the command or argument context.
	
	  // Examine each character and update a mode variable whose interpretation is:
	  //   >0 => command    0 => argument    <0 => command post-conditional
	  var ch = stream.peek();
	
	  if (ch == " " || ch == "\t") { // Pre-process <space>
		state.label = false;
		if (state.commandMode == 0)
		  state.commandMode = 1;
		else if ((state.commandMode < 0) || (state.commandMode == 2))
		  state.commandMode = 0;
	  } else if ((ch != ".") && (state.commandMode > 0)) {
		if (ch == ":")
		  state.commandMode = -1;   // SIS - Command post-conditional
		else
		  state.commandMode = 2;
	  }
	
	  // Do not color parameter list as line tag
	  if ((ch === "(") || (ch === "\u0009"))
		state.label = false;
	
	  // MUMPS comment starts with ";"
	  if (ch === ";") {
		stream.skipToEnd();
		return "comment";
	  }
	
	  // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
	  if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
		return "number";
	
	  // Handle Strings
	  if (ch == '"') {
		if (stream.skipTo('"')) {
		  stream.next();
		  return "string";
		} else {
		  stream.skipToEnd();
		  return "error";
		}
	  }
	
	  // Handle operators and Delimiters
	  if (stream.match(doubleOperators) || stream.match(singleOperators))
		return "operator";
	
	  // Prevents leading "." in DO block from falling through to error
	  if (stream.match(singleDelimiters))
		return null;
	
	  if (brackets.test(ch)) {
		stream.next();
		return "bracket";
	  }
	
	  if (state.commandMode > 0 && stream.match(command))
		return "controlKeyword";
	
	  if (stream.match(intrinsicFuncs))
		return "builtin";
	
	  if (stream.match(identifiers))
		return "variable";
	
	  // Detect dollar-sign when not a documented intrinsic function
	  // "^" may introduce a GVN or SSVN - Color same as function
	  if (ch === "$" || ch === "^") {
		stream.next();
		return "builtin";
	  }
	
	  // MUMPS Indirection
	  if (ch === "@") {
		stream.next();
		return "string.special";
	  }
	
	  if (/[\w%]/.test(ch)) {
		stream.eatWhile(/[\w%]/);
		return "variable";
	  }
	
	  // Handle non-detected items
	  stream.next();
	  return "error";
	}
	
	const mumps = {
	  name: "mumps",
	  startState: function() {
		return {
		  label: false,
		  commandMode: 0
		};
	  },
	
	  token: function(stream, state) {
		var style = tokenBase(stream, state);
		if (state.label) return "tag";
		return style;
	  }
	};
	
	exports.mumps = mumps;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/nginx.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/nginx.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var keywords = words(
	  /* ngxDirectiveControl */ "break return rewrite set" +
		/* ngxDirective */ " accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
	);
	
	var keywords_block = words(
	  /* ngxDirectiveBlock */ "http mail events server types location upstream charset_map limit_except if geo map"
	);
	
	var keywords_important = words(
	  /* ngxDirectiveImportant */ "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
	);
	
	var type;
	function ret(style, tp) {type = tp; return style;}
	
	function tokenBase(stream, state) {
	
	
	  stream.eatWhile(/[\w\$_]/);
	
	  var cur = stream.current();
	
	
	  if (keywords.propertyIsEnumerable(cur)) {
		return "keyword";
	  }
	  else if (keywords_block.propertyIsEnumerable(cur)) {
		return "controlKeyword";
	  }
	  else if (keywords_important.propertyIsEnumerable(cur)) {
		return "controlKeyword";
	  }
	  /**/
	
	  var ch = stream.next();
	  if (ch == "@") {stream.eatWhile(/[\w\\\-]/); return ret("meta", stream.current());}
	  else if (ch == "/" && stream.eat("*")) {
		state.tokenize = tokenCComment;
		return tokenCComment(stream, state);
	  }
	  else if (ch == "<" && stream.eat("!")) {
		state.tokenize = tokenSGMLComment;
		return tokenSGMLComment(stream, state);
	  }
	  else if (ch == "=") ret(null, "compare");
	  else if ((ch == "~" || ch == "|") && stream.eat("=")) return ret(null, "compare");
	  else if (ch == "\"" || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  else if (ch == "#") {
		stream.skipToEnd();
		return ret("comment", "comment");
	  }
	  else if (ch == "!") {
		stream.match(/^\s*\w*/);
		return ret("keyword", "important");
	  }
	  else if (/\d/.test(ch)) {
		stream.eatWhile(/[\w.%]/);
		return ret("number", "unit");
	  }
	  else if (/[,.+>*\/]/.test(ch)) {
		return ret(null, "select-op");
	  }
	  else if (/[;{}:\[\]]/.test(ch)) {
		return ret(null, ch);
	  }
	  else {
		stream.eatWhile(/[\w\\\-]/);
		return ret("variable", "variable");
	  }
	}
	
	function tokenCComment(stream, state) {
	  var maybeEnd = false, ch;
	  while ((ch = stream.next()) != null) {
		if (maybeEnd && ch == "/") {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return ret("comment", "comment");
	}
	
	function tokenSGMLComment(stream, state) {
	  var dashes = 0, ch;
	  while ((ch = stream.next()) != null) {
		if (dashes >= 2 && ch == ">") {
		  state.tokenize = tokenBase;
		  break;
		}
		dashes = (ch == "-") ? dashes + 1 : 0;
	  }
	  return ret("comment", "comment");
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped)
			break;
		  escaped = !escaped && ch == "\\";
		}
		if (!escaped) state.tokenize = tokenBase;
		return ret("string", "string");
	  };
	}
	
	const nginx = {
	  name: "nginx",
	  startState: function() {
		return {tokenize: tokenBase,
				baseIndent: 0,
				stack: []};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		type = null;
		var style = state.tokenize(stream, state);
	
		var context = state.stack[state.stack.length-1];
		if (type == "hash" && context == "rule") style = "atom";
		else if (style == "variable") {
		  if (context == "rule") style = "number";
		  else if (!context || context == "@media{") style = "tag";
		}
	
		if (context == "rule" && /^[\{\};]$/.test(type))
		  state.stack.pop();
		if (type == "{") {
		  if (context == "@media") state.stack[state.stack.length-1] = "@media{";
		  else state.stack.push("{");
		}
		else if (type == "}") state.stack.pop();
		else if (type == "@media") state.stack.push("@media");
		else if (context == "{" && type != "comment") state.stack.push("rule");
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var n = state.stack.length;
		if (/^\}/.test(textAfter))
		  n -= state.stack[state.stack.length-1] == "rule" ? 2 : 1;
		return state.baseIndent + n * cx.unit;
	  },
	
	  languageData: {
		indentOnInput: /^\s*\}$/
	  }
	};
	
	exports.nginx = nginx;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/nsis.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/nsis.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function simpleMode(states) {
	  ensureState(states, "start");
	  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
	  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
		var list = states_[state] = [], orig = states[state];
		for (var i = 0; i < orig.length; i++) {
		  var data = orig[i];
		  list.push(new Rule(data, states));
		  if (data.indent || data.dedent) hasIndentation = true;
		}
	  }
	  return {
		name: meta.name,
		startState: function() {
		  return {state: "start", pending: null, indent: hasIndentation ? [] : null};
		},
		copyState: function(state) {
		  var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
		  if (state.stack)
			s.stack = state.stack.slice(0);
		  return s;
		},
		token: tokenFunction(states_),
		indent: indentFunction(states_, meta),
		languageData: meta
	  }
	}
	function ensureState(states, name) {
	  if (!states.hasOwnProperty(name))
		throw new Error("Undefined state " + name + " in simple mode");
	}
	
	function toRegex(val, caret) {
	  if (!val) return /(?:)/;
	  var flags = "";
	  if (val instanceof RegExp) {
		if (val.ignoreCase) flags = "i";
		val = val.source;
	  } else {
		val = String(val);
	  }
	  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
	}
	
	function asToken(val) {
	  if (!val) return null;
	  if (val.apply) return val
	  if (typeof val == "string") return val.replace(/\./g, " ");
	  var result = [];
	  for (var i = 0; i < val.length; i++)
		result.push(val[i] && val[i].replace(/\./g, " "));
	  return result;
	}
	
	function Rule(data, states) {
	  if (data.next || data.push) ensureState(states, data.next || data.push);
	  this.regex = toRegex(data.regex);
	  this.token = asToken(data.token);
	  this.data = data;
	}
	
	function tokenFunction(states) {
	  return function(stream, state) {
		if (state.pending) {
		  var pend = state.pending.shift();
		  if (state.pending.length == 0) state.pending = null;
		  stream.pos += pend.text.length;
		  return pend.token;
		}
	
		var curState = states[state.state];
		for (var i = 0; i < curState.length; i++) {
		  var rule = curState[i];
		  var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
		  if (matches) {
			if (rule.data.next) {
			  state.state = rule.data.next;
			} else if (rule.data.push) {
			  (state.stack || (state.stack = [])).push(state.state);
			  state.state = rule.data.push;
			} else if (rule.data.pop && state.stack && state.stack.length) {
			  state.state = state.stack.pop();
			}
	
			if (rule.data.indent)
			  state.indent.push(stream.indentation() + stream.indentUnit);
			if (rule.data.dedent)
			  state.indent.pop();
			var token = rule.token;
			if (token && token.apply) token = token(matches);
			if (matches.length > 2 && rule.token && typeof rule.token != "string") {
			  state.pending = [];
			  for (var j = 2; j < matches.length; j++)
				if (matches[j])
				  state.pending.push({text: matches[j], token: rule.token[j - 1]});
			  stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
			  return token[0];
			} else if (token && token.join) {
			  return token[0];
			} else {
			  return token;
			}
		  }
		}
		stream.next();
		return null;
	  };
	}
	
	function indentFunction(states, meta) {
	  return function(state, textAfter) {
		if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
		  return null
	
		var pos = state.indent.length - 1, rules = states[state.state];
		scan: for (;;) {
		  for (var i = 0; i < rules.length; i++) {
			var rule = rules[i];
			if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
			  var m = rule.regex.exec(textAfter);
			  if (m && m[0]) {
				pos--;
				if (rule.next || rule.push) rules = states[rule.next || rule.push];
				textAfter = textAfter.slice(m[0].length);
				continue scan;
			  }
			}
		  }
		  break;
		}
		return pos < 0 ? 0 : state.indent[pos];
	  };
	}
	
	const nsis = simpleMode({
	  start:[
		// Numbers
		{regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number"},
	
		// Strings
		{ regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
		{ regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
		{ regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },
	
		// Compile Time Commands
		{regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|assert|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i, token: "keyword"},
	
		// Conditional Compilation
		{regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i, token: "keyword", indent: true},
		{regex: /^\s*(?:\!(else|endif|macroend))\b/i, token: "keyword", dedent: true},
	
		// Runtime Commands
		{regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i, token: "keyword"},
		{regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i, token: "keyword", indent: true},
		{regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i, token: "keyword", dedent: true},
	
		// Command Options
		{regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i, token: "atom"},
		{regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i, token: "builtin"},
	
		// LogicLib.nsh
		{regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i, token: "variable-2", indent: true},
	
		// FileFunc.nsh
		{regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i, token: "variable-2", dedent: true},
	
		// Memento.nsh
		{regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i, token: "variable-2", dedent: true},
	
		// TextFunc.nsh
		{regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i, token: "variable-2", dedent: true},
	
		// WinVer.nsh
		{regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i, token: "variable", dedent: true},
	
		// WordFunc.nsh
		{regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i, token: "keyword", dedent: true},
	
		// x64.nsh
		{regex: /\$\{(?:RunningX64)\}/i, token: "variable", dedent: true},
		{regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i, token: "keyword", dedent: true},
	
		// Line Comment
		{regex: /(#|;).*/, token: "comment"},
	
		// Block Comment
		{regex: /\/\*/, token: "comment", next: "comment"},
	
		// Operator
		{regex: /[-+\/*=<>!]+/, token: "operator"},
	
		// Variable
		{regex: /\$\w[\w\.]*/, token: "variable"},
	
		// Constant
		{regex: /\${[\!\w\.:-]+}/, token: "variableName.constant"},
	
		// Language String
		{regex: /\$\([\!\w\.:-]+\)/, token: "atom"}
	  ],
	  comment: [
		{regex: /.*?\*\//, token: "comment", next: "start"},
		{regex: /.*/, token: "comment"}
	  ],
	  languageData: {
		name: "nsis",
		indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
		commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
	  }
	});
	
	exports.nsis = nsis;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ntriples.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ntriples.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var Location = {
	  PRE_SUBJECT         : 0,
	  WRITING_SUB_URI     : 1,
	  WRITING_BNODE_URI   : 2,
	  PRE_PRED            : 3,
	  WRITING_PRED_URI    : 4,
	  PRE_OBJ             : 5,
	  WRITING_OBJ_URI     : 6,
	  WRITING_OBJ_BNODE   : 7,
	  WRITING_OBJ_LITERAL : 8,
	  WRITING_LIT_LANG    : 9,
	  WRITING_LIT_TYPE    : 10,
	  POST_OBJ            : 11,
	  ERROR               : 12
	};
	function transitState(currState, c) {
	  var currLocation = currState.location;
	  var ret;
	
	  // Opening.
	  if     (currLocation == Location.PRE_SUBJECT && c == '<') ret = Location.WRITING_SUB_URI;
	  else if(currLocation == Location.PRE_SUBJECT && c == '_') ret = Location.WRITING_BNODE_URI;
	  else if(currLocation == Location.PRE_PRED    && c == '<') ret = Location.WRITING_PRED_URI;
	  else if(currLocation == Location.PRE_OBJ     && c == '<') ret = Location.WRITING_OBJ_URI;
	  else if(currLocation == Location.PRE_OBJ     && c == '_') ret = Location.WRITING_OBJ_BNODE;
	  else if(currLocation == Location.PRE_OBJ     && c == '"') ret = Location.WRITING_OBJ_LITERAL;
	
	  // Closing.
	  else if(currLocation == Location.WRITING_SUB_URI     && c == '>') ret = Location.PRE_PRED;
	  else if(currLocation == Location.WRITING_BNODE_URI   && c == ' ') ret = Location.PRE_PRED;
	  else if(currLocation == Location.WRITING_PRED_URI    && c == '>') ret = Location.PRE_OBJ;
	  else if(currLocation == Location.WRITING_OBJ_URI     && c == '>') ret = Location.POST_OBJ;
	  else if(currLocation == Location.WRITING_OBJ_BNODE   && c == ' ') ret = Location.POST_OBJ;
	  else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '"') ret = Location.POST_OBJ;
	  else if(currLocation == Location.WRITING_LIT_LANG && c == ' ') ret = Location.POST_OBJ;
	  else if(currLocation == Location.WRITING_LIT_TYPE && c == '>') ret = Location.POST_OBJ;
	
	  // Closing typed and language literal.
	  else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '@') ret = Location.WRITING_LIT_LANG;
	  else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '^') ret = Location.WRITING_LIT_TYPE;
	
	  // Spaces.
	  else if( c == ' ' &&
			   (
				 currLocation == Location.PRE_SUBJECT ||
				   currLocation == Location.PRE_PRED    ||
				   currLocation == Location.PRE_OBJ     ||
				   currLocation == Location.POST_OBJ
			   )
			 ) ret = currLocation;
	
	  // Reset.
	  else if(currLocation == Location.POST_OBJ && c == '.') ret = Location.PRE_SUBJECT;
	
	  // Error
	  else ret = Location.ERROR;
	
	  currState.location=ret;
	}
	
	const ntriples = {
	  name: "ntriples",
	  startState: function() {
		return {
		  location : Location.PRE_SUBJECT,
		  uris     : [],
		  anchors  : [],
		  bnodes   : [],
		  langs    : [],
		  types    : []
		};
	  },
	  token: function(stream, state) {
		var ch = stream.next();
		if(ch == '<') {
		  transitState(state, ch);
		  var parsedURI = '';
		  stream.eatWhile( function(c) { if( c != '#' && c != '>' ) { parsedURI += c; return true; } return false;} );
		  state.uris.push(parsedURI);
		  if( stream.match('#', false) ) return 'variable';
		  stream.next();
		  transitState(state, '>');
		  return 'variable';
		}
		if(ch == '#') {
		  var parsedAnchor = '';
		  stream.eatWhile(function(c) { if(c != '>' && c != ' ') { parsedAnchor+= c; return true; } return false;});
		  state.anchors.push(parsedAnchor);
		  return 'url';
		}
		if(ch == '>') {
		  transitState(state, '>');
		  return 'variable';
		}
		if(ch == '_') {
		  transitState(state, ch);
		  var parsedBNode = '';
		  stream.eatWhile(function(c) { if( c != ' ' ) { parsedBNode += c; return true; } return false;});
		  state.bnodes.push(parsedBNode);
		  stream.next();
		  transitState(state, ' ');
		  return 'builtin';
		}
		if(ch == '"') {
		  transitState(state, ch);
		  stream.eatWhile( function(c) { return c != '"'; } );
		  stream.next();
		  if( stream.peek() != '@' && stream.peek() != '^' ) {
			transitState(state, '"');
		  }
		  return 'string';
		}
		if( ch == '@' ) {
		  transitState(state, '@');
		  var parsedLang = '';
		  stream.eatWhile(function(c) { if( c != ' ' ) { parsedLang += c; return true; } return false;});
		  state.langs.push(parsedLang);
		  stream.next();
		  transitState(state, ' ');
		  return 'string.special';
		}
		if( ch == '^' ) {
		  stream.next();
		  transitState(state, '^');
		  var parsedType = '';
		  stream.eatWhile(function(c) { if( c != '>' ) { parsedType += c; return true; } return false;} );
		  state.types.push(parsedType);
		  stream.next();
		  transitState(state, '>');
		  return 'variable';
		}
		if( ch == ' ' ) {
		  transitState(state, ch);
		}
		if( ch == '.' ) {
		  transitState(state, ch);
		}
	  }
	};
	
	exports.ntriples = ntriples;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/octave.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/octave.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	
	var singleOperators = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
	var singleDelimiters = new RegExp('^[\\(\\[\\{\\},:=;\\.]');
	var doubleOperators = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
	var doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
	var tripleDelimiters = new RegExp("^((>>=)|(<<=))");
	var expressionEnd = new RegExp("^[\\]\\)]");
	var identifiers = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");
	
	var builtins = wordRegexp([
	  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',
	  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',
	  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',
	  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',
	  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',
	  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',
	  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'
	]);
	
	var keywords = wordRegexp([
	  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',
	  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',
	  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',
	  'continue', 'pkg'
	]);
	
	
	// tokenizers
	function tokenTranspose(stream, state) {
	  if (!stream.sol() && stream.peek() === '\'') {
		stream.next();
		state.tokenize = tokenBase;
		return 'operator';
	  }
	  state.tokenize = tokenBase;
	  return tokenBase(stream, state);
	}
	
	
	function tokenComment(stream, state) {
	  if (stream.match(/^.*%}/)) {
		state.tokenize = tokenBase;
		return 'comment';
	  }  stream.skipToEnd();
	  return 'comment';
	}
	
	function tokenBase(stream, state) {
	  // whitespaces
	  if (stream.eatSpace()) return null;
	
	  // Handle one line Comments
	  if (stream.match('%{')){
		state.tokenize = tokenComment;
		stream.skipToEnd();
		return 'comment';
	  }
	
	  if (stream.match(/^[%#]/)){
		stream.skipToEnd();
		return 'comment';
	  }
	
	  // Handle Number Literals
	  if (stream.match(/^[0-9\.+-]/, false)) {
		if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
		  stream.tokenize = tokenBase;
		  return 'number'; }    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }  }
	  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; }
	  // Handle Strings
	  var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
	  if (m) { return m[1] ? 'string' : "error"; }
	
	  // Handle words
	  if (stream.match(keywords)) { return 'keyword'; }  if (stream.match(builtins)) { return 'builtin'; }  if (stream.match(identifiers)) { return 'variable'; }
	  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; }  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; }
	  if (stream.match(expressionEnd)) {
		state.tokenize = tokenTranspose;
		return null;
	  }
	
	  // Handle non-detected items
	  stream.next();
	  return 'error';
	}
	
	const octave = {
	  name: "octave",
	
	  startState: function() {
		return {
		  tokenize: tokenBase
		};
	  },
	
	  token: function(stream, state) {
		var style = state.tokenize(stream, state);
		if (style === 'number' || style === 'variable'){
		  state.tokenize = tokenTranspose;
		}
		return style;
	  },
	
	  languageData: {
		commentTokens: {line: "%"}
	  }
	};
	
	exports.octave = octave;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/oz.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/oz.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	
	var singleOperators = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
	var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
	var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;
	
	var middle = ["in", "then", "else", "of", "elseof", "elsecase", "elseif", "catch",
				  "finally", "with", "require", "prepare", "import", "export", "define", "do"];
	var end = ["end"];
	
	var atoms = wordRegexp(["true", "false", "nil", "unit"]);
	var commonKeywords = wordRegexp(["andthen", "at", "attr", "declare", "feat", "from", "lex",
									 "mod", "div", "mode", "orelse", "parser", "prod", "prop", "scanner", "self", "syn", "token"]);
	var openingKeywords = wordRegexp(["local", "proc", "fun", "case", "class", "if", "cond", "or", "dis",
									  "choice", "not", "thread", "try", "raise", "lock", "for", "suchthat", "meth", "functor"]);
	var middleKeywords = wordRegexp(middle);
	var endKeywords = wordRegexp(end);
	
	// Tokenizers
	function tokenBase(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  // Brackets
	  if(stream.match(/[{}]/)) {
		return "bracket";
	  }
	
	  // Special [] keyword
	  if (stream.match('[]')) {
		return "keyword"
	  }
	
	  // Operators
	  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {
		return "operator";
	  }
	
	  // Atoms
	  if(stream.match(atoms)) {
		return 'atom';
	  }
	
	  // Opening keywords
	  var matched = stream.match(openingKeywords);
	  if (matched) {
		if (!state.doInCurrentLine)
		  state.currentIndent++;
		else
		  state.doInCurrentLine = false;
	
		// Special matching for signatures
		if(matched[0] == "proc" || matched[0] == "fun")
		  state.tokenize = tokenFunProc;
		else if(matched[0] == "class")
		  state.tokenize = tokenClass;
		else if(matched[0] == "meth")
		  state.tokenize = tokenMeth;
	
		return 'keyword';
	  }
	
	  // Middle and other keywords
	  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {
		return "keyword"
	  }
	
	  // End keywords
	  if (stream.match(endKeywords)) {
		state.currentIndent--;
		return 'keyword';
	  }
	
	  // Eat the next char for next comparisons
	  var ch = stream.next();
	
	  // Strings
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	
	  // Numbers
	  if (/[~\d]/.test(ch)) {
		if (ch == "~") {
		  if(! /^[0-9]/.test(stream.peek()))
			return null;
		  else if (( stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
			return "number";
		}
	
		if ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
		  return "number";
	
		return null;
	  }
	
	  // Comments
	  if (ch == "%") {
		stream.skipToEnd();
		return 'comment';
	  }
	  else if (ch == "/") {
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
	  }
	
	  // Single operators
	  if(singleOperators.test(ch)) {
		return "operator";
	  }
	
	  // If nothing match, we skip the entire alphanumerical block
	  stream.eatWhile(/\w/);
	
	  return "variable";
	}
	
	function tokenClass(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
	  state.tokenize = tokenBase;
	  return "type"
	}
	
	function tokenMeth(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
	  state.tokenize = tokenBase;
	  return "def"
	}
	
	function tokenFunProc(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  if(!state.hasPassedFirstStage && stream.eat("{")) {
		state.hasPassedFirstStage = true;
		return "bracket";
	  }
	  else if(state.hasPassedFirstStage) {
		stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
		state.hasPassedFirstStage = false;
		state.tokenize = tokenBase;
		return "def"
	  }
	  else {
		state.tokenize = tokenBase;
		return null;
	  }
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenString(quote) {
	  return function (stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			end = true;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped)
		  state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	function buildElectricInputRegEx() {
	  // Reindentation should occur on [] or on a match of any of
	  // the block closing keywords, at the end of a line.
	  var allClosings = middle.concat(end);
	  return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
	}
	
	const oz = {
	  name: "oz",
	
	  startState: function () {
		return {
		  tokenize: tokenBase,
		  currentIndent: 0,
		  doInCurrentLine: false,
		  hasPassedFirstStage: false
		};
	  },
	
	  token: function (stream, state) {
		if (stream.sol())
		  state.doInCurrentLine = 0;
	
		return state.tokenize(stream, state);
	  },
	
	  indent: function (state, textAfter, cx) {
		var trueText = textAfter.replace(/^\s+|\s+$/g, '');
	
		if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\[])/))
		  return cx.unit * (state.currentIndent - 1);
	
		if (state.currentIndent < 0)
		  return 0;
	
		return state.currentIndent * cx.unit
	  },
	
	  languageData: {
		indentOnInut: buildElectricInputRegEx(),
		commentTokens: {line: "%", block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.oz = oz;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/pascal.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/pascal.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	var keywords = words(
	  "absolute and array asm begin case const constructor destructor div do " +
		"downto else end file for function goto if implementation in inherited " +
		"inline interface label mod nil not object of operator or packed procedure " +
		"program record reintroduce repeat self set shl shr string then to type " +
		"unit until uses var while with xor as class dispinterface except exports " +
		"finalization finally initialization inline is library on out packed " +
		"property raise resourcestring threadvar try absolute abstract alias " +
		"assembler bitpacked break cdecl continue cppdecl cvar default deprecated " +
		"dynamic enumerator experimental export external far far16 forward generic " +
		"helper implements index interrupt iocheck local message name near " +
		"nodefault noreturn nostackframe oldfpccall otherwise overload override " +
		"pascal platform private protected public published read register " +
		"reintroduce result safecall saveregisters softfloat specialize static " +
		"stdcall stored strict unaligned unimplemented varargs virtual write");
	var atoms = {"null": true};
	
	var isOperatorChar = /[+\-*&%=<>!?|\/]/;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == "#" && state.startOfLine) {
		stream.skipToEnd();
		return "meta";
	  }
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (ch == "(" && stream.eat("*")) {
		state.tokenize = tokenComment;
		return tokenComment(stream, state);
	  }
	  if (ch == "{") {
		state.tokenize = tokenCommentBraces;
		return tokenCommentBraces(stream, state);
	  }
	  if (/[\[\]\(\),;\:\.]/.test(ch)) {
		return null;
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (ch == "/") {
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_]/);
	  var cur = stream.current();
	  if (keywords.propertyIsEnumerable(cur)) return "keyword";
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped) state.tokenize = null;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == ")" && maybeEnd) {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenCommentBraces(stream, state) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch == "}") {
		  state.tokenize = null;
		  break;
		}
	  }
	  return "comment";
	}
	
	// Interface
	
	const pascal = {
	  name: "pascal",
	
	  startState: function() {
		return {tokenize: null};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment" || style == "meta") return style;
		return style;
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {block: {open: "(*", close: "*)"}}
	  }
	};
	
	exports.pascal = pascal;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/perl.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/perl.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// it's like "peek", but need for look-ahead or look-behind if index < 0
	function look(stream, c){
	  return stream.string.charAt(stream.pos+(c||0));
	}
	
	// return a part of prefix of current stream from current position
	function prefix(stream, c){
	  if(c){
		var x=stream.pos-c;
		return stream.string.substr((x>=0?x:0),c);}
	  else {
		return stream.string.substr(0,stream.pos-1);
	  }
	}
	
	// return a part of suffix of current stream from current position
	function suffix(stream, c){
	  var y=stream.string.length;
	  var x=y-stream.pos+1;
	  return stream.string.substr(stream.pos,(c&&c<y?c:x));
	}
	
	// eating and vomiting a part of stream from current position
	function eatSuffix(stream, c){
	  var x=stream.pos+c;
	  var y;
	  if(x<=0)
		stream.pos=0;
	  else if(x>=(y=stream.string.length-1))
		stream.pos=y;
	  else
		stream.pos=x;
	}
	
	// http://perldoc.perl.org
	var PERL={                                      //   null - magic touch
	  //   1 - keyword
	  //   2 - def
	  //   3 - atom
	  //   4 - operator
	  //   5 - builtin (predefined)
	  //   [x,y] - x=1,2,3; y=must be defined if x{...}
	  //      PERL operators
	  '->':   4,
	  '++':   4,
	  '--':   4,
	  '**':   4,
	  //   ! ~ \ and unary + and -
	  '=~':   4,
	  '!~':   4,
	  '*':   4,
	  '/':   4,
	  '%':   4,
	  'x':   4,
	  '+':   4,
	  '-':   4,
	  '.':   4,
	  '<<':   4,
	  '>>':   4,
	  //   named unary operators
	  '<':   4,
	  '>':   4,
	  '<=':   4,
	  '>=':   4,
	  'lt':   4,
	  'gt':   4,
	  'le':   4,
	  'ge':   4,
	  '==':   4,
	  '!=':   4,
	  '<=>':   4,
	  'eq':   4,
	  'ne':   4,
	  'cmp':   4,
	  '~~':   4,
	  '&':   4,
	  '|':   4,
	  '^':   4,
	  '&&':   4,
	  '||':   4,
	  '//':   4,
	  '..':   4,
	  '...':   4,
	  '?':   4,
	  ':':   4,
	  '=':   4,
	  '+=':   4,
	  '-=':   4,
	  '*=':   4,  //   etc. ???
	  ',':   4,
	  '=>':   4,
	  '::':   4,
	  //   list operators (rightward)
	  'not':   4,
	  'and':   4,
	  'or':   4,
	  'xor':   4,
	  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
	  'BEGIN':   [5,1],
	  'END':   [5,1],
	  'PRINT':   [5,1],
	  'PRINTF':   [5,1],
	  'GETC':   [5,1],
	  'READ':   [5,1],
	  'READLINE':   [5,1],
	  'DESTROY':   [5,1],
	  'TIE':   [5,1],
	  'TIEHANDLE':   [5,1],
	  'UNTIE':   [5,1],
	  'STDIN':    5,
	  'STDIN_TOP':    5,
	  'STDOUT':    5,
	  'STDOUT_TOP':    5,
	  'STDERR':    5,
	  'STDERR_TOP':    5,
	  '$ARG':    5,
	  '$_':    5,
	  '@ARG':    5,
	  '@_':    5,
	  '$LIST_SEPARATOR':    5,
	  '$"':    5,
	  '$PROCESS_ID':    5,
	  '$PID':    5,
	  '$$':    5,
	  '$REAL_GROUP_ID':    5,
	  '$GID':    5,
	  '$(':    5,
	  '$EFFECTIVE_GROUP_ID':    5,
	  '$EGID':    5,
	  '$)':    5,
	  '$PROGRAM_NAME':    5,
	  '$0':    5,
	  '$SUBSCRIPT_SEPARATOR':    5,
	  '$SUBSEP':    5,
	  '$;':    5,
	  '$REAL_USER_ID':    5,
	  '$UID':    5,
	  '$<':    5,
	  '$EFFECTIVE_USER_ID':    5,
	  '$EUID':    5,
	  '$>':    5,
	  '$a':    5,
	  '$b':    5,
	  '$COMPILING':    5,
	  '$^C':    5,
	  '$DEBUGGING':    5,
	  '$^D':    5,
	  '${^ENCODING}':    5,
	  '$ENV':    5,
	  '%ENV':    5,
	  '$SYSTEM_FD_MAX':    5,
	  '$^F':    5,
	  '@F':    5,
	  '${^GLOBAL_PHASE}':    5,
	  '$^H':    5,
	  '%^H':    5,
	  '@INC':    5,
	  '%INC':    5,
	  '$INPLACE_EDIT':    5,
	  '$^I':    5,
	  '$^M':    5,
	  '$OSNAME':    5,
	  '$^O':    5,
	  '${^OPEN}':    5,
	  '$PERLDB':    5,
	  '$^P':    5,
	  '$SIG':    5,
	  '%SIG':    5,
	  '$BASETIME':    5,
	  '$^T':    5,
	  '${^TAINT}':    5,
	  '${^UNICODE}':    5,
	  '${^UTF8CACHE}':    5,
	  '${^UTF8LOCALE}':    5,
	  '$PERL_VERSION':    5,
	  '$^V':    5,
	  '${^WIN32_SLOPPY_STAT}':    5,
	  '$EXECUTABLE_NAME':    5,
	  '$^X':    5,
	  '$1':    5, // - regexp $1, $2...
	  '$MATCH':    5,
	  '$&':    5,
	  '${^MATCH}':    5,
	  '$PREMATCH':    5,
	  '$`':    5,
	  '${^PREMATCH}':    5,
	  '$POSTMATCH':    5,
	  "$'":    5,
	  '${^POSTMATCH}':    5,
	  '$LAST_PAREN_MATCH':    5,
	  '$+':    5,
	  '$LAST_SUBMATCH_RESULT':    5,
	  '$^N':    5,
	  '@LAST_MATCH_END':    5,
	  '@+':    5,
	  '%LAST_PAREN_MATCH':    5,
	  '%+':    5,
	  '@LAST_MATCH_START':    5,
	  '@-':    5,
	  '%LAST_MATCH_START':    5,
	  '%-':    5,
	  '$LAST_REGEXP_CODE_RESULT':    5,
	  '$^R':    5,
	  '${^RE_DEBUG_FLAGS}':    5,
	  '${^RE_TRIE_MAXBUF}':    5,
	  '$ARGV':    5,
	  '@ARGV':    5,
	  'ARGV':    5,
	  'ARGVOUT':    5,
	  '$OUTPUT_FIELD_SEPARATOR':    5,
	  '$OFS':    5,
	  '$,':    5,
	  '$INPUT_LINE_NUMBER':    5,
	  '$NR':    5,
	  '$.':    5,
	  '$INPUT_RECORD_SEPARATOR':    5,
	  '$RS':    5,
	  '$/':    5,
	  '$OUTPUT_RECORD_SEPARATOR':    5,
	  '$ORS':    5,
	  '$\\':    5,
	  '$OUTPUT_AUTOFLUSH':    5,
	  '$|':    5,
	  '$ACCUMULATOR':    5,
	  '$^A':    5,
	  '$FORMAT_FORMFEED':    5,
	  '$^L':    5,
	  '$FORMAT_PAGE_NUMBER':    5,
	  '$%':    5,
	  '$FORMAT_LINES_LEFT':    5,
	  '$-':    5,
	  '$FORMAT_LINE_BREAK_CHARACTERS':    5,
	  '$:':    5,
	  '$FORMAT_LINES_PER_PAGE':    5,
	  '$=':    5,
	  '$FORMAT_TOP_NAME':    5,
	  '$^':    5,
	  '$FORMAT_NAME':    5,
	  '$~':    5,
	  '${^CHILD_ERROR_NATIVE}':    5,
	  '$EXTENDED_OS_ERROR':    5,
	  '$^E':    5,
	  '$EXCEPTIONS_BEING_CAUGHT':    5,
	  '$^S':    5,
	  '$WARNING':    5,
	  '$^W':    5,
	  '${^WARNING_BITS}':    5,
	  '$OS_ERROR':    5,
	  '$ERRNO':    5,
	  '$!':    5,
	  '%OS_ERROR':    5,
	  '%ERRNO':    5,
	  '%!':    5,
	  '$CHILD_ERROR':    5,
	  '$?':    5,
	  '$EVAL_ERROR':    5,
	  '$@':    5,
	  '$OFMT':    5,
	  '$#':    5,
	  '$*':    5,
	  '$ARRAY_BASE':    5,
	  '$[':    5,
	  '$OLD_PERL_VERSION':    5,
	  '$]':    5,
	  //      PERL blocks
	  'if':[1,1],
	  elsif:[1,1],
	  'else':[1,1],
	  'while':[1,1],
	  unless:[1,1],
	  'for':[1,1],
	  foreach:[1,1],
	  //      PERL functions
	  'abs':1,     // - absolute value function
	  accept:1,     // - accept an incoming socket connect
	  alarm:1,     // - schedule a SIGALRM
	  'atan2':1,     // - arctangent of Y/X in the range -PI to PI
	  bind:1,     // - binds an address to a socket
	  binmode:1,     // - prepare binary files for I/O
	  bless:1,     // - create an object
	  bootstrap:1,     //
	  'break':1,     // - break out of a "given" block
	  caller:1,     // - get context of the current subroutine call
	  chdir:1,     // - change your current working directory
	  chmod:1,     // - changes the permissions on a list of files
	  chomp:1,     // - remove a trailing record separator from a string
	  chop:1,     // - remove the last character from a string
	  chown:1,     // - change the ownership on a list of files
	  chr:1,     // - get character this number represents
	  chroot:1,     // - make directory new root for path lookups
	  close:1,     // - close file (or pipe or socket) handle
	  closedir:1,     // - close directory handle
	  connect:1,     // - connect to a remote socket
	  'continue':[1,1], // - optional trailing block in a while or foreach
	  'cos':1,     // - cosine function
	  crypt:1,     // - one-way passwd-style encryption
	  dbmclose:1,     // - breaks binding on a tied dbm file
	  dbmopen:1,     // - create binding on a tied dbm file
	  'default':1,     //
	  defined:1,     // - test whether a value, variable, or function is defined
	  'delete':1,     // - deletes a value from a hash
	  die:1,     // - raise an exception or bail out
	  'do':1,     // - turn a BLOCK into a TERM
	  dump:1,     // - create an immediate core dump
	  each:1,     // - retrieve the next key/value pair from a hash
	  endgrent:1,     // - be done using group file
	  endhostent:1,     // - be done using hosts file
	  endnetent:1,     // - be done using networks file
	  endprotoent:1,     // - be done using protocols file
	  endpwent:1,     // - be done using passwd file
	  endservent:1,     // - be done using services file
	  eof:1,     // - test a filehandle for its end
	  'eval':1,     // - catch exceptions or compile and run code
	  'exec':1,     // - abandon this program to run another
	  exists:1,     // - test whether a hash key is present
	  exit:1,     // - terminate this program
	  'exp':1,     // - raise I to a power
	  fcntl:1,     // - file control system call
	  fileno:1,     // - return file descriptor from filehandle
	  flock:1,     // - lock an entire file with an advisory lock
	  fork:1,     // - create a new process just like this one
	  format:1,     // - declare a picture format with use by the write() function
	  formline:1,     // - internal function used for formats
	  getc:1,     // - get the next character from the filehandle
	  getgrent:1,     // - get next group record
	  getgrgid:1,     // - get group record given group user ID
	  getgrnam:1,     // - get group record given group name
	  gethostbyaddr:1,     // - get host record given its address
	  gethostbyname:1,     // - get host record given name
	  gethostent:1,     // - get next hosts record
	  getlogin:1,     // - return who logged in at this tty
	  getnetbyaddr:1,     // - get network record given its address
	  getnetbyname:1,     // - get networks record given name
	  getnetent:1,     // - get next networks record
	  getpeername:1,     // - find the other end of a socket connection
	  getpgrp:1,     // - get process group
	  getppid:1,     // - get parent process ID
	  getpriority:1,     // - get current nice value
	  getprotobyname:1,     // - get protocol record given name
	  getprotobynumber:1,     // - get protocol record numeric protocol
	  getprotoent:1,     // - get next protocols record
	  getpwent:1,     // - get next passwd record
	  getpwnam:1,     // - get passwd record given user login name
	  getpwuid:1,     // - get passwd record given user ID
	  getservbyname:1,     // - get services record given its name
	  getservbyport:1,     // - get services record given numeric port
	  getservent:1,     // - get next services record
	  getsockname:1,     // - retrieve the sockaddr for a given socket
	  getsockopt:1,     // - get socket options on a given socket
	  given:1,     //
	  glob:1,     // - expand filenames using wildcards
	  gmtime:1,     // - convert UNIX time into record or string using Greenwich time
	  'goto':1,     // - create spaghetti code
	  grep:1,     // - locate elements in a list test true against a given criterion
	  hex:1,     // - convert a string to a hexadecimal number
	  'import':1,     // - patch a module's namespace into your own
	  index:1,     // - find a substring within a string
	  'int':1,     // - get the integer portion of a number
	  ioctl:1,     // - system-dependent device control system call
	  'join':1,     // - join a list into a string using a separator
	  keys:1,     // - retrieve list of indices from a hash
	  kill:1,     // - send a signal to a process or process group
	  last:1,     // - exit a block prematurely
	  lc:1,     // - return lower-case version of a string
	  lcfirst:1,     // - return a string with just the next letter in lower case
	  length:1,     // - return the number of bytes in a string
	  'link':1,     // - create a hard link in the filesystem
	  listen:1,     // - register your socket as a server
	  local: 2,    // - create a temporary value for a global variable (dynamic scoping)
	  localtime:1,     // - convert UNIX time into record or string using local time
	  lock:1,     // - get a thread lock on a variable, subroutine, or method
	  'log':1,     // - retrieve the natural logarithm for a number
	  lstat:1,     // - stat a symbolic link
	  m:null,  // - match a string with a regular expression pattern
	  map:1,     // - apply a change to a list to get back a new list with the changes
	  mkdir:1,     // - create a directory
	  msgctl:1,     // - SysV IPC message control operations
	  msgget:1,     // - get SysV IPC message queue
	  msgrcv:1,     // - receive a SysV IPC message from a message queue
	  msgsnd:1,     // - send a SysV IPC message to a message queue
	  my: 2,    // - declare and assign a local variable (lexical scoping)
	  'new':1,     //
	  next:1,     // - iterate a block prematurely
	  no:1,     // - unimport some module symbols or semantics at compile time
	  oct:1,     // - convert a string to an octal number
	  open:1,     // - open a file, pipe, or descriptor
	  opendir:1,     // - open a directory
	  ord:1,     // - find a character's numeric representation
	  our: 2,    // - declare and assign a package variable (lexical scoping)
	  pack:1,     // - convert a list into a binary representation
	  'package':1,     // - declare a separate global namespace
	  pipe:1,     // - open a pair of connected filehandles
	  pop:1,     // - remove the last element from an array and return it
	  pos:1,     // - find or set the offset for the last/next m//g search
	  print:1,     // - output a list to a filehandle
	  printf:1,     // - output a formatted list to a filehandle
	  prototype:1,     // - get the prototype (if any) of a subroutine
	  push:1,     // - append one or more elements to an array
	  q:null,  // - singly quote a string
	  qq:null,  // - doubly quote a string
	  qr:null,  // - Compile pattern
	  quotemeta:null,  // - quote regular expression magic characters
	  qw:null,  // - quote a list of words
	  qx:null,  // - backquote quote a string
	  rand:1,     // - retrieve the next pseudorandom number
	  read:1,     // - fixed-length buffered input from a filehandle
	  readdir:1,     // - get a directory from a directory handle
	  readline:1,     // - fetch a record from a file
	  readlink:1,     // - determine where a symbolic link is pointing
	  readpipe:1,     // - execute a system command and collect standard output
	  recv:1,     // - receive a message over a Socket
	  redo:1,     // - start this loop iteration over again
	  ref:1,     // - find out the type of thing being referenced
	  rename:1,     // - change a filename
	  require:1,     // - load in external functions from a library at runtime
	  reset:1,     // - clear all variables of a given name
	  'return':1,     // - get out of a function early
	  reverse:1,     // - flip a string or a list
	  rewinddir:1,     // - reset directory handle
	  rindex:1,     // - right-to-left substring search
	  rmdir:1,     // - remove a directory
	  s:null,  // - replace a pattern with a string
	  say:1,     // - print with newline
	  scalar:1,     // - force a scalar context
	  seek:1,     // - reposition file pointer for random-access I/O
	  seekdir:1,     // - reposition directory pointer
	  select:1,     // - reset default output or do I/O multiplexing
	  semctl:1,     // - SysV semaphore control operations
	  semget:1,     // - get set of SysV semaphores
	  semop:1,     // - SysV semaphore operations
	  send:1,     // - send a message over a socket
	  setgrent:1,     // - prepare group file for use
	  sethostent:1,     // - prepare hosts file for use
	  setnetent:1,     // - prepare networks file for use
	  setpgrp:1,     // - set the process group of a process
	  setpriority:1,     // - set a process's nice value
	  setprotoent:1,     // - prepare protocols file for use
	  setpwent:1,     // - prepare passwd file for use
	  setservent:1,     // - prepare services file for use
	  setsockopt:1,     // - set some socket options
	  shift:1,     // - remove the first element of an array, and return it
	  shmctl:1,     // - SysV shared memory operations
	  shmget:1,     // - get SysV shared memory segment identifier
	  shmread:1,     // - read SysV shared memory
	  shmwrite:1,     // - write SysV shared memory
	  shutdown:1,     // - close down just half of a socket connection
	  'sin':1,     // - return the sine of a number
	  sleep:1,     // - block for some number of seconds
	  socket:1,     // - create a socket
	  socketpair:1,     // - create a pair of sockets
	  'sort':1,     // - sort a list of values
	  splice:1,     // - add or remove elements anywhere in an array
	  'split':1,     // - split up a string using a regexp delimiter
	  sprintf:1,     // - formatted print into a string
	  'sqrt':1,     // - square root function
	  srand:1,     // - seed the random number generator
	  stat:1,     // - get a file's status information
	  state:1,     // - declare and assign a state variable (persistent lexical scoping)
	  study:1,     // - optimize input data for repeated searches
	  'sub':1,     // - declare a subroutine, possibly anonymously
	  'substr':1,     // - get or alter a portion of a string
	  symlink:1,     // - create a symbolic link to a file
	  syscall:1,     // - execute an arbitrary system call
	  sysopen:1,     // - open a file, pipe, or descriptor
	  sysread:1,     // - fixed-length unbuffered input from a filehandle
	  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite
	  system:1,     // - run a separate program
	  syswrite:1,     // - fixed-length unbuffered output to a filehandle
	  tell:1,     // - get current seekpointer on a filehandle
	  telldir:1,     // - get current seekpointer on a directory handle
	  tie:1,     // - bind a variable to an object class
	  tied:1,     // - get a reference to the object underlying a tied variable
	  time:1,     // - return number of seconds since 1970
	  times:1,     // - return elapsed time for self and child processes
	  tr:null,  // - transliterate a string
	  truncate:1,     // - shorten a file
	  uc:1,     // - return upper-case version of a string
	  ucfirst:1,     // - return a string with just the next letter in upper case
	  umask:1,     // - set file creation mode mask
	  undef:1,     // - remove a variable or function definition
	  unlink:1,     // - remove one link to a file
	  unpack:1,     // - convert binary structure into normal perl variables
	  unshift:1,     // - prepend more elements to the beginning of a list
	  untie:1,     // - break a tie binding to a variable
	  use:1,     // - load in a module at compile time
	  utime:1,     // - set a file's last access and modify times
	  values:1,     // - return a list of the values in a hash
	  vec:1,     // - test or set particular bits in a string
	  wait:1,     // - wait for any child process to die
	  waitpid:1,     // - wait for a particular child process to die
	  wantarray:1,     // - get void vs scalar vs list context of current subroutine call
	  warn:1,     // - print debugging info
	  when:1,     //
	  write:1,     // - print a picture record
	  y:null}; // - transliterate a string
	
	var RXstyle="string.special";
	var RXmodifiers=/[goseximacplud]/;              // NOTE: "m", "s", "y" and "tr" need to correct real modifiers for each regexp type
	
	function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)
	  state.chain=null;                               //                                                          12   3tail
	  state.style=null;
	  state.tail=null;
	  state.tokenize=function(stream,state){
		var e=false,c,i=0;
		while(c=stream.next()){
		  if(c===chain[i]&&!e){
			if(chain[++i]!==undefined){
			  state.chain=chain[i];
			  state.style=style;
			  state.tail=tail;}
			else if(tail)
			  stream.eatWhile(tail);
			state.tokenize=tokenPerl;
			return style;}
		  e=!e&&c=="\\";}
		return style;};
	  return state.tokenize(stream,state);}
	
	function tokenSOMETHING(stream,state,string){
	  state.tokenize=function(stream,state){
		if(stream.string==string)
		  state.tokenize=tokenPerl;
		stream.skipToEnd();
		return "string";};
	  return state.tokenize(stream,state);}
	
	function tokenPerl(stream,state){
	  if(stream.eatSpace())
		return null;
	  if(state.chain)
		return tokenChain(stream,state,state.chain,state.style,state.tail);
	  if(stream.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
		return 'number';
	  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\n...\nSOMETHING\n
		stream.eatWhile(/\w/);
		return tokenSOMETHING(stream,state,stream.current().substr(2));}
	  if(stream.sol()&&stream.match(/^\=item(?!\w)/)){// NOTE: \n=item...\n=cut\n
		return tokenSOMETHING(stream,state,'=cut');}
	  var ch=stream.next();
	  if(ch=='"'||ch=="'"){                           // NOTE: ' or " or <<'SOMETHING'\n...\nSOMETHING\n or <<"SOMETHING"\n...\nSOMETHING\n
		if(prefix(stream, 3)=="<<"+ch){
		  var p=stream.pos;
		  stream.eatWhile(/\w/);
		  var n=stream.current().substr(1);
		  if(n&&stream.eat(ch))
			return tokenSOMETHING(stream,state,n);
		  stream.pos=p;}
		return tokenChain(stream,state,[ch],"string");}
	  if(ch=="q"){
		var c=look(stream, -2);
		if(!(c&&/\w/.test(c))){
		  c=look(stream, 0);
		  if(c=="x"){
			c=look(stream, 1);
			if(c=="("){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
			if(c=="["){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
			if(c=="{"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
			if(c=="<"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
			if(/[\^'"!~\/]/.test(c)){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
		  else if(c=="q"){
			c=look(stream, 1);
			if(c=="("){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[")"],"string");}
			if(c=="["){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["]"],"string");}
			if(c=="{"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["}"],"string");}
			if(c=="<"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[">"],"string");}
			if(/[\^'"!~\/]/.test(c)){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[stream.eat(c)],"string");}}
		  else if(c=="w"){
			c=look(stream, 1);
			if(c=="("){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[")"],"bracket");}
			if(c=="["){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["]"],"bracket");}
			if(c=="{"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["}"],"bracket");}
			if(c=="<"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[">"],"bracket");}
			if(/[\^'"!~\/]/.test(c)){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[stream.eat(c)],"bracket");}}
		  else if(c=="r"){
			c=look(stream, 1);
			if(c=="("){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
			if(c=="["){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
			if(c=="{"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
			if(c=="<"){
			  eatSuffix(stream, 2);
			  return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
			if(/[\^'"!~\/]/.test(c)){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
		  else if(/[\^'"!~\/(\[{<]/.test(c)){
			if(c=="("){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[")"],"string");}
			if(c=="["){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,["]"],"string");}
			if(c=="{"){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,["}"],"string");}
			if(c=="<"){
			  eatSuffix(stream, 1);
			  return tokenChain(stream,state,[">"],"string");}
			if(/[\^'"!~\/]/.test(c)){
			  return tokenChain(stream,state,[stream.eat(c)],"string");}}}}
	  if(ch=="m"){
		var c=look(stream, -2);
		if(!(c&&/\w/.test(c))){
		  c=stream.eat(/[(\[{<\^'"!~\/]/);
		  if(c){
			if(/[\^'"!~\/]/.test(c)){
			  return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}
			if(c=="("){
			  return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
			if(c=="["){
			  return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
			if(c=="{"){
			  return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
			if(c=="<"){
			  return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}}}}
	  if(ch=="s"){
		var c=/[\/>\]})\w]/.test(look(stream, -2));
		if(!c){
		  c=stream.eat(/[(\[{<\^'"!~\/]/);
		  if(c){
			if(c=="[")
			  return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
			if(c=="{")
			  return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
			if(c=="<")
			  return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
			if(c=="(")
			  return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
			return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
	  if(ch=="y"){
		var c=/[\/>\]})\w]/.test(look(stream, -2));
		if(!c){
		  c=stream.eat(/[(\[{<\^'"!~\/]/);
		  if(c){
			if(c=="[")
			  return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
			if(c=="{")
			  return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
			if(c=="<")
			  return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
			if(c=="(")
			  return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
			return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
	  if(ch=="t"){
		var c=/[\/>\]})\w]/.test(look(stream, -2));
		if(!c){
		  c=stream.eat("r");if(c){
			c=stream.eat(/[(\[{<\^'"!~\/]/);
			if(c){
			  if(c=="[")
				return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
			  if(c=="{")
				return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
			  if(c=="<")
				return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
			  if(c=="(")
				return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
			  return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}
	  if(ch=="`"){
		return tokenChain(stream,state,[ch],"builtin");}
	  if(ch=="/"){
		if(!/~\s*$/.test(prefix(stream)))
		  return "operator";
		else
		  return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}
	  if(ch=="$"){
		var p=stream.pos;
		if(stream.eatWhile(/\d/)||stream.eat("{")&&stream.eatWhile(/\d/)&&stream.eat("}"))
		  return "builtin";
		else
		  stream.pos=p;}
	  if(/[$@%]/.test(ch)){
		var p=stream.pos;
		if(stream.eat("^")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)){
		  var c=stream.current();
		  if(PERL[c])
			return "builtin";}
		stream.pos=p;}
	  if(/[$@%&]/.test(ch)){
		if(stream.eatWhile(/[\w$]/)||stream.eat("{")&&stream.eatWhile(/[\w$]/)&&stream.eat("}")){
		  var c=stream.current();
		  if(PERL[c])
			return "builtin";
		  else
			return "variable";}}
	  if(ch=="#"){
		if(look(stream, -2)!="$"){
		  stream.skipToEnd();
		  return "comment";}}
	  if(/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)){
		var p=stream.pos;
		stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
		if(PERL[stream.current()])
		  return "operator";
		else
		  stream.pos=p;}
	  if(ch=="_"){
		if(stream.pos==1){
		  if(suffix(stream, 6)=="_END__"){
			return tokenChain(stream,state,['\0'],"comment");}
		  else if(suffix(stream, 7)=="_DATA__"){
			return tokenChain(stream,state,['\0'],"builtin");}
		  else if(suffix(stream, 7)=="_C__"){
			return tokenChain(stream,state,['\0'],"string");}}}
	  if(/\w/.test(ch)){
		var p=stream.pos;
		if(look(stream, -2)=="{"&&(look(stream, 0)=="}"||stream.eatWhile(/\w/)&&look(stream, 0)=="}"))
		  return "string";
		else
		  stream.pos=p;}
	  if(/[A-Z]/.test(ch)){
		var l=look(stream, -2);
		var p=stream.pos;
		stream.eatWhile(/[A-Z_]/);
		if(/[\da-z]/.test(look(stream, 0))){
		  stream.pos=p;}
		else {
		  var c=PERL[stream.current()];
		  if(!c)
			return "meta";
		  if(c[1])
			c=c[0];
		  if(l!=":"){
			if(c==1)
			  return "keyword";
			else if(c==2)
			  return "def";
			else if(c==3)
			  return "atom";
			else if(c==4)
			  return "operator";
			else if(c==5)
			  return "builtin";
			else
			  return "meta";}
		  else
			return "meta";}}
	  if(/[a-zA-Z_]/.test(ch)){
		var l=look(stream, -2);
		stream.eatWhile(/\w/);
		var c=PERL[stream.current()];
		if(!c)
		  return "meta";
		if(c[1])
		  c=c[0];
		if(l!=":"){
		  if(c==1)
			return "keyword";
		  else if(c==2)
			return "def";
		  else if(c==3)
			return "atom";
		  else if(c==4)
			return "operator";
		  else if(c==5)
			return "builtin";
		  else
			return "meta";}
		else
		  return "meta";}
	  return null;}
	
	const perl = {
	  name: "perl",
	
	  startState: function() {
		return {
		  tokenize: tokenPerl,
		  chain: null,
		  style: null,
		  tail: null
		};
	  },
	  token: function(stream, state) {
		return (state.tokenize || tokenPerl)(stream, state);
	  },
	  languageData: {
		commentTokens: {line: "#"},
		wordChars: "$"
	  }
	};
	
	exports.perl = perl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/pig.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/pig.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	// builtin funcs taken from trunk revision 1303237
	var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL "
		+ "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS "
		+ "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG "
		+ "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN "
		+ "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER "
		+ "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS "
		+ "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  "
		+ "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE "
		+ "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG "
		+ "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";
	
	// taken from QueryLexer.g
	var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP "
		+ "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL "
		+ "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE "
		+ "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE "
		+ "NEQ MATCHES TRUE FALSE DUMP";
	
	// data types
	var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";
	
	var builtins = words(pBuiltins), keywords = words(pKeywords), types = words(pTypes);
	
	var isOperatorChar = /[*+\-%<>=&?:\/!|]/;
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	
	function tokenComment(stream, state) {
	  var isEnd = false;
	  var ch;
	  while(ch = stream.next()) {
		if(ch == "/" && isEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		isEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			end = true; break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !escaped)
		  state.tokenize = tokenBase;
		return "error";
	  };
	}
	
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	
	  // is a start of string?
	  if (ch == '"' || ch == "'")
		return chain(stream, state, tokenString(ch));
	  // is it one of the special chars
	  else if(/[\[\]{}\(\),;\.]/.test(ch))
		return null;
	  // is it a number?
	  else if(/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  // multi line comment or operator
	  else if (ch == "/") {
		if (stream.eat("*")) {
		  return chain(stream, state, tokenComment);
		}
		else {
		  stream.eatWhile(isOperatorChar);
		  return "operator";
		}
	  }
	  // single line comment or operator
	  else if (ch=="-") {
		if(stream.eat("-")){
		  stream.skipToEnd();
		  return "comment";
		}
		else {
		  stream.eatWhile(isOperatorChar);
		  return "operator";
		}
	  }
	  // is it an operator
	  else if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  else {
		// get the while word
		stream.eatWhile(/[\w\$_]/);
		// is it one of the listed keywords?
		if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {
		  //keywords can be used as variables like flatten(group), group.$0 etc..
		  if (!stream.eat(")") && !stream.eat("."))
			return "keyword";
		}
		// is it one of the builtin functions?
		if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))
		  return "builtin";
		// is it one of the listed types?
		if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))
		  return "type";
		// default is a 'variable'
		return "variable";
	  }
	}
	
	// Interface
	const pig = {
	  name: "pig",
	
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		if(stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
		return style;
	  },
	
	  languageData: {
		autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
	  }
	};
	
	exports.pig = pig;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/powershell.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/powershell.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function buildRegexp(patterns, options) {
	  options = options || {};
	  var prefix = options.prefix !== undefined ? options.prefix : '^';
	  var suffix = options.suffix !== undefined ? options.suffix : '\\b';
	
	  for (var i = 0; i < patterns.length; i++) {
		if (patterns[i] instanceof RegExp) {
		  patterns[i] = patterns[i].source;
		}
		else {
		  patterns[i] = patterns[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		}
	  }
	
	  return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');
	}
	
	var notCharacterOrDash = '(?=[^A-Za-z\\d\\-_]|$)';
	var varNames = /[\w\-:]/;
	var keywords = buildRegexp([
	  /begin|break|catch|continue|data|default|do|dynamicparam/,
	  /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
	  /param|process|return|switch|throw|trap|try|until|where|while/
	], { suffix: notCharacterOrDash });
	
	var punctuation = /[\[\]{},;`\\\.]|@[({]/;
	var wordOperators = buildRegexp([
	  'f',
	  /b?not/,
	  /[ic]?split/, 'join',
	  /is(not)?/, 'as',
	  /[ic]?(eq|ne|[gl][te])/,
	  /[ic]?(not)?(like|match|contains)/,
	  /[ic]?replace/,
	  /b?(and|or|xor)/
	], { prefix: '-' });
	var symbolOperators = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
	var operators = buildRegexp([wordOperators, symbolOperators], { suffix: '' });
	
	var numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;
	
	var identifiers = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;
	
	var symbolBuiltins = /[A-Z]:|%|\?/i;
	var namedBuiltins = buildRegexp([
	  /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
	  /Checkpoint-Computer/,
	  /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
	  /Compare-Object/,
	  /Complete-Transaction/,
	  /Connect-PSSession/,
	  /ConvertFrom-(Csv|Json|SecureString|StringData)/,
	  /Convert-Path/,
	  /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
	  /Copy-Item(Property)?/,
	  /Debug-Process/,
	  /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
	  /Disconnect-PSSession/,
	  /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
	  /(Enter|Exit)-PSSession/,
	  /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
	  /ForEach-Object/,
	  /Format-(Custom|List|Table|Wide)/,
	  new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential'
				 + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job'
				 + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration'
				 + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'),
	  /Group-Object/,
	  /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
	  /ImportSystemModules/,
	  /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
	  /Join-Path/,
	  /Limit-EventLog/,
	  /Measure-(Command|Object)/,
	  /Move-Item(Property)?/,
	  new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile'
				 + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'),
	  /Out-(Default|File|GridView|Host|Null|Printer|String)/,
	  /Pause/,
	  /(Pop|Push)-Location/,
	  /Read-Host/,
	  /Receive-(Job|PSSession)/,
	  /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
	  /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
	  /Rename-(Computer|Item(Property)?)/,
	  /Reset-ComputerMachinePassword/,
	  /Resolve-Path/,
	  /Restart-(Computer|Service)/,
	  /Restore-Computer/,
	  /Resume-(Job|Service)/,
	  /Save-Help/,
	  /Select-(Object|String|Xml)/,
	  /Send-MailMessage/,
	  new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' +
				 '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'),
	  /Show-(Command|ControlPanelItem|EventLog)/,
	  /Sort-Object/,
	  /Split-Path/,
	  /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
	  /Stop-(Computer|Job|Process|Service|Transcript)/,
	  /Suspend-(Job|Service)/,
	  /TabExpansion2/,
	  /Tee-Object/,
	  /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
	  /Trace-Command/,
	  /Unblock-File/,
	  /Undo-Transaction/,
	  /Unregister-(Event|PSSessionConfiguration)/,
	  /Update-(FormatData|Help|List|TypeData)/,
	  /Use-Transaction/,
	  /Wait-(Event|Job|Process)/,
	  /Where-Object/,
	  /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
	  /cd|help|mkdir|more|oss|prompt/,
	  /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
	  /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
	  /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
	  /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
	  /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
	  /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
	], { prefix: '', suffix: '' });
	var variableBuiltins = buildRegexp([
	  /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
	  /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
	  /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
	  /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
	  /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
	  /WarningPreference|WhatIfPreference/,
	
	  /Event|EventArgs|EventSubscriber|Sender/,
	  /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
	  /true|false|null/
	], { prefix: '\\$', suffix: '' });
	
	var builtins = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });
	
	var grammar = {
	  keyword: keywords,
	  number: numbers,
	  operator: operators,
	  builtin: builtins,
	  punctuation: punctuation,
	  variable: identifiers
	};
	
	// tokenizers
	function tokenBase(stream, state) {
	  // Handle Comments
	  //var ch = stream.peek();
	
	  var parent = state.returnStack[state.returnStack.length - 1];
	  if (parent && parent.shouldReturnFrom(state)) {
		state.tokenize = parent.tokenize;
		state.returnStack.pop();
		return state.tokenize(stream, state);
	  }
	
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  if (stream.eat('(')) {
		state.bracketNesting += 1;
		return 'punctuation';
	  }
	
	  if (stream.eat(')')) {
		state.bracketNesting -= 1;
		return 'punctuation';
	  }
	
	  for (var key in grammar) {
		if (stream.match(grammar[key])) {
		  return key;
		}
	  }
	
	  var ch = stream.next();
	
	  // single-quote string
	  if (ch === "'") {
		return tokenSingleQuoteString(stream, state);
	  }
	
	  if (ch === '$') {
		return tokenVariable(stream, state);
	  }
	
	  // double-quote string
	  if (ch === '"') {
		return tokenDoubleQuoteString(stream, state);
	  }
	
	  if (ch === '<' && stream.eat('#')) {
		state.tokenize = tokenComment;
		return tokenComment(stream, state);
	  }
	
	  if (ch === '#') {
		stream.skipToEnd();
		return 'comment';
	  }
	
	  if (ch === '@') {
		var quoteMatch = stream.eat(/["']/);
		if (quoteMatch && stream.eol()) {
		  state.tokenize = tokenMultiString;
		  state.startQuote = quoteMatch[0];
		  return tokenMultiString(stream, state);
		} else if (stream.eol()) {
		  return 'error';
		} else if (stream.peek().match(/[({]/)) {
		  return 'punctuation';
		} else if (stream.peek().match(varNames)) {
		  // splatted variable
		  return tokenVariable(stream, state);
		}
	  }
	  return 'error';
	}
	
	function tokenSingleQuoteString(stream, state) {
	  var ch;
	  while ((ch = stream.peek()) != null) {
		stream.next();
	
		if (ch === "'" && !stream.eat("'")) {
		  state.tokenize = tokenBase;
		  return 'string';
		}
	  }
	
	  return 'error';
	}
	
	function tokenDoubleQuoteString(stream, state) {
	  var ch;
	  while ((ch = stream.peek()) != null) {
		if (ch === '$') {
		  state.tokenize = tokenStringInterpolation;
		  return 'string';
		}
	
		stream.next();
		if (ch === '`') {
		  stream.next();
		  continue;
		}
	
		if (ch === '"' && !stream.eat('"')) {
		  state.tokenize = tokenBase;
		  return 'string';
		}
	  }
	
	  return 'error';
	}
	
	function tokenStringInterpolation(stream, state) {
	  return tokenInterpolation(stream, state, tokenDoubleQuoteString);
	}
	
	function tokenMultiStringReturn(stream, state) {
	  state.tokenize = tokenMultiString;
	  state.startQuote = '"';
	  return tokenMultiString(stream, state);
	}
	
	function tokenHereStringInterpolation(stream, state) {
	  return tokenInterpolation(stream, state, tokenMultiStringReturn);
	}
	
	function tokenInterpolation(stream, state, parentTokenize) {
	  if (stream.match('$(')) {
		var savedBracketNesting = state.bracketNesting;
		state.returnStack.push({
		  /*jshint loopfunc:true */
		  shouldReturnFrom: function(state) {
			return state.bracketNesting === savedBracketNesting;
		  },
		  tokenize: parentTokenize
		});
		state.tokenize = tokenBase;
		state.bracketNesting += 1;
		return 'punctuation';
	  } else {
		stream.next();
		state.returnStack.push({
		  shouldReturnFrom: function() { return true; },
		  tokenize: parentTokenize
		});
		state.tokenize = tokenVariable;
		return state.tokenize(stream, state);
	  }
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while ((ch = stream.next()) != null) {
		if (maybeEnd && ch == '>') {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch === '#');
	  }
	  return 'comment';
	}
	
	function tokenVariable(stream, state) {
	  var ch = stream.peek();
	  if (stream.eat('{')) {
		state.tokenize = tokenVariableWithBraces;
		return tokenVariableWithBraces(stream, state);
	  } else if (ch != undefined && ch.match(varNames)) {
		stream.eatWhile(varNames);
		state.tokenize = tokenBase;
		return 'variable';
	  } else {
		state.tokenize = tokenBase;
		return 'error';
	  }
	}
	
	function tokenVariableWithBraces(stream, state) {
	  var ch;
	  while ((ch = stream.next()) != null) {
		if (ch === '}') {
		  state.tokenize = tokenBase;
		  break;
		}
	  }
	  return 'variable';
	}
	
	function tokenMultiString(stream, state) {
	  var quote = state.startQuote;
	  if (stream.sol() && stream.match(new RegExp(quote + '@'))) {
		state.tokenize = tokenBase;
	  }
	  else if (quote === '"') {
		while (!stream.eol()) {
		  var ch = stream.peek();
		  if (ch === '$') {
			state.tokenize = tokenHereStringInterpolation;
			return 'string';
		  }
	
		  stream.next();
		  if (ch === '`') {
			stream.next();
		  }
		}
	  }
	  else {
		stream.skipToEnd();
	  }
	
	  return 'string';
	}
	
	const powerShell = {
	  name: "powershell",
	
	  startState: function() {
		return {
		  returnStack: [],
		  bracketNesting: 0,
		  tokenize: tokenBase
		};
	  },
	
	  token: function(stream, state) {
		return state.tokenize(stream, state);
	  },
	
	  languageData: {
		commentTokens: {line: "#", block: {open: "<#", close: "#>"}}
	  }
	};
	
	exports.powerShell = powerShell;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/properties.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/properties.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	const properties = {
	  name: "properties",
	
	  token: function(stream, state) {
		var sol = stream.sol() || state.afterSection;
		var eol = stream.eol();
	
		state.afterSection = false;
	
		if (sol) {
		  if (state.nextMultiline) {
			state.inMultiline = true;
			state.nextMultiline = false;
		  } else {
			state.position = "def";
		  }
		}
	
		if (eol && ! state.nextMultiline) {
		  state.inMultiline = false;
		  state.position = "def";
		}
	
		if (sol) {
		  while(stream.eatSpace()) {}
		}
	
		var ch = stream.next();
	
		if (sol && (ch === "#" || ch === "!" || ch === ";")) {
		  state.position = "comment";
		  stream.skipToEnd();
		  return "comment";
		} else if (sol && ch === "[") {
		  state.afterSection = true;
		  stream.skipTo("]"); stream.eat("]");
		  return "header";
		} else if (ch === "=" || ch === ":") {
		  state.position = "quote";
		  return null;
		} else if (ch === "\\" && state.position === "quote") {
		  if (stream.eol()) {  // end of line?
			// Multiline value
			state.nextMultiline = true;
		  }
		}
	
		return state.position;
	  },
	
	  startState: function() {
		return {
		  position : "def",       // Current position, "def", "quote" or "comment"
		  nextMultiline : false,  // Is the next line multiline value
		  inMultiline : false,    // Is the current line a multiline value
		  afterSection : false    // Did we just open a section
		};
	  }
	
	};
	
	exports.properties = properties;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/protobuf.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/protobuf.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
	}
	var keywordArray = [
	  "package", "message", "import", "syntax",
	  "required", "optional", "repeated", "reserved", "default", "extensions", "packed",
	  "bool", "bytes", "double", "enum", "float", "string",
	  "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64",
	  "option", "service", "rpc", "returns"
	];
	var keywords = wordRegexp(keywordArray);
	
	var identifiers = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");
	
	function tokenBase(stream) {
	  // whitespaces
	  if (stream.eatSpace()) return null;
	
	  // Handle one line Comments
	  if (stream.match("//")) {
		stream.skipToEnd();
		return "comment";
	  }
	
	  // Handle Number Literals
	  if (stream.match(/^[0-9\.+-]/, false)) {
		if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
		  return "number";
		if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
		  return "number";
		if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
		  return "number";
	  }
	
	  // Handle Strings
	  if (stream.match(/^"([^"]|(""))*"/)) { return "string"; }
	  if (stream.match(/^'([^']|(''))*'/)) { return "string"; }
	
	  // Handle words
	  if (stream.match(keywords)) { return "keyword"; }
	  if (stream.match(identifiers)) { return "variable"; }
	  // Handle non-detected items
	  stream.next();
	  return null;
	}
	const protobuf = {
	  name: "protobuf",
	  token: tokenBase,
	  languageData: {
		autocomplete: keywordArray
	  }
	};
	
	exports.protobuf = protobuf;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/puppet.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/puppet.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// Stores the words from the define method
	var words = {};
	// Taken, mostly, from the Puppet official variable standards regex
	var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;
	
	// Takes a string of words separated by spaces and adds them as
	// keys with the value of the first argument 'style'
	function define(style, string) {
	  var split = string.split(' ');
	  for (var i = 0; i < split.length; i++) {
		words[split[i]] = style;
	  }
	}
	
	// Takes commonly known puppet types/words and classifies them to a style
	define('keyword', 'class define site node include import inherits');
	define('keyword', 'case if else in and elsif default or');
	define('atom', 'false true running present absent file directory undef');
	define('builtin', 'action augeas burst chain computer cron destination dport exec ' +
		   'file filebucket group host icmp iniface interface jump k5login limit log_level ' +
		   'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +
		   'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +
		   'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +
		   'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +
		   'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +
		   'resources router schedule scheduled_task selboolean selmodule service source ' +
		   'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +
		   'user vlan yumrepo zfs zone zpool');
	
	// After finding a start of a string ('|") this function attempts to find the end;
	// If a variable is encountered along the way, we display it differently when it
	// is encapsulated in a double-quoted string.
	function tokenString(stream, state) {
	  var current, prev, found_var = false;
	  while (!stream.eol() && (current = stream.next()) != state.pending) {
		if (current === '$' && prev != '\\' && state.pending == '"') {
		  found_var = true;
		  break;
		}
		prev = current;
	  }
	  if (found_var) {
		stream.backUp(1);
	  }
	  if (current == state.pending) {
		state.continueString = false;
	  } else {
		state.continueString = true;
	  }
	  return "string";
	}
	
	// Main function
	function tokenize(stream, state) {
	  // Matches one whole word
	  var word = stream.match(/[\w]+/, false);
	  // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)
	  var attribute = stream.match(/(\s+)?\w+\s+=>.*/, false);
	  // Matches non-builtin resource declarations
	  // (i.e. "apache::vhost {" or "mycustomclasss {" would be matched)
	  var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
	  // Matches virtual and exported resources (i.e. @@user { ; and the like)
	  var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);
	
	  // Finally advance the stream
	  var ch = stream.next();
	
	  // Have we found a variable?
	  if (ch === '$') {
		if (stream.match(variable_regex)) {
		  // If so, and its in a string, assign it a different color
		  return state.continueString ? 'variableName.special' : 'variable';
		}
		// Otherwise return an invalid variable
		return "error";
	  }
	  // Should we still be looking for the end of a string?
	  if (state.continueString) {
		// If so, go through the loop again
		stream.backUp(1);
		return tokenString(stream, state);
	  }
	  // Are we in a definition (class, node, define)?
	  if (state.inDefinition) {
		// If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)
		if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
		  return 'def';
		}
		// Match the rest it the next time around
		stream.match(/\s+{/);
		state.inDefinition = false;
	  }
	  // Are we in an 'include' statement?
	  if (state.inInclude) {
		// Match and return the included class
		stream.match(/(\s+)?\S+(\s+)?/);
		state.inInclude = false;
		return 'def';
	  }
	  // Do we just have a function on our hands?
	  // In 'ensure_resource("myclass")', 'ensure_resource' is matched
	  if (stream.match(/(\s+)?\w+\(/)) {
		stream.backUp(1);
		return 'def';
	  }
	  // Have we matched the prior attribute regex?
	  if (attribute) {
		stream.match(/(\s+)?\w+/);
		return 'tag';
	  }
	  // Do we have Puppet specific words?
	  if (word && words.hasOwnProperty(word)) {
		// Negates the initial next()
		stream.backUp(1);
		// rs move the stream
		stream.match(/[\w]+/);
		// We want to process these words differently
		// do to the importance they have in Puppet
		if (stream.match(/\s+\S+\s+{/, false)) {
		  state.inDefinition = true;
		}
		if (word == 'include') {
		  state.inInclude = true;
		}
		// Returns their value as state in the prior define methods
		return words[word];
	  }
	  // Is there a match on a reference?
	  if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
		// Negate the next()
		stream.backUp(1);
		// Match the full reference
		stream.match(/(^|\s+)[A-Z][\w:_]+/);
		return 'def';
	  }
	  // Have we matched the prior resource regex?
	  if (resource) {
		stream.match(/(\s+)?[\w:_]+/);
		return 'def';
	  }
	  // Have we matched the prior special_resource regex?
	  if (special_resource) {
		stream.match(/(\s+)?[@]{1,2}/);
		return 'atom';
	  }
	  // Match all the comments. All of them.
	  if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  }
	  // Have we found a string?
	  if (ch == "'" || ch == '"') {
		// Store the type (single or double)
		state.pending = ch;
		// Perform the looping function to find the end
		return tokenString(stream, state);
	  }
	  // Match all the brackets
	  if (ch == '{' || ch == '}') {
		return 'bracket';
	  }
	  // Match characters that we are going to assume
	  // are trying to be regex
	  if (ch == '/') {
		stream.match(/^[^\/]*\//);
		return 'string.special';
	  }
	  // Match all the numbers
	  if (ch.match(/[0-9]/)) {
		stream.eatWhile(/[0-9]+/);
		return 'number';
	  }
	  // Match the '=' and '=>' operators
	  if (ch == '=') {
		if (stream.peek() == '>') {
		  stream.next();
		}
		return "operator";
	  }
	  // Keep advancing through all the rest
	  stream.eatWhile(/[\w-]/);
	  // Return a blank line for everything else
	  return null;
	}
	// Start it all
	const puppet = {
	  name: "puppet",
	
	  startState: function () {
		var state = {};
		state.inDefinition = false;
		state.inInclude = false;
		state.continueString = false;
		state.pending = false;
		return state;
	  },
	  token: function (stream, state) {
		// Strip the spaces, but regex will account for them eitherway
		if (stream.eatSpace()) return null;
		// Go through the main process
		return tokenize(stream, state);
	  }
	};
	
	exports.puppet = puppet;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/python.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/python.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	
	var wordOperators = wordRegexp(["and", "or", "not", "is"]);
	var commonKeywords = ["as", "assert", "break", "class", "continue",
						  "def", "del", "elif", "else", "except", "finally",
						  "for", "from", "global", "if", "import",
						  "lambda", "pass", "raise", "return",
						  "try", "while", "with", "yield", "in", "False", "True"];
	var commonBuiltins = ["abs", "all", "any", "bin", "bool", "bytearray", "callable", "chr",
						  "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod",
						  "enumerate", "eval", "filter", "float", "format", "frozenset",
						  "getattr", "globals", "hasattr", "hash", "help", "hex", "id",
						  "input", "int", "isinstance", "issubclass", "iter", "len",
						  "list", "locals", "map", "max", "memoryview", "min", "next",
						  "object", "oct", "open", "ord", "pow", "property", "range",
						  "repr", "reversed", "round", "set", "setattr", "slice",
						  "sorted", "staticmethod", "str", "sum", "super", "tuple",
						  "type", "vars", "zip", "__import__", "NotImplemented",
						  "Ellipsis", "__debug__"];
	
	function top(state) {
	  return state.scopes[state.scopes.length - 1];
	}
	
	function mkPython(parserConf) {
	  var ERRORCLASS = "error";
	
	  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
	  //               (Backwards-compatibility with old, cumbersome config system)
	  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,
					   parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/];
	  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);
	
	  var hangingIndent = parserConf.hangingIndent;
	
	  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;
	  if (parserConf.extra_keywords != undefined)
		myKeywords = myKeywords.concat(parserConf.extra_keywords);
	
	  if (parserConf.extra_builtins != undefined)
		myBuiltins = myBuiltins.concat(parserConf.extra_builtins);
	
	  var py3 = !(parserConf.version && Number(parserConf.version) < 3);
	  if (py3) {
		// since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator
		var identifiers = parserConf.identifiers|| /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
		myKeywords = myKeywords.concat(["nonlocal", "None", "aiter", "anext", "async", "await", "breakpoint", "match", "case"]);
		myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
		var stringPrefixes = new RegExp("^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\"{3}|['\"]))", "i");
	  } else {
		var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;
		myKeywords = myKeywords.concat(["exec", "print"]);
		myBuiltins = myBuiltins.concat(["apply", "basestring", "buffer", "cmp", "coerce", "execfile",
										"file", "intern", "long", "raw_input", "reduce", "reload",
										"unichr", "unicode", "xrange", "None"]);
		var stringPrefixes = new RegExp("^(([rubf]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");
	  }
	  var keywords = wordRegexp(myKeywords);
	  var builtins = wordRegexp(myBuiltins);
	
	  // tokenizers
	  function tokenBase(stream, state) {
		var sol = stream.sol() && state.lastToken != "\\";
		if (sol) state.indent = stream.indentation();
		// Handle scope changes
		if (sol && top(state).type == "py") {
		  var scopeOffset = top(state).offset;
		  if (stream.eatSpace()) {
			var lineOffset = stream.indentation();
			if (lineOffset > scopeOffset)
			  pushPyScope(stream, state);
			else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != "#")
			  state.errorToken = true;
			return null;
		  } else {
			var style = tokenBaseInner(stream, state);
			if (scopeOffset > 0 && dedent(stream, state))
			  style += " " + ERRORCLASS;
			return style;
		  }
		}
		return tokenBaseInner(stream, state);
	  }
	
	  function tokenBaseInner(stream, state, inFormat) {
		if (stream.eatSpace()) return null;
	
		// Handle Comments
		if (!inFormat && stream.match(/^#.*/)) return "comment";
	
		// Handle Number Literals
		if (stream.match(/^[0-9\.]/, false)) {
		  var floatLiteral = false;
		  // Floats
		  if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) { floatLiteral = true; }
		  if (stream.match(/^[\d_]+\.\d*/)) { floatLiteral = true; }
		  if (stream.match(/^\.\d+/)) { floatLiteral = true; }
		  if (floatLiteral) {
			// Float literals may be "imaginary"
			stream.eat(/J/i);
			return "number";
		  }
		  // Integers
		  var intLiteral = false;
		  // Hex
		  if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
		  // Binary
		  if (stream.match(/^0b[01_]+/i)) intLiteral = true;
		  // Octal
		  if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
		  // Decimal
		  if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
			// Decimal literals may be "imaginary"
			stream.eat(/J/i);
			// TODO - Can you have imaginary longs?
			intLiteral = true;
		  }
		  // Zero by itself with no other piece of number.
		  if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
		  if (intLiteral) {
			// Integer literals may be "long"
			stream.eat(/L/i);
			return "number";
		  }
		}
	
		// Handle Strings
		if (stream.match(stringPrefixes)) {
		  var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;
		  if (!isFmtString) {
			state.tokenize = tokenStringFactory(stream.current(), state.tokenize);
			return state.tokenize(stream, state);
		  } else {
			state.tokenize = formatStringFactory(stream.current(), state.tokenize);
			return state.tokenize(stream, state);
		  }
		}
	
		for (var i = 0; i < operators.length; i++)
		  if (stream.match(operators[i])) return "operator"
	
		if (stream.match(delimiters)) return "punctuation";
	
		if (state.lastToken == "." && stream.match(identifiers))
		  return "property";
	
		if (stream.match(keywords) || stream.match(wordOperators))
		  return "keyword";
	
		if (stream.match(builtins))
		  return "builtin";
	
		if (stream.match(/^(self|cls)\b/))
		  return "self";
	
		if (stream.match(identifiers)) {
		  if (state.lastToken == "def" || state.lastToken == "class")
			return "def";
		  return "variable";
		}
	
		// Handle non-detected items
		stream.next();
		return inFormat ? null :ERRORCLASS;
	  }
	
	  function formatStringFactory(delimiter, tokenOuter) {
		while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
		  delimiter = delimiter.substr(1);
	
		var singleline = delimiter.length == 1;
		var OUTCLASS = "string";
	
		function tokenNestedExpr(depth) {
		  return function(stream, state) {
			var inner = tokenBaseInner(stream, state, true);
			if (inner == "punctuation") {
			  if (stream.current() == "{") {
				state.tokenize = tokenNestedExpr(depth + 1);
			  } else if (stream.current() == "}") {
				if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);
				else state.tokenize = tokenString;
			  }
			}
			return inner
		  }
		}
	
		function tokenString(stream, state) {
		  while (!stream.eol()) {
			stream.eatWhile(/[^'"\{\}\\]/);
			if (stream.eat("\\")) {
			  stream.next();
			  if (singleline && stream.eol())
				return OUTCLASS;
			} else if (stream.match(delimiter)) {
			  state.tokenize = tokenOuter;
			  return OUTCLASS;
			} else if (stream.match('{{')) {
			  // ignore {{ in f-str
			  return OUTCLASS;
			} else if (stream.match('{', false)) {
			  // switch to nested mode
			  state.tokenize = tokenNestedExpr(0);
			  if (stream.current()) return OUTCLASS;
			  else return state.tokenize(stream, state)
			} else if (stream.match('}}')) {
			  return OUTCLASS;
			} else if (stream.match('}')) {
			  // single } in f-string is an error
			  return ERRORCLASS;
			} else {
			  stream.eat(/['"]/);
			}
		  }
		  if (singleline) {
			if (parserConf.singleLineStringErrors)
			  return ERRORCLASS;
			else
			  state.tokenize = tokenOuter;
		  }
		  return OUTCLASS;
		}
		tokenString.isString = true;
		return tokenString;
	  }
	
	  function tokenStringFactory(delimiter, tokenOuter) {
		while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
		  delimiter = delimiter.substr(1);
	
		var singleline = delimiter.length == 1;
		var OUTCLASS = "string";
	
		function tokenString(stream, state) {
		  while (!stream.eol()) {
			stream.eatWhile(/[^'"\\]/);
			if (stream.eat("\\")) {
			  stream.next();
			  if (singleline && stream.eol())
				return OUTCLASS;
			} else if (stream.match(delimiter)) {
			  state.tokenize = tokenOuter;
			  return OUTCLASS;
			} else {
			  stream.eat(/['"]/);
			}
		  }
		  if (singleline) {
			if (parserConf.singleLineStringErrors)
			  return ERRORCLASS;
			else
			  state.tokenize = tokenOuter;
		  }
		  return OUTCLASS;
		}
		tokenString.isString = true;
		return tokenString;
	  }
	
	  function pushPyScope(stream, state) {
		while (top(state).type != "py") state.scopes.pop();
		state.scopes.push({offset: top(state).offset + stream.indentUnit,
						   type: "py",
						   align: null});
	  }
	
	  function pushBracketScope(stream, state, type) {
		var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false) ? null : stream.column() + 1;
		state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),
						   type: type,
						   align: align});
	  }
	
	  function dedent(stream, state) {
		var indented = stream.indentation();
		while (state.scopes.length > 1 && top(state).offset > indented) {
		  if (top(state).type != "py") return true;
		  state.scopes.pop();
		}
		return top(state).offset != indented;
	  }
	
	  function tokenLexer(stream, state) {
		if (stream.sol()) {
		  state.beginningOfLine = true;
		  state.dedent = false;
		}
	
		var style = state.tokenize(stream, state);
		var current = stream.current();
	
		// Handle decorators
		if (state.beginningOfLine && current == "@")
		  return stream.match(identifiers, false) ? "meta" : py3 ? "operator" : ERRORCLASS;
	
		if (/\S/.test(current)) state.beginningOfLine = false;
	
		if ((style == "variable" || style == "builtin")
			&& state.lastToken == "meta")
		  style = "meta";
	
		// Handle scope changes.
		if (current == "pass" || current == "return")
		  state.dedent = true;
	
		if (current == "lambda") state.lambda = true;
		if (current == ":" && !state.lambda && top(state).type == "py" && stream.match(/^\s*(?:#|$)/, false))
		  pushPyScope(stream, state);
	
		if (current.length == 1 && !/string|comment/.test(style)) {
		  var delimiter_index = "[({".indexOf(current);
		  if (delimiter_index != -1)
			pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index+1));
	
		  delimiter_index = "])}".indexOf(current);
		  if (delimiter_index != -1) {
			if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);
			else return ERRORCLASS;
		  }
		}
		if (state.dedent && stream.eol() && top(state).type == "py" && state.scopes.length > 1)
		  state.scopes.pop();
	
		return style;
	  }
	
	  return {
		name: "python",
	
		startState: function() {
		  return {
			tokenize: tokenBase,
			scopes: [{offset: 0, type: "py", align: null}],
			indent: 0,
			lastToken: null,
			lambda: false,
			dedent: 0
		  };
		},
	
		token: function(stream, state) {
		  var addErr = state.errorToken;
		  if (addErr) state.errorToken = false;
		  var style = tokenLexer(stream, state);
	
		  if (style && style != "comment")
			state.lastToken = (style == "keyword" || style == "punctuation") ? stream.current() : style;
		  if (style == "punctuation") style = null;
	
		  if (stream.eol() && state.lambda)
			state.lambda = false;
		  return addErr ? ERRORCLASS : style;
		},
	
		indent: function(state, textAfter, cx) {
		  if (state.tokenize != tokenBase)
			return state.tokenize.isString ? null : 0;
	
		  var scope = top(state);
		  var closing = scope.type == textAfter.charAt(0) ||
			  scope.type == "py" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);
		  if (scope.align != null)
			return scope.align - (closing ? 1 : 0)
		  else
			return scope.offset - (closing ? hangingIndent || cx.unit : 0)
		},
	
		languageData: {
		  autocomplete: commonKeywords.concat(commonBuiltins).concat(["exec", "print"]),
		  indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
		  commentTokens: {line: "#"},
		  closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
		}
	  };
	}
	var words = function(str) { return str.split(" "); };
	
	const python = mkPython({});
	
	const cython = mkPython({
	  extra_keywords: words("by cdef cimport cpdef ctypedef enum except "+
							"extern gil include nogil property public "+
							"readonly struct union DEF IF ELIF ELSE")
	});
	
	exports.cython = cython;
	exports.mkPython = mkPython;
	exports.python = python;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/q.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/q.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var curPunc,
		keywords=buildRE(["abs","acos","aj","aj0","all","and","any","asc","asin","asof","atan","attr","avg","avgs","bin","by","ceiling","cols","cor","cos","count","cov","cross","csv","cut","delete","deltas","desc","dev","differ","distinct","div","do","each","ej","enlist","eval","except","exec","exit","exp","fby","fills","first","fkeys","flip","floor","from","get","getenv","group","gtime","hclose","hcount","hdel","hopen","hsym","iasc","idesc","if","ij","in","insert","inter","inv","key","keys","last","like","list","lj","load","log","lower","lsq","ltime","ltrim","mavg","max","maxs","mcount","md5","mdev","med","meta","min","mins","mmax","mmin","mmu","mod","msum","neg","next","not","null","or","over","parse","peach","pj","plist","prd","prds","prev","prior","rand","rank","ratios","raze","read0","read1","reciprocal","reverse","rload","rotate","rsave","rtrim","save","scan","select","set","setenv","show","signum","sin","sqrt","ss","ssr","string","sublist","sum","sums","sv","system","tables","tan","til","trim","txf","type","uj","ungroup","union","update","upper","upsert","value","var","view","views","vs","wavg","where","where","while","within","wj","wj1","wsum","xasc","xbar","xcol","xcols","xdesc","xexp","xgroup","xkey","xlog","xprev","xrank"]),
		E=/[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
	function buildRE(w){return new RegExp("^("+w.join("|")+")$");}
	function tokenBase(stream,state){
	  var sol=stream.sol(),c=stream.next();
	  curPunc=null;
	  if(sol)
		if(c=="/")
		  return (state.tokenize=tokenLineComment)(stream,state);
	  else if(c=="\\"){
		if(stream.eol()||/\s/.test(stream.peek()))
		  return stream.skipToEnd(),/^\\\s*$/.test(stream.current())?(state.tokenize=tokenCommentToEOF)(stream):state.tokenize=tokenBase,"comment";
		else
		  return state.tokenize=tokenBase,"builtin";
	  }
	  if(/\s/.test(c))
		return stream.peek()=="/"?(stream.skipToEnd(),"comment"):"null";
	  if(c=='"')
		return (state.tokenize=tokenString)(stream,state);
	  if(c=='`')
		return stream.eatWhile(/[A-Za-z\d_:\/.]/),"macroName";
	  if(("."==c&&/\d/.test(stream.peek()))||/\d/.test(c)){
		var t=null;
		stream.backUp(1);
		if(stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/)
		   || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/)
		   || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/)
		   || stream.match(/^\d+[ptuv]{1}/))
		  t="temporal";
		else if(stream.match(/^0[NwW]{1}/)
				|| stream.match(/^0x[\da-fA-F]*/)
				|| stream.match(/^[01]+[b]{1}/)
				|| stream.match(/^\d+[chijn]{1}/)
				|| stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
		  t="number";
		return (t&&(!(c=stream.peek())||E.test(c)))?t:(stream.next(),"error");
	  }
	  if(/[A-Za-z]|\./.test(c))
		return stream.eatWhile(/[A-Za-z._\d]/),keywords.test(stream.current())?"keyword":"variable";
	  if(/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c))
		return null;
	  if(/[{}\(\[\]\)]/.test(c))
		return null;
	  return "error";
	}
	function tokenLineComment(stream,state){
	  return stream.skipToEnd(),/\/\s*$/.test(stream.current())?(state.tokenize=tokenBlockComment)(stream,state):(state.tokenize=tokenBase),"comment";
	}
	function tokenBlockComment(stream,state){
	  var f=stream.sol()&&stream.peek()=="\\";
	  stream.skipToEnd();
	  if(f&&/^\\\s*$/.test(stream.current()))
		state.tokenize=tokenBase;
	  return "comment";
	}
	function tokenCommentToEOF(stream){return stream.skipToEnd(),"comment";}
	function tokenString(stream,state){
	  var escaped=false,next,end=false;
	  while((next=stream.next())){
		if(next=="\""&&!escaped){end=true;break;}
		escaped=!escaped&&next=="\\";
	  }
	  if(end)state.tokenize=tokenBase;
	  return "string";
	}
	function pushContext(state,type,col){state.context={prev:state.context,indent:state.indent,col:col,type:type};}
	function popContext(state){state.indent=state.context.indent;state.context=state.context.prev;}
	const q = {
	  name: "q",
	  startState:function(){
		return {tokenize:tokenBase,
			   context:null,
			   indent:0,
			   col:0};
	  },
	  token:function(stream,state){
		if(stream.sol()){
		  if(state.context&&state.context.align==null)
			state.context.align=false;
		  state.indent=stream.indentation();
		}
		//if (stream.eatSpace()) return null;
		var style=state.tokenize(stream,state);
		if(style!="comment"&&state.context&&state.context.align==null&&state.context.type!="pattern"){
		  state.context.align=true;
		}
		if(curPunc=="(")pushContext(state,")",stream.column());
		else if(curPunc=="[")pushContext(state,"]",stream.column());
		else if(curPunc=="{")pushContext(state,"}",stream.column());
		else if(/[\]\}\)]/.test(curPunc)){
		  while(state.context&&state.context.type=="pattern")popContext(state);
		  if(state.context&&curPunc==state.context.type)popContext(state);
		}
		else if(curPunc=="."&&state.context&&state.context.type=="pattern")popContext(state);
		else if(/atom|string|variable/.test(style)&&state.context){
		  if(/[\}\]]/.test(state.context.type))
			pushContext(state,"pattern",stream.column());
		  else if(state.context.type=="pattern"&&!state.context.align){
			state.context.align=true;
			state.context.col=stream.column();
		  }
		}
		return style;
	  },
	  indent:function(state,textAfter,cx){
		var firstChar=textAfter&&textAfter.charAt(0);
		var context=state.context;
		if(/[\]\}]/.test(firstChar))
		  while (context&&context.type=="pattern")context=context.prev;
		var closing=context&&firstChar==context.type;
		if(!context)
		  return 0;
		else if(context.type=="pattern")
		  return context.col;
		else if(context.align)
		  return context.col+(closing?0:1);
		else
		  return context.indent+(closing?0:cx.unit);
	  }
	};
	
	exports.q = q;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/r.cjs":
	/*!******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/r.cjs ***!
	  \******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordObj(words) {
	  var res = {};
	  for (var i = 0; i < words.length; ++i) res[words[i]] = true;
	  return res;
	}
	var commonAtoms = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
	var commonBuiltins = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
	var commonKeywords = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
	var commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];
	
	var atoms = wordObj(commonAtoms);
	var builtins = wordObj(commonBuiltins);
	var keywords = wordObj(commonKeywords);
	var blockkeywords = wordObj(commonBlockKeywords);
	var opChars = /[+\-*\/^<>=!&|~$:]/;
	var curPunc;
	
	function tokenBase(stream, state) {
	  curPunc = null;
	  var ch = stream.next();
	  if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  } else if (ch == "0" && stream.eat("x")) {
		stream.eatWhile(/[\da-f]/i);
		return "number";
	  } else if (ch == "." && stream.eat(/\d/)) {
		stream.match(/\d*(?:e[+\-]?\d+)?/);
		return "number";
	  } else if (/\d/.test(ch)) {
		stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
		return "number";
	  } else if (ch == "'" || ch == '"') {
		state.tokenize = tokenString(ch);
		return "string";
	  } else if (ch == "`") {
		stream.match(/[^`]+`/);
		return "string.special";
	  } else if (ch == "." && stream.match(/.(?:[.]|\d+)/)) {
		return "keyword";
	  } else if (/[a-zA-Z\.]/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		var word = stream.current();
		if (atoms.propertyIsEnumerable(word)) return "atom";
		if (keywords.propertyIsEnumerable(word)) {
		  // Block keywords start new blocks, except 'else if', which only starts
		  // one new block for the 'if', no block for the 'else'.
		  if (blockkeywords.propertyIsEnumerable(word) &&
			  !stream.match(/\s*if(\s+|$)/, false))
			curPunc = "block";
		  return "keyword";
		}
		if (builtins.propertyIsEnumerable(word)) return "builtin";
		return "variable";
	  } else if (ch == "%") {
		if (stream.skipTo("%")) stream.next();
		return "variableName.special";
	  } else if (
		(ch == "<" && stream.eat("-")) ||
		  (ch == "<" && stream.match("<-")) ||
		  (ch == "-" && stream.match(/>>?/))
	  ) {
		return "operator";
	  } else if (ch == "=" && state.ctx.argList) {
		return "operator";
	  } else if (opChars.test(ch)) {
		if (ch == "$") return "operator";
		stream.eatWhile(opChars);
		return "operator";
	  } else if (/[\(\){}\[\];]/.test(ch)) {
		curPunc = ch;
		if (ch == ";") return "punctuation";
		return null;
	  } else {
		return null;
	  }
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		if (stream.eat("\\")) {
		  var ch = stream.next();
		  if (ch == "x") stream.match(/^[a-f0-9]{2}/i);
		  else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}")) stream.next();
		  else if (ch == "u") stream.match(/^[a-f0-9]{4}/i);
		  else if (ch == "U") stream.match(/^[a-f0-9]{8}/i);
		  else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);
		  return "string.special";
		} else {
		  var next;
		  while ((next = stream.next()) != null) {
			if (next == quote) { state.tokenize = tokenBase; break; }
			if (next == "\\") { stream.backUp(1); break; }
		  }
		  return "string";
		}
	  };
	}
	
	var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4;
	
	function push(state, type, stream) {
	  state.ctx = {type: type,
				   indent: state.indent,
				   flags: 0,
				   column: stream.column(),
				   prev: state.ctx};
	}
	function setFlag(state, flag) {
	  var ctx = state.ctx;
	  state.ctx = {type: ctx.type,
				   indent: ctx.indent,
				   flags: ctx.flags | flag,
				   column: ctx.column,
				   prev: ctx.prev};
	}
	function pop(state) {
	  state.indent = state.ctx.indent;
	  state.ctx = state.ctx.prev;
	}
	
	const r = {
	  name: "r",
	  startState: function(indentUnit) {
		return {tokenize: tokenBase,
				ctx: {type: "top",
					  indent: -indentUnit,
					  flags: ALIGN_NO},
				indent: 0,
				afterIdent: false};
	  },
	
	  token: function(stream, state) {
		if (stream.sol()) {
		  if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;
		  if (state.ctx.flags & BRACELESS) pop(state);
		  state.indent = stream.indentation();
		}
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
		if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);
	
		if ((curPunc == ";" || curPunc == "{" || curPunc == "}") && state.ctx.type == "block") pop(state);
		if (curPunc == "{") push(state, "}", stream);
		else if (curPunc == "(") {
		  push(state, ")", stream);
		  if (state.afterIdent) state.ctx.argList = true;
		}
		else if (curPunc == "[") push(state, "]", stream);
		else if (curPunc == "block") push(state, "block", stream);
		else if (curPunc == state.ctx.type) pop(state);
		else if (state.ctx.type == "block" && style != "comment") setFlag(state, BRACELESS);
		state.afterIdent = style == "variable" || style == "keyword";
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase) return 0;
		var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,
			closing = firstChar == ctx.type;
		if (ctx.flags & BRACELESS) ctx = ctx.prev;
		if (ctx.type == "block") return ctx.indent + (firstChar == "{" ? 0 : cx.unit);
		else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);
		else return ctx.indent + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		wordChars: ".",
		commentTokens: {line: "#"},
		autocomplete: commonAtoms.concat(commonBuiltins, commonKeywords)
	  }
	};
	
	exports.r = r;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/rpm.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/rpm.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var headerSeparator = /^-+$/;
	var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
	var simpleEmail = /^[\w+.-]+@[\w.-]+/;
	
	const rpmChanges = {
	  name: "rpmchanges",
	  token: function(stream) {
		if (stream.sol()) {
		  if (stream.match(headerSeparator)) { return 'tag'; }
		  if (stream.match(headerLine)) { return 'tag'; }
		}
		if (stream.match(simpleEmail)) { return 'string'; }
		stream.next();
		return null;
	  }
	};
	
	// Quick and dirty spec file highlighting
	
	var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;
	
	var preamble = /^[a-zA-Z0-9()]+:/;
	var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
	var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros
	var control_flow_simple = /^%(else|endif)/; // rpm control flow macros
	var operators = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; // operators in control flow macros
	
	const rpmSpec = {
	  name: "rpmspec",
	  startState: function () {
		return {
		  controlFlow: false,
		  macroParameters: false,
		  section: false
		};
	  },
	  token: function (stream, state) {
		var ch = stream.peek();
		if (ch == "#") { stream.skipToEnd(); return "comment"; }
	
		if (stream.sol()) {
		  if (stream.match(preamble)) { return "header"; }
		  if (stream.match(section)) { return "atom"; }
		}
	
		if (stream.match(/^\$\w+/)) { return "def"; } // Variables like '$RPM_BUILD_ROOT'
		if (stream.match(/^\$\{\w+\}/)) { return "def"; } // Variables like '${RPM_BUILD_ROOT}'
	
		if (stream.match(control_flow_simple)) { return "keyword"; }
		if (stream.match(control_flow_complex)) {
		  state.controlFlow = true;
		  return "keyword";
		}
		if (state.controlFlow) {
		  if (stream.match(operators)) { return "operator"; }
		  if (stream.match(/^(\d+)/)) { return "number"; }
		  if (stream.eol()) { state.controlFlow = false; }
		}
	
		if (stream.match(arch)) {
		  if (stream.eol()) { state.controlFlow = false; }
		  return "number";
		}
	
		// Macros like '%make_install' or '%attr(0775,root,root)'
		if (stream.match(/^%[\w]+/)) {
		  if (stream.match('(')) { state.macroParameters = true; }
		  return "keyword";
		}
		if (state.macroParameters) {
		  if (stream.match(/^\d+/)) { return "number";}
		  if (stream.match(')')) {
			state.macroParameters = false;
			return "keyword";
		  }
		}
	
		// Macros like '%{defined fedora}'
		if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
		  if (stream.eol()) { state.controlFlow = false; }
		  return "def";
		}
	
		stream.next();
		return null;
	  }
	};
	
	exports.rpmChanges = rpmChanges;
	exports.rpmSpec = rpmSpec;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ruby.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ruby.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordObj(words) {
	  var o = {};
	  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
	  return o;
	}
	
	var keywordList = [
	  "alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else",
	  "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or",
	  "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless",
	  "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc",
	  "caller", "lambda", "proc", "public", "protected", "private", "require", "load",
	  "require_relative", "extend", "autoload", "__END__", "__FILE__", "__LINE__", "__dir__"
	], keywords = wordObj(keywordList);
	
	var indentWords = wordObj(["def", "class", "case", "for", "while", "until", "module",
							   "catch", "loop", "proc", "begin"]);
	var dedentWords = wordObj(["end", "until"]);
	var opening = {"[": "]", "{": "}", "(": ")"};
	var closing = {"]": "[", "}": "{", ")": "("};
	
	var curPunc;
	
	function chain(newtok, stream, state) {
	  state.tokenize.push(newtok);
	  return newtok(stream, state);
	}
	
	function tokenBase(stream, state) {
	  if (stream.sol() && stream.match("=begin") && stream.eol()) {
		state.tokenize.push(readBlockComment);
		return "comment";
	  }
	  if (stream.eatSpace()) return null;
	  var ch = stream.next(), m;
	  if (ch == "`" || ch == "'" || ch == '"') {
		return chain(readQuoted(ch, "string", ch == '"' || ch == "`"), stream, state);
	  } else if (ch == "/") {
		if (regexpAhead(stream))
		  return chain(readQuoted(ch, "string.special", true), stream, state);
		else
		  return "operator";
	  } else if (ch == "%") {
		var style = "string", embed = true;
		if (stream.eat("s")) style = "atom";
		else if (stream.eat(/[WQ]/)) style = "string";
		else if (stream.eat(/[r]/)) style = "string.special";
		else if (stream.eat(/[wxq]/)) { style = "string"; embed = false; }
		var delim = stream.eat(/[^\w\s=]/);
		if (!delim) return "operator";
		if (opening.propertyIsEnumerable(delim)) delim = opening[delim];
		return chain(readQuoted(delim, style, embed, true), stream, state);
	  } else if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  } else if (ch == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
		return chain(readHereDoc(m[2], m[1]), stream, state);
	  } else if (ch == "0") {
		if (stream.eat("x")) stream.eatWhile(/[\da-fA-F]/);
		else if (stream.eat("b")) stream.eatWhile(/[01]/);
		else stream.eatWhile(/[0-7]/);
		return "number";
	  } else if (/\d/.test(ch)) {
		stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
		return "number";
	  } else if (ch == "?") {
		while (stream.match(/^\\[CM]-/)) {}
		if (stream.eat("\\")) stream.eatWhile(/\w/);
		else stream.next();
		return "string";
	  } else if (ch == ":") {
		if (stream.eat("'")) return chain(readQuoted("'", "atom", false), stream, state);
		if (stream.eat('"')) return chain(readQuoted('"', "atom", true), stream, state);
	
		// :> :>> :< :<< are valid symbols
		if (stream.eat(/[\<\>]/)) {
		  stream.eat(/[\<\>]/);
		  return "atom";
		}
	
		// :+ :- :/ :* :| :& :! are valid symbols
		if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
		  return "atom";
		}
	
		// Symbols can't start by a digit
		if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
		  stream.eatWhile(/[\w$\xa1-\uffff]/);
		  // Only one ? ! = is allowed and only as the last character
		  stream.eat(/[\?\!\=]/);
		  return "atom";
		}
		return "operator";
	  } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
		stream.eat("@");
		stream.eatWhile(/[\w\xa1-\uffff]/);
		return "propertyName";
	  } else if (ch == "$") {
		if (stream.eat(/[a-zA-Z_]/)) {
		  stream.eatWhile(/[\w]/);
		} else if (stream.eat(/\d/)) {
		  stream.eat(/\d/);
		} else {
		  stream.next(); // Must be a special global like $: or $!
		}
		return "variableName.special";
	  } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
		stream.eatWhile(/[\w\xa1-\uffff]/);
		stream.eat(/[\?\!]/);
		if (stream.eat(":")) return "atom";
		return "variable";
	  } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
		curPunc = "|";
		return null;
	  } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
		curPunc = ch;
		return null;
	  } else if (ch == "-" && stream.eat(">")) {
		return "operator";
	  } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
		var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
		if (ch == "." && !more) curPunc = ".";
		return "operator";
	  } else {
		return null;
	  }
	}
	
	function regexpAhead(stream) {
	  var start = stream.pos, depth = 0, next, found = false, escaped = false;
	  while ((next = stream.next()) != null) {
		if (!escaped) {
		  if ("[{(".indexOf(next) > -1) {
			depth++;
		  } else if ("]})".indexOf(next) > -1) {
			depth--;
			if (depth < 0) break
		  } else if (next == "/" && depth == 0) {
			found = true;
			break
		  }
		  escaped = next == "\\";
		} else {
		  escaped = false;
		}
	  }
	  stream.backUp(stream.pos - start);
	  return found
	}
	
	function tokenBaseUntilBrace(depth) {
	  if (!depth) depth = 1;
	  return function(stream, state) {
		if (stream.peek() == "}") {
		  if (depth == 1) {
			state.tokenize.pop();
			return state.tokenize[state.tokenize.length-1](stream, state);
		  } else {
			state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
		  }
		} else if (stream.peek() == "{") {
		  state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
		}
		return tokenBase(stream, state);
	  };
	}
	function tokenBaseOnce() {
	  var alreadyCalled = false;
	  return function(stream, state) {
		if (alreadyCalled) {
		  state.tokenize.pop();
		  return state.tokenize[state.tokenize.length-1](stream, state);
		}
		alreadyCalled = true;
		return tokenBase(stream, state);
	  };
	}
	function readQuoted(quote, style, embed, unescaped) {
	  return function(stream, state) {
		var escaped = false, ch;
	
		if (state.context.type === 'read-quoted-paused') {
		  state.context = state.context.prev;
		  stream.eat("}");
		}
	
		while ((ch = stream.next()) != null) {
		  if (ch == quote && (unescaped || !escaped)) {
			state.tokenize.pop();
			break;
		  }
		  if (embed && ch == "#" && !escaped) {
			if (stream.eat("{")) {
			  if (quote == "}") {
				state.context = {prev: state.context, type: 'read-quoted-paused'};
			  }
			  state.tokenize.push(tokenBaseUntilBrace());
			  break;
			} else if (/[@\$]/.test(stream.peek())) {
			  state.tokenize.push(tokenBaseOnce());
			  break;
			}
		  }
		  escaped = !escaped && ch == "\\";
		}
		return style;
	  };
	}
	function readHereDoc(phrase, mayIndent) {
	  return function(stream, state) {
		if (mayIndent) stream.eatSpace();
		if (stream.match(phrase)) state.tokenize.pop();
		else stream.skipToEnd();
		return "string";
	  };
	}
	function readBlockComment(stream, state) {
	  if (stream.sol() && stream.match("=end") && stream.eol())
		state.tokenize.pop();
	  stream.skipToEnd();
	  return "comment";
	}
	
	const ruby = {
	  name: "ruby",
	  startState: function(indentUnit) {
		return {tokenize: [tokenBase],
				indented: 0,
				context: {type: "top", indented: -indentUnit},
				continuedLine: false,
				lastTok: null,
				varList: false};
	  },
	
	  token: function(stream, state) {
		curPunc = null;
		if (stream.sol()) state.indented = stream.indentation();
		var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;
		var thisTok = curPunc;
		if (style == "variable") {
		  var word = stream.current();
		  style = state.lastTok == "." ? "property"
			: keywords.propertyIsEnumerable(stream.current()) ? "keyword"
			: /^[A-Z]/.test(word) ? "tag"
			: (state.lastTok == "def" || state.lastTok == "class" || state.varList) ? "def"
			: "variable";
		  if (style == "keyword") {
			thisTok = word;
			if (indentWords.propertyIsEnumerable(word)) kwtype = "indent";
			else if (dedentWords.propertyIsEnumerable(word)) kwtype = "dedent";
			else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
			  kwtype = "indent";
			else if (word == "do" && state.context.indented < state.indented)
			  kwtype = "indent";
		  }
		}
		if (curPunc || (style && style != "comment")) state.lastTok = thisTok;
		if (curPunc == "|") state.varList = !state.varList;
	
		if (kwtype == "indent" || /[\(\[\{]/.test(curPunc))
		  state.context = {prev: state.context, type: curPunc || style, indented: state.indented};
		else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc)) && state.context.prev)
		  state.context = state.context.prev;
	
		if (stream.eol())
		  state.continuedLine = (curPunc == "\\" || style == "operator");
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;
		var firstChar = textAfter && textAfter.charAt(0);
		var ct = state.context;
		var closed = ct.type == closing[firstChar] ||
			ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
		return ct.indented + (closed ? 0 : cx.unit) +
		  (state.continuedLine ? cx.unit : 0);
	  },
	
	  languageData: {
		indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
		commentTokens: {line: "#"},
		autocomplete: keywordList
	  }
	};
	
	exports.ruby = ruby;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/sas.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/sas.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var words = {};
	var isDoubleOperatorSym = {
	  eq: 'operator',
	  lt: 'operator',
	  le: 'operator',
	  gt: 'operator',
	  ge: 'operator',
	  "in": 'operator',
	  ne: 'operator',
	  or: 'operator'
	};
	var isDoubleOperatorChar = /(<=|>=|!=|<>)/;
	var isSingleOperatorChar = /[=\(:\),{}.*<>+\-\/^\[\]]/;
	
	// Takes a string of words separated by spaces and adds them as
	// keys with the value of the first argument 'style'
	function define(style, string, context) {
	  if (context) {
		var split = string.split(' ');
		for (var i = 0; i < split.length; i++) {
		  words[split[i]] = {style: style, state: context};
		}
	  }
	}
	//datastep
	define('def', 'stack pgm view source debug nesting nolist', ['inDataStep']);
	define('def', 'if while until for do do; end end; then else cancel', ['inDataStep']);
	define('def', 'label format _n_ _error_', ['inDataStep']);
	define('def', 'ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME', ['inDataStep']);
	define('def', 'filevar finfo finv fipname fipnamel fipstate first firstobs floor', ['inDataStep']);
	define('def', 'varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday', ['inDataStep']);
	define('def', 'zipfips zipname zipnamel zipstate', ['inDataStep']);
	define('def', 'put putc putn', ['inDataStep']);
	define('builtin', 'data run', ['inDataStep']);
	
	
	//proc
	define('def', 'data', ['inProc']);
	
	// flow control for macros
	define('def', '%if %end %end; %else %else; %do %do; %then', ['inMacro']);
	
	//everywhere
	define('builtin', 'proc run; quit; libname filename %macro %mend option options', ['ALL']);
	
	define('def', 'footnote title libname ods', ['ALL']);
	define('def', '%let %put %global %sysfunc %eval ', ['ALL']);
	// automatic macro variables http://support.sas.com/documentation/cdl/en/mcrolref/61885/HTML/default/viewer.htm#a003167023.htm
	define('variable', '&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext', ['ALL']);
	
	//footnote[1-9]? title[1-9]?
	
	//options statement
	define('def', 'source2 nosource2 page pageno pagesize', ['ALL']);
	
	//proc and datastep
	define('def', '_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max', ['inDataStep', 'inProc']);
	define('operator', 'and not ', ['inDataStep', 'inProc']);
	
	// Main function
	function tokenize(stream, state) {
	  // Finally advance the stream
	  var ch = stream.next();
	
	  // BLOCKCOMMENT
	  if (ch === '/' && stream.eat('*')) {
		state.continueComment = true;
		return "comment";
	  } else if (state.continueComment === true) { // in comment block
		//comment ends at the beginning of the line
		if (ch === '*' && stream.peek() === '/') {
		  stream.next();
		  state.continueComment = false;
		} else if (stream.skipTo('*')) { //comment is potentially later in line
		  stream.skipTo('*');
		  stream.next();
		  if (stream.eat('/'))
			state.continueComment = false;
		} else {
		  stream.skipToEnd();
		}
		return "comment";
	  }
	
	  if (ch == "*" && stream.column() == stream.indentation()) {
		stream.skipToEnd();
		return "comment"
	  }
	
	  // DoubleOperator match
	  var doubleOperator = ch + stream.peek();
	
	  if ((ch === '"' || ch === "'") && !state.continueString) {
		state.continueString = ch;
		return "string"
	  } else if (state.continueString) {
		if (state.continueString == ch) {
		  state.continueString = null;
		} else if (stream.skipTo(state.continueString)) {
		  // quote found on this line
		  stream.next();
		  state.continueString = null;
		} else {
		  stream.skipToEnd();
		}
		return "string";
	  } else if (state.continueString !== null && stream.eol()) {
		stream.skipTo(state.continueString) || stream.skipToEnd();
		return "string";
	  } else if (/[\d\.]/.test(ch)) { //find numbers
		if (ch === ".")
		  stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
		else if (ch === "0")
		  stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
		else
		  stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
		return "number";
	  } else if (isDoubleOperatorChar.test(ch + stream.peek())) { // TWO SYMBOL TOKENS
		stream.next();
		return "operator";
	  } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
		stream.next();
		if (stream.peek() === ' ')
		  return isDoubleOperatorSym[doubleOperator.toLowerCase()];
	  } else if (isSingleOperatorChar.test(ch)) { // SINGLE SYMBOL TOKENS
		return "operator";
	  }
	
	  // Matches one whole word -- even if the word is a character
	  var word;
	  if (stream.match(/[%&;\w]+/, false) != null) {
		word = ch + stream.match(/[%&;\w]+/, true);
		if (/&/.test(word)) return 'variable'
	  } else {
		word = ch;
	  }
	  // the word after DATA PROC or MACRO
	  if (state.nextword) {
		stream.match(/[\w]+/);
		// match memname.libname
		if (stream.peek() === '.') stream.skipTo(' ');
		state.nextword = false;
		return 'variableName.special';
	  }
	
	  word = word.toLowerCase();
	  // Are we in a DATA Step?
	  if (state.inDataStep) {
		if (word === 'run;' || stream.match(/run\s;/)) {
		  state.inDataStep = false;
		  return 'builtin';
		}
		// variable formats
		if ((word) && stream.next() === '.') {
		  //either a format or libname.memname
		  if (/\w/.test(stream.peek())) return 'variableName.special';
		  else return 'variable';
		}
		// do we have a DATA Step keyword
		if (word && words.hasOwnProperty(word) &&
			(words[word].state.indexOf("inDataStep") !== -1 ||
			 words[word].state.indexOf("ALL") !== -1)) {
		  //backup to the start of the word
		  if (stream.start < stream.pos)
			stream.backUp(stream.pos - stream.start);
		  //advance the length of the word and return
		  for (var i = 0; i < word.length; ++i) stream.next();
		  return words[word].style;
		}
	  }
	  // Are we in an Proc statement?
	  if (state.inProc) {
		if (word === 'run;' || word === 'quit;') {
		  state.inProc = false;
		  return 'builtin';
		}
		// do we have a proc keyword
		if (word && words.hasOwnProperty(word) &&
			(words[word].state.indexOf("inProc") !== -1 ||
			 words[word].state.indexOf("ALL") !== -1)) {
		  stream.match(/[\w]+/);
		  return words[word].style;
		}
	  }
	  // Are we in a Macro statement?
	  if (state.inMacro) {
		if (word === '%mend') {
		  if (stream.peek() === ';') stream.next();
		  state.inMacro = false;
		  return 'builtin';
		}
		if (word && words.hasOwnProperty(word) &&
			(words[word].state.indexOf("inMacro") !== -1 ||
			 words[word].state.indexOf("ALL") !== -1)) {
		  stream.match(/[\w]+/);
		  return words[word].style;
		}
	
		return 'atom';
	  }
	  // Do we have Keywords specific words?
	  if (word && words.hasOwnProperty(word)) {
		// Negates the initial next()
		stream.backUp(1);
		// Actually move the stream
		stream.match(/[\w]+/);
		if (word === 'data' && /=/.test(stream.peek()) === false) {
		  state.inDataStep = true;
		  state.nextword = true;
		  return 'builtin';
		}
		if (word === 'proc') {
		  state.inProc = true;
		  state.nextword = true;
		  return 'builtin';
		}
		if (word === '%macro') {
		  state.inMacro = true;
		  state.nextword = true;
		  return 'builtin';
		}
		if (/title[1-9]/.test(word)) return 'def';
	
		if (word === 'footnote') {
		  stream.eat(/[1-9]/);
		  return 'def';
		}
	
		// Returns their value as state in the prior define methods
		if (state.inDataStep === true && words[word].state.indexOf("inDataStep") !== -1)
		  return words[word].style;
		if (state.inProc === true && words[word].state.indexOf("inProc") !== -1)
		  return words[word].style;
		if (state.inMacro === true && words[word].state.indexOf("inMacro") !== -1)
		  return words[word].style;
		if (words[word].state.indexOf("ALL") !== -1)
		  return words[word].style;
		return null;
	  }
	  // Unrecognized syntax
	  return null;
	}
	
	const sas = {
	  name: "sas",
	  startState: function () {
		return {
		  inDataStep: false,
		  inProc: false,
		  inMacro: false,
		  nextword: false,
		  continueString: null,
		  continueComment: false
		};
	  },
	  token: function (stream, state) {
		// Strip the spaces, but regex will account for them either way
		if (stream.eatSpace()) return null;
		// Go through the main process
		return tokenize(stream, state);
	  },
	
	  languageData: {
		commentTokens: {block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.sas = sas;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/scheme.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/scheme.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var BUILTIN = "builtin", COMMENT = "comment", STRING = "string",
		SYMBOL = "symbol", ATOM = "atom", NUMBER = "number", BRACKET = "bracket";
	var INDENT_WORD_SKIP = 2;
	
	function makeKeywords(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var keywords = makeKeywords("λ case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
	var indentKeys = makeKeywords("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");
	
	function stateStack(indent, type, prev) { // represents a state stack object
	  this.indent = indent;
	  this.type = type;
	  this.prev = prev;
	}
	
	function pushStack(state, indent, type) {
	  state.indentStack = new stateStack(indent, type, state.indentStack);
	}
	
	function popStack(state) {
	  state.indentStack = state.indentStack.prev;
	}
	
	var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
	var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
	var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
	var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
	
	function isBinaryNumber (stream) {
	  return stream.match(binaryMatcher);
	}
	
	function isOctalNumber (stream) {
	  return stream.match(octalMatcher);
	}
	
	function isDecimalNumber (stream, backup) {
	  if (backup === true) {
		stream.backUp(1);
	  }
	  return stream.match(decimalMatcher);
	}
	
	function isHexNumber (stream) {
	  return stream.match(hexMatcher);
	}
	
	function processEscapedSequence(stream, options) {
	  var next, escaped = false;
	  while ((next = stream.next()) != null) {
		if (next == options.token && !escaped) {
		  options.state.mode = false;
		  break;
		}
		escaped = !escaped && next == "\\";
	  }
	}
	
	const scheme = {
	  name: "scheme",
	  startState: function () {
		return {
		  indentStack: null,
		  indentation: 0,
		  mode: false,
		  sExprComment: false,
		  sExprQuote: false
		};
	  },
	
	  token: function (stream, state) {
		if (state.indentStack == null && stream.sol()) {
		  // update indentation, but only if indentStack is empty
		  state.indentation = stream.indentation();
		}
	
		// skip spaces
		if (stream.eatSpace()) {
		  return null;
		}
		var returnType = null;
	
		switch(state.mode){
		case "string": // multi-line string parsing mode
		  processEscapedSequence(stream, {
			token: "\"",
			state: state
		  });
		  returnType = STRING; // continue on in scheme-string mode
		  break;
		case "symbol": // escape symbol
		  processEscapedSequence(stream, {
			token: "|",
			state: state
		  });
		  returnType = SYMBOL; // continue on in scheme-symbol mode
		  break;
		case "comment": // comment parsing mode
		  var next, maybeEnd = false;
		  while ((next = stream.next()) != null) {
			if (next == "#" && maybeEnd) {
	
			  state.mode = false;
			  break;
			}
			maybeEnd = (next == "|");
		  }
		  returnType = COMMENT;
		  break;
		case "s-expr-comment": // s-expr commenting mode
		  state.mode = false;
		  if(stream.peek() == "(" || stream.peek() == "["){
			// actually start scheme s-expr commenting mode
			state.sExprComment = 0;
		  }else {
			// if not we just comment the entire of the next token
			stream.eatWhile(/[^\s\(\)\[\]]/); // eat symbol atom
			returnType = COMMENT;
			break;
		  }
		default: // default parsing mode
		  var ch = stream.next();
	
		  if (ch == "\"") {
			state.mode = "string";
			returnType = STRING;
	
		  } else if (ch == "'") {
			if (stream.peek() == "(" || stream.peek() == "["){
			  if (typeof state.sExprQuote != "number") {
				state.sExprQuote = 0;
			  } // else already in a quoted expression
			  returnType = ATOM;
			} else {
			  stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
			  returnType = ATOM;
			}
		  } else if (ch == '|') {
			state.mode = "symbol";
			returnType = SYMBOL;
		  } else if (ch == '#') {
			if (stream.eat("|")) {                    // Multi-line comment
			  state.mode = "comment"; // toggle to comment mode
			  returnType = COMMENT;
			} else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)
			  returnType = ATOM;
			} else if (stream.eat(';')) {                // S-Expr comment
			  state.mode = "s-expr-comment";
			  returnType = COMMENT;
			} else {
			  var numTest = null, hasExactness = false, hasRadix = true;
			  if (stream.eat(/[ei]/i)) {
				hasExactness = true;
			  } else {
				stream.backUp(1);       // must be radix specifier
			  }
			  if (stream.match(/^#b/i)) {
				numTest = isBinaryNumber;
			  } else if (stream.match(/^#o/i)) {
				numTest = isOctalNumber;
			  } else if (stream.match(/^#x/i)) {
				numTest = isHexNumber;
			  } else if (stream.match(/^#d/i)) {
				numTest = isDecimalNumber;
			  } else if (stream.match(/^[-+0-9.]/, false)) {
				hasRadix = false;
				numTest = isDecimalNumber;
				// re-consume the initial # if all matches failed
			  } else if (!hasExactness) {
				stream.eat('#');
			  }
			  if (numTest != null) {
				if (hasRadix && !hasExactness) {
				  // consume optional exactness after radix
				  stream.match(/^#[ei]/i);
				}
				if (numTest(stream))
				  returnType = NUMBER;
			  }
			}
		  } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal
			returnType = NUMBER;
		  } else if (ch == ";") { // comment
			stream.skipToEnd(); // rest of the line is a comment
			returnType = COMMENT;
		  } else if (ch == "(" || ch == "[") {
			var keyWord = ''; var indentTemp = stream.column(), letter;
			/**
			   Either
			   (indent-word ..
			   (non-indent-word ..
			   (;something else, bracket, etc.
			*/
	
			while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
			  keyWord += letter;
			}
	
			if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word
	
			  pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);
			} else { // non-indent word
			  // we continue eating the spaces
			  stream.eatSpace();
			  if (stream.eol() || stream.peek() == ";") {
				// nothing significant after
				// we restart indentation 1 space after
				pushStack(state, indentTemp + 1, ch);
			  } else {
				pushStack(state, indentTemp + stream.current().length, ch); // else we match
			  }
			}
			stream.backUp(stream.current().length - 1); // undo all the eating
	
			if(typeof state.sExprComment == "number") state.sExprComment++;
			if(typeof state.sExprQuote == "number") state.sExprQuote++;
	
			returnType = BRACKET;
		  } else if (ch == ")" || ch == "]") {
			returnType = BRACKET;
			if (state.indentStack != null && state.indentStack.type == (ch == ")" ? "(" : "[")) {
			  popStack(state);
	
			  if(typeof state.sExprComment == "number"){
				if(--state.sExprComment == 0){
				  returnType = COMMENT; // final closing bracket
				  state.sExprComment = false; // turn off s-expr commenting mode
				}
			  }
			  if(typeof state.sExprQuote == "number"){
				if(--state.sExprQuote == 0){
				  returnType = ATOM; // final closing bracket
				  state.sExprQuote = false; // turn off s-expr quote mode
				}
			  }
			}
		  } else {
			stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
	
			if (keywords && keywords.propertyIsEnumerable(stream.current())) {
			  returnType = BUILTIN;
			} else returnType = "variable";
		  }
		}
		return (typeof state.sExprComment == "number") ? COMMENT : ((typeof state.sExprQuote == "number") ? ATOM : returnType);
	  },
	
	  indent: function (state) {
		if (state.indentStack == null) return state.indentation;
		return state.indentStack.indent;
	  },
	
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", '"']},
		commentTokens: {line: ";;"}
	  }
	};
	
	exports.scheme = scheme;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/shell.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/shell.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var words = {};
	function define(style, dict) {
	  for(var i = 0; i < dict.length; i++) {
		words[dict[i]] = style;
	  }
	}
	var commonAtoms = ["true", "false"];
	var commonKeywords = ["if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac", "fi",
						  "fin", "fil", "done", "exit", "set", "unset", "export", "function"];
	var commonCommands = ["ab", "awk", "bash", "beep", "cat", "cc", "cd", "chown", "chmod", "chroot", "clear",
						  "cp", "curl", "cut", "diff", "echo", "find", "gawk", "gcc", "get", "git", "grep", "hg", "kill", "killall",
						  "ln", "ls", "make", "mkdir", "openssl", "mv", "nc", "nl", "node", "npm", "ping", "ps", "restart", "rm",
						  "rmdir", "sed", "service", "sh", "shopt", "shred", "source", "sort", "sleep", "ssh", "start", "stop",
						  "su", "sudo", "svn", "tee", "telnet", "top", "touch", "vi", "vim", "wall", "wc", "wget", "who", "write",
						  "yes", "zsh"];
	
	define('atom', commonAtoms);
	define('keyword', commonKeywords);
	define('builtin', commonCommands);
	
	function tokenBase(stream, state) {
	  if (stream.eatSpace()) return null;
	
	  var sol = stream.sol();
	  var ch = stream.next();
	
	  if (ch === '\\') {
		stream.next();
		return null;
	  }
	  if (ch === '\'' || ch === '"' || ch === '`') {
		state.tokens.unshift(tokenString(ch, ch === "`" ? "quote" : "string"));
		return tokenize(stream, state);
	  }
	  if (ch === '#') {
		if (sol && stream.eat('!')) {
		  stream.skipToEnd();
		  return 'meta'; // 'comment'?
		}
		stream.skipToEnd();
		return 'comment';
	  }
	  if (ch === '$') {
		state.tokens.unshift(tokenDollar);
		return tokenize(stream, state);
	  }
	  if (ch === '+' || ch === '=') {
		return 'operator';
	  }
	  if (ch === '-') {
		stream.eat('-');
		stream.eatWhile(/\w/);
		return 'attribute';
	  }
	  if (ch == "<") {
		if (stream.match("<<")) return "operator"
		var heredoc = stream.match(/^<-?\s*(?:['"]([^'"]*)['"]|([^'"\s]*))/);
		if (heredoc) {
		  state.tokens.unshift(tokenHeredoc(heredoc[1] || heredoc[2]));
		  return 'string.special'
		}
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/\d/);
		if(stream.eol() || !/\w/.test(stream.peek())) {
		  return 'number';
		}
	  }
	  stream.eatWhile(/[\w-]/);
	  var cur = stream.current();
	  if (stream.peek() === '=' && /\w+/.test(cur)) return 'def';
	  return words.hasOwnProperty(cur) ? words[cur] : null;
	}
	
	function tokenString(quote, style) {
	  var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
	  return function(stream, state) {
		var next, escaped = false;
		while ((next = stream.next()) != null) {
		  if (next === close && !escaped) {
			state.tokens.shift();
			break;
		  } else if (next === '$' && !escaped && quote !== "'" && stream.peek() != close) {
			escaped = true;
			stream.backUp(1);
			state.tokens.unshift(tokenDollar);
			break;
		  } else if (!escaped && quote !== close && next === quote) {
			state.tokens.unshift(tokenString(quote, style));
			return tokenize(stream, state)
		  } else if (!escaped && /['"]/.test(next) && !/['"]/.test(quote)) {
			state.tokens.unshift(tokenStringStart(next, "string"));
			stream.backUp(1);
			break;
		  }
		  escaped = !escaped && next === '\\';
		}
		return style;
	  };
	}
	function tokenStringStart(quote, style) {
	  return function(stream, state) {
		state.tokens[0] = tokenString(quote, style);
		stream.next();
		return tokenize(stream, state)
	  }
	}
	
	var tokenDollar = function(stream, state) {
	  if (state.tokens.length > 1) stream.eat('$');
	  var ch = stream.next();
	  if (/['"({]/.test(ch)) {
		state.tokens[0] = tokenString(ch, ch == "(" ? "quote" : ch == "{" ? "def" : "string");
		return tokenize(stream, state);
	  }
	  if (!/\d/.test(ch)) stream.eatWhile(/\w/);
	  state.tokens.shift();
	  return 'def';
	};
	
	function tokenHeredoc(delim) {
	  return function(stream, state) {
		if (stream.sol() && stream.string == delim) state.tokens.shift();
		stream.skipToEnd();
		return "string.special"
	  }
	}
	
	function tokenize(stream, state) {
	  return (state.tokens[0] || tokenBase) (stream, state);
	}
	const shell = {
	  name: "shell",
	  startState: function() {return {tokens:[]};},
	  token: function(stream, state) {
		return tokenize(stream, state);
	  },
	  languageData: {
		autocomplete: commonAtoms.concat(commonKeywords, commonCommands),
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
		commentTokens: {line: "#"}
	  }
	};
	
	exports.shell = shell;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/sieve.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/sieve.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var keywords = words("if elsif else stop require");
	var atoms = words("true false not");
	
	function tokenBase(stream, state) {
	
	  var ch = stream.next();
	  if (ch == "/" && stream.eat("*")) {
		state.tokenize = tokenCComment;
		return tokenCComment(stream, state);
	  }
	
	  if (ch === '#') {
		stream.skipToEnd();
		return "comment";
	  }
	
	  if (ch == "\"") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	
	  if (ch == "(") {
		state._indent.push("(");
		// add virtual angel wings so that editor behaves...
		// ...more sane incase of broken brackets
		state._indent.push("{");
		return null;
	  }
	
	  if (ch === "{") {
		state._indent.push("{");
		return null;
	  }
	
	  if (ch == ")")  {
		state._indent.pop();
		state._indent.pop();
	  }
	
	  if (ch === "}") {
		state._indent.pop();
		return null;
	  }
	
	  if (ch == ",")
		return null;
	
	  if (ch == ";")
		return null;
	
	
	  if (/[{}\(\),;]/.test(ch))
		return null;
	
	  // 1*DIGIT "K" / "M" / "G"
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\d]/);
		stream.eat(/[KkMmGg]/);
		return "number";
	  }
	
	  // ":" (ALPHA / "_") *(ALPHA / DIGIT / "_")
	  if (ch == ":") {
		stream.eatWhile(/[a-zA-Z_]/);
		stream.eatWhile(/[a-zA-Z0-9_]/);
	
		return "operator";
	  }
	
	  stream.eatWhile(/\w/);
	  var cur = stream.current();
	
	  // "text:" *(SP / HTAB) (hash-comment / CRLF)
	  // *(multiline-literal / multiline-dotstart)
	  // "." CRLF
	  if ((cur == "text") && stream.eat(":"))
	  {
		state.tokenize = tokenMultiLineString;
		return "string";
	  }
	
	  if (keywords.propertyIsEnumerable(cur))
		return "keyword";
	
	  if (atoms.propertyIsEnumerable(cur))
		return "atom";
	
	  return null;
	}
	
	function tokenMultiLineString(stream, state)
	{
	  state._multiLineString = true;
	  // the first line is special it may contain a comment
	  if (!stream.sol()) {
		stream.eatSpace();
	
		if (stream.peek() == "#") {
		  stream.skipToEnd();
		  return "comment";
		}
	
		stream.skipToEnd();
		return "string";
	  }
	
	  if ((stream.next() == ".")  && (stream.eol()))
	  {
		state._multiLineString = false;
		state.tokenize = tokenBase;
	  }
	
	  return "string";
	}
	
	function tokenCComment(stream, state) {
	  var maybeEnd = false, ch;
	  while ((ch = stream.next()) != null) {
		if (maybeEnd && ch == "/") {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped)
			break;
		  escaped = !escaped && ch == "\\";
		}
		if (!escaped) state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	const sieve = {
	  name: "sieve",
	  startState: function(base) {
		return {tokenize: tokenBase,
				baseIndent: base || 0,
				_indent: []};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace())
		  return null;
	
		return (state.tokenize || tokenBase)(stream, state);
	  },
	
	  indent: function(state, _textAfter, cx) {
		var length = state._indent.length;
		if (_textAfter && (_textAfter[0] == "}"))
		  length--;
	
		if (length <0)
		  length = 0;
	
		return length * cx.unit;
	  },
	
	  languageData: {
		indentOnInput: /^\s*\}$/
	  }
	};
	
	exports.sieve = sieve;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/smalltalk.cjs":
	/*!**************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/smalltalk.cjs ***!
	  \**************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
	var keywords = /true|false|nil|self|super|thisContext/;
	
	var Context = function(tokenizer, parent) {
	  this.next = tokenizer;
	  this.parent = parent;
	};
	
	var Token = function(name, context, eos) {
	  this.name = name;
	  this.context = context;
	  this.eos = eos;
	};
	
	var State = function() {
	  this.context = new Context(next, null);
	  this.expectVariable = true;
	  this.indentation = 0;
	  this.userIndentationDelta = 0;
	};
	
	State.prototype.userIndent = function(indentation, indentUnit) {
	  this.userIndentationDelta = indentation > 0 ? (indentation / indentUnit - this.indentation) : 0;
	};
	
	var next = function(stream, context, state) {
	  var token = new Token(null, context, false);
	  var aChar = stream.next();
	
	  if (aChar === '"') {
		token = nextComment(stream, new Context(nextComment, context));
	
	  } else if (aChar === '\'') {
		token = nextString(stream, new Context(nextString, context));
	
	  } else if (aChar === '#') {
		if (stream.peek() === '\'') {
		  stream.next();
		  token = nextSymbol(stream, new Context(nextSymbol, context));
		} else {
		  if (stream.eatWhile(/[^\s.{}\[\]()]/))
			token.name = 'string.special';
		  else
			token.name = 'meta';
		}
	
	  } else if (aChar === '$') {
		if (stream.next() === '<') {
		  stream.eatWhile(/[^\s>]/);
		  stream.next();
		}
		token.name = 'string.special';
	
	  } else if (aChar === '|' && state.expectVariable) {
		token.context = new Context(nextTemporaries, context);
	
	  } else if (/[\[\]{}()]/.test(aChar)) {
		token.name = 'bracket';
		token.eos = /[\[{(]/.test(aChar);
	
		if (aChar === '[') {
		  state.indentation++;
		} else if (aChar === ']') {
		  state.indentation = Math.max(0, state.indentation - 1);
		}
	
	  } else if (specialChars.test(aChar)) {
		stream.eatWhile(specialChars);
		token.name = 'operator';
		token.eos = aChar !== ';'; // ; cascaded message expression
	
	  } else if (/\d/.test(aChar)) {
		stream.eatWhile(/[\w\d]/);
		token.name = 'number';
	
	  } else if (/[\w_]/.test(aChar)) {
		stream.eatWhile(/[\w\d_]/);
		token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;
	
	  } else {
		token.eos = state.expectVariable;
	  }
	
	  return token;
	};
	
	var nextComment = function(stream, context) {
	  stream.eatWhile(/[^"]/);
	  return new Token('comment', stream.eat('"') ? context.parent : context, true);
	};
	
	var nextString = function(stream, context) {
	  stream.eatWhile(/[^']/);
	  return new Token('string', stream.eat('\'') ? context.parent : context, false);
	};
	
	var nextSymbol = function(stream, context) {
	  stream.eatWhile(/[^']/);
	  return new Token('string.special', stream.eat('\'') ? context.parent : context, false);
	};
	
	var nextTemporaries = function(stream, context) {
	  var token = new Token(null, context, false);
	  var aChar = stream.next();
	
	  if (aChar === '|') {
		token.context = context.parent;
		token.eos = true;
	
	  } else {
		stream.eatWhile(/[^|]/);
		token.name = 'variable';
	  }
	
	  return token;
	};
	
	const smalltalk = {
	  name: "smalltalk",
	
	  startState: function() {
		return new State;
	  },
	
	  token: function(stream, state) {
		state.userIndent(stream.indentation(), stream.indentUnit);
	
		if (stream.eatSpace()) {
		  return null;
		}
	
		var token = state.context.next(stream, state.context, state);
		state.context = token.context;
		state.expectVariable = token.eos;
	
		return token.name;
	  },
	
	  blankLine: function(state, indentUnit) {
		state.userIndent(0, indentUnit);
	  },
	
	  indent: function(state, textAfter, cx) {
		var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;
		return (state.indentation + i) * cx.unit;
	  },
	
	  languageData: {
		indentOnInput: /^\s*\]$/
	  }
	};
	
	exports.smalltalk = smalltalk;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/solr.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/solr.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
	var isOperatorChar = /[\|\!\+\-\*\?\~\^\&]/;
	var isOperatorString = /^(OR|AND|NOT|TO)$/i;
	
	function isNumber(word) {
	  return parseFloat(word).toString() === word;
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) break;
		  escaped = !escaped && next == "\\";
		}
	
		if (!escaped) state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	function tokenOperator(operator) {
	  return function(stream, state) {
		if (operator == "|")
		  stream.eat(/\|/);
		else if (operator == "&")
		  stream.eat(/\&/);
	
		state.tokenize = tokenBase;
		return "operator";
	  };
	}
	
	function tokenWord(ch) {
	  return function(stream, state) {
		var word = ch;
		while ((ch = stream.peek()) && ch.match(isStringChar) != null) {
		  word += stream.next();
		}
	
		state.tokenize = tokenBase;
		if (isOperatorString.test(word))
		  return "operator";
		else if (isNumber(word))
		  return "number";
		else if (stream.peek() == ":")
		  return "propertyName";
		else
		  return "string";
	  };
	}
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == '"')
		state.tokenize = tokenString(ch);
	  else if (isOperatorChar.test(ch))
		state.tokenize = tokenOperator(ch);
	  else if (isStringChar.test(ch))
		state.tokenize = tokenWord(ch);
	
	  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;
	}
	
	const solr = {
	  name: "solr",
	
	  startState: function() {
		return {
		  tokenize: tokenBase
		};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  }
	};
	
	exports.solr = solr;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/sparql.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/sparql.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var curPunc;
	
	function wordRegexp(words) {
	  return new RegExp("^(?:" + words.join("|") + ")$", "i");
	}
	var ops = wordRegexp(["str", "lang", "langmatches", "datatype", "bound", "sameterm", "isiri", "isuri",
						  "iri", "uri", "bnode", "count", "sum", "min", "max", "avg", "sample",
						  "group_concat", "rand", "abs", "ceil", "floor", "round", "concat", "substr", "strlen",
						  "replace", "ucase", "lcase", "encode_for_uri", "contains", "strstarts", "strends",
						  "strbefore", "strafter", "year", "month", "day", "hours", "minutes", "seconds",
						  "timezone", "tz", "now", "uuid", "struuid", "md5", "sha1", "sha256", "sha384",
						  "sha512", "coalesce", "if", "strlang", "strdt", "isnumeric", "regex", "exists",
						  "isblank", "isliteral", "a", "bind"]);
	var keywords = wordRegexp(["base", "prefix", "select", "distinct", "reduced", "construct", "describe",
							   "ask", "from", "named", "where", "order", "limit", "offset", "filter", "optional",
							   "graph", "by", "asc", "desc", "as", "having", "undef", "values", "group",
							   "minus", "in", "not", "service", "silent", "using", "insert", "delete", "union",
							   "true", "false", "with",
							   "data", "copy", "to", "move", "add", "create", "drop", "clear", "load", "into"]);
	var operatorChars = /[*+\-<>=&|\^\/!\?]/;
	var PN_CHARS = "[A-Za-z_\\-0-9]";
	var PREFIX_START = new RegExp("[A-Za-z]");
	var PREFIX_REMAINDER = new RegExp("((" + PN_CHARS + "|\\.)*(" + PN_CHARS + "))?:");
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  curPunc = null;
	  if (ch == "$" || ch == "?") {
		if(ch == "?" && stream.match(/\s/, false)){
		  return "operator";
		}
		stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
		return "variableName.local";
	  }
	  else if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
		stream.match(/^[^\s\u00a0>]*>?/);
		return "atom";
	  }
	  else if (ch == "\"" || ch == "'") {
		state.tokenize = tokenLiteral(ch);
		return state.tokenize(stream, state);
	  }
	  else if (/[{}\(\),\.;\[\]]/.test(ch)) {
		curPunc = ch;
		return "bracket";
	  }
	  else if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  }
	  else if (operatorChars.test(ch)) {
		return "operator";
	  }
	  else if (ch == ":") {
		eatPnLocal(stream);
		return "atom";
	  }
	  else if (ch == "@") {
		stream.eatWhile(/[a-z\d\-]/i);
		return "meta";
	  }
	  else if (PREFIX_START.test(ch) && stream.match(PREFIX_REMAINDER)) {
		eatPnLocal(stream);
		return "atom";
	  }
	  stream.eatWhile(/[_\w\d]/);
	  var word = stream.current();
	  if (ops.test(word))
		return "builtin";
	  else if (keywords.test(word))
		return "keyword";
	  else
		return "variable";
	}
	
	function eatPnLocal(stream) {
	  stream.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i);
	}
	
	function tokenLiteral(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped) {
			state.tokenize = tokenBase;
			break;
		  }
		  escaped = !escaped && ch == "\\";
		}
		return "string";
	  };
	}
	
	function pushContext(state, type, col) {
	  state.context = {prev: state.context, indent: state.indent, col: col, type: type};
	}
	function popContext(state) {
	  state.indent = state.context.indent;
	  state.context = state.context.prev;
	}
	
	const sparql = {
	  name: "sparql",
	
	  startState: function() {
		return {tokenize: tokenBase,
				context: null,
				indent: 0,
				col: 0};
	  },
	
	  token: function(stream, state) {
		if (stream.sol()) {
		  if (state.context && state.context.align == null) state.context.align = false;
		  state.indent = stream.indentation();
		}
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
	
		if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
		  state.context.align = true;
		}
	
		if (curPunc == "(") pushContext(state, ")", stream.column());
		else if (curPunc == "[") pushContext(state, "]", stream.column());
		else if (curPunc == "{") pushContext(state, "}", stream.column());
		else if (/[\]\}\)]/.test(curPunc)) {
		  while (state.context && state.context.type == "pattern") popContext(state);
		  if (state.context && curPunc == state.context.type) {
			popContext(state);
			if (curPunc == "}" && state.context && state.context.type == "pattern")
			  popContext(state);
		  }
		}
		else if (curPunc == "." && state.context && state.context.type == "pattern") popContext(state);
		else if (/atom|string|variable/.test(style) && state.context) {
		  if (/[\}\]]/.test(state.context.type))
			pushContext(state, "pattern", stream.column());
		  else if (state.context.type == "pattern" && !state.context.align) {
			state.context.align = true;
			state.context.col = stream.column();
		  }
		}
	
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var firstChar = textAfter && textAfter.charAt(0);
		var context = state.context;
		if (/[\]\}]/.test(firstChar))
		  while (context && context.type == "pattern") context = context.prev;
	
		var closing = context && firstChar == context.type;
		if (!context)
		  return 0;
		else if (context.type == "pattern")
		  return context.col;
		else if (context.align)
		  return context.col + (closing ? 0 : 1);
		else
		  return context.indent + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.sparql = sparql;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/spreadsheet.cjs":
	/*!****************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/spreadsheet.cjs ***!
	  \****************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	const spreadsheet = {
	  name: "spreadsheet",
	
	  startState: function () {
		return {
		  stringType: null,
		  stack: []
		};
	  },
	  token: function (stream, state) {
		if (!stream) return;
	
		//check for state changes
		if (state.stack.length === 0) {
		  //strings
		  if ((stream.peek() == '"') || (stream.peek() == "'")) {
			state.stringType = stream.peek();
			stream.next(); // Skip quote
			state.stack.unshift("string");
		  }
		}
	
		//return state
		//stack has
		switch (state.stack[0]) {
		case "string":
		  while (state.stack[0] === "string" && !stream.eol()) {
			if (stream.peek() === state.stringType) {
			  stream.next(); // Skip quote
			  state.stack.shift(); // Clear flag
			} else if (stream.peek() === "\\") {
			  stream.next();
			  stream.next();
			} else {
			  stream.match(/^.[^\\\"\']*/);
			}
		  }
		  return "string";
	
		case "characterClass":
		  while (state.stack[0] === "characterClass" && !stream.eol()) {
			if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
			  state.stack.shift();
		  }
		  return "operator";
		}
	
		var peek = stream.peek();
	
		//no stack
		switch (peek) {
		case "[":
		  stream.next();
		  state.stack.unshift("characterClass");
		  return "bracket";
		case ":":
		  stream.next();
		  return "operator";
		case "\\":
		  if (stream.match(/\\[a-z]+/)) return "string.special";
		  else {
			stream.next();
			return "atom";
		  }
		case ".":
		case ",":
		case ";":
		case "*":
		case "-":
		case "+":
		case "^":
		case "<":
		case "/":
		case "=":
		  stream.next();
		  return "atom";
		case "$":
		  stream.next();
		  return "builtin";
		}
	
		if (stream.match(/\d+/)) {
		  if (stream.match(/^\w+/)) return "error";
		  return "number";
		} else if (stream.match(/^[a-zA-Z_]\w*/)) {
		  if (stream.match(/(?=[\(.])/, false)) return "keyword";
		  return "variable";
		} else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
		  stream.next();
		  return "bracket";
		} else if (!stream.eatSpace()) {
		  stream.next();
		}
		return null;
	  }
	};
	
	exports.spreadsheet = spreadsheet;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/sql.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/sql.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function sql(parserConfig) {
	  var client         = parserConfig.client || {},
		  atoms          = parserConfig.atoms || {"false": true, "true": true, "null": true},
		  builtin        = parserConfig.builtin || set(defaultBuiltin),
		  keywords       = parserConfig.keywords || set(sqlKeywords),
		  operatorChars  = parserConfig.operatorChars || /^[*+\-%<>!=&|~^\/]/,
		  support        = parserConfig.support || {},
		  hooks          = parserConfig.hooks || {},
		  dateSQL        = parserConfig.dateSQL || {"date" : true, "time" : true, "timestamp" : true},
		  backslashStringEscapes = parserConfig.backslashStringEscapes !== false,
		  brackets       = parserConfig.brackets || /^[\{}\(\)\[\]]/,
		  punctuation    = parserConfig.punctuation || /^[;.,:]/;
	
	  function tokenBase(stream, state) {
		var ch = stream.next();
	
		// call hooks from the mime type
		if (hooks[ch]) {
		  var result = hooks[ch](stream, state);
		  if (result !== false) return result;
		}
	
		if (support.hexNumber &&
		  ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/))
		  || (ch == "x" || ch == "X") && stream.match(/^'[0-9a-fA-F]*'/))) {
		  // hex
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html
		  return "number";
		} else if (support.binaryNumber &&
		  (((ch == "b" || ch == "B") && stream.match(/^'[01]+'/))
		  || (ch == "0" && stream.match(/^b[01]*/)))) {
		  // bitstring
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html
		  return "number";
		} else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {
		  // numbers
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html
		  stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
		  support.decimallessFloat && stream.match(/^\.(?!\.)/);
		  return "number";
		} else if (ch == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
		  // placeholders
		  return "macroName";
		} else if (ch == "'" || (ch == '"' && support.doubleQuote)) {
		  // strings
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
		  state.tokenize = tokenLiteral(ch);
		  return state.tokenize(stream, state);
		} else if ((((support.nCharCast && (ch == "n" || ch == "N"))
			|| (support.charsetCast && ch == "_" && stream.match(/[a-z][a-z0-9]*/i)))
			&& (stream.peek() == "'" || stream.peek() == '"'))) {
		  // charset casting: _utf8'str', N'str', n'str'
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
		  return "keyword";
		} else if (support.escapeConstant && (ch == "e" || ch == "E")
			&& (stream.peek() == "'" || (stream.peek() == '"' && support.doubleQuote))) {
		  // escape constant: E'str', e'str'
		  // ref: https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-ESCAPE
		  state.tokenize = function(stream, state) {
			return (state.tokenize = tokenLiteral(stream.next(), true))(stream, state);
		  };
		  return "keyword";
		} else if (support.commentSlashSlash && ch == "/" && stream.eat("/")) {
		  // 1-line comment
		  stream.skipToEnd();
		  return "comment";
		} else if ((support.commentHash && ch == "#")
			|| (ch == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" ")))) {
		  // 1-line comments
		  // ref: https://kb.askmonty.org/en/comment-syntax/
		  stream.skipToEnd();
		  return "comment";
		} else if (ch == "/" && stream.eat("*")) {
		  // multi-line comments
		  // ref: https://kb.askmonty.org/en/comment-syntax/
		  state.tokenize = tokenComment(1);
		  return state.tokenize(stream, state);
		} else if (ch == ".") {
		  // .1 for 0.1
		  if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
			return "number";
		  if (stream.match(/^\.+/))
			return null
		  // .table_name (ODBC)
		  // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
		  if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
			return "type";
		} else if (operatorChars.test(ch)) {
		  // operators
		  stream.eatWhile(operatorChars);
		  return "operator";
		} else if (brackets.test(ch)) {
		  // brackets
		  return "bracket";
		} else if (punctuation.test(ch)) {
		  // punctuation
		  stream.eatWhile(punctuation);
		  return "punctuation";
		} else if (ch == '{' &&
			(stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
		  // dates (weird ODBC syntax)
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
		  return "number";
		} else {
		  stream.eatWhile(/^[_\w\d]/);
		  var word = stream.current().toLowerCase();
		  // dates (standard SQL syntax)
		  // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
		  if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
			return "number";
		  if (atoms.hasOwnProperty(word)) return "atom";
		  if (builtin.hasOwnProperty(word)) return "type";
		  if (keywords.hasOwnProperty(word)) return "keyword";
		  if (client.hasOwnProperty(word)) return "builtin";
		  return null;
		}
	  }
	
	  // 'string', with char specified in quote escaped by '\'
	  function tokenLiteral(quote, backslashEscapes) {
		return function(stream, state) {
		  var escaped = false, ch;
		  while ((ch = stream.next()) != null) {
			if (ch == quote && !escaped) {
			  state.tokenize = tokenBase;
			  break;
			}
			escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch == "\\";
		  }
		  return "string";
		};
	  }
	  function tokenComment(depth) {
		return function(stream, state) {
		  var m = stream.match(/^.*?(\/\*|\*\/)/);
		  if (!m) stream.skipToEnd();
		  else if (m[1] == "/*") state.tokenize = tokenComment(depth + 1);
		  else if (depth > 1) state.tokenize = tokenComment(depth - 1);
		  else state.tokenize = tokenBase;
		  return "comment"
		}
	  }
	
	  function pushContext(stream, state, type) {
		state.context = {
		  prev: state.context,
		  indent: stream.indentation(),
		  col: stream.column(),
		  type: type
		};
	  }
	
	  function popContext(state) {
		state.indent = state.context.indent;
		state.context = state.context.prev;
	  }
	
	  return {
		name: "sql",
	
		startState: function() {
		  return {tokenize: tokenBase, context: null};
		},
	
		token: function(stream, state) {
		  if (stream.sol()) {
			if (state.context && state.context.align == null)
			  state.context.align = false;
		  }
		  if (state.tokenize == tokenBase && stream.eatSpace()) return null;
	
		  var style = state.tokenize(stream, state);
		  if (style == "comment") return style;
	
		  if (state.context && state.context.align == null)
			state.context.align = true;
	
		  var tok = stream.current();
		  if (tok == "(")
			pushContext(stream, state, ")");
		  else if (tok == "[")
			pushContext(stream, state, "]");
		  else if (state.context && state.context.type == tok)
			popContext(state);
		  return style;
		},
	
		indent: function(state, textAfter, iCx) {
		  var cx = state.context;
		  if (!cx) return null;
		  var closing = textAfter.charAt(0) == cx.type;
		  if (cx.align) return cx.col + (closing ? 0 : 1);
		  else return cx.indent + (closing ? 0 : iCx.unit);
		},
	
		languageData: {
		  commentTokens: {
			line: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
			block: {open: "/*", close: "*/"}
		  },
		  closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
		}
	  };
	}
	// `identifier`
	function hookIdentifier(stream) {
	  // MySQL/MariaDB identifiers
	  // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
	  var ch;
	  while ((ch = stream.next()) != null) {
		if (ch == "`" && !stream.eat("`")) return "string.special";
	  }
	  stream.backUp(stream.current().length - 1);
	  return stream.eatWhile(/\w/) ? "string.special" : null;
	}
	
	// "identifier"
	function hookIdentifierDoublequote(stream) {
	  // Standard SQL /SQLite identifiers
	  // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier
	  // ref: http://sqlite.org/lang_keywords.html
	  var ch;
	  while ((ch = stream.next()) != null) {
		if (ch == "\"" && !stream.eat("\"")) return "string.special";
	  }
	  stream.backUp(stream.current().length - 1);
	  return stream.eatWhile(/\w/) ? "string.special" : null;
	}
	
	// variable token
	function hookVar(stream) {
	  // variables
	  // @@prefix.varName @varName
	  // varName can be quoted with ` or ' or "
	  // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html
	  if (stream.eat("@")) {
		stream.match('session.');
		stream.match('local.');
		stream.match('global.');
	  }
	
	  if (stream.eat("'")) {
		stream.match(/^.*'/);
		return "string.special";
	  } else if (stream.eat('"')) {
		stream.match(/^.*"/);
		return "string.special";
	  } else if (stream.eat("`")) {
		stream.match(/^.*`/);
		return "string.special";
	  } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
		return "string.special";
	  }
	  return null;
	}
	// short client keyword token
	function hookClient(stream) {
	  // \N means NULL
	  // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html
	  if (stream.eat("N")) {
		return "atom";
	  }
	  // \g, etc
	  // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html
	  return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
	}
	
	// these keywords are used by all SQL dialects (however, a mode can still overwrite it)
	var sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";
	
	// turn a space-separated list into an array
	function set(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";
	
	// A generic SQL Mode. It's not a standard, it just try to support what is generally supported
	const standardSQL = sql({
	  keywords: set(sqlKeywords + "begin"),
	  builtin: set(defaultBuiltin),
	  atoms: set("false true null unknown"),
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
	});
	
	const msSQL = sql({
	  client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
	  keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
	  builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
	  atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
	  operatorChars: /^[*+\-%<>!=^\&|\/]/,
	  brackets: /^[\{}\(\)]/,
	  punctuation: /^[;.,:/]/,
	  backslashStringEscapes: false,
	  dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
	  hooks: {
		"@":   hookVar
	  }
	});
	
	const mySQL = sql({
	  client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
	  keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
	  builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
	  atoms: set("false true null unknown"),
	  operatorChars: /^[*+\-%<>!=&|^]/,
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
	  hooks: {
		"@":   hookVar,
		"`":   hookIdentifier,
		"\\":  hookClient
	  }
	});
	
	const mariaDB = sql({
	  client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
	  keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
	  builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
	  atoms: set("false true null unknown"),
	  operatorChars: /^[*+\-%<>!=&|^]/,
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
	  hooks: {
		"@":   hookVar,
		"`":   hookIdentifier,
		"\\":  hookClient
	  }
	});
	
	// provided by the phpLiteAdmin project - phpliteadmin.org
	const sqlite = sql({
	  // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
	  client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
	  // ref: http://sqlite.org/lang_keywords.html
	  keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
	  // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
	  builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
	  // ref: http://sqlite.org/syntax/literal-value.html
	  atoms: set("null current_date current_time current_timestamp"),
	  // ref: http://sqlite.org/lang_expr.html#binaryops
	  operatorChars: /^[*+\-%<>!=&|/~]/,
	  // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
	  dateSQL: set("date time timestamp datetime"),
	  support: set("decimallessFloat zerolessFloat"),
	  identifierQuote: "\"",  //ref: http://sqlite.org/lang_keywords.html
	  hooks: {
		// bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
		"@":   hookVar,
		":":   hookVar,
		"?":   hookVar,
		"$":   hookVar,
		// The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
		"\"":   hookIdentifierDoublequote,
		// there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
		"`":   hookIdentifier
	  }
	});
	
	// the query language used by Apache Cassandra is called CQL, but this mime type
	// is called Cassandra to avoid confusion with Contextual Query Language
	const cassandra = sql({
	  client: { },
	  keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
	  builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
	  atoms: set("false true infinity NaN"),
	  operatorChars: /^[<>=]/,
	  dateSQL: { },
	  support: set("commentSlashSlash decimallessFloat"),
	  hooks: { }
	});
	
	// this is based on Peter Raganitsch's 'plsql' mode
	const plSQL = sql({
	  client:     set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
	  keywords:   set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
	  builtin:    set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
	  operatorChars: /^[*\/+\-%<>!=~]/,
	  dateSQL:    set("date time timestamp"),
	  support:    set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
	});
	
	// Created to support specific hive keywords
	const hive = sql({
	  keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
	  builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
	  atoms: set("false true null unknown"),
	  operatorChars: /^[*+\-%<>!=]/,
	  dateSQL: set("date timestamp"),
	  support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
	});
	
	const pgSQL = sql({
	  client: set("source"),
	  // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
	  // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
	  keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
	  // https://www.postgresql.org/docs/11/datatype.html
	  builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
	  atoms: set("false true null unknown"),
	  operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
	  backslashStringEscapes: false,
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
	});
	
	// Google's SQL-like query language, GQL
	const gql = sql({
	  keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
	  atoms: set("false true"),
	  builtin: set("blob datetime first key __key__ string integer double boolean null"),
	  operatorChars: /^[*+\-%<>!=]/
	});
	
	// Greenplum
	const gpSQL = sql({
	  client: set("source"),
	  //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
	  keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
	  builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
	  atoms: set("false true null unknown"),
	  operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
	});
	
	// Spark SQL
	const sparkSQL = sql({
	  keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
	  builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
	  atoms: set("false true null"),
	  operatorChars: /^[*\/+\-%<>!=~&|^]/,
	  dateSQL: set("date time timestamp"),
	  support: set("ODBCdotTable doubleQuote zerolessFloat")
	});
	
	// Esper
	const esper = sql({
	  client: set("source"),
	  // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
	  keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
	  builtin: {},
	  atoms: set("false true null"),
	  operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
	  dateSQL: set("time"),
	  support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
	});
	
	/*
	  How options are used by SQL Mode
	  =================================================
	
	  keywords:
		A list of keywords you want to be highlighted.
	  builtin:
		A list of builtin types you want to be highlighted (if you want types to be of class "builtin" instead of "keyword").
	  operatorChars:
		All characters that must be handled as operators.
	  client:
		Commands parsed and executed by the client (not the server).
	  support:
		A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.
		* ODBCdotTable: .tableName
		* zerolessFloat: .1
		* doubleQuote
		* nCharCast: N'string'
		* charsetCast: _utf8'string'
		* commentHash: use # char for comments
		* commentSlashSlash: use // for comments
		* commentSpaceRequired: require a space after -- for comments
	  atoms:
		Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:
		UNKNOWN, INFINITY, UNDERFLOW, NaN...
	  dateSQL:
		Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.
	*/
	
	exports.cassandra = cassandra;
	exports.esper = esper;
	exports.gpSQL = gpSQL;
	exports.gql = gql;
	exports.hive = hive;
	exports.mariaDB = mariaDB;
	exports.msSQL = msSQL;
	exports.mySQL = mySQL;
	exports.pgSQL = pgSQL;
	exports.plSQL = plSQL;
	exports.sparkSQL = sparkSQL;
	exports.sql = sql;
	exports.sqlite = sqlite;
	exports.standardSQL = standardSQL;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/stex.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/stex.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkStex(mathMode) {
	  function pushCommand(state, command) {
		state.cmdState.push(command);
	  }
	
	  function peekCommand(state) {
		if (state.cmdState.length > 0) {
		  return state.cmdState[state.cmdState.length - 1];
		} else {
		  return null;
		}
	  }
	
	  function popCommand(state) {
		var plug = state.cmdState.pop();
		if (plug) {
		  plug.closeBracket();
		}
	  }
	
	  // returns the non-default plugin closest to the end of the list
	  function getMostPowerful(state) {
		var context = state.cmdState;
		for (var i = context.length - 1; i >= 0; i--) {
		  var plug = context[i];
		  if (plug.name == "DEFAULT") {
			continue;
		  }
		  return plug;
		}
		return { styleIdentifier: function() { return null; } };
	  }
	
	  function addPluginPattern(pluginName, cmdStyle, styles) {
		return function () {
		  this.name = pluginName;
		  this.bracketNo = 0;
		  this.style = cmdStyle;
		  this.styles = styles;
		  this.argument = null;   // \begin and \end have arguments that follow. These are stored in the plugin
	
		  this.styleIdentifier = function() {
			return this.styles[this.bracketNo - 1] || null;
		  };
		  this.openBracket = function() {
			this.bracketNo++;
			return "bracket";
		  };
		  this.closeBracket = function() {};
		};
	  }
	
	  var plugins = {};
	
	  plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
	  plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
	  plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
	  plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
	  plugins["end"] = addPluginPattern("end", "tag", ["atom"]);
	
	  plugins["label"    ] = addPluginPattern("label"    , "tag", ["atom"]);
	  plugins["ref"      ] = addPluginPattern("ref"      , "tag", ["atom"]);
	  plugins["eqref"    ] = addPluginPattern("eqref"    , "tag", ["atom"]);
	  plugins["cite"     ] = addPluginPattern("cite"     , "tag", ["atom"]);
	  plugins["bibitem"  ] = addPluginPattern("bibitem"  , "tag", ["atom"]);
	  plugins["Bibitem"  ] = addPluginPattern("Bibitem"  , "tag", ["atom"]);
	  plugins["RBibitem" ] = addPluginPattern("RBibitem" , "tag", ["atom"]);
	
	  plugins["DEFAULT"] = function () {
		this.name = "DEFAULT";
		this.style = "tag";
	
		this.styleIdentifier = this.openBracket = this.closeBracket = function() {};
	  };
	
	  function setState(state, f) {
		state.f = f;
	  }
	
	  // called when in a normal (no environment) context
	  function normal(source, state) {
		var plug;
		// Do we look like '\command' ?  If so, attempt to apply the plugin 'command'
		if (source.match(/^\\[a-zA-Z@\xc0-\u1fff\u2060-\uffff]+/)) {
		  var cmdName = source.current().slice(1);
		  plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
		  plug = new plug();
		  pushCommand(state, plug);
		  setState(state, beginParams);
		  return plug.style;
		}
	
		// escape characters
		if (source.match(/^\\[$&%#{}_]/)) {
		  return "tag";
		}
	
		// white space control characters
		if (source.match(/^\\[,;!\/\\]/)) {
		  return "tag";
		}
	
		// find if we're starting various math modes
		if (source.match("\\[")) {
		  setState(state, function(source, state){ return inMathMode(source, state, "\\]"); });
		  return "keyword";
		}
		if (source.match("\\(")) {
		  setState(state, function(source, state){ return inMathMode(source, state, "\\)"); });
		  return "keyword";
		}
		if (source.match("$$")) {
		  setState(state, function(source, state){ return inMathMode(source, state, "$$"); });
		  return "keyword";
		}
		if (source.match("$")) {
		  setState(state, function(source, state){ return inMathMode(source, state, "$"); });
		  return "keyword";
		}
	
		var ch = source.next();
		if (ch == "%") {
		  source.skipToEnd();
		  return "comment";
		} else if (ch == '}' || ch == ']') {
		  plug = peekCommand(state);
		  if (plug) {
			plug.closeBracket(ch);
			setState(state, beginParams);
		  } else {
			return "error";
		  }
		  return "bracket";
		} else if (ch == '{' || ch == '[') {
		  plug = plugins["DEFAULT"];
		  plug = new plug();
		  pushCommand(state, plug);
		  return "bracket";
		} else if (/\d/.test(ch)) {
		  source.eatWhile(/[\w.%]/);
		  return "atom";
		} else {
		  source.eatWhile(/[\w\-_]/);
		  plug = getMostPowerful(state);
		  if (plug.name == 'begin') {
			plug.argument = source.current();
		  }
		  return plug.styleIdentifier();
		}
	  }
	
	  function inMathMode(source, state, endModeSeq) {
		if (source.eatSpace()) {
		  return null;
		}
		if (endModeSeq && source.match(endModeSeq)) {
		  setState(state, normal);
		  return "keyword";
		}
		if (source.match(/^\\[a-zA-Z@]+/)) {
		  return "tag";
		}
		if (source.match(/^[a-zA-Z]+/)) {
		  return "variableName.special";
		}
		// escape characters
		if (source.match(/^\\[$&%#{}_]/)) {
		  return "tag";
		}
		// white space control characters
		if (source.match(/^\\[,;!\/]/)) {
		  return "tag";
		}
		// special math-mode characters
		if (source.match(/^[\^_&]/)) {
		  return "tag";
		}
		// non-special characters
		if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
		  return null;
		}
		if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
		  return "number";
		}
		var ch = source.next();
		if (ch == "{" || ch == "}" || ch == "[" || ch == "]" || ch == "(" || ch == ")") {
		  return "bracket";
		}
	
		if (ch == "%") {
		  source.skipToEnd();
		  return "comment";
		}
		return "error";
	  }
	
	  function beginParams(source, state) {
		var ch = source.peek(), lastPlug;
		if (ch == '{' || ch == '[') {
		  lastPlug = peekCommand(state);
		  lastPlug.openBracket(ch);
		  source.eat(ch);
		  setState(state, normal);
		  return "bracket";
		}
		if (/[ \t\r]/.test(ch)) {
		  source.eat(ch);
		  return null;
		}
		setState(state, normal);
		popCommand(state);
	
		return normal(source, state);
	  }
	
	  return {
		name: "stex",
		startState: function() {
		  var f = mathMode ? function(source, state){ return inMathMode(source, state); } : normal;
		  return {
			cmdState: [],
			f: f
		  };
		},
		copyState: function(s) {
		  return {
			cmdState: s.cmdState.slice(),
			f: s.f
		  };
		},
		token: function(stream, state) {
		  return state.f(stream, state);
		},
		blankLine: function(state) {
		  state.f = normal;
		  state.cmdState.length = 0;
		},
		languageData: {
		  commentTokens: {line: "%"}
		}
	  };
	}
	const stex = mkStex(false);
	const stexMath = mkStex(true);
	
	exports.stex = stex;
	exports.stexMath = stexMath;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/stylus.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/stylus.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// developer.mozilla.org/en-US/docs/Web/HTML/Element
	var tagKeywords_ = ["a","abbr","address","area","article","aside","audio", "b", "base","bdi", "bdo","bgsound","blockquote","body","br","button","canvas","caption","cite", "code","col","colgroup","data","datalist","dd","del","details","dfn","div", "dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1", "h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe", "img","input","ins","kbd","keygen","label","legend","li","link","main","map", "mark","marquee","menu","menuitem","meta","meter","nav","nobr","noframes", "noscript","object","ol","optgroup","option","output","p","param","pre", "progress","q","rp","rt","ruby","s","samp","script","section","select", "small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track", "u","ul","var","video"];
	
	// github.com/codemirror/CodeMirror/blob/master/mode/css/css.js
	// Note, "url-prefix" should precede "url" in order to match correctly in documentTypesRegexp
	var documentTypes_ = ["domain", "regexp", "url-prefix", "url"];
	var mediaTypes_ = ["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"];
	var mediaFeatures_ = ["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid","dynamic-range","video-dynamic-range"];
	var propertyKeywords_ = ["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flow-from","flow-into","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-position","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marker-offset","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","play-during","position","presentation-level","punctuation-trim","quotes","region-break-after","region-break-before","region-break-inside","region-fragment","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","shape-image-threshold","shape-inside","shape-margin","shape-outside","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-overflow","text-shadow","text-size-adjust","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","z-index","clip-path","clip-rule","mask","enable-background","filter","flood-color","flood-opacity","lighting-color","stop-color","stop-opacity","pointer-events","color-interpolation","color-interpolation-filters","color-rendering","fill","fill-opacity","fill-rule","image-rendering","marker","marker-end","marker-mid","marker-start","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-rendering","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","text-anchor","writing-mode","font-smoothing","osx-font-smoothing"];
	var nonStandardPropertyKeywords_ = ["scrollbar-arrow-color","scrollbar-base-color","scrollbar-dark-shadow-color","scrollbar-face-color","scrollbar-highlight-color","scrollbar-shadow-color","scrollbar-3d-light-color","scrollbar-track-color","shape-inside","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","zoom"];
	var fontProperties_ = ["font-family","src","unicode-range","font-variant","font-feature-settings","font-stretch","font-weight","font-style"];
	var colorKeywords_ = ["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"];
	var valueKeywords_ = ["above","absolute","activeborder","additive","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","attr","auto","avoid","avoid-column","avoid-page","avoid-region","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","buttonface","buttonhighlight","buttonshadow","buttontext","calc","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","column","compact","condensed","conic-gradient","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","dashed","decimal","decimal-leading-zero","default","default-button","destination-atop","destination-in","destination-out","destination-over","devanagari","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ethiopic-numeric","ew-resize","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","flex","footnotes","forwards","from","geometricPrecision","georgian","graytext","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hebrew","help","hidden","hide","high","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-table","inset","inside","intrinsic","invert","italic","japanese-formal","japanese-informal","justify","kannada","katakana","katakana-iroha","keep-all","khmer","korean-hangul-formal","korean-hanja-formal","korean-hanja-informal","landscape","lao","large","larger","left","level","lighter","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","malayalam","match","matrix","matrix3d","media-play-button","media-slider","media-sliderthumb","media-volume-slider","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","myanmar","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","octal","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","persian","perspective","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeating-conic-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row-resize","rtl","run-in","running","s-resize","sans-serif","scale","scale3d","scaleX","scaleY","scaleZ","scroll","scrollbar","scroll-position","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","semi-condensed","semi-expanded","separate","serif","show","sidama","simp-chinese-formal","simp-chinese-informal","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","solid","somali","source-atop","source-in","source-out","source-over","space","spell-out","square","square-button","standard","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","symbolic","symbols","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","tamil","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","trad-chinese-formal","trad-chinese-informal","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","var","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","x-large","x-small","xor","xx-large","xx-small","bicubic","optimizespeed","grayscale","row","row-reverse","wrap","wrap-reverse","column-reverse","flex-start","flex-end","space-between","space-around", "unset"];
	
	var wordOperatorKeywords_ = ["in","and","or","not","is not","is a","is","isnt","defined","if unless"],
		blockKeywords_ = ["for","if","else","unless", "from", "to"],
		commonAtoms_ = ["null","true","false","href","title","type","not-allowed","readonly","disabled"],
		commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];
	
	var hintWords = tagKeywords_.concat(documentTypes_,mediaTypes_,mediaFeatures_,
										propertyKeywords_,nonStandardPropertyKeywords_,
										colorKeywords_,valueKeywords_,fontProperties_,
										wordOperatorKeywords_,blockKeywords_,
										commonAtoms_,commonDef_);
	
	function wordRegexp(words) {
	  words = words.sort(function(a,b){return b > a;});
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	
	function keySet(array) {
	  var keys = {};
	  for (var i = 0; i < array.length; ++i) keys[array[i]] = true;
	  return keys;
	}
	
	function escapeRegExp(text) {
	  return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	}
	
	var tagKeywords = keySet(tagKeywords_),
		tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,
		propertyKeywords = keySet(propertyKeywords_),
		nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),
		valueKeywords = keySet(valueKeywords_),
		colorKeywords = keySet(colorKeywords_),
		documentTypes = keySet(documentTypes_),
		documentTypesRegexp = wordRegexp(documentTypes_),
		mediaFeatures = keySet(mediaFeatures_),
		mediaTypes = keySet(mediaTypes_),
		fontProperties = keySet(fontProperties_),
		operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/,
		wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_),
		blockKeywords = keySet(blockKeywords_),
		vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i),
		commonAtoms = keySet(commonAtoms_),
		firstWordMatch = "",
		states = {},
		ch,
		style,
		type,
		override;
	
	/**
	 * Tokenizers
	 */
	function tokenBase(stream, state) {
	  firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
	  state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
	  state.context.line.indent = stream.indentation();
	  ch = stream.peek();
	
	  // Line comment
	  if (stream.match("//")) {
		stream.skipToEnd();
		return ["comment", "comment"];
	  }
	  // Block comment
	  if (stream.match("/*")) {
		state.tokenize = tokenCComment;
		return tokenCComment(stream, state);
	  }
	  // String
	  if (ch == "\"" || ch == "'") {
		stream.next();
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  // Def
	  if (ch == "@") {
		stream.next();
		stream.eatWhile(/[\w\\-]/);
		return ["def", stream.current()];
	  }
	  // ID selector or Hex color
	  if (ch == "#") {
		stream.next();
		// Hex color
		if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
		  return ["atom", "atom"];
		}
		// ID selector
		if (stream.match(/^[a-z][\w-]*/i)) {
		  return ["builtin", "hash"];
		}
	  }
	  // Vendor prefixes
	  if (stream.match(vendorPrefixesRegexp)) {
		return ["meta", "vendor-prefixes"];
	  }
	  // Numbers
	  if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
		stream.eatWhile(/[a-z%]/i);
		return ["number", "unit"];
	  }
	  // !important|optional
	  if (ch == "!") {
		stream.next();
		return [stream.match(/^(important|optional)/i) ? "keyword": "operator", "important"];
	  }
	  // Class
	  if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
		return ["qualifier", "qualifier"];
	  }
	  // url url-prefix domain regexp
	  if (stream.match(documentTypesRegexp)) {
		if (stream.peek() == "(") state.tokenize = tokenParenthesized;
		return ["property", "word"];
	  }
	  // Mixins / Functions
	  if (stream.match(/^[a-z][\w-]*\(/i)) {
		stream.backUp(1);
		return ["keyword", "mixin"];
	  }
	  // Block mixins
	  if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
		stream.backUp(1);
		return ["keyword", "block-mixin"];
	  }
	  // Parent Reference BEM naming
	  if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
		return ["qualifier", "qualifier"];
	  }
	  // / Root Reference & Parent Reference
	  if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
		stream.backUp(1);
		return ["variableName.special", "reference"];
	  }
	  if (stream.match(/^&{1}\s*$/)) {
		return ["variableName.special", "reference"];
	  }
	  // Word operator
	  if (stream.match(wordOperatorKeywordsRegexp)) {
		return ["operator", "operator"];
	  }
	  // Word
	  if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
		// Variable
		if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
		  if (!wordIsTag(stream.current())) {
			stream.match('.');
			return ["variable", "variable-name"];
		  }
		}
		return ["variable", "word"];
	  }
	  // Operators
	  if (stream.match(operatorsRegexp)) {
		return ["operator", stream.current()];
	  }
	  // Delimiters
	  if (/[:;,{}\[\]\(\)]/.test(ch)) {
		stream.next();
		return [null, ch];
	  }
	  // Non-detected items
	  stream.next();
	  return [null, null];
	}
	
	/**
	 * Token comment
	 */
	function tokenCComment(stream, state) {
	  var maybeEnd = false, ch;
	  while ((ch = stream.next()) != null) {
		if (maybeEnd && ch == "/") {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return ["comment", "comment"];
	}
	
	/**
	 * Token string
	 */
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped) {
			if (quote == ")") stream.backUp(1);
			break;
		  }
		  escaped = !escaped && ch == "\\";
		}
		if (ch == quote || !escaped && quote != ")") state.tokenize = null;
		return ["string", "string"];
	  };
	}
	
	/**
	 * Token parenthesized
	 */
	function tokenParenthesized(stream, state) {
	  stream.next(); // Must be "("
	  if (!stream.match(/\s*[\"\')]/, false))
		state.tokenize = tokenString(")");
	  else
		state.tokenize = null;
	  return [null, "("];
	}
	
	/**
	 * Context management
	 */
	function Context(type, indent, prev, line) {
	  this.type = type;
	  this.indent = indent;
	  this.prev = prev;
	  this.line = line || {firstWord: "", indent: 0};
	}
	
	function pushContext(state, stream, type, indent) {
	  indent = indent >= 0 ? indent : stream.indentUnit;
	  state.context = new Context(type, stream.indentation() + indent, state.context);
	  return type;
	}
	
	function popContext(state, stream, currentIndent) {
	  var contextIndent = state.context.indent - stream.indentUnit;
	  currentIndent = currentIndent || false;
	  state.context = state.context.prev;
	  if (currentIndent) state.context.indent = contextIndent;
	  return state.context.type;
	}
	
	function pass(type, stream, state) {
	  return states[state.context.type](type, stream, state);
	}
	
	function popAndPass(type, stream, state, n) {
	  for (var i = n || 1; i > 0; i--)
		state.context = state.context.prev;
	  return pass(type, stream, state);
	}
	
	
	/**
	 * Parser
	 */
	function wordIsTag(word) {
	  return word.toLowerCase() in tagKeywords;
	}
	
	function wordIsProperty(word) {
	  word = word.toLowerCase();
	  return word in propertyKeywords || word in fontProperties;
	}
	
	function wordIsBlock(word) {
	  return word.toLowerCase() in blockKeywords;
	}
	
	function wordIsVendorPrefix(word) {
	  return word.toLowerCase().match(vendorPrefixesRegexp);
	}
	
	function wordAsValue(word) {
	  var wordLC = word.toLowerCase();
	  var override = "variable";
	  if (wordIsTag(word)) override = "tag";
	  else if (wordIsBlock(word)) override = "block-keyword";
	  else if (wordIsProperty(word)) override = "property";
	  else if (wordLC in valueKeywords || wordLC in commonAtoms) override = "atom";
	  else if (wordLC == "return" || wordLC in colorKeywords) override = "keyword";
	
	  // Font family
	  else if (word.match(/^[A-Z]/)) override = "string";
	  return override;
	}
	
	function typeIsBlock(type, stream) {
	  return ((endOfLine(stream) && (type == "{" || type == "]" || type == "hash" || type == "qualifier")) || type == "block-mixin");
	}
	
	function typeIsInterpolation(type, stream) {
	  return type == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
	}
	
	function typeIsPseudo(type, stream) {
	  return type == ":" && stream.match(/^[a-z-]+/, false);
	}
	
	function startOfLine(stream) {
	  return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
	}
	
	function endOfLine(stream) {
	  return stream.eol() || stream.match(/^\s*$/, false);
	}
	
	function firstWordOfLine(line) {
	  var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
	  var result = typeof line == "string" ? line.match(re) : line.string.match(re);
	  return result ? result[0].replace(/^\s*/, "") : "";
	}
	
	
	/**
	 * Block
	 */
	states.block = function(type, stream, state) {
	  if ((type == "comment" && startOfLine(stream)) ||
		  (type == "," && endOfLine(stream)) ||
		  type == "mixin") {
		return pushContext(state, stream, "block", 0);
	  }
	  if (typeIsInterpolation(type, stream)) {
		return pushContext(state, stream, "interpolation");
	  }
	  if (endOfLine(stream) && type == "]") {
		if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
		  return pushContext(state, stream, "block", 0);
		}
	  }
	  if (typeIsBlock(type, stream)) {
		return pushContext(state, stream, "block");
	  }
	  if (type == "}" && endOfLine(stream)) {
		return pushContext(state, stream, "block", 0);
	  }
	  if (type == "variable-name") {
		if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
		  return pushContext(state, stream, "variableName");
		}
		else {
		  return pushContext(state, stream, "variableName", 0);
		}
	  }
	  if (type == "=") {
		if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
		  return pushContext(state, stream, "block", 0);
		}
		return pushContext(state, stream, "block");
	  }
	  if (type == "*") {
		if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/,false)) {
		  override = "tag";
		  return pushContext(state, stream, "block");
		}
	  }
	  if (typeIsPseudo(type, stream)) {
		return pushContext(state, stream, "pseudo");
	  }
	  if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
		return pushContext(state, stream, endOfLine(stream) ? "block" : "atBlock");
	  }
	  if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {
		return pushContext(state, stream, "keyframes");
	  }
	  if (/@extends?/.test(type)) {
		return pushContext(state, stream, "extend", 0);
	  }
	  if (type && type.charAt(0) == "@") {
	
		// Property Lookup
		if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
		  override = "variable";
		  return "block";
		}
		if (/(@import|@require|@charset)/.test(type)) {
		  return pushContext(state, stream, "block", 0);
		}
		return pushContext(state, stream, "block");
	  }
	  if (type == "reference" && endOfLine(stream)) {
		return pushContext(state, stream, "block");
	  }
	  if (type == "(") {
		return pushContext(state, stream, "parens");
	  }
	
	  if (type == "vendor-prefixes") {
		return pushContext(state, stream, "vendorPrefixes");
	  }
	  if (type == "word") {
		var word = stream.current();
		override = wordAsValue(word);
	
		if (override == "property") {
		  if (startOfLine(stream)) {
			return pushContext(state, stream, "block", 0);
		  } else {
			override = "atom";
			return "block";
		  }
		}
	
		if (override == "tag") {
	
		  // tag is a css value
		  if (/embed|menu|pre|progress|sub|table/.test(word)) {
			if (wordIsProperty(firstWordOfLine(stream))) {
			  override = "atom";
			  return "block";
			}
		  }
	
		  // tag is an attribute
		  if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word +"\\s*\\]"))) {
			override = "atom";
			return "block";
		  }
	
		  // tag is a variable
		  if (tagVariablesRegexp.test(word)) {
			if ((startOfLine(stream) && stream.string.match(/=/)) ||
				(!startOfLine(stream) &&
				 !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) &&
				 !wordIsTag(firstWordOfLine(stream)))) {
			  override = "variable";
			  if (wordIsBlock(firstWordOfLine(stream)))  return "block";
			  return pushContext(state, stream, "block", 0);
			}
		  }
	
		  if (endOfLine(stream)) return pushContext(state, stream, "block");
		}
		if (override == "block-keyword") {
		  override = "keyword";
	
		  // Postfix conditionals
		  if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
			return "block";
		  }
		  return pushContext(state, stream, "block");
		}
		if (word == "return") return pushContext(state, stream, "block", 0);
	
		// Placeholder selector
		if (override == "variable" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
		  return pushContext(state, stream, "block");
		}
	  }
	  return state.context.type;
	};
	
	
	/**
	 * Parens
	 */
	states.parens = function(type, stream, state) {
	  if (type == "(") return pushContext(state, stream, "parens");
	  if (type == ")") {
		if (state.context.prev.type == "parens") {
		  return popContext(state, stream);
		}
		if ((stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream)) ||
			wordIsBlock(firstWordOfLine(stream)) ||
			/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) ||
			(!stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) &&
			 wordIsTag(firstWordOfLine(stream)))) {
		  return pushContext(state, stream, "block");
		}
		if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) ||
			stream.string.match(/^\s*(\(|\)|[0-9])/) ||
			stream.string.match(/^\s+[a-z][\w-]*\(/i) ||
			stream.string.match(/^\s+[\$-]?[a-z]/i)) {
		  return pushContext(state, stream, "block", 0);
		}
		if (endOfLine(stream)) return pushContext(state, stream, "block");
		else return pushContext(state, stream, "block", 0);
	  }
	  if (type && type.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
		override = "variable";
	  }
	  if (type == "word") {
		var word = stream.current();
		override = wordAsValue(word);
		if (override == "tag" && tagVariablesRegexp.test(word)) {
		  override = "variable";
		}
		if (override == "property" || word == "to") override = "atom";
	  }
	  if (type == "variable-name") {
		return pushContext(state, stream, "variableName");
	  }
	  if (typeIsPseudo(type, stream)) {
		return pushContext(state, stream, "pseudo");
	  }
	  return state.context.type;
	};
	
	
	/**
	 * Vendor prefixes
	 */
	states.vendorPrefixes = function(type, stream, state) {
	  if (type == "word") {
		override = "property";
		return pushContext(state, stream, "block", 0);
	  }
	  return popContext(state, stream);
	};
	
	
	/**
	 * Pseudo
	 */
	states.pseudo = function(type, stream, state) {
	  if (!wordIsProperty(firstWordOfLine(stream.string))) {
		stream.match(/^[a-z-]+/);
		override = "variableName.special";
		if (endOfLine(stream)) return pushContext(state, stream, "block");
		return popContext(state, stream);
	  }
	  return popAndPass(type, stream, state);
	};
	
	
	/**
	 * atBlock
	 */
	states.atBlock = function(type, stream, state) {
	  if (type == "(") return pushContext(state, stream, "atBlock_parens");
	  if (typeIsBlock(type, stream)) {
		return pushContext(state, stream, "block");
	  }
	  if (typeIsInterpolation(type, stream)) {
		return pushContext(state, stream, "interpolation");
	  }
	  if (type == "word") {
		var word = stream.current().toLowerCase();
		if (/^(only|not|and|or)$/.test(word))
		  override = "keyword";
		else if (documentTypes.hasOwnProperty(word))
		  override = "tag";
		else if (mediaTypes.hasOwnProperty(word))
		  override = "attribute";
		else if (mediaFeatures.hasOwnProperty(word))
		  override = "property";
		else if (nonStandardPropertyKeywords.hasOwnProperty(word))
		  override = "string.special";
		else override = wordAsValue(stream.current());
		if (override == "tag" && endOfLine(stream)) {
		  return pushContext(state, stream, "block");
		}
	  }
	  if (type == "operator" && /^(not|and|or)$/.test(stream.current())) {
		override = "keyword";
	  }
	  return state.context.type;
	};
	
	states.atBlock_parens = function(type, stream, state) {
	  if (type == "{" || type == "}") return state.context.type;
	  if (type == ")") {
		if (endOfLine(stream)) return pushContext(state, stream, "block");
		else return pushContext(state, stream, "atBlock");
	  }
	  if (type == "word") {
		var word = stream.current().toLowerCase();
		override = wordAsValue(word);
		if (/^(max|min)/.test(word)) override = "property";
		if (override == "tag") {
		  tagVariablesRegexp.test(word) ? override = "variable" : override = "atom";
		}
		return state.context.type;
	  }
	  return states.atBlock(type, stream, state);
	};
	
	
	/**
	 * Keyframes
	 */
	states.keyframes = function(type, stream, state) {
	  if (stream.indentation() == "0" && ((type == "}" && startOfLine(stream)) || type == "]" || type == "hash"
										  || type == "qualifier" || wordIsTag(stream.current()))) {
		return popAndPass(type, stream, state);
	  }
	  if (type == "{") return pushContext(state, stream, "keyframes");
	  if (type == "}") {
		if (startOfLine(stream)) return popContext(state, stream, true);
		else return pushContext(state, stream, "keyframes");
	  }
	  if (type == "unit" && /^[0-9]+\%$/.test(stream.current())) {
		return pushContext(state, stream, "keyframes");
	  }
	  if (type == "word") {
		override = wordAsValue(stream.current());
		if (override == "block-keyword") {
		  override = "keyword";
		  return pushContext(state, stream, "keyframes");
		}
	  }
	  if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
		return pushContext(state, stream, endOfLine(stream) ? "block" : "atBlock");
	  }
	  if (type == "mixin") {
		return pushContext(state, stream, "block", 0);
	  }
	  return state.context.type;
	};
	
	
	/**
	 * Interpolation
	 */
	states.interpolation = function(type, stream, state) {
	  if (type == "{") popContext(state, stream) && pushContext(state, stream, "block");
	  if (type == "}") {
		if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) ||
			(stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream)))) {
		  return pushContext(state, stream, "block");
		}
		if (!stream.string.match(/^(\{|\s*\&)/) ||
			stream.match(/\s*[\w-]/,false)) {
		  return pushContext(state, stream, "block", 0);
		}
		return pushContext(state, stream, "block");
	  }
	  if (type == "variable-name") {
		return pushContext(state, stream, "variableName", 0);
	  }
	  if (type == "word") {
		override = wordAsValue(stream.current());
		if (override == "tag") override = "atom";
	  }
	  return state.context.type;
	};
	
	
	/**
	 * Extend/s
	 */
	states.extend = function(type, stream, state) {
	  if (type == "[" || type == "=") return "extend";
	  if (type == "]") return popContext(state, stream);
	  if (type == "word") {
		override = wordAsValue(stream.current());
		return "extend";
	  }
	  return popContext(state, stream);
	};
	
	
	/**
	 * Variable name
	 */
	states.variableName = function(type, stream, state) {
	  if (type == "string" || type == "[" || type == "]" || stream.current().match(/^(\.|\$)/)) {
		if (stream.current().match(/^\.[\w-]+/i)) override = "variable";
		return "variableName";
	  }
	  return popAndPass(type, stream, state);
	};
	
	const stylus = {
	  name: "stylus",
	  startState: function() {
		return {
		  tokenize: null,
		  state: "block",
		  context: new Context("block", 0, null)
		};
	  },
	  token: function(stream, state) {
		if (!state.tokenize && stream.eatSpace()) return null;
		style = (state.tokenize || tokenBase)(stream, state);
		if (style && typeof style == "object") {
		  type = style[1];
		  style = style[0];
		}
		override = style;
		state.state = states[state.state](type, stream, state);
		return override;
	  },
	  indent: function(state, textAfter, iCx) {
		var cx = state.context,
			ch = textAfter && textAfter.charAt(0),
			indent = cx.indent,
			lineFirstWord = firstWordOfLine(textAfter),
			lineIndent = iCx.lineIndent(iCx.pos),
			prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "",
			prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;
	
		if (cx.prev &&
			(ch == "}" && (cx.type == "block" || cx.type == "atBlock" || cx.type == "keyframes") ||
			 ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
			 ch == "{" && (cx.type == "at"))) {
		  indent = cx.indent - iCx.unit;
		} else if (!(/(\})/.test(ch))) {
		  if (/@|\$|\d/.test(ch) ||
			  /^\{/.test(textAfter) ||
	/^\s*\/(\/|\*)/.test(textAfter) ||
			  /^\s*\/\*/.test(prevLineFirstWord) ||
			  /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) ||
	/^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) ||
	/^return/.test(textAfter) ||
				  wordIsBlock(lineFirstWord)) {
				indent = lineIndent;
			  } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch) || wordIsTag(lineFirstWord)) {
			if (/\,\s*$/.test(prevLineFirstWord)) {
			  indent = prevLineIndent;
			} else if (!state.sol() && (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {
			  indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
			} else {
			  indent = lineIndent;
			}
		  } else if (!/,\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
			if (wordIsBlock(prevLineFirstWord)) {
			  indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
			} else if (/^\{/.test(prevLineFirstWord)) {
			  indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;
			} else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
			  indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
			} else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) ||
					   /=\s*$/.test(prevLineFirstWord) ||
					   wordIsTag(prevLineFirstWord) ||
					   /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
			  indent = prevLineIndent + iCx.unit;
			} else {
			  indent = lineIndent;
			}
		  }
		}
		return indent;
	  },
	  languageData: {
		indentOnInput: /^\s*\}$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		autocomplete: hintWords
	  }
	};
	
	exports.stylus = stylus;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/swift.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/swift.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordSet(words) {
	  var set = {};
	  for (var i = 0; i < words.length; i++) set[words[i]] = true;
	  return set
	}
	
	var keywords = wordSet(["_","var","let","actor","class","enum","extension","import","protocol","struct","func","typealias","associatedtype",
							"open","public","internal","fileprivate","private","deinit","init","new","override","self","subscript","super",
							"convenience","dynamic","final","indirect","lazy","required","static","unowned","unowned(safe)","unowned(unsafe)","weak","as","is",
							"break","case","continue","default","else","fallthrough","for","guard","if","in","repeat","switch","where","while",
							"defer","return","inout","mutating","nonmutating","isolated","nonisolated","catch","do","rethrows","throw","throws","async","await","try","didSet","get","set","willSet",
							"assignment","associativity","infix","left","none","operator","postfix","precedence","precedencegroup","prefix","right",
							"Any","AnyObject","Type","dynamicType","Self","Protocol","__COLUMN__","__FILE__","__FUNCTION__","__LINE__"]);
	var definingKeywords = wordSet(["var","let","actor","class","enum","extension","import","protocol","struct","func","typealias","associatedtype","for"]);
	var atoms = wordSet(["true","false","nil","self","super","_"]);
	var types = wordSet(["Array","Bool","Character","Dictionary","Double","Float","Int","Int8","Int16","Int32","Int64","Never","Optional","Set","String",
						 "UInt8","UInt16","UInt32","UInt64","Void"]);
	var operators = "+-/*%=|&<>~^?!";
	var punc = ":;,.(){}[]";
	var binary = /^\-?0b[01][01_]*/;
	var octal = /^\-?0o[0-7][0-7_]*/;
	var hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
	var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
	var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
	var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
	var instruction = /^\#[A-Za-z]+/;
	var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
	//var regexp = /^\/(?!\s)(?:\/\/)?(?:\\.|[^\/])+\//
	
	function tokenBase(stream, state, prev) {
	  if (stream.sol()) state.indented = stream.indentation();
	  if (stream.eatSpace()) return null
	
	  var ch = stream.peek();
	  if (ch == "/") {
		if (stream.match("//")) {
		  stream.skipToEnd();
		  return "comment"
		}
		if (stream.match("/*")) {
		  state.tokenize.push(tokenComment);
		  return tokenComment(stream, state)
		}
	  }
	  if (stream.match(instruction)) return "builtin"
	  if (stream.match(attribute)) return "attribute"
	  if (stream.match(binary)) return "number"
	  if (stream.match(octal)) return "number"
	  if (stream.match(hexadecimal)) return "number"
	  if (stream.match(decimal)) return "number"
	  if (stream.match(property)) return "property"
	  if (operators.indexOf(ch) > -1) {
		stream.next();
		return "operator"
	  }
	  if (punc.indexOf(ch) > -1) {
		stream.next();
		stream.match("..");
		return "punctuation"
	  }
	  var stringMatch;
	  if (stringMatch = stream.match(/("""|"|')/)) {
		var tokenize = tokenString.bind(null, stringMatch[0]);
		state.tokenize.push(tokenize);
		return tokenize(stream, state)
	  }
	
	  if (stream.match(identifier)) {
		var ident = stream.current();
		if (types.hasOwnProperty(ident)) return "type"
		if (atoms.hasOwnProperty(ident)) return "atom"
		if (keywords.hasOwnProperty(ident)) {
		  if (definingKeywords.hasOwnProperty(ident))
			state.prev = "define";
		  return "keyword"
		}
		if (prev == "define") return "def"
		return "variable"
	  }
	
	  stream.next();
	  return null
	}
	
	function tokenUntilClosingParen() {
	  var depth = 0;
	  return function(stream, state, prev) {
		var inner = tokenBase(stream, state, prev);
		if (inner == "punctuation") {
		  if (stream.current() == "(") ++depth;
		  else if (stream.current() == ")") {
			if (depth == 0) {
			  stream.backUp(1);
			  state.tokenize.pop();
			  return state.tokenize[state.tokenize.length - 1](stream, state)
			}
			else --depth;
		  }
		}
		return inner
	  }
	}
	
	function tokenString(openQuote, stream, state) {
	  var singleLine = openQuote.length == 1;
	  var ch, escaped = false;
	  while (ch = stream.peek()) {
		if (escaped) {
		  stream.next();
		  if (ch == "(") {
			state.tokenize.push(tokenUntilClosingParen());
			return "string"
		  }
		  escaped = false;
		} else if (stream.match(openQuote)) {
		  state.tokenize.pop();
		  return "string"
		} else {
		  stream.next();
		  escaped = ch == "\\";
		}
	  }
	  if (singleLine) {
		state.tokenize.pop();
	  }
	  return "string"
	}
	
	function tokenComment(stream, state) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch === "/" && stream.eat("*")) {
		  state.tokenize.push(tokenComment);
		} else if (ch === "*" && stream.eat("/")) {
		  state.tokenize.pop();
		  break
		}
	  }
	  return "comment"
	}
	
	function Context(prev, align, indented) {
	  this.prev = prev;
	  this.align = align;
	  this.indented = indented;
	}
	
	function pushContext(state, stream) {
	  var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false) ? null : stream.column() + 1;
	  state.context = new Context(state.context, align, state.indented);
	}
	
	function popContext(state) {
	  if (state.context) {
		state.indented = state.context.indented;
		state.context = state.context.prev;
	  }
	}
	
	const swift = {
	  name: "swift",
	  startState: function() {
		return {
		  prev: null,
		  context: null,
		  indented: 0,
		  tokenize: []
		}
	  },
	
	  token: function(stream, state) {
		var prev = state.prev;
		state.prev = null;
		var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase;
		var style = tokenize(stream, state, prev);
		if (!style || style == "comment") state.prev = prev;
		else if (!state.prev) state.prev = style;
	
		if (style == "punctuation") {
		  var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
		  if (bracket) (bracket[1] ? popContext : pushContext)(state, stream);
		}
	
		return style
	  },
	
	  indent: function(state, textAfter, iCx) {
		var cx = state.context;
		if (!cx) return 0
		var closing = /^[\]\}\)]/.test(textAfter);
		if (cx.align != null) return cx.align - (closing ? 1 : 0)
		return cx.indented + (closing ? 0 : iCx.unit)
	  },
	
	  languageData: {
		indentOnInput: /^\s*[\)\}\]]$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
	  }
	};
	
	exports.swift = swift;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/tcl.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/tcl.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function parseWords(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	var keywords = parseWords("Tcl safe after append array auto_execok auto_import auto_load " +
							  "auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror " +
							  "binary break catch cd close concat continue dde eof encoding error " +
							  "eval exec exit expr fblocked fconfigure fcopy file fileevent filename " +
							  "filename flush for foreach format gets glob global history http if " +
							  "incr info interp join lappend lindex linsert list llength load lrange " +
							  "lreplace lsearch lset lsort memory msgcat namespace open package parray " +
							  "pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp " +
							  "registry regsub rename resource return scan seek set socket source split " +
							  "string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord " +
							  "tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest " +
							  "tclvars tell time trace unknown unset update uplevel upvar variable " +
							  "vwait");
	var functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
	var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	function tokenBase(stream, state) {
	  var beforeParams = state.beforeParams;
	  state.beforeParams = false;
	  var ch = stream.next();
	  if ((ch == '"' || ch == "'") && state.inParams) {
		return chain(stream, state, tokenString(ch));
	  } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
		if (ch == "(" && beforeParams) state.inParams = true;
		else if (ch == ")") state.inParams = false;
		return null;
	  } else if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  } else if (ch == "#") {
		if (stream.eat("*"))
		  return chain(stream, state, tokenComment);
		if (ch == "#" && stream.match(/ *\[ *\[/))
		  return chain(stream, state, tokenUnparsed);
		stream.skipToEnd();
		return "comment";
	  } else if (ch == '"') {
		stream.skipTo(/"/);
		return "comment";
	  } else if (ch == "$") {
		stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
		stream.eatWhile(/}/);
		state.beforeParams = true;
		return "builtin";
	  } else if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "comment";
	  } else {
		stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
		var word = stream.current().toLowerCase();
		if (keywords && keywords.propertyIsEnumerable(word))
		  return "keyword";
		if (functions && functions.propertyIsEnumerable(word)) {
		  state.beforeParams = true;
		  return "keyword";
		}
		return null;
	  }
	}
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {
			end = true;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end) state.tokenize = tokenBase;
		return "string";
	  };
	}
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "#" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	function tokenUnparsed(stream, state) {
	  var maybeEnd = 0, ch;
	  while (ch = stream.next()) {
		if (ch == "#" && maybeEnd == 2) {
		  state.tokenize = tokenBase;
		  break;
		}
		if (ch == "]")
		  maybeEnd++;
		else if (ch != " ")
		  maybeEnd = 0;
	  }
	  return "meta";
	}
	const tcl = {
	  name: "tcl",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  beforeParams: false,
		  inParams: false
		};
	  },
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  },
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.tcl = tcl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/textile.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/textile.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var TOKEN_STYLES = {
	  addition: "inserted",
	  attributes: "propertyName",
	  bold: "strong",
	  cite: "keyword",
	  code: "monospace",
	  definitionList: "list",
	  deletion: "deleted",
	  div: "punctuation",
	  em: "emphasis",
	  footnote: "variable",
	  footCite: "qualifier",
	  header: "heading",
	  html: "comment",
	  image: "atom",
	  italic: "emphasis",
	  link: "link",
	  linkDefinition: "link",
	  list1: "list",
	  list2: "list.special",
	  list3: "list",
	  notextile: "string.special",
	  pre: "operator",
	  p: "content",
	  quote: "bracket",
	  span: "quote",
	  specialChar: "character",
	  strong: "strong",
	  sub: "content.special",
	  sup: "content.special",
	  table: "variableName.special",
	  tableHeading: "operator"
	};
	
	function startNewLine(stream, state) {
	  state.mode = Modes.newLayout;
	  state.tableHeading = false;
	
	  if (state.layoutType === "definitionList" && state.spanningLayout &&
		  stream.match(RE("definitionListEnd"), false))
		state.spanningLayout = false;
	}
	
	function handlePhraseModifier(stream, state, ch) {
	  if (ch === "_") {
		if (stream.eat("_"))
		  return togglePhraseModifier(stream, state, "italic", /__/, 2);
		else
		  return togglePhraseModifier(stream, state, "em", /_/, 1);
	  }
	
	  if (ch === "*") {
		if (stream.eat("*")) {
		  return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
		}
		return togglePhraseModifier(stream, state, "strong", /\*/, 1);
	  }
	
	  if (ch === "[") {
		if (stream.match(/\d+\]/)) state.footCite = true;
		return tokenStyles(state);
	  }
	
	  if (ch === "(") {
		var spec = stream.match(/^(r|tm|c)\)/);
		if (spec)
		  return TOKEN_STYLES.specialChar
	  }
	
	  if (ch === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
		return TOKEN_STYLES.html
	
	  if (ch === "?" && stream.eat("?"))
		return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);
	
	  if (ch === "=" && stream.eat("="))
		return togglePhraseModifier(stream, state, "notextile", /==/, 2);
	
	  if (ch === "-" && !stream.eat("-"))
		return togglePhraseModifier(stream, state, "deletion", /-/, 1);
	
	  if (ch === "+")
		return togglePhraseModifier(stream, state, "addition", /\+/, 1);
	
	  if (ch === "~")
		return togglePhraseModifier(stream, state, "sub", /~/, 1);
	
	  if (ch === "^")
		return togglePhraseModifier(stream, state, "sup", /\^/, 1);
	
	  if (ch === "%")
		return togglePhraseModifier(stream, state, "span", /%/, 1);
	
	  if (ch === "@")
		return togglePhraseModifier(stream, state, "code", /@/, 1);
	
	  if (ch === "!") {
		var type = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
		stream.match(/^:\S+/); // optional Url portion
		return type;
	  }
	  return tokenStyles(state);
	}
	
	function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
	  var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
	  var charAfter = stream.peek();
	  if (state[phraseModifier]) {
		if ((!charAfter || /\W/.test(charAfter)) && charBefore && /\S/.test(charBefore)) {
		  var type = tokenStyles(state);
		  state[phraseModifier] = false;
		  return type;
		}
	  } else if ((!charBefore || /\W/.test(charBefore)) && charAfter && /\S/.test(charAfter) &&
				 stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
		state[phraseModifier] = true;
		state.mode = Modes.attributes;
	  }
	  return tokenStyles(state);
	}
	function tokenStyles(state) {
	  var disabled = textileDisabled(state);
	  if (disabled) return disabled;
	
	  var styles = [];
	  if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);
	
	  styles = styles.concat(activeStyles(
		state, "addition", "bold", "cite", "code", "deletion", "em", "footCite",
		"image", "italic", "link", "span", "strong", "sub", "sup", "table", "tableHeading"));
	
	  if (state.layoutType === "header")
		styles.push(TOKEN_STYLES.header + "-" + state.header);
	
	  return styles.length ? styles.join(" ") : null;
	}
	
	function textileDisabled(state) {
	  var type = state.layoutType;
	
	  switch(type) {
	  case "notextile":
	  case "code":
	  case "pre":
		return TOKEN_STYLES[type];
	  default:
		if (state.notextile)
		  return TOKEN_STYLES.notextile + (type ? (" " + TOKEN_STYLES[type]) : "");
		return null;
	  }
	}
	
	function activeStyles(state) {
	  var styles = [];
	  for (var i = 1; i < arguments.length; ++i) {
		if (state[arguments[i]])
		  styles.push(TOKEN_STYLES[arguments[i]]);
	  }
	  return styles;
	}
	
	function blankLine(state) {
	  var spanningLayout = state.spanningLayout, type = state.layoutType;
	
	  for (var key in state) if (state.hasOwnProperty(key))
		delete state[key];
	
	  state.mode = Modes.newLayout;
	  if (spanningLayout) {
		state.layoutType = type;
		state.spanningLayout = true;
	  }
	}
	
	var REs = {
	  cache: {},
	  single: {
		bc: "bc",
		bq: "bq",
		definitionList: /- .*?:=+/,
		definitionListEnd: /.*=:\s*$/,
		div: "div",
		drawTable: /\|.*\|/,
		foot: /fn\d+/,
		header: /h[1-6]/,
		html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
		link: /[^"]+":\S/,
		linkDefinition: /\[[^\s\]]+\]\S+/,
		list: /(?:#+|\*+)/,
		notextile: "notextile",
		para: "p",
		pre: "pre",
		table: "table",
		tableCellAttributes: /[\/\\]\d+/,
		tableHeading: /\|_\./,
		tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
		text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
	  },
	  attributes: {
		align: /(?:<>|<|>|=)/,
		selector: /\([^\(][^\)]+\)/,
		lang: /\[[^\[\]]+\]/,
		pad: /(?:\(+|\)+){1,2}/,
		css: /\{[^\}]+\}/
	  },
	  createRe: function(name) {
		switch (name) {
		case "drawTable":
		  return REs.makeRe("^", REs.single.drawTable, "$");
		case "html":
		  return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
		case "linkDefinition":
		  return REs.makeRe("^", REs.single.linkDefinition, "$");
		case "listLayout":
		  return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
		case "tableCellAttributes":
		  return REs.makeRe("^", REs.choiceRe(REs.single.tableCellAttributes,
											  RE("allAttributes")), "+\\.");
		case "type":
		  return REs.makeRe("^", RE("allTypes"));
		case "typeLayout":
		  return REs.makeRe("^", RE("allTypes"), RE("allAttributes"),
							"*\\.\\.?", "(\\s+|$)");
		case "attributes":
		  return REs.makeRe("^", RE("allAttributes"), "+");
	
		case "allTypes":
		  return REs.choiceRe(REs.single.div, REs.single.foot,
							  REs.single.header, REs.single.bc, REs.single.bq,
							  REs.single.notextile, REs.single.pre, REs.single.table,
							  REs.single.para);
	
		case "allAttributes":
		  return REs.choiceRe(REs.attributes.selector, REs.attributes.css,
							  REs.attributes.lang, REs.attributes.align, REs.attributes.pad);
	
		default:
		  return REs.makeRe("^", REs.single[name]);
		}
	  },
	  makeRe: function() {
		var pattern = "";
		for (var i = 0; i < arguments.length; ++i) {
		  var arg = arguments[i];
		  pattern += (typeof arg === "string") ? arg : arg.source;
		}
		return new RegExp(pattern);
	  },
	  choiceRe: function() {
		var parts = [arguments[0]];
		for (var i = 1; i < arguments.length; ++i) {
		  parts[i * 2 - 1] = "|";
		  parts[i * 2] = arguments[i];
		}
	
		parts.unshift("(?:");
		parts.push(")");
		return REs.makeRe.apply(null, parts);
	  }
	};
	
	function RE(name) {
	  return (REs.cache[name] || (REs.cache[name] = REs.createRe(name)));
	}
	
	var Modes = {
	  newLayout: function(stream, state) {
		if (stream.match(RE("typeLayout"), false)) {
		  state.spanningLayout = false;
		  return (state.mode = Modes.blockType)(stream, state);
		}
		var newMode;
		if (!textileDisabled(state)) {
		  if (stream.match(RE("listLayout"), false))
			newMode = Modes.list;
		  else if (stream.match(RE("drawTable"), false))
			newMode = Modes.table;
		  else if (stream.match(RE("linkDefinition"), false))
			newMode = Modes.linkDefinition;
		  else if (stream.match(RE("definitionList")))
			newMode = Modes.definitionList;
		  else if (stream.match(RE("html"), false))
			newMode = Modes.html;
		}
		return (state.mode = (newMode || Modes.text))(stream, state);
	  },
	
	  blockType: function(stream, state) {
		var match, type;
		state.layoutType = null;
	
		if (match = stream.match(RE("type")))
		  type = match[0];
		else
		  return (state.mode = Modes.text)(stream, state);
	
		if (match = type.match(RE("header"))) {
		  state.layoutType = "header";
		  state.header = parseInt(match[0][1]);
		} else if (type.match(RE("bq"))) {
		  state.layoutType = "quote";
		} else if (type.match(RE("bc"))) {
		  state.layoutType = "code";
		} else if (type.match(RE("foot"))) {
		  state.layoutType = "footnote";
		} else if (type.match(RE("notextile"))) {
		  state.layoutType = "notextile";
		} else if (type.match(RE("pre"))) {
		  state.layoutType = "pre";
		} else if (type.match(RE("div"))) {
		  state.layoutType = "div";
		} else if (type.match(RE("table"))) {
		  state.layoutType = "table";
		}
	
		state.mode = Modes.attributes;
		return tokenStyles(state);
	  },
	
	  text: function(stream, state) {
		if (stream.match(RE("text"))) return tokenStyles(state);
	
		var ch = stream.next();
		if (ch === '"')
		  return (state.mode = Modes.link)(stream, state);
		return handlePhraseModifier(stream, state, ch);
	  },
	
	  attributes: function(stream, state) {
		state.mode = Modes.layoutLength;
	
		if (stream.match(RE("attributes")))
		  return TOKEN_STYLES.attributes
		else
		  return tokenStyles(state);
	  },
	
	  layoutLength: function(stream, state) {
		if (stream.eat(".") && stream.eat("."))
		  state.spanningLayout = true;
	
		state.mode = Modes.text;
		return tokenStyles(state);
	  },
	
	  list: function(stream, state) {
		var match = stream.match(RE("list"));
		state.listDepth = match[0].length;
		var listMod = (state.listDepth - 1) % 3;
		if (!listMod)
		  state.layoutType = "list1";
		else if (listMod === 1)
		  state.layoutType = "list2";
		else
		  state.layoutType = "list3";
	
		state.mode = Modes.attributes;
		return tokenStyles(state);
	  },
	
	  link: function(stream, state) {
		state.mode = Modes.text;
		if (stream.match(RE("link"))) {
		  stream.match(/\S+/);
		  return TOKEN_STYLES.link
		}
		return tokenStyles(state);
	  },
	
	  linkDefinition: function(stream) {
		stream.skipToEnd();
		return TOKEN_STYLES.linkDefinition
	  },
	
	  definitionList: function(stream, state) {
		stream.match(RE("definitionList"));
	
		state.layoutType = "definitionList";
	
		if (stream.match(/\s*$/))
		  state.spanningLayout = true;
		else
		  state.mode = Modes.attributes;
	
		return tokenStyles(state);
	  },
	
	  html: function(stream) {
		stream.skipToEnd();
		return TOKEN_STYLES.html
	  },
	
	  table: function(stream, state) {
		state.layoutType = "table";
		return (state.mode = Modes.tableCell)(stream, state);
	  },
	
	  tableCell: function(stream, state) {
		if (stream.match(RE("tableHeading")))
		  state.tableHeading = true;
		else
		  stream.eat("|");
	
		state.mode = Modes.tableCellAttributes;
		return tokenStyles(state);
	  },
	
	  tableCellAttributes: function(stream, state) {
		state.mode = Modes.tableText;
	
		if (stream.match(RE("tableCellAttributes")))
		  return TOKEN_STYLES.attributes
		else
		  return tokenStyles(state);
	  },
	
	  tableText: function(stream, state) {
		if (stream.match(RE("tableText")))
		  return tokenStyles(state);
	
		if (stream.peek() === "|") { // end of cell
		  state.mode = Modes.tableCell;
		  return tokenStyles(state);
		}
		return handlePhraseModifier(stream, state, stream.next());
	  }
	};
	
	const textile = {
	  name: "textile",
	  startState: function() {
		return { mode: Modes.newLayout };
	  },
	  token: function(stream, state) {
		if (stream.sol()) startNewLine(stream, state);
		return state.mode(stream, state);
	  },
	  blankLine: blankLine
	};
	
	exports.textile = textile;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/tiddlywiki.cjs":
	/*!***************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/tiddlywiki.cjs ***!
	  \***************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// Tokenizer
	var textwords = {};
	
	var keywords = {
	  "allTags": true, "closeAll": true, "list": true,
	  "newJournal": true, "newTiddler": true,
	  "permaview": true, "saveChanges": true,
	  "search": true, "slider": true, "tabs": true,
	  "tag": true, "tagging": true, "tags": true,
	  "tiddler": true, "timeline": true,
	  "today": true, "version": true, "option": true,
	  "with": true, "filter": true
	};
	
	var isSpaceName = /[\w_\-]/i,
		reHR = /^\-\-\-\-+$/,                                 // <hr>
		reWikiCommentStart = /^\/\*\*\*$/,            // /***
		reWikiCommentStop = /^\*\*\*\/$/,             // ***/
		reBlockQuote = /^<<<$/,
	
		reJsCodeStart = /^\/\/\{\{\{$/,                       // //{{{ js block start
		reJsCodeStop = /^\/\/\}\}\}$/,                        // //}}} js stop
		reXmlCodeStart = /^<!--\{\{\{-->$/,           // xml block start
		reXmlCodeStop = /^<!--\}\}\}-->$/,            // xml stop
	
		reCodeBlockStart = /^\{\{\{$/,                        // {{{ TW text div block start
		reCodeBlockStop = /^\}\}\}$/,                 // }}} TW text stop
	
		reUntilCodeStop = /.*?\}\}\}/;
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	
	function tokenBase(stream, state) {
	  var sol = stream.sol(), ch = stream.peek();
	
	  state.block = false;        // indicates the start of a code block.
	
	  // check start of  blocks
	  if (sol && /[<\/\*{}\-]/.test(ch)) {
		if (stream.match(reCodeBlockStart)) {
		  state.block = true;
		  return chain(stream, state, twTokenCode);
		}
		if (stream.match(reBlockQuote))
		  return 'quote';
		if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
		  return 'comment';
		if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
		  return 'comment';
		if (stream.match(reHR))
		  return 'contentSeparator';
	  }
	
	  stream.next();
	  if (sol && /[\/\*!#;:>|]/.test(ch)) {
		if (ch == "!") { // tw header
		  stream.skipToEnd();
		  return "header";
		}
		if (ch == "*") { // tw list
		  stream.eatWhile('*');
		  return "comment";
		}
		if (ch == "#") { // tw numbered list
		  stream.eatWhile('#');
		  return "comment";
		}
		if (ch == ";") { // definition list, term
		  stream.eatWhile(';');
		  return "comment";
		}
		if (ch == ":") { // definition list, description
		  stream.eatWhile(':');
		  return "comment";
		}
		if (ch == ">") { // single line quote
		  stream.eatWhile(">");
		  return "quote";
		}
		if (ch == '|')
		  return 'header';
	  }
	
	  if (ch == '{' && stream.match('{{'))
		return chain(stream, state, twTokenCode);
	
	  // rudimentary html:// file:// link matching. TW knows much more ...
	  if (/[hf]/i.test(ch) &&
		  /[ti]/i.test(stream.peek()) &&
		  stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
		return "link";
	
	  // just a little string indicator, don't want to have the whole string covered
	  if (ch == '"')
		return 'string';
	
	  if (ch == '~')    // _no_ CamelCase indicator should be bold
		return 'brace';
	
	  if (/[\[\]]/.test(ch) && stream.match(ch)) // check for [[..]]
		return 'brace';
	
	  if (ch == "@") {    // check for space link. TODO fix @@...@@ highlighting
		stream.eatWhile(isSpaceName);
		return "link";
	  }
	
	  if (/\d/.test(ch)) {        // numbers
		stream.eatWhile(/\d/);
		return "number";
	  }
	
	  if (ch == "/") { // tw invisible comment
		if (stream.eat("%")) {
		  return chain(stream, state, twTokenComment);
		} else if (stream.eat("/")) { //
		  return chain(stream, state, twTokenEm);
		}
	  }
	
	  if (ch == "_" && stream.eat("_")) // tw underline
		return chain(stream, state, twTokenUnderline);
	
	  // strikethrough and mdash handling
	  if (ch == "-" && stream.eat("-")) {
		// if strikethrough looks ugly, change CSS.
		if (stream.peek() != ' ')
		  return chain(stream, state, twTokenStrike);
		// mdash
		if (stream.peek() == ' ')
		  return 'brace';
	  }
	
	  if (ch == "'" && stream.eat("'")) // tw bold
		return chain(stream, state, twTokenStrong);
	
	  if (ch == "<" && stream.eat("<")) // tw macro
		return chain(stream, state, twTokenMacro);
	
	  // core macro handling
	  stream.eatWhile(/[\w\$_]/);
	  return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null
	}
	
	// tw invisible comment
	function twTokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "%");
	  }
	  return "comment";
	}
	
	// tw strong / bold
	function twTokenStrong(stream, state) {
	  var maybeEnd = false,
		  ch;
	  while (ch = stream.next()) {
		if (ch == "'" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "'");
	  }
	  return "strong";
	}
	
	// tw code
	function twTokenCode(stream, state) {
	  var sb = state.block;
	
	  if (sb && stream.current()) {
		return "comment";
	  }
	
	  if (!sb && stream.match(reUntilCodeStop)) {
		state.tokenize = tokenBase;
		return "comment";
	  }
	
	  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
		state.tokenize = tokenBase;
		return "comment";
	  }
	
	  stream.next();
	  return "comment";
	}
	
	// tw em / italic
	function twTokenEm(stream, state) {
	  var maybeEnd = false,
		  ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "/");
	  }
	  return "emphasis";
	}
	
	// tw underlined text
	function twTokenUnderline(stream, state) {
	  var maybeEnd = false,
		  ch;
	  while (ch = stream.next()) {
		if (ch == "_" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "_");
	  }
	  return "link";
	}
	
	// tw strike through text looks ugly
	// change CSS if needed
	function twTokenStrike(stream, state) {
	  var maybeEnd = false, ch;
	
	  while (ch = stream.next()) {
		if (ch == "-" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "-");
	  }
	  return "deleted";
	}
	
	// macro
	function twTokenMacro(stream, state) {
	  if (stream.current() == '<<') {
		return 'meta';
	  }
	
	  var ch = stream.next();
	  if (!ch) {
		state.tokenize = tokenBase;
		return null;
	  }
	  if (ch == ">") {
		if (stream.peek() == '>') {
		  stream.next();
		  state.tokenize = tokenBase;
		  return "meta";
		}
	  }
	
	  stream.eatWhile(/[\w\$_]/);
	  return keywords.propertyIsEnumerable(stream.current()) ? "keyword" : null
	}
	
	// Interface
	const tiddlyWiki = {
	  name: "tiddlywiki",
	
	  startState: function () {
		return {tokenize: tokenBase};
	  },
	
	  token: function (stream, state) {
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
		return style;
	  }
	};
	
	exports.tiddlyWiki = tiddlyWiki;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/tiki.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/tiki.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function inBlock(style, terminator, returnTokenizer) {
	  return function(stream, state) {
		while (!stream.eol()) {
		  if (stream.match(terminator)) {
			state.tokenize = inText;
			break;
		  }
		  stream.next();
		}
	
		if (returnTokenizer) state.tokenize = returnTokenizer;
	
		return style;
	  };
	}
	
	function inLine(style) {
	  return function(stream, state) {
		while(!stream.eol()) {
		  stream.next();
		}
		state.tokenize = inText;
		return style;
	  };
	}
	
	function inText(stream, state) {
	  function chain(parser) {
		state.tokenize = parser;
		return parser(stream, state);
	  }
	
	  var sol = stream.sol();
	  var ch = stream.next();
	
	  //non start of line
	  switch (ch) { //switch is generally much faster than if, so it is used here
	  case "{": //plugin
		stream.eat("/");
		stream.eatSpace();
		stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
		state.tokenize = inPlugin;
		return "tag";
	  case "_": //bold
		if (stream.eat("_"))
		  return chain(inBlock("strong", "__", inText));
		break;
	  case "'": //italics
		if (stream.eat("'"))
		  return chain(inBlock("em", "''", inText));
		break;
	  case "(":// Wiki Link
		if (stream.eat("("))
		  return chain(inBlock("link", "))", inText));
		break;
	  case "[":// Weblink
		return chain(inBlock("url", "]", inText));
	  case "|": //table
		if (stream.eat("|"))
		  return chain(inBlock("comment", "||"));
		break;
	  case "-":
		if (stream.eat("=")) {//titleBar
		  return chain(inBlock("header string", "=-", inText));
		} else if (stream.eat("-")) {//deleted
		  return chain(inBlock("error tw-deleted", "--", inText));
		}
		break;
	  case "=": //underline
		if (stream.match("=="))
		  return chain(inBlock("tw-underline", "===", inText));
		break;
	  case ":":
		if (stream.eat(":"))
		  return chain(inBlock("comment", "::"));
		break;
	  case "^": //box
		return chain(inBlock("tw-box", "^"));
	  case "~": //np
		if (stream.match("np~"))
		  return chain(inBlock("meta", "~/np~"));
		break;
	  }
	
	  //start of line types
	  if (sol) {
		switch (ch) {
		case "!": //header at start of line
		  if (stream.match('!!!!!')) {
			return chain(inLine("header string"));
		  } else if (stream.match('!!!!')) {
			return chain(inLine("header string"));
		  } else if (stream.match('!!!')) {
			return chain(inLine("header string"));
		  } else if (stream.match('!!')) {
			return chain(inLine("header string"));
		  } else {
			return chain(inLine("header string"));
		  }
		case "*": //unordered list line item, or <li /> at start of line
		case "#": //ordered list line item, or <li /> at start of line
		case "+": //ordered list line item, or <li /> at start of line
		  return chain(inLine("tw-listitem bracket"));
		}
	  }
	
	  //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki
	  return null;
	}
	
	// Return variables for tokenizers
	var pluginName, type;
	function inPlugin(stream, state) {
	  var ch = stream.next();
	  var peek = stream.peek();
	
	  if (ch == "}") {
		state.tokenize = inText;
		//type = ch == ")" ? "endPlugin" : "selfclosePlugin"; inPlugin
		return "tag";
	  } else if (ch == "(" || ch == ")") {
		return "bracket";
	  } else if (ch == "=") {
		type = "equals";
	
		if (peek == ">") {
		  stream.next();
		  peek = stream.peek();
		}
	
		//here we detect values directly after equal character with no quotes
		if (!/[\'\"]/.test(peek)) {
		  state.tokenize = inAttributeNoQuote();
		}
		//end detect values
	
		return "operator";
	  } else if (/[\'\"]/.test(ch)) {
		state.tokenize = inAttribute(ch);
		return state.tokenize(stream, state);
	  } else {
		stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
		return "keyword";
	  }
	}
	
	function inAttribute(quote) {
	  return function(stream, state) {
		while (!stream.eol()) {
		  if (stream.next() == quote) {
			state.tokenize = inPlugin;
			break;
		  }
		}
		return "string";
	  };
	}
	
	function inAttributeNoQuote() {
	  return function(stream, state) {
		while (!stream.eol()) {
		  var ch = stream.next();
		  var peek = stream.peek();
		  if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
			state.tokenize = inPlugin;
			break;
		  }
		}
		return "string";
	  };
	}
	
	var curState, setStyle;
	function pass() {
	  for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);
	}
	
	function cont() {
	  pass.apply(null, arguments);
	  return true;
	}
	
	function pushContext(pluginName, startOfLine) {
	  var noIndent = curState.context && curState.context.noIndent;
	  curState.context = {
		prev: curState.context,
		pluginName: pluginName,
		indent: curState.indented,
		startOfLine: startOfLine,
		noIndent: noIndent
	  };
	}
	
	function popContext() {
	  if (curState.context) curState.context = curState.context.prev;
	}
	
	function element(type) {
	  if (type == "openPlugin") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}
	  else if (type == "closePlugin") {
		var err = false;
		if (curState.context) {
		  err = curState.context.pluginName != pluginName;
		  popContext();
		} else {
		  err = true;
		}
		if (err) setStyle = "error";
		return cont(endcloseplugin(err));
	  }
	  else if (type == "string") {
		if (!curState.context || curState.context.name != "!cdata") pushContext("!cdata");
		if (curState.tokenize == inText) popContext();
		return cont();
	  }
	  else return cont();
	}
	
	function endplugin(startOfLine) {
	  return function(type) {
		if (
		  type == "selfclosePlugin" ||
			type == "endPlugin"
		)
		  return cont();
		if (type == "endPlugin") {pushContext(curState.pluginName, startOfLine); return cont();}
		return cont();
	  };
	}
	
	function endcloseplugin(err) {
	  return function(type) {
		if (err) setStyle = "error";
		if (type == "endPlugin") return cont();
		return pass();
	  };
	}
	
	function attributes(type) {
	  if (type == "keyword") {setStyle = "attribute"; return cont(attributes);}
	  if (type == "equals") return cont(attvalue, attributes);
	  return pass();
	}
	function attvalue(type) {
	  if (type == "keyword") {setStyle = "string"; return cont();}
	  if (type == "string") return cont(attvaluemaybe);
	  return pass();
	}
	function attvaluemaybe(type) {
	  if (type == "string") return cont(attvaluemaybe);
	  else return pass();
	}
	const tiki = {
	  name: "tiki",
	  startState: function() {
		return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};
	  },
	  token: function(stream, state) {
		if (stream.sol()) {
		  state.startOfLine = true;
		  state.indented = stream.indentation();
		}
		if (stream.eatSpace()) return null;
	
		setStyle = type = pluginName = null;
		var style = state.tokenize(stream, state);
		if ((style || type) && style != "comment") {
		  curState = state;
		  while (true) {
			var comb = state.cc.pop() || element;
			if (comb(type || style)) break;
		  }
		}
		state.startOfLine = false;
		return setStyle || style;
	  },
	  indent: function(state, textAfter, cx) {
		var context = state.context;
		if (context && context.noIndent) return 0;
		if (context && /^{\//.test(textAfter))
		  context = context.prev;
		while (context && !context.startOfLine)
		  context = context.prev;
		if (context) return context.indent + cx.unit;
		else return 0;
	  }
	};
	
	exports.tiki = tiki;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/toml.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/toml.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	const toml = {
	  name: "toml",
	  startState: function () {
		return {
		  inString: false,
		  stringType: "",
		  lhs: true,
		  inArray: 0
		};
	  },
	  token: function (stream, state) {
		//check for state changes
		if (!state.inString && ((stream.peek() == '"') || (stream.peek() == "'"))) {
		  state.stringType = stream.peek();
		  stream.next(); // Skip quote
		  state.inString = true; // Update state
		}
		if (stream.sol() && state.inArray === 0) {
		  state.lhs = true;
		}
		//return state
		if (state.inString) {
		  while (state.inString && !stream.eol()) {
			if (stream.peek() === state.stringType) {
			  stream.next(); // Skip quote
			  state.inString = false; // Clear flag
			} else if (stream.peek() === '\\') {
			  stream.next();
			  stream.next();
			} else {
			  stream.match(/^.[^\\\"\']*/);
			}
		  }
		  return state.lhs ? "property" : "string"; // Token style
		} else if (state.inArray && stream.peek() === ']') {
		  stream.next();
		  state.inArray--;
		  return 'bracket';
		} else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {
		  stream.next();//skip closing ]
		  // array of objects has an extra open & close []
		  if (stream.peek() === ']') stream.next();
		  return "atom";
		} else if (stream.peek() === "#") {
		  stream.skipToEnd();
		  return "comment";
		} else if (stream.eatSpace()) {
		  return null;
		} else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {
		  return "property";
		} else if (state.lhs && stream.peek() === "=") {
		  stream.next();
		  state.lhs = false;
		  return null;
		} else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
		  return 'atom'; //date
		} else if (!state.lhs && (stream.match('true') || stream.match('false'))) {
		  return 'atom';
		} else if (!state.lhs && stream.peek() === '[') {
		  state.inArray++;
		  stream.next();
		  return 'bracket';
		} else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
		  return 'number';
		} else if (!stream.eatSpace()) {
		  stream.next();
		}
		return null;
	  },
	  languageData: {
		commentTokens: { line: '#' },
	  },
	};
	
	exports.toml = toml;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/troff.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/troff.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var words = {};
	
	function tokenBase(stream) {
	  if (stream.eatSpace()) return null;
	
	  var sol = stream.sol();
	  var ch = stream.next();
	
	  if (ch === '\\') {
		if (stream.match('fB') || stream.match('fR') || stream.match('fI') ||
			stream.match('u')  || stream.match('d')  ||
			stream.match('%')  || stream.match('&')) {
		  return 'string';
		}
		if (stream.match('m[')) {
		  stream.skipTo(']');
		  stream.next();
		  return 'string';
		}
		if (stream.match('s+') || stream.match('s-')) {
		  stream.eatWhile(/[\d-]/);
		  return 'string';
		}
		if (stream.match('\(') || stream.match('*\(')) {
		  stream.eatWhile(/[\w-]/);
		  return 'string';
		}
		return 'string';
	  }
	  if (sol && (ch === '.' || ch === '\'')) {
		if (stream.eat('\\') && stream.eat('\"')) {
		  stream.skipToEnd();
		  return 'comment';
		}
	  }
	  if (sol && ch === '.') {
		if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {
		  return 'attribute';
		}
		if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {
		  stream.skipToEnd();
		  return 'quote';
		}
		if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {
		  return 'attribute';
		}
	  }
	  stream.eatWhile(/[\w-]/);
	  var cur = stream.current();
	  return words.hasOwnProperty(cur) ? words[cur] : null;
	}
	
	function tokenize(stream, state) {
	  return (state.tokens[0] || tokenBase) (stream, state);
	}
	const troff = {
	  name: "troff",
	  startState: function() {return {tokens:[]};},
	  token: function(stream, state) {
		return tokenize(stream, state);
	  }
	};
	
	exports.troff = troff;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i)
		obj[words[i]] = true;
	  return obj;
	}
	
	const parserConfig = {
	  name: "ttcn-cfg",
	  keywords: words("Yes No LogFile FileMask ConsoleMask AppendFile" +
					  " TimeStampFormat LogEventTypes SourceInfoFormat" +
					  " LogEntityName LogSourceInfo DiskFullAction" +
					  " LogFileNumber LogFileSize MatchingHints Detailed" +
					  " Compact SubCategories Stack Single None Seconds" +
					  " DateTime Time Stop Error Retry Delete TCPPort KillTimer" +
					  " NumHCs UnixSocketsEnabled LocalAddress"),
	  fileNCtrlMaskOptions: words("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING" +
								  " TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP" +
								  " TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION" +
								  " TTCN_USER TTCN_FUNCTION TTCN_STATISTICS" +
								  " TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG" +
								  " EXECUTOR ERROR WARNING PORTEVENT TIMEROP" +
								  " VERDICTOP DEFAULTOP TESTCASE ACTION USER" +
								  " FUNCTION STATISTICS PARALLEL MATCHING DEBUG" +
								  " LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED" +
								  " DEBUG_ENCDEC DEBUG_TESTPORT" +
								  " DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE" +
								  " DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT" +
								  " DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED" +
								  " EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA" +
								  " EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS" +
								  " EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED" +
								  " FUNCTION_RND FUNCTION_UNQUALIFIED" +
								  " MATCHING_DONE MATCHING_MCSUCCESS" +
								  " MATCHING_MCUNSUCC MATCHING_MMSUCCESS" +
								  " MATCHING_MMUNSUCC MATCHING_PCSUCCESS" +
								  " MATCHING_PCUNSUCC MATCHING_PMSUCCESS" +
								  " MATCHING_PMUNSUCC MATCHING_PROBLEM" +
								  " MATCHING_TIMEOUT MATCHING_UNQUALIFIED" +
								  " PARALLEL_PORTCONN PARALLEL_PORTMAP" +
								  " PARALLEL_PTC PARALLEL_UNQUALIFIED" +
								  " PORTEVENT_DUALRECV PORTEVENT_DUALSEND" +
								  " PORTEVENT_MCRECV PORTEVENT_MCSEND" +
								  " PORTEVENT_MMRECV PORTEVENT_MMSEND" +
								  " PORTEVENT_MQUEUE PORTEVENT_PCIN" +
								  " PORTEVENT_PCOUT PORTEVENT_PMIN" +
								  " PORTEVENT_PMOUT PORTEVENT_PQUEUE" +
								  " PORTEVENT_STATE PORTEVENT_UNQUALIFIED" +
								  " STATISTICS_UNQUALIFIED STATISTICS_VERDICT" +
								  " TESTCASE_FINISH TESTCASE_START" +
								  " TESTCASE_UNQUALIFIED TIMEROP_GUARD" +
								  " TIMEROP_READ TIMEROP_START TIMEROP_STOP" +
								  " TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED" +
								  " USER_UNQUALIFIED VERDICTOP_FINAL" +
								  " VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT" +
								  " VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
	  externalCommands: words("BeginControlPart EndControlPart BeginTestCase" +
							  " EndTestCase"),
	  multiLineStrings: true
	};
	
	var keywords = parserConfig.keywords,
		fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,
		externalCommands = parserConfig.externalCommands,
		multiLineStrings = parserConfig.multiLineStrings,
		indentStatements = parserConfig.indentStatements !== false;
	var isOperatorChar = /[\|]/;
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[:=]/.test(ch)) {
		curPunc = ch;
		return "punctuation";
	  }
	  if (ch == "#"){
		stream.skipToEnd();
		return "comment";
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  if (ch == "["){
		stream.eatWhile(/[\w_\]]/);
		return "number";
	  }
	
	  stream.eatWhile(/[\w\$_]/);
	  var cur = stream.current();
	  if (keywords.propertyIsEnumerable(cur)) return "keyword";
	  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))
		return "atom";
	  if (externalCommands.propertyIsEnumerable(cur)) return "deleted";
	
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped){
			var afterNext = stream.peek();
			//look if the character if the quote is like the B in '10100010'B
			if (afterNext){
			  afterNext = afterNext.toLowerCase();
			  if(afterNext == "b" || afterNext == "h" || afterNext == "o")
				stream.next();
			}
			end = true; break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !(escaped || multiLineStrings))
		  state.tokenize = null;
		return "string";
	  };
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  var indent = state.indented;
	  if (state.context && state.context.type == "statement")
		indent = state.context.indented;
	  return state.context = new Context(indent, col, type, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	//Interface
	const ttcnCfg = {
	  name: "ttcn",
	  startState: function() {
		return {
		  tokenize: null,
		  context: new Context(0, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":" || curPunc == ",")
			&& ctx.type == "statement"){
		  popContext(state);
		}
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (indentStatements && (((ctx.type == "}" || ctx.type == "top")
									   && curPunc != ';') || (ctx.type == "statement"
															  && curPunc == "newstatement")))
		  pushContext(state, stream.column(), "statement");
		state.startOfLine = false;
		return style;
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "#"}
	  }
	};
	
	exports.ttcnCfg = ttcnCfg;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/ttcn.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/ttcn.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	const parserConfig = {
	  name: "ttcn",
	  keywords: words("activate address alive all alt altstep and and4b any" +
					  " break case component const continue control deactivate" +
					  " display do else encode enumerated except exception" +
					  " execute extends extension external for from function" +
					  " goto group if import in infinity inout interleave" +
					  " label language length log match message mixed mod" +
					  " modifies module modulepar mtc noblock not not4b nowait" +
					  " of on optional or or4b out override param pattern port" +
					  " procedure record recursive rem repeat return runs select" +
					  " self sender set signature system template testcase to" +
					  " type union value valueof var variant while with xor xor4b"),
	  builtin: words("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue" +
					 " decomp decvalue float2int float2str hex2bit hex2int" +
					 " hex2oct hex2str int2bit int2char int2float int2hex" +
					 " int2oct int2str int2unichar isbound ischosen ispresent" +
					 " isvalue lengthof log2str oct2bit oct2char oct2hex oct2int" +
					 " oct2str regexp replace rnd sizeof str2bit str2float" +
					 " str2hex str2int str2oct substr unichar2int unichar2char" +
					 " enum2int"),
	  types: words("anytype bitstring boolean char charstring default float" +
				   " hexstring integer objid octetstring universal verdicttype timer"),
	  timerOps: words("read running start stop timeout"),
	  portOps: words("call catch check clear getcall getreply halt raise receive" +
					 " reply send trigger"),
	  configOps: words("create connect disconnect done kill killed map unmap"),
	  verdictOps: words("getverdict setverdict"),
	  sutOps: words("action"),
	  functionOps: words("apply derefers refers"),
	
	  verdictConsts: words("error fail inconc none pass"),
	  booleanConsts: words("true false"),
	  otherConsts: words("null NULL omit"),
	
	  visibilityModifiers: words("private public friend"),
	  templateMatch: words("complement ifpresent subset superset permutation"),
	  multiLineStrings: true
	};
	
	var wordList = [];
	function add(obj) {
	  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))
		wordList.push(prop);
	}
	add(parserConfig.keywords);
	add(parserConfig.builtin);
	add(parserConfig.timerOps);
	add(parserConfig.portOps);
	
	var keywords = parserConfig.keywords || {},
		builtin = parserConfig.builtin || {},
		timerOps = parserConfig.timerOps || {},
		portOps  = parserConfig.portOps || {},
		configOps = parserConfig.configOps || {},
		verdictOps = parserConfig.verdictOps || {},
		sutOps = parserConfig.sutOps || {},
		functionOps = parserConfig.functionOps || {},
	
		verdictConsts = parserConfig.verdictConsts || {},
		booleanConsts = parserConfig.booleanConsts || {},
		otherConsts   = parserConfig.otherConsts || {},
	
		types = parserConfig.types || {},
		visibilityModifiers = parserConfig.visibilityModifiers || {},
		templateMatch = parserConfig.templateMatch || {},
		multiLineStrings = parserConfig.multiLineStrings,
		indentStatements = parserConfig.indentStatements !== false;
	var isOperatorChar = /[+\-*&@=<>!\/]/;
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	
	  if (ch == '"' || ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\[\]{}\(\),;\\:\?\.]/.test(ch)) {
		curPunc = ch;
		return "punctuation";
	  }
	  if (ch == "#"){
		stream.skipToEnd();
		return "atom";
	  }
	  if (ch == "%"){
		stream.eatWhile(/\b/);
		return "atom";
	  }
	  if (/\d/.test(ch)) {
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  if (ch == "/") {
		if (stream.eat("*")) {
		  state.tokenize = tokenComment;
		  return tokenComment(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		if(ch == "@"){
		  if(stream.match("try") || stream.match("catch")
			 || stream.match("lazy")){
			return "keyword";
		  }
		}
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
	  var cur = stream.current();
	
	  if (keywords.propertyIsEnumerable(cur)) return "keyword";
	  if (builtin.propertyIsEnumerable(cur)) return "builtin";
	
	  if (timerOps.propertyIsEnumerable(cur)) return "def";
	  if (configOps.propertyIsEnumerable(cur)) return "def";
	  if (verdictOps.propertyIsEnumerable(cur)) return "def";
	  if (portOps.propertyIsEnumerable(cur)) return "def";
	  if (sutOps.propertyIsEnumerable(cur)) return "def";
	  if (functionOps.propertyIsEnumerable(cur)) return "def";
	
	  if (verdictConsts.propertyIsEnumerable(cur)) return "string";
	  if (booleanConsts.propertyIsEnumerable(cur)) return "string";
	  if (otherConsts.propertyIsEnumerable(cur)) return "string";
	
	  if (types.propertyIsEnumerable(cur)) return "typeName.standard";
	  if (visibilityModifiers.propertyIsEnumerable(cur))
		return "modifier";
	  if (templateMatch.propertyIsEnumerable(cur)) return "atom";
	
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped){
			var afterQuote = stream.peek();
			//look if the character after the quote is like the B in '10100010'B
			if (afterQuote){
			  afterQuote = afterQuote.toLowerCase();
			  if(afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
				stream.next();
			}
			end = true; break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end || !(escaped || multiLineStrings))
		  state.tokenize = null;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "/" && maybeEnd) {
		  state.tokenize = null;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	
	function pushContext(state, col, type) {
	  var indent = state.indented;
	  if (state.context && state.context.type == "statement")
		indent = state.context.indented;
	  return state.context = new Context(indent, col, type, null, state.context);
	}
	
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	//Interface
	const ttcn = {
	  name: "ttcn",
	  startState: function() {
		return {
		  tokenize: null,
		  context: new Context(0, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":" || curPunc == ",")
			&& ctx.type == "statement"){
		  popContext(state);
		}
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (indentStatements &&
				 (((ctx.type == "}" || ctx.type == "top") && curPunc != ';') ||
				  (ctx.type == "statement" && curPunc == "newstatement")))
		  pushContext(state, stream.column(), "statement");
	
		state.startOfLine = false;
	
		return style;
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
		autocomplete: wordList
	  }
	};
	
	exports.ttcn = ttcn;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/turtle.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/turtle.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var curPunc;
	
	function wordRegexp(words) {
	  return new RegExp("^(?:" + words.join("|") + ")$", "i");
	}
	wordRegexp([]);
	var keywords = wordRegexp(["@prefix", "@base", "a"]);
	var operatorChars = /[*+\-<>=&|]/;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  curPunc = null;
	  if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
		stream.match(/^[^\s\u00a0>]*>?/);
		return "atom";
	  }
	  else if (ch == "\"" || ch == "'") {
		state.tokenize = tokenLiteral(ch);
		return state.tokenize(stream, state);
	  }
	  else if (/[{}\(\),\.;\[\]]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  else if (ch == "#") {
		stream.skipToEnd();
		return "comment";
	  }
	  else if (operatorChars.test(ch)) {
		stream.eatWhile(operatorChars);
		return null;
	  }
	  else if (ch == ":") {
		return "operator";
	  } else {
		stream.eatWhile(/[_\w\d]/);
		if(stream.peek() == ":") {
		  return "variableName.special";
		} else {
		  var word = stream.current();
	
		  if(keywords.test(word)) {
			return "meta";
		  }
	
		  if(ch >= "A" && ch <= "Z") {
			return "comment";
		  } else {
			return "keyword";
		  }
		}
		var word = stream.current();
	  }
	}
	
	function tokenLiteral(quote) {
	  return function(stream, state) {
		var escaped = false, ch;
		while ((ch = stream.next()) != null) {
		  if (ch == quote && !escaped) {
			state.tokenize = tokenBase;
			break;
		  }
		  escaped = !escaped && ch == "\\";
		}
		return "string";
	  };
	}
	
	function pushContext(state, type, col) {
	  state.context = {prev: state.context, indent: state.indent, col: col, type: type};
	}
	function popContext(state) {
	  state.indent = state.context.indent;
	  state.context = state.context.prev;
	}
	
	const turtle = {
	  name: "turtle",
	  startState: function() {
		return {tokenize: tokenBase,
				context: null,
				indent: 0,
				col: 0};
	  },
	
	  token: function(stream, state) {
		if (stream.sol()) {
		  if (state.context && state.context.align == null) state.context.align = false;
		  state.indent = stream.indentation();
		}
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
	
		if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
		  state.context.align = true;
		}
	
		if (curPunc == "(") pushContext(state, ")", stream.column());
		else if (curPunc == "[") pushContext(state, "]", stream.column());
		else if (curPunc == "{") pushContext(state, "}", stream.column());
		else if (/[\]\}\)]/.test(curPunc)) {
		  while (state.context && state.context.type == "pattern") popContext(state);
		  if (state.context && curPunc == state.context.type) popContext(state);
		}
		else if (curPunc == "." && state.context && state.context.type == "pattern") popContext(state);
		else if (/atom|string|variable/.test(style) && state.context) {
		  if (/[\}\]]/.test(state.context.type))
			pushContext(state, "pattern", stream.column());
		  else if (state.context.type == "pattern" && !state.context.align) {
			state.context.align = true;
			state.context.col = stream.column();
		  }
		}
	
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var firstChar = textAfter && textAfter.charAt(0);
		var context = state.context;
		if (/[\]\}]/.test(firstChar))
		  while (context && context.type == "pattern") context = context.prev;
	
		var closing = context && firstChar == context.type;
		if (!context)
		  return 0;
		else if (context.type == "pattern")
		  return context.col;
		else if (context.align)
		  return context.col + (closing ? 0 : 1);
		else
		  return context.indent + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.turtle = turtle;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/vb.cjs":
	/*!*******************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/vb.cjs ***!
	  \*******************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var ERRORCLASS = 'error';
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
	}
	
	var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
	var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
	var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
	var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
	var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
	var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
	
	var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];
	var middleKeywords = ['else','elseif','case', 'catch', 'finally'];
	var endKeywords = ['next','loop'];
	
	var operatorKeywords = ['and', "andalso", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];
	var wordOperators = wordRegexp(operatorKeywords);
	
	var commonKeywords = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];
	
	var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];
	
	var keywords = wordRegexp(commonKeywords);
	var types = wordRegexp(commontypes);
	var stringPrefixes = '"';
	
	var opening = wordRegexp(openingKeywords);
	var middle = wordRegexp(middleKeywords);
	var closing = wordRegexp(endKeywords);
	var doubleClosing = wordRegexp(['end']);
	var doOpening = wordRegexp(['do']);
	
	function indent(_stream, state) {
	  state.currentIndent++;
	}
	
	function dedent(_stream, state) {
	  state.currentIndent--;
	}
	// tokenizers
	function tokenBase(stream, state) {
	  if (stream.eatSpace()) {
		return null;
	  }
	
	  var ch = stream.peek();
	
	  // Handle Comments
	  if (ch === "'") {
		stream.skipToEnd();
		return 'comment';
	  }
	
	
	  // Handle Number Literals
	  if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
		var floatLiteral = false;
		// Floats
		if (stream.match(/^\d*\.\d+F?/i)) { floatLiteral = true; }
		else if (stream.match(/^\d+\.\d*F?/)) { floatLiteral = true; }
		else if (stream.match(/^\.\d+F?/)) { floatLiteral = true; }
	
		if (floatLiteral) {
		  // Float literals may be "imaginary"
		  stream.eat(/J/i);
		  return 'number';
		}
		// Integers
		var intLiteral = false;
		// Hex
		if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
		// Octal
		else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
		// Decimal
		else if (stream.match(/^[1-9]\d*F?/)) {
		  // Decimal literals may be "imaginary"
		  stream.eat(/J/i);
		  // TODO - Can you have imaginary longs?
		  intLiteral = true;
		}
		// Zero by itself with no other piece of number.
		else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
		if (intLiteral) {
		  // Integer literals may be "long"
		  stream.eat(/L/i);
		  return 'number';
		}
	  }
	
	  // Handle Strings
	  if (stream.match(stringPrefixes)) {
		state.tokenize = tokenStringFactory(stream.current());
		return state.tokenize(stream, state);
	  }
	
	  // Handle operators and Delimiters
	  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
		return null;
	  }
	  if (stream.match(doubleOperators)
		  || stream.match(singleOperators)
		  || stream.match(wordOperators)) {
		return 'operator';
	  }
	  if (stream.match(singleDelimiters)) {
		return null;
	  }
	  if (stream.match(doOpening)) {
		indent(stream,state);
		state.doInCurrentLine = true;
		return 'keyword';
	  }
	  if (stream.match(opening)) {
		if (! state.doInCurrentLine)
		  indent(stream,state);
		else
		  state.doInCurrentLine = false;
		return 'keyword';
	  }
	  if (stream.match(middle)) {
		return 'keyword';
	  }
	
	  if (stream.match(doubleClosing)) {
		dedent(stream,state);
		dedent(stream,state);
		return 'keyword';
	  }
	  if (stream.match(closing)) {
		dedent(stream,state);
		return 'keyword';
	  }
	
	  if (stream.match(types)) {
		return 'keyword';
	  }
	
	  if (stream.match(keywords)) {
		return 'keyword';
	  }
	
	  if (stream.match(identifiers)) {
		return 'variable';
	  }
	
	  // Handle non-detected items
	  stream.next();
	  return ERRORCLASS;
	}
	
	function tokenStringFactory(delimiter) {
	  var singleline = delimiter.length == 1;
	  var OUTCLASS = 'string';
	
	  return function(stream, state) {
		while (!stream.eol()) {
		  stream.eatWhile(/[^'"]/);
		  if (stream.match(delimiter)) {
			state.tokenize = tokenBase;
			return OUTCLASS;
		  } else {
			stream.eat(/['"]/);
		  }
		}
		if (singleline) {
		  state.tokenize = tokenBase;
		}
		return OUTCLASS;
	  };
	}
	
	
	function tokenLexer(stream, state) {
	  var style = state.tokenize(stream, state);
	  var current = stream.current();
	
	  // Handle '.' connected identifiers
	  if (current === '.') {
		style = state.tokenize(stream, state);
		if (style === 'variable') {
		  return 'variable';
		} else {
		  return ERRORCLASS;
		}
	  }
	
	
	  var delimiter_index = '[({'.indexOf(current);
	  if (delimiter_index !== -1) {
		indent(stream, state );
	  }
	  delimiter_index = '])}'.indexOf(current);
	  if (delimiter_index !== -1) {
		if (dedent(stream, state)) {
		  return ERRORCLASS;
		}
	  }
	
	  return style;
	}
	
	const vb = {
	  name: "vb",
	
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  lastToken: null,
		  currentIndent: 0,
		  nextLineIndent: 0,
		  doInCurrentLine: false
	
	
		};
	  },
	
	  token: function(stream, state) {
		if (stream.sol()) {
		  state.currentIndent += state.nextLineIndent;
		  state.nextLineIndent = 0;
		  state.doInCurrentLine = 0;
		}
		var style = tokenLexer(stream, state);
	
		state.lastToken = {style:style, content: stream.current()};
	
	
	
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
		if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
		if(state.currentIndent < 0) return 0;
		return state.currentIndent * cx.unit;
	  },
	
	  languageData: {
		closeBrackets: {brackets: ["(", "[", "{", '"']},
		commentTokens: {line: "'"},
		autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)
		  .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)
	  }
	};
	
	exports.vb = vb;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/vbscript.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/vbscript.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkVBScript(parserConf) {
		var ERRORCLASS = 'error';
	
		function wordRegexp(words) {
			return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
		}
	
		var singleOperators = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
		var doubleOperators = new RegExp("^((<>)|(<=)|(>=))");
		var singleDelimiters = new RegExp('^[\\.,]');
		var brackets = new RegExp('^[\\(\\)]');
		var identifiers = new RegExp("^[A-Za-z][_A-Za-z0-9]*");
	
		var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];
		var middleKeywords = ['else','elseif','case'];
		var endKeywords = ['next','loop','wend'];
	
		var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);
		var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',
							  'byval','byref','new','property', 'exit', 'in',
							  'const','private', 'public',
							  'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];
	
		//This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx
		var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];
		//This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx
		var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',
							'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',
							'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',
							'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',
							'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',
							'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];
	
		//This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx
		var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',
							 'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',
							 'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',
							 'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',
							 'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',
							 'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',
							 'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];
		//This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx
		var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];
		var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];
		var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];
	
		var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];
		var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response
								  'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request
								  'contents', 'staticobjects', //application
								  'codepage', 'lcid', 'sessionid', 'timeout', //session
								  'scripttimeout']; //server
		var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response
							   'binaryread', //request
							   'remove', 'removeall', 'lock', 'unlock', //application
							   'abandon', //session
							   'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server
	
		var knownWords = knownMethods.concat(knownProperties);
	
		builtinObjsWords = builtinObjsWords.concat(builtinConsts);
	
		if (parserConf.isASP){
			builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
			knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
		}
		var keywords = wordRegexp(commonkeywords);
		var atoms = wordRegexp(atomWords);
		var builtinFuncs = wordRegexp(builtinFuncsWords);
		var builtinObjs = wordRegexp(builtinObjsWords);
		var known = wordRegexp(knownWords);
		var stringPrefixes = '"';
	
		var opening = wordRegexp(openingKeywords);
		var middle = wordRegexp(middleKeywords);
		var closing = wordRegexp(endKeywords);
		var doubleClosing = wordRegexp(['end']);
		var doOpening = wordRegexp(['do']);
		var noIndentWords = wordRegexp(['on error resume next', 'exit']);
		var comment = wordRegexp(['rem']);
	
	
		function indent(_stream, state) {
		  state.currentIndent++;
		}
	
		function dedent(_stream, state) {
		  state.currentIndent--;
		}
		// tokenizers
		function tokenBase(stream, state) {
			if (stream.eatSpace()) {
				return null
				//return null;
			}
	
			var ch = stream.peek();
	
			// Handle Comments
			if (ch === "'") {
				stream.skipToEnd();
				return 'comment';
			}
			if (stream.match(comment)){
				stream.skipToEnd();
				return 'comment';
			}
	
	
			// Handle Number Literals
			if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
				var floatLiteral = false;
				// Floats
				if (stream.match(/^\d*\.\d+/i)) { floatLiteral = true; }
				else if (stream.match(/^\d+\.\d*/)) { floatLiteral = true; }
				else if (stream.match(/^\.\d+/)) { floatLiteral = true; }
	
				if (floatLiteral) {
					// Float literals may be "imaginary"
					stream.eat(/J/i);
					return 'number';
				}
				// Integers
				var intLiteral = false;
				// Hex
				if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
				// Octal
				else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
				// Decimal
				else if (stream.match(/^[1-9]\d*F?/)) {
					// Decimal literals may be "imaginary"
					stream.eat(/J/i);
					// TODO - Can you have imaginary longs?
					intLiteral = true;
				}
				// Zero by itself with no other piece of number.
				else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
				if (intLiteral) {
					// Integer literals may be "long"
					stream.eat(/L/i);
					return 'number';
				}
			}
	
			// Handle Strings
			if (stream.match(stringPrefixes)) {
				state.tokenize = tokenStringFactory(stream.current());
				return state.tokenize(stream, state);
			}
	
			// Handle operators and Delimiters
			if (stream.match(doubleOperators)
				|| stream.match(singleOperators)
				|| stream.match(wordOperators)) {
				return 'operator';
			}
			if (stream.match(singleDelimiters)) {
				return null;
			}
	
			if (stream.match(brackets)) {
				return "bracket";
			}
	
			if (stream.match(noIndentWords)) {
				state.doInCurrentLine = true;
	
				return 'keyword';
			}
	
			if (stream.match(doOpening)) {
				indent(stream,state);
				state.doInCurrentLine = true;
	
				return 'keyword';
			}
			if (stream.match(opening)) {
				if (! state.doInCurrentLine)
				  indent(stream,state);
				else
				  state.doInCurrentLine = false;
	
				return 'keyword';
			}
			if (stream.match(middle)) {
				return 'keyword';
			}
	
	
			if (stream.match(doubleClosing)) {
				dedent(stream,state);
				dedent(stream,state);
	
				return 'keyword';
			}
			if (stream.match(closing)) {
				if (! state.doInCurrentLine)
				  dedent(stream,state);
				else
				  state.doInCurrentLine = false;
	
				return 'keyword';
			}
	
			if (stream.match(keywords)) {
				return 'keyword';
			}
	
			if (stream.match(atoms)) {
				return 'atom';
			}
	
			if (stream.match(known)) {
				return 'variableName.special';
			}
	
			if (stream.match(builtinFuncs)) {
				return 'builtin';
			}
	
			if (stream.match(builtinObjs)){
				return 'builtin';
			}
	
			if (stream.match(identifiers)) {
				return 'variable';
			}
	
			// Handle non-detected items
			stream.next();
			return ERRORCLASS;
		}
	
		function tokenStringFactory(delimiter) {
			var singleline = delimiter.length == 1;
			var OUTCLASS = 'string';
	
			return function(stream, state) {
				while (!stream.eol()) {
					stream.eatWhile(/[^'"]/);
					if (stream.match(delimiter)) {
						state.tokenize = tokenBase;
						return OUTCLASS;
					} else {
						stream.eat(/['"]/);
					}
				}
				if (singleline) {
				  state.tokenize = tokenBase;
				}
				return OUTCLASS;
			};
		}
	
	
		function tokenLexer(stream, state) {
			var style = state.tokenize(stream, state);
			var current = stream.current();
	
			// Handle '.' connected identifiers
			if (current === '.') {
				style = state.tokenize(stream, state);
	
				current = stream.current();
				if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {
					if (style === 'builtin' || style === 'keyword') style='variable';
					if (knownWords.indexOf(current.substr(1)) > -1) style='keyword';
	
					return style;
				} else {
					return ERRORCLASS;
				}
			}
	
			return style;
		}
	
		return {
			name: "vbscript",
			startState: function() {
				return {
				  tokenize: tokenBase,
				  lastToken: null,
				  currentIndent: 0,
				  nextLineIndent: 0,
				  doInCurrentLine: false,
				  ignoreKeyword: false
	
	
			  };
			},
	
			token: function(stream, state) {
				if (stream.sol()) {
				  state.currentIndent += state.nextLineIndent;
				  state.nextLineIndent = 0;
				  state.doInCurrentLine = 0;
				}
				var style = tokenLexer(stream, state);
	
				state.lastToken = {style:style, content: stream.current()};
	
				if (style===null) style=null;
	
				return style;
			},
	
			indent: function(state, textAfter, cx) {
				var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
				if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
				if(state.currentIndent < 0) return 0;
				return state.currentIndent * cx.unit
			}
	
		};
	}
	const vbScript = mkVBScript({});
	const vbScriptASP = mkVBScript({isASP: true});
	
	exports.vbScript = vbScript;
	exports.vbScriptASP = vbScriptASP;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/velocity.cjs":
	/*!*************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/velocity.cjs ***!
	  \*************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function parseWords(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var keywords = parseWords("#end #else #break #stop #[[ #]] " +
							  "#{end} #{else} #{break} #{stop}");
	var functions = parseWords("#if #elseif #foreach #set #include #parse #macro #define #evaluate " +
							   "#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
	var specials = parseWords("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
	var isOperatorChar = /[+\-*&%=<>!?:\/|]/;
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	function tokenBase(stream, state) {
	  var beforeParams = state.beforeParams;
	  state.beforeParams = false;
	  var ch = stream.next();
	  // start of unparsed string?
	  if ((ch == "'") && !state.inString && state.inParams) {
		state.lastTokenWasBuiltin = false;
		return chain(stream, state, tokenString(ch));
	  }
	  // start of parsed string?
	  else if ((ch == '"')) {
		state.lastTokenWasBuiltin = false;
		if (state.inString) {
		  state.inString = false;
		  return "string";
		}
		else if (state.inParams)
		  return chain(stream, state, tokenString(ch));
	  }
	  // is it one of the special signs []{}().,;? Separator?
	  else if (/[\[\]{}\(\),;\.]/.test(ch)) {
		if (ch == "(" && beforeParams)
		  state.inParams = true;
		else if (ch == ")") {
		  state.inParams = false;
		  state.lastTokenWasBuiltin = true;
		}
		return null;
	  }
	  // start of a number value?
	  else if (/\d/.test(ch)) {
		state.lastTokenWasBuiltin = false;
		stream.eatWhile(/[\w\.]/);
		return "number";
	  }
	  // multi line comment?
	  else if (ch == "#" && stream.eat("*")) {
		state.lastTokenWasBuiltin = false;
		return chain(stream, state, tokenComment);
	  }
	  // unparsed content?
	  else if (ch == "#" && stream.match(/ *\[ *\[/)) {
		state.lastTokenWasBuiltin = false;
		return chain(stream, state, tokenUnparsed);
	  }
	  // single line comment?
	  else if (ch == "#" && stream.eat("#")) {
		state.lastTokenWasBuiltin = false;
		stream.skipToEnd();
		return "comment";
	  }
	  // variable?
	  else if (ch == "$") {
		stream.eat("!");
		stream.eatWhile(/[\w\d\$_\.{}-]/);
		// is it one of the specials?
		if (specials && specials.propertyIsEnumerable(stream.current())) {
		  return "keyword";
		}
		else {
		  state.lastTokenWasBuiltin = true;
		  state.beforeParams = true;
		  return "builtin";
		}
	  }
	  // is it a operator?
	  else if (isOperatorChar.test(ch)) {
		state.lastTokenWasBuiltin = false;
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  else {
		// get the whole word
		stream.eatWhile(/[\w\$_{}@]/);
		var word = stream.current();
		// is it one of the listed keywords?
		if (keywords && keywords.propertyIsEnumerable(word))
		  return "keyword";
		// is it one of the listed functions?
		if (functions && functions.propertyIsEnumerable(word) ||
			(stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()=="(") &&
			!(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {
		  state.beforeParams = true;
		  state.lastTokenWasBuiltin = false;
		  return "keyword";
		}
		if (state.inString) {
		  state.lastTokenWasBuiltin = false;
		  return "string";
		}
		if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)=="." && state.lastTokenWasBuiltin)
		  return "builtin";
		// default: just a "word"
		state.lastTokenWasBuiltin = false;
		return null;
	  }
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if ((next == quote) && !escaped) {
			end = true;
			break;
		  }
		  if (quote=='"' && stream.peek() == '$' && !escaped) {
			state.inString = true;
			end = true;
			break;
		  }
		  escaped = !escaped && next == "\\";
		}
		if (end) state.tokenize = tokenBase;
		return "string";
	  };
	}
	
	function tokenComment(stream, state) {
	  var maybeEnd = false, ch;
	  while (ch = stream.next()) {
		if (ch == "#" && maybeEnd) {
		  state.tokenize = tokenBase;
		  break;
		}
		maybeEnd = (ch == "*");
	  }
	  return "comment";
	}
	
	function tokenUnparsed(stream, state) {
	  var maybeEnd = 0, ch;
	  while (ch = stream.next()) {
		if (ch == "#" && maybeEnd == 2) {
		  state.tokenize = tokenBase;
		  break;
		}
		if (ch == "]")
		  maybeEnd++;
		else if (ch != " ")
		  maybeEnd = 0;
	  }
	  return "meta";
	}
	// Interface
	
	const velocity = {
	  name: "velocity",
	
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  beforeParams: false,
		  inParams: false,
		  inString: false,
		  lastTokenWasBuiltin: false
		};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  },
	  languageData: {
		commentTokens: {line: "##", block: {open: "#*", close: "*#"}}
	  }
	};
	
	exports.velocity = velocity;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/verilog.cjs":
	/*!************************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/verilog.cjs ***!
	  \************************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkVerilog(parserConfig) {
	
	  var statementIndentUnit = parserConfig.statementIndentUnit,
		  dontAlignCalls = parserConfig.dontAlignCalls,
		  noIndentKeywords = parserConfig.noIndentKeywords || [],
		  multiLineStrings = parserConfig.multiLineStrings,
		  hooks = parserConfig.hooks || {};
	
	  function words(str) {
		var obj = {}, words = str.split(" ");
		for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
		return obj;
	  }
	
	  /**
	   * Keywords from IEEE 1800-2012
	   */
	  var keywords = words(
		"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +
		  "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +
		  "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +
		  "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +
		  "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +
		  "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +
		  "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +
		  "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +
		  "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +
		  "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +
		  "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +
		  "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +
		  "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +
		  "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +
		  "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +
		  "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +
		  "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +
		  "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor");
	
	  /** Operators from IEEE 1800-2012
		  unary_operator ::=
		  + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
		  binary_operator ::=
		  + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **
		  | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<
		  | -> | <->
		  inc_or_dec_operator ::= ++ | --
		  unary_module_path_operator ::=
		  ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
		  binary_module_path_operator ::=
		  == | != | && | || | & | | | ^ | ^~ | ~^
	  */
	  var isOperatorChar = /[\+\-\*\/!~&|^%=?:]/;
	  var isBracketChar = /[\[\]{}()]/;
	
	  var unsignedNumber = /\d[0-9_]*/;
	  var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
	  var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
	  var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
	  var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
	  var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;
	
	  var closingBracketOrWord = /^((\w+)|[)}\]])/;
	  var closingBracket = /[)}\]]/;
	
	  var curPunc;
	  var curKeyword;
	
	  // Block openings which are closed by a matching keyword in the form of ("end" + keyword)
	  // E.g. "task" => "endtask"
	  var blockKeywords = words(
		"case checker class clocking config function generate interface module package " +
		  "primitive program property specify sequence table task"
	  );
	
	  // Opening/closing pairs
	  var openClose = {};
	  for (var keyword in blockKeywords) {
		openClose[keyword] = "end" + keyword;
	  }
	  openClose["begin"] = "end";
	  openClose["casex"] = "endcase";
	  openClose["casez"] = "endcase";
	  openClose["do"   ] = "while";
	  openClose["fork" ] = "join;join_any;join_none";
	  openClose["covergroup"] = "endgroup";
	
	  for (var i in noIndentKeywords) {
		var keyword = noIndentKeywords[i];
		if (openClose[keyword]) {
		  openClose[keyword] = undefined;
		}
	  }
	
	  // Keywords which open statements that are ended with a semi-colon
	  var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");
	
	  function tokenBase(stream, state) {
		var ch = stream.peek(), style;
		if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;
		if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)
		  return style;
	
		if (/[,;:\.]/.test(ch)) {
		  curPunc = stream.next();
		  return null;
		}
		if (isBracketChar.test(ch)) {
		  curPunc = stream.next();
		  return "bracket";
		}
		// Macros (tick-defines)
		if (ch == '`') {
		  stream.next();
		  if (stream.eatWhile(/[\w\$_]/)) {
			return "def";
		  } else {
			return null;
		  }
		}
		// System calls
		if (ch == '$') {
		  stream.next();
		  if (stream.eatWhile(/[\w\$_]/)) {
			return "meta";
		  } else {
			return null;
		  }
		}
		// Time literals
		if (ch == '#') {
		  stream.next();
		  stream.eatWhile(/[\d_.]/);
		  return "def";
		}
		// Strings
		if (ch == '"') {
		  stream.next();
		  state.tokenize = tokenString(ch);
		  return state.tokenize(stream, state);
		}
		// Comments
		if (ch == "/") {
		  stream.next();
		  if (stream.eat("*")) {
			state.tokenize = tokenComment;
			return tokenComment(stream, state);
		  }
		  if (stream.eat("/")) {
			stream.skipToEnd();
			return "comment";
		  }
		  stream.backUp(1);
		}
	
		// Numeric literals
		if (stream.match(realLiteral) ||
			stream.match(decimalLiteral) ||
			stream.match(binaryLiteral) ||
			stream.match(octLiteral) ||
			stream.match(hexLiteral) ||
			stream.match(unsignedNumber) ||
			stream.match(realLiteral)) {
		  return "number";
		}
	
		// Operators
		if (stream.eatWhile(isOperatorChar)) {
		  return "meta";
		}
	
		// Keywords / plain variables
		if (stream.eatWhile(/[\w\$_]/)) {
		  var cur = stream.current();
		  if (keywords[cur]) {
			if (openClose[cur]) {
			  curPunc = "newblock";
			}
			if (statementKeywords[cur]) {
			  curPunc = "newstatement";
			}
			curKeyword = cur;
			return "keyword";
		  }
		  return "variable";
		}
	
		stream.next();
		return null;
	  }
	
	  function tokenString(quote) {
		return function(stream, state) {
		  var escaped = false, next, end = false;
		  while ((next = stream.next()) != null) {
			if (next == quote && !escaped) {end = true; break;}
			escaped = !escaped && next == "\\";
		  }
		  if (end || !(escaped || multiLineStrings))
			state.tokenize = tokenBase;
		  return "string";
		};
	  }
	
	  function tokenComment(stream, state) {
		var maybeEnd = false, ch;
		while (ch = stream.next()) {
		  if (ch == "/" && maybeEnd) {
			state.tokenize = tokenBase;
			break;
		  }
		  maybeEnd = (ch == "*");
		}
		return "comment";
	  }
	
	  function Context(indented, column, type, align, prev) {
		this.indented = indented;
		this.column = column;
		this.type = type;
		this.align = align;
		this.prev = prev;
	  }
	  function pushContext(state, col, type) {
		var indent = state.indented;
		var c = new Context(indent, col, type, null, state.context);
		return state.context = c;
	  }
	  function popContext(state) {
		var t = state.context.type;
		if (t == ")" || t == "]" || t == "}") {
		  state.indented = state.context.indented;
		}
		return state.context = state.context.prev;
	  }
	
	  function isClosing(text, contextClosing) {
		if (text == contextClosing) {
		  return true;
		} else {
		  // contextClosing may be multiple keywords separated by ;
		  var closingKeywords = contextClosing.split(";");
		  for (var i in closingKeywords) {
			if (text == closingKeywords[i]) {
			  return true;
			}
		  }
		  return false;
		}
	  }
	
	  function buildElectricInputRegEx() {
		// Reindentation should occur on any bracket char: {}()[]
		// or on a match of any of the block closing keywords, at
		// the end of a line
		var allClosings = [];
		for (var i in openClose) {
		  if (openClose[i]) {
			var closings = openClose[i].split(";");
			for (var j in closings) {
			  allClosings.push(closings[j]);
			}
		  }
		}
		var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
		return re;
	  }
	
	  // Interface
	  return {
		name: "verilog",
	
		startState: function(indentUnit) {
		  var state = {
			tokenize: null,
			context: new Context(-indentUnit, 0, "top", false),
			indented: 0,
			startOfLine: true
		  };
		  if (hooks.startState) hooks.startState(state);
		  return state;
		},
	
		token: function(stream, state) {
		  var ctx = state.context;
		  if (stream.sol()) {
			if (ctx.align == null) ctx.align = false;
			state.indented = stream.indentation();
			state.startOfLine = true;
		  }
		  if (hooks.token) {
			// Call hook, with an optional return value of a style to override verilog styling.
			var style = hooks.token(stream, state);
			if (style !== undefined) {
			  return style;
			}
		  }
		  if (stream.eatSpace()) return null;
		  curPunc = null;
		  curKeyword = null;
		  var style = (state.tokenize || tokenBase)(stream, state);
		  if (style == "comment" || style == "meta" || style == "variable") return style;
		  if (ctx.align == null) ctx.align = true;
	
		  if (curPunc == ctx.type) {
			popContext(state);
		  } else if ((curPunc == ";" && ctx.type == "statement") ||
					 (ctx.type && isClosing(curKeyword, ctx.type))) {
			ctx = popContext(state);
			while (ctx && ctx.type == "statement") ctx = popContext(state);
		  } else if (curPunc == "{") {
			pushContext(state, stream.column(), "}");
		  } else if (curPunc == "[") {
			pushContext(state, stream.column(), "]");
		  } else if (curPunc == "(") {
			pushContext(state, stream.column(), ")");
		  } else if (ctx && ctx.type == "endcase" && curPunc == ":") {
			pushContext(state, stream.column(), "statement");
		  } else if (curPunc == "newstatement") {
			pushContext(state, stream.column(), "statement");
		  } else if (curPunc == "newblock") {
			if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) ; else if (curKeyword == "task" && ctx && ctx.type == "statement") ; else {
			  var close = openClose[curKeyword];
			  pushContext(state, stream.column(), close);
			}
		  }
	
		  state.startOfLine = false;
		  return style;
		},
	
		indent: function(state, textAfter, cx) {
		  if (state.tokenize != tokenBase && state.tokenize != null) return null;
		  if (hooks.indent) {
			var fromHook = hooks.indent(state);
			if (fromHook >= 0) return fromHook;
		  }
		  var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
		  if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
		  var closing = false;
		  var possibleClosing = textAfter.match(closingBracketOrWord);
		  if (possibleClosing)
			closing = isClosing(possibleClosing[0], ctx.type);
		  if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);
		  else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);
		  else if (ctx.type == ")" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);
		  else return ctx.indented + (closing ? 0 : cx.unit);
		},
	
		languageData: {
		  indentOnInput: buildElectricInputRegEx(),
		  commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
		}
	  };
	}
	const verilog = mkVerilog({});
	
	// TL-Verilog mode.
	// See tl-x.org for language spec.
	// See the mode in action at makerchip.com.
	// Contact: steve.hoover@redwoodeda.com
	
	// TLV Identifier prefixes.
	// Note that sign is not treated separately, so "+/-" versions of numeric identifiers
	// are included.
	var tlvIdentifierStyle = {
	  "|": "link",
	  ">": "property",  // Should condition this off for > TLV 1c.
	  "$": "variable",
	  "$$": "variable",
	  "?$": "qualifier",
	  "?*": "qualifier",
	  "-": "contentSeparator",
	  "/": "property",
	  "/-": "property",
	  "@": "variableName.special",
	  "@-": "variableName.special",
	  "@++": "variableName.special",
	  "@+=": "variableName.special",
	  "@+=-": "variableName.special",
	  "@--": "variableName.special",
	  "@-=": "variableName.special",
	  "%+": "tag",
	  "%-": "tag",
	  "%": "tag",
	  ">>": "tag",
	  "<<": "tag",
	  "<>": "tag",
	  "#": "tag",  // Need to choose a style for this.
	  "^": "attribute",
	  "^^": "attribute",
	  "^!": "attribute",
	  "*": "variable",
	  "**": "variable",
	  "\\": "keyword",
	  "\"": "comment"
	};
	
	// Lines starting with these characters define scope (result in indentation).
	var tlvScopePrefixChars = {
	  "/": "beh-hier",
	  ">": "beh-hier",
	  "-": "phys-hier",
	  "|": "pipe",
	  "?": "when",
	  "@": "stage",
	  "\\": "keyword"
	};
	var tlvIndentUnit = 3;
	var tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;  // Matches an identifier.
	// Note that ':' is excluded, because of it's use in [:].
	var tlvLineIndentationMatch = /^[! ] */;
	var tlvCommentMatch = /^\/[\/\*]/;
	
	const tlv = mkVerilog({
	  hooks: {
		electricInput: false,
	
		// Return undefined for verilog tokenizing, or style for TLV token (null not used).
		// Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
		// can be enabled with the definition of cm-tlv-* styles, including highlighting for:
		//   - M4 tokens
		//   - TLV scope indentation
		//   - Statement delimitation (enabled by tlvTrackStatements)
		token: function(stream, state) {
		  var style = undefined;
		  var match;  // Return value of pattern matches.
	
		  // Set highlighting mode based on code region (TLV or SV).
		  if (stream.sol() && ! state.tlvInBlockComment) {
			// Process region.
			if (stream.peek() == '\\') {
			  style = "def";
			  stream.skipToEnd();
			  if (stream.string.match(/\\SV/)) {
				state.tlvCodeActive = false;
			  } else if (stream.string.match(/\\TLV/)){
				state.tlvCodeActive = true;
			  }
			}
			// Correct indentation in the face of a line prefix char.
			if (state.tlvCodeActive && stream.pos == 0 &&
				(state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {
			  state.indented = match[0].length;
			}
	
			// Compute indentation state:
			//   o Auto indentation on next line
			//   o Indentation scope styles
			var indented = state.indented;
			var depth = indented / tlvIndentUnit;
			if (depth <= state.tlvIndentationStyle.length) {
			  // not deeper than current scope
	
			  var blankline = stream.string.length == indented;
			  var chPos = depth * tlvIndentUnit;
			  if (chPos < stream.string.length) {
				var bodyString = stream.string.slice(chPos);
				var ch = bodyString[0];
				if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&
												tlvIdentifierStyle[match[1]])) {
				  // This line begins scope.
				  // Next line gets indented one level.
				  indented += tlvIndentUnit;
				  // Style the next level of indentation (except non-region keyword identifiers,
				  //   which are statements themselves)
				  if (!(ch == "\\" && chPos > 0)) {
					state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];
					depth++;
				  }
				}
			  }
			  // Clear out deeper indentation levels unless line is blank.
			  if (!blankline) {
				while (state.tlvIndentationStyle.length > depth) {
				  state.tlvIndentationStyle.pop();
				}
			  }
			}
			// Set next level of indentation.
			state.tlvNextIndent = indented;
		  }
	
		  if (state.tlvCodeActive) {
	
			var match;
			if (style !== undefined) ; else if (state.tlvInBlockComment) {
			  // In a block comment.
			  if (stream.match(/^.*?\*\//)) {
				// Exit block comment.
				state.tlvInBlockComment = false;
			  } else {
				stream.skipToEnd();
			  }
			  style = "comment";
			} else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
			  // Start comment.
			  if (match[0] == "//") {
				// Line comment.
				stream.skipToEnd();
			  } else {
				// Block comment.
				state.tlvInBlockComment = true;
			  }
			  style = "comment";
			} else if (match = stream.match(tlvIdentMatch)) {
			  // looks like an identifier (or identifier prefix)
			  var prefix = match[1];
			  var mnemonic = match[2];
			  if (// is identifier prefix
				tlvIdentifierStyle.hasOwnProperty(prefix) &&
				  // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
				(mnemonic.length > 0 || stream.eol())) {
				style = tlvIdentifierStyle[prefix];
			  } else {
				// Just swallow one character and try again.
				// This enables subsequent identifier match with preceding symbol character, which
				//   is legal within a statement.  (Eg, !$reset).  It also enables detection of
				//   comment start with preceding symbols.
				stream.backUp(stream.current().length - 1);
			  }
			} else if (stream.match(/^\t+/)) {
			  // Highlight tabs, which are illegal.
			  style = "invalid";
			} else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
			  // [:], (), {}, ;.
			  style = "meta";
			} else if (match = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
			  // m4 pre proc
			  style = (match[1] == "+") ? "keyword.special" : "keyword";
			} else if (stream.match(/^ +/)){
			  // Skip over spaces.
			  if (stream.eol()) {
				// Trailing spaces.
				style = "error";
			  }
			} else if (stream.match(/^[\w\d_]+/)) {
			  // alpha-numeric token.
			  style = "number";
			} else {
			  // Eat the next char w/ no formatting.
			  stream.next();
			}
		  } else {
			if (stream.match(/^[mM]4([\w\d_]*)/)) {
			  // m4 pre proc
			  style = "keyword";
			}
		  }
		  return style;
		},
	
		indent: function(state) {
		  return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;
		},
	
		startState: function(state) {
		  state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.
		  state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).
		  state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.
		  state.tlvInBlockComment = false;  // True inside /**/ comment.
		}
	
	  }
	});
	
	exports.tlv = tlv;
	exports.verilog = verilog;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/vhdl.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/vhdl.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(",");
	  for (var i = 0; i < words.length; ++i) {
		var allCaps = words[i].toUpperCase();
		var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);
		obj[words[i]] = true;
		obj[allCaps] = true;
		obj[firstCap] = true;
	  }
	  return obj;
	}
	
	function metaHook(stream) {
	  stream.eatWhile(/[\w\$_]/);
	  return "meta";
	}
	
	var atoms = words("null"),
		hooks = {"`": metaHook, "$": metaHook},
		multiLineStrings = false;
	
	var keywords = words("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block," +
						 "body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case," +
						 "end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for," +
						 "function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage," +
						 "literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map," +
						 "postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal," +
						 "sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");
	
	var blockKeywords = words("architecture,entity,begin,case,port,else,elsif,end,for,function,if");
	
	var isOperatorChar = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
	var curPunc;
	
	function tokenBase(stream, state) {
	  var ch = stream.next();
	  if (hooks[ch]) {
		var result = hooks[ch](stream, state);
		if (result !== false) return result;
	  }
	  if (ch == '"') {
		state.tokenize = tokenString2(ch);
		return state.tokenize(stream, state);
	  }
	  if (ch == "'") {
		state.tokenize = tokenString(ch);
		return state.tokenize(stream, state);
	  }
	  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
		curPunc = ch;
		return null;
	  }
	  if (/[\d']/.test(ch)) {
		stream.eatWhile(/[\w\.']/);
		return "number";
	  }
	  if (ch == "-") {
		if (stream.eat("-")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	  if (isOperatorChar.test(ch)) {
		stream.eatWhile(isOperatorChar);
		return "operator";
	  }
	  stream.eatWhile(/[\w\$_]/);
	  var cur = stream.current();
	  if (keywords.propertyIsEnumerable(cur.toLowerCase())) {
		if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
		return "keyword";
	  }
	  if (atoms.propertyIsEnumerable(cur)) return "atom";
	  return "variable";
	}
	
	function tokenString(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && next == "--";
		}
		if (end || !(escaped || multiLineStrings))
		  state.tokenize = tokenBase;
		return "string";
	  };
	}
	function tokenString2(quote) {
	  return function(stream, state) {
		var escaped = false, next, end = false;
		while ((next = stream.next()) != null) {
		  if (next == quote && !escaped) {end = true; break;}
		  escaped = !escaped && next == "--";
		}
		if (end || !(escaped || multiLineStrings))
		  state.tokenize = tokenBase;
		return "string.special";
	  };
	}
	
	function Context(indented, column, type, align, prev) {
	  this.indented = indented;
	  this.column = column;
	  this.type = type;
	  this.align = align;
	  this.prev = prev;
	}
	function pushContext(state, col, type) {
	  return state.context = new Context(state.indented, col, type, null, state.context);
	}
	function popContext(state) {
	  var t = state.context.type;
	  if (t == ")" || t == "]" || t == "}")
		state.indented = state.context.indented;
	  return state.context = state.context.prev;
	}
	
	// Interface
	const vhdl = {
	  name: "vhdl",
	  startState: function(indentUnit) {
		return {
		  tokenize: null,
		  context: new Context(-indentUnit, 0, "top", false),
		  indented: 0,
		  startOfLine: true
		};
	  },
	
	  token: function(stream, state) {
		var ctx = state.context;
		if (stream.sol()) {
		  if (ctx.align == null) ctx.align = false;
		  state.indented = stream.indentation();
		  state.startOfLine = true;
		}
		if (stream.eatSpace()) return null;
		curPunc = null;
		var style = (state.tokenize || tokenBase)(stream, state);
		if (style == "comment" || style == "meta") return style;
		if (ctx.align == null) ctx.align = true;
	
		if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);
		else if (curPunc == "{") pushContext(state, stream.column(), "}");
		else if (curPunc == "[") pushContext(state, stream.column(), "]");
		else if (curPunc == "(") pushContext(state, stream.column(), ")");
		else if (curPunc == "}") {
		  while (ctx.type == "statement") ctx = popContext(state);
		  if (ctx.type == "}") ctx = popContext(state);
		  while (ctx.type == "statement") ctx = popContext(state);
		}
		else if (curPunc == ctx.type) popContext(state);
		else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))
		  pushContext(state, stream.column(), "statement");
		state.startOfLine = false;
		return style;
	  },
	
	  indent: function(state, textAfter, cx) {
		if (state.tokenize != tokenBase && state.tokenize != null) return 0;
		var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;
		if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
		else if (ctx.align) return ctx.column + (closing ? 0 : 1);
		else return ctx.indented + (closing ? 0 : cx.unit);
	  },
	
	  languageData: {
		indentOnInput: /^\s*[{}]$/,
		commentTokens: {line: "--"}
	  }
	};
	
	exports.vhdl = vhdl;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/webidl.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/webidl.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function wordRegexp(words) {
	  return new RegExp("^((" + words.join(")|(") + "))\\b");
	}
	var builtinArray = [
	  "Clamp",
	  "Constructor",
	  "EnforceRange",
	  "Exposed",
	  "ImplicitThis",
	  "Global", "PrimaryGlobal",
	  "LegacyArrayClass",
	  "LegacyUnenumerableNamedProperties",
	  "LenientThis",
	  "NamedConstructor",
	  "NewObject",
	  "NoInterfaceObject",
	  "OverrideBuiltins",
	  "PutForwards",
	  "Replaceable",
	  "SameObject",
	  "TreatNonObjectAsNull",
	  "TreatNullAs",
		"EmptyString",
	  "Unforgeable",
	  "Unscopeable"
	];
	var builtins = wordRegexp(builtinArray);
	
	var typeArray = [
	  "unsigned", "short", "long",                  // UnsignedIntegerType
	  "unrestricted", "float", "double",            // UnrestrictedFloatType
	  "boolean", "byte", "octet",                   // Rest of PrimitiveType
	  "Promise",                                    // PromiseType
	  "ArrayBuffer", "DataView", "Int8Array", "Int16Array", "Int32Array",
	  "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray",
	  "Float32Array", "Float64Array",               // BufferRelatedType
	  "ByteString", "DOMString", "USVString", "sequence", "object", "RegExp",
	  "Error", "DOMException", "FrozenArray",       // Rest of NonAnyType
	  "any",                                        // Rest of SingleType
	  "void"                                        // Rest of ReturnType
	];
	var types = wordRegexp(typeArray);
	
	var keywordArray = [
	  "attribute", "callback", "const", "deleter", "dictionary", "enum", "getter",
	  "implements", "inherit", "interface", "iterable", "legacycaller", "maplike",
	  "partial", "required", "serializer", "setlike", "setter", "static",
	  "stringifier", "typedef",                     // ArgumentNameKeyword except
													// "unrestricted"
	  "optional", "readonly", "or"
	];
	var keywords = wordRegexp(keywordArray);
	
	var atomArray = [
	  "true", "false",                              // BooleanLiteral
	  "Infinity", "NaN",                            // FloatLiteral
	  "null"                                        // Rest of ConstValue
	];
	var atoms = wordRegexp(atomArray);
	
	var startDefArray = ["callback", "dictionary", "enum", "interface"];
	var startDefs = wordRegexp(startDefArray);
	
	var endDefArray = ["typedef"];
	var endDefs = wordRegexp(endDefArray);
	
	var singleOperators = /^[:<=>?]/;
	var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
	var floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
	var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
	var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
	var strings = /^"[^"]*"/;
	var multilineComments = /^\/\*.*?\*\//;
	var multilineCommentsStart = /^\/\*.*/;
	var multilineCommentsEnd = /^.*?\*\//;
	
	function readToken(stream, state) {
	  // whitespace
	  if (stream.eatSpace()) return null;
	
	  // comment
	  if (state.inComment) {
		if (stream.match(multilineCommentsEnd)) {
		  state.inComment = false;
		  return "comment";
		}
		stream.skipToEnd();
		return "comment";
	  }
	  if (stream.match("//")) {
		stream.skipToEnd();
		return "comment";
	  }
	  if (stream.match(multilineComments)) return "comment";
	  if (stream.match(multilineCommentsStart)) {
		state.inComment = true;
		return "comment";
	  }
	
	  // integer and float
	  if (stream.match(/^-?[0-9\.]/, false)) {
		if (stream.match(integers) || stream.match(floats)) return "number";
	  }
	
	  // string
	  if (stream.match(strings)) return "string";
	
	  // identifier
	  if (state.startDef && stream.match(identifiers)) return "def";
	
	  if (state.endDef && stream.match(identifiersEnd)) {
		state.endDef = false;
		return "def";
	  }
	
	  if (stream.match(keywords)) return "keyword";
	
	  if (stream.match(types)) {
		var lastToken = state.lastToken;
		var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];
	
		if (lastToken === ":" || lastToken === "implements" ||
			nextToken === "implements" || nextToken === "=") {
		  // Used as identifier
		  return "builtin";
		} else {
		  // Used as type
		  return "type";
		}
	  }
	
	  if (stream.match(builtins)) return "builtin";
	  if (stream.match(atoms)) return "atom";
	  if (stream.match(identifiers)) return "variable";
	
	  // other
	  if (stream.match(singleOperators)) return "operator";
	
	  // unrecognized
	  stream.next();
	  return null;
	}
	const webIDL = {
	  name: "webidl",
	  startState: function() {
		return {
		  // Is in multiline comment
		  inComment: false,
		  // Last non-whitespace, matched token
		  lastToken: "",
		  // Next token is a definition
		  startDef: false,
		  // Last token of the statement is a definition
		  endDef: false
		};
	  },
	  token: function(stream, state) {
		var style = readToken(stream, state);
	
		if (style) {
		  var cur = stream.current();
		  state.lastToken = cur;
		  if (style === "keyword") {
			state.startDef = startDefs.test(cur);
			state.endDef = state.endDef || endDefs.test(cur);
		  } else {
			state.startDef = false;
		  }
		}
	
		return style;
	  },
	
	  languageData: {
		autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)
	  }
	};
	
	exports.webIDL = webIDL;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/xquery.cjs":
	/*!***********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/xquery.cjs ***!
	  \***********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	// The keywords object is set to the result of this self executing
	// function. Each keyword is a property of the keywords object whose
	// value is {type: atype, style: astyle}
	var keywords = function(){
	  // convenience functions used to build keywords object
	  function kw(type) {return {type: type, style: "keyword"};}
	  var operator = kw("operator")
	  , atom = {type: "atom", style: "atom"}
	  , punctuation = {type: "punctuation", style: null}
	  , qualifier = {type: "axis_specifier", style: "qualifier"};
	
	  // kwObj is what is return from this function at the end
	  var kwObj = {
		',': punctuation
	  };
	
	  // a list of 'basic' keywords. For each add a property to kwObj with the value of
	  // {type: basic[i], style: "keyword"} e.g. 'after' --> {type: "after", style: "keyword"}
	  var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',
				   'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',
				   'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',
				   'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',
				   'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',
				   'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',
				   'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',
				   'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',
				   'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',
				   'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',
				   'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',
				   'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',
				   'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',
				   'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',
				   'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',
				   'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',
				   'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',
				   'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',
				   'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',
				   'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];
	  for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);}
	  // a list of types. For each add a property to kwObj with the value of
	  // {type: "atom", style: "atom"}
	  var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',
				   'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',
				   'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',
				   'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',
				   'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',
				   'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',
				   'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',
				   'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',
				   'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',
				   'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];
	  for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;}
	  // each operator will add a property to kwObj with value of {type: "operator", style: "keyword"}
	  var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];
	  for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;}
	  // each axis_specifiers will add a property to kwObj with value of {type: "axis_specifier", style: "qualifier"}
	  var axis_specifiers = ["self::", "attribute::", "child::", "descendant::", "descendant-or-self::", "parent::",
							 "ancestor::", "ancestor-or-self::", "following::", "preceding::", "following-sibling::", "preceding-sibling::"];
	  for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; }
	  return kwObj;
	}();
	
	function chain(stream, state, f) {
	  state.tokenize = f;
	  return f(stream, state);
	}
	
	// the primary mode tokenizer
	function tokenBase(stream, state) {
	  var ch = stream.next(),
		  mightBeFunction = false,
		  isEQName = isEQNameAhead(stream);
	
	  // an XML tag (if not in some sub, chained tokenizer)
	  if (ch == "<") {
		if(stream.match("!--", true))
		  return chain(stream, state, tokenXMLComment);
	
		if(stream.match("![CDATA", false)) {
		  state.tokenize = tokenCDATA;
		  return "tag";
		}
	
		if(stream.match("?", false)) {
		  return chain(stream, state, tokenPreProcessing);
		}
	
		var isclose = stream.eat("/");
		stream.eatSpace();
		var tagName = "", c;
		while ((c = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))) tagName += c;
	
		return chain(stream, state, tokenTag(tagName, isclose));
	  }
	  // start code block
	  else if(ch == "{") {
		pushStateStack(state, { type: "codeblock"});
		return null;
	  }
	  // end code block
	  else if(ch == "}") {
		popStateStack(state);
		return null;
	  }
	  // if we're in an XML block
	  else if(isInXmlBlock(state)) {
		if(ch == ">")
		  return "tag";
		else if(ch == "/" && stream.eat(">")) {
		  popStateStack(state);
		  return "tag";
		}
		else
		  return "variable";
	  }
	  // if a number
	  else if (/\d/.test(ch)) {
		stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
		return "atom";
	  }
	  // comment start
	  else if (ch === "(" && stream.eat(":")) {
		pushStateStack(state, { type: "comment"});
		return chain(stream, state, tokenComment);
	  }
	  // quoted string
	  else if (!isEQName && (ch === '"' || ch === "'"))
		return chain(stream, state, tokenString(ch));
	  // variable
	  else if(ch === "$") {
		return chain(stream, state, tokenVariable);
	  }
	  // assignment
	  else if(ch ===":" && stream.eat("=")) {
		return "keyword";
	  }
	  // open paren
	  else if(ch === "(") {
		pushStateStack(state, { type: "paren"});
		return null;
	  }
	  // close paren
	  else if(ch === ")") {
		popStateStack(state);
		return null;
	  }
	  // open paren
	  else if(ch === "[") {
		pushStateStack(state, { type: "bracket"});
		return null;
	  }
	  // close paren
	  else if(ch === "]") {
		popStateStack(state);
		return null;
	  }
	  else {
		var known = keywords.propertyIsEnumerable(ch) && keywords[ch];
	
		// if there's a EQName ahead, consume the rest of the string portion, it's likely a function
		if(isEQName && ch === '\"') while(stream.next() !== '"'){}
		if(isEQName && ch === '\'') while(stream.next() !== '\''){}
	
		// gobble up a word if the character is not known
		if(!known) stream.eatWhile(/[\w\$_-]/);
	
		// gobble a colon in the case that is a lib func type call fn:doc
		var foundColon = stream.eat(":");
	
		// if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier
		// which should get matched as a keyword
		if(!stream.eat(":") && foundColon) {
		  stream.eatWhile(/[\w\$_-]/);
		}
		// if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)
		if(stream.match(/^[ \t]*\(/, false)) {
		  mightBeFunction = true;
		}
		// is the word a keyword?
		var word = stream.current();
		known = keywords.propertyIsEnumerable(word) && keywords[word];
	
		// if we think it's a function call but not yet known,
		// set style to variable for now for lack of something better
		if(mightBeFunction && !known) known = {type: "function_call", style: "def"};
	
		// if the previous word was element, attribute, axis specifier, this word should be the name of that
		if(isInXmlConstructor(state)) {
		  popStateStack(state);
		  return "variable";
		}
		// as previously checked, if the word is element,attribute, axis specifier, call it an "xmlconstructor" and
		// push the stack so we know to look for it on the next word
		if(word == "element" || word == "attribute" || known.type == "axis_specifier") pushStateStack(state, {type: "xmlconstructor"});
	
		// if the word is known, return the details of that else just call this a generic 'word'
		return known ? known.style : "variable";
	  }
	}
	
	// handle comments, including nested
	function tokenComment(stream, state) {
	  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
	  while (ch = stream.next()) {
		if (ch == ")" && maybeEnd) {
		  if(nestedCount > 0)
			nestedCount--;
		  else {
			popStateStack(state);
			break;
		  }
		}
		else if(ch == ":" && maybeNested) {
		  nestedCount++;
		}
		maybeEnd = (ch == ":");
		maybeNested = (ch == "(");
	  }
	
	  return "comment";
	}
	
	// tokenizer for string literals
	// optionally pass a tokenizer function to set state.tokenize back to when finished
	function tokenString(quote, f) {
	  return function(stream, state) {
		var ch;
	
		if(isInString(state) && stream.current() == quote) {
		  popStateStack(state);
		  if(f) state.tokenize = f;
		  return "string";
		}
	
		pushStateStack(state, { type: "string", name: quote, tokenize: tokenString(quote, f) });
	
		// if we're in a string and in an XML block, allow an embedded code block
		if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
		  state.tokenize = tokenBase;
		  return "string";
		}
	
	
		while (ch = stream.next()) {
		  if (ch ==  quote) {
			popStateStack(state);
			if(f) state.tokenize = f;
			break;
		  }
		  else {
			// if we're in a string and in an XML block, allow an embedded code block in an attribute
			if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
			  state.tokenize = tokenBase;
			  return "string";
			}
	
		  }
		}
	
		return "string";
	  };
	}
	
	// tokenizer for variables
	function tokenVariable(stream, state) {
	  var isVariableChar = /[\w\$_-]/;
	
	  // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote
	  if(stream.eat("\"")) {
		while(stream.next() !== '\"'){}    stream.eat(":");
	  } else {
		stream.eatWhile(isVariableChar);
		if(!stream.match(":=", false)) stream.eat(":");
	  }
	  stream.eatWhile(isVariableChar);
	  state.tokenize = tokenBase;
	  return "variable";
	}
	
	// tokenizer for XML tags
	function tokenTag(name, isclose) {
	  return function(stream, state) {
		stream.eatSpace();
		if(isclose && stream.eat(">")) {
		  popStateStack(state);
		  state.tokenize = tokenBase;
		  return "tag";
		}
		// self closing tag without attributes?
		if(!stream.eat("/"))
		  pushStateStack(state, { type: "tag", name: name, tokenize: tokenBase});
		if(!stream.eat(">")) {
		  state.tokenize = tokenAttribute;
		  return "tag";
		}
		else {
		  state.tokenize = tokenBase;
		}
		return "tag";
	  };
	}
	
	// tokenizer for XML attributes
	function tokenAttribute(stream, state) {
	  var ch = stream.next();
	
	  if(ch == "/" && stream.eat(">")) {
		if(isInXmlAttributeBlock(state)) popStateStack(state);
		if(isInXmlBlock(state)) popStateStack(state);
		return "tag";
	  }
	  if(ch == ">") {
		if(isInXmlAttributeBlock(state)) popStateStack(state);
		return "tag";
	  }
	  if(ch == "=")
		return null;
	  // quoted string
	  if (ch == '"' || ch == "'")
		return chain(stream, state, tokenString(ch, tokenAttribute));
	
	  if(!isInXmlAttributeBlock(state))
		pushStateStack(state, { type: "attribute", tokenize: tokenAttribute});
	
	  stream.eat(/[a-zA-Z_:]/);
	  stream.eatWhile(/[-a-zA-Z0-9_:.]/);
	  stream.eatSpace();
	
	  // the case where the attribute has not value and the tag was closed
	  if(stream.match(">", false) || stream.match("/", false)) {
		popStateStack(state);
		state.tokenize = tokenBase;
	  }
	
	  return "attribute";
	}
	
	// handle comments, including nested
	function tokenXMLComment(stream, state) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch == "-" && stream.match("->", true)) {
		  state.tokenize = tokenBase;
		  return "comment";
		}
	  }
	}
	
	
	// handle CDATA
	function tokenCDATA(stream, state) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch == "]" && stream.match("]", true)) {
		  state.tokenize = tokenBase;
		  return "comment";
		}
	  }
	}
	
	// handle preprocessing instructions
	function tokenPreProcessing(stream, state) {
	  var ch;
	  while (ch = stream.next()) {
		if (ch == "?" && stream.match(">", true)) {
		  state.tokenize = tokenBase;
		  return "processingInstruction";
		}
	  }
	}
	
	
	// functions to test the current context of the state
	function isInXmlBlock(state) { return isIn(state, "tag"); }
	function isInXmlAttributeBlock(state) { return isIn(state, "attribute"); }
	function isInXmlConstructor(state) { return isIn(state, "xmlconstructor"); }
	function isInString(state) { return isIn(state, "string"); }
	
	function isEQNameAhead(stream) {
	  // assume we've already eaten a quote (")
	  if(stream.current() === '"')
		return stream.match(/^[^\"]+\"\:/, false);
	  else if(stream.current() === '\'')
		return stream.match(/^[^\"]+\'\:/, false);
	  else
		return false;
	}
	
	function isIn(state, type) {
	  return (state.stack.length && state.stack[state.stack.length - 1].type == type);
	}
	
	function pushStateStack(state, newState) {
	  state.stack.push(newState);
	}
	
	function popStateStack(state) {
	  state.stack.pop();
	  var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;
	  state.tokenize = reinstateTokenize || tokenBase;
	}
	
	// the interface for the mode API
	const xQuery = {
	  name: "xquery",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  cc: [],
		  stack: []
		};
	  },
	
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		var style = state.tokenize(stream, state);
		return style;
	  },
	
	  languageData: {
		commentTokens: {block: {open: "(:", close: ":)"}}
	  }
	};
	
	exports.xQuery = xQuery;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/yacas.cjs":
	/*!**********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/yacas.cjs ***!
	  \**********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function words(str) {
	  var obj = {}, words = str.split(" ");
	  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
	  return obj;
	}
	
	var bodiedOps = words("Assert BackQuote D Defun Deriv For ForEach FromFile " +
						  "FromString Function Integrate InverseTaylor Limit " +
						  "LocalSymbols Macro MacroRule MacroRulePattern " +
						  "NIntegrate Rule RulePattern Subst TD TExplicitSum " +
						  "TSum Taylor Taylor1 Taylor2 Taylor3 ToFile " +
						  "ToStdout ToString TraceRule Until While");
	
	// patterns
	var pFloatForm  = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
	var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";
	
	// regular expressions
	var reFloatForm    = new RegExp(pFloatForm);
	var reIdentifier   = new RegExp(pIdentifier);
	var rePattern      = new RegExp(pIdentifier + "?_" + pIdentifier);
	var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");
	
	function tokenBase(stream, state) {
	  var ch;
	
	  // get next character
	  ch = stream.next();
	
	  // string
	  if (ch === '"') {
		state.tokenize = tokenString;
		return state.tokenize(stream, state);
	  }
	
	  // comment
	  if (ch === '/') {
		if (stream.eat('*')) {
		  state.tokenize = tokenComment;
		  return state.tokenize(stream, state);
		}
		if (stream.eat("/")) {
		  stream.skipToEnd();
		  return "comment";
		}
	  }
	
	  // go back one character
	  stream.backUp(1);
	
	  // update scope info
	  var m = stream.match(/^(\w+)\s*\(/, false);
	  if (m !== null && bodiedOps.hasOwnProperty(m[1]))
		state.scopes.push('bodied');
	
	  var scope = currentScope(state);
	
	  if (scope === 'bodied' && ch === '[')
		state.scopes.pop();
	
	  if (ch === '[' || ch === '{' || ch === '(')
		state.scopes.push(ch);
	
	  scope = currentScope(state);
	
	  if (scope === '[' && ch === ']' ||
		  scope === '{' && ch === '}' ||
		  scope === '(' && ch === ')')
		state.scopes.pop();
	
	  if (ch === ';') {
		while (scope === 'bodied') {
		  state.scopes.pop();
		  scope = currentScope(state);
		}
	  }
	
	  // look for ordered rules
	  if (stream.match(/\d+ *#/, true, false)) {
		return 'qualifier';
	  }
	
	  // look for numbers
	  if (stream.match(reFloatForm, true, false)) {
		return 'number';
	  }
	
	  // look for placeholders
	  if (stream.match(rePattern, true, false)) {
		return 'variableName.special';
	  }
	
	  // match all braces separately
	  if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
		return 'bracket';
	  }
	
	  // literals looking like function calls
	  if (stream.match(reFunctionLike, true, false)) {
		stream.backUp(1);
		return 'variableName.function';
	  }
	
	  // all other identifiers
	  if (stream.match(reIdentifier, true, false)) {
		return 'variable';
	  }
	
	  // operators; note that operators like @@ or /; are matched separately for each symbol.
	  if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
		return 'operator';
	  }
	
	  // everything else is an error
	  return 'error';
	}
	
	function tokenString(stream, state) {
	  var next, end = false, escaped = false;
	  while ((next = stream.next()) != null) {
		if (next === '"' && !escaped) {
		  end = true;
		  break;
		}
		escaped = !escaped && next === '\\';
	  }
	  if (end && !escaped) {
		state.tokenize = tokenBase;
	  }
	  return 'string';
	}
	function tokenComment(stream, state) {
	  var prev, next;
	  while((next = stream.next()) != null) {
		if (prev === '*' && next === '/') {
		  state.tokenize = tokenBase;
		  break;
		}
		prev = next;
	  }
	  return 'comment';
	}
	
	function currentScope(state) {
	  var scope = null;
	  if (state.scopes.length > 0)
		scope = state.scopes[state.scopes.length - 1];
	  return scope;
	}
	
	const yacas = {
	  name: "yacas",
	  startState: function() {
		return {
		  tokenize: tokenBase,
		  scopes: []
		};
	  },
	  token: function(stream, state) {
		if (stream.eatSpace()) return null;
		return state.tokenize(stream, state);
	  },
	  indent: function(state, textAfter, cx) {
		if (state.tokenize !== tokenBase && state.tokenize !== null)
		  return null;
	
		var delta = 0;
		if (textAfter === ']' || textAfter === '];' ||
			textAfter === '}' || textAfter === '};' ||
			textAfter === ');')
		  delta = -1;
	
		return (state.scopes.length + delta) * cx.unit;
	  },
	
	  languageData: {
		electricInput: /[{}\[\]()\;]/,
		commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
	  }
	};
	
	exports.yacas = yacas;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/yaml.cjs":
	/*!*********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/yaml.cjs ***!
	  \*********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];
	var keywordRegex = new RegExp("\\b(("+cons.join(")|(")+"))$", 'i');
	
	const yaml = {
	  name: "yaml",
	  token: function(stream, state) {
		var ch = stream.peek();
		var esc = state.escaped;
		state.escaped = false;
		/* comments */
		if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
		  stream.skipToEnd();
		  return "comment";
		}
	
		if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
		  return "string";
	
		if (state.literal && stream.indentation() > state.keyCol) {
		  stream.skipToEnd(); return "string";
		} else if (state.literal) { state.literal = false; }
		if (stream.sol()) {
		  state.keyCol = 0;
		  state.pair = false;
		  state.pairStart = false;
		  /* document start */
		  if(stream.match('---')) { return "def"; }
		  /* document end */
		  if (stream.match('...')) { return "def"; }
		  /* array list item */
		  if (stream.match(/^\s*-\s+/)) { return 'meta'; }
		}
		/* inline pairs/lists */
		if (stream.match(/^(\{|\}|\[|\])/)) {
		  if (ch == '{')
			state.inlinePairs++;
		  else if (ch == '}')
			state.inlinePairs--;
		  else if (ch == '[')
			state.inlineList++;
		  else
			state.inlineList--;
		  return 'meta';
		}
	
		/* list separator */
		if (state.inlineList > 0 && !esc && ch == ',') {
		  stream.next();
		  return 'meta';
		}
		/* pairs separator */
		if (state.inlinePairs > 0 && !esc && ch == ',') {
		  state.keyCol = 0;
		  state.pair = false;
		  state.pairStart = false;
		  stream.next();
		  return 'meta';
		}
	
		/* start of value of a pair */
		if (state.pairStart) {
		  /* block literals */
		  if (stream.match(/^\s*(\||\>)\s*/)) { state.literal = true; return 'meta'; }      /* references */
		  if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) { return 'variable'; }
		  /* numbers */
		  if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) { return 'number'; }
		  if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) { return 'number'; }
		  /* keywords */
		  if (stream.match(keywordRegex)) { return 'keyword'; }
		}
	
		/* pairs (associative arrays) -> key */
		if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
		  state.pair = true;
		  state.keyCol = stream.indentation();
		  return "atom";
		}
		if (state.pair && stream.match(/^:\s*/)) { state.pairStart = true; return 'meta'; }
	
		/* nothing found, continue */
		state.pairStart = false;
		state.escaped = (ch == '\\');
		stream.next();
		return null;
	  },
	  startState: function() {
		return {
		  pair: false,
		  pairStart: false,
		  keyCol: 0,
		  inlinePairs: 0,
		  inlineList: 0,
		  literal: false,
		  escaped: false
		};
	  },
	  languageData: {
		commentTokens: {line: "#"}
	  }
	};
	
	exports.yaml = yaml;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/legacy-modes/mode/z80.cjs":
	/*!********************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/legacy-modes/mode/z80.cjs ***!
	  \********************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	function mkZ80(ez80) {
	  var keywords1, keywords2;
	  if (ez80) {
		keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
		keywords2 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
	  } else {
		keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
		keywords2 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
	  }
	
	  var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
	  var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
	  var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
	  var numbers = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;
	
	  return {
		name: "z80",
		startState: function() {
		  return {
			context: 0
		  };
		},
		token: function(stream, state) {
		  if (!stream.column())
			state.context = 0;
	
		  if (stream.eatSpace())
			return null;
	
		  var w;
	
		  if (stream.eatWhile(/\w/)) {
			if (ez80 && stream.eat('.')) {
			  stream.eatWhile(/\w/);
			}
			w = stream.current();
	
			if (stream.indentation()) {
			  if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
				state.context = 4;
				return 'variable';
			  }
	
			  if (state.context == 2 && variables2.test(w)) {
				state.context = 4;
				return 'variableName.special';
			  }
	
			  if (keywords1.test(w)) {
				state.context = 1;
				return 'keyword';
			  } else if (keywords2.test(w)) {
				state.context = 2;
				return 'keyword';
			  } else if (state.context == 4 && numbers.test(w)) {
				return 'number';
			  }
	
			  if (errors.test(w))
				return 'error';
			} else if (stream.match(numbers)) {
			  return 'number';
			} else {
			  return null;
			}
		  } else if (stream.eat(';')) {
			stream.skipToEnd();
			return 'comment';
		  } else if (stream.eat('"')) {
			while (w = stream.next()) {
			  if (w == '"')
				break;
	
			  if (w == '\\')
				stream.next();
			}
			return 'string';
		  } else if (stream.eat('\'')) {
			if (stream.match(/\\?.'/))
			  return 'number';
		  } else if (stream.eat('.') || stream.sol() && stream.eat('#')) {
			state.context = 5;
	
			if (stream.eatWhile(/\w/))
			  return 'def';
		  } else if (stream.eat('$')) {
			if (stream.eatWhile(/[\da-f]/i))
			  return 'number';
		  } else if (stream.eat('%')) {
			if (stream.eatWhile(/[01]/))
			  return 'number';
		  } else {
			stream.next();
		  }
		  return null;
		}
	  };
	}
	const z80 = mkZ80(false);
	const ez80 = mkZ80(true);
	
	exports.ez80 = ez80;
	exports.z80 = z80;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/lint/dist/index.cjs":
	/*!**************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/lint/dist/index.cjs ***!
	  \**************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var elt = __webpack_require__(/*! crelt */ "../editor/node_modules/crelt/dist/index.cjs");
	
	class SelectedDiagnostic {
		constructor(from, to, diagnostic) {
			this.from = from;
			this.to = to;
			this.diagnostic = diagnostic;
		}
	}
	class LintState {
		constructor(diagnostics, panel, selected) {
			this.diagnostics = diagnostics;
			this.panel = panel;
			this.selected = selected;
		}
		static init(diagnostics, panel, state) {
			// Filter the list of diagnostics for which to create markers
			let markedDiagnostics = diagnostics;
			let diagnosticFilter = state.facet(lintConfig).markerFilter;
			if (diagnosticFilter)
				markedDiagnostics = diagnosticFilter(markedDiagnostics);
			let ranges = view.Decoration.set(markedDiagnostics.map((d) => {
				// For zero-length ranges or ranges covering only a line break, create a widget
				return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
					? view.Decoration.widget({
						widget: new DiagnosticWidget(d),
						diagnostic: d
					}).range(d.from)
					: view.Decoration.mark({
						attributes: { class: "cm-lintRange cm-lintRange-" + d.severity + (d.markClass ? " " + d.markClass : "") },
						diagnostic: d
					}).range(d.from, d.to);
			}), true);
			return new LintState(ranges, panel, findDiagnostic(ranges));
		}
	}
	function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
		let found = null;
		diagnostics.between(after, 1e9, (from, to, { spec }) => {
			if (diagnostic && spec.diagnostic != diagnostic)
				return;
			found = new SelectedDiagnostic(from, to, spec.diagnostic);
			return false;
		});
		return found;
	}
	function hideTooltip(tr, tooltip) {
		let line = tr.startState.doc.lineAt(tooltip.pos);
		return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, line.to));
	}
	function maybeEnableLint(state$1, effects) {
		return state$1.field(lintState, false) ? effects : effects.concat(state.StateEffect.appendConfig.of(lintExtensions));
	}
	/**
	Returns a transaction spec which updates the current set of
	diagnostics, and enables the lint extension if if wasn't already
	active.
	*/
	function setDiagnostics(state, diagnostics) {
		return {
			effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
		};
	}
	/**
	The state effect that updates the set of active diagnostics. Can
	be useful when writing an extension that needs to track these.
	*/
	const setDiagnosticsEffect = state.StateEffect.define();
	const togglePanel = state.StateEffect.define();
	const movePanelSelection = state.StateEffect.define();
	const lintState = state.StateField.define({
		create() {
			return new LintState(view.Decoration.none, null, null);
		},
		update(value, tr) {
			if (tr.docChanged) {
				let mapped = value.diagnostics.map(tr.changes), selected = null;
				if (value.selected) {
					let selPos = tr.changes.mapPos(value.selected.from, 1);
					selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
				}
				value = new LintState(mapped, value.panel, selected);
			}
			for (let effect of tr.effects) {
				if (effect.is(setDiagnosticsEffect)) {
					value = LintState.init(effect.value, value.panel, tr.state);
				}
				else if (effect.is(togglePanel)) {
					value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
				}
				else if (effect.is(movePanelSelection)) {
					value = new LintState(value.diagnostics, value.panel, effect.value);
				}
			}
			return value;
		},
		provide: f => [view.showPanel.from(f, val => val.panel),
			view.EditorView.decorations.from(f, s => s.diagnostics)]
	});
	/**
	Returns the number of active lint diagnostics in the given state.
	*/
	function diagnosticCount(state) {
		let lint = state.field(lintState, false);
		return lint ? lint.diagnostics.size : 0;
	}
	const activeMark = view.Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
	function lintTooltip(view, pos, side) {
		let { diagnostics } = view.state.field(lintState);
		let found = [], stackStart = 2e8, stackEnd = 0;
		diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
			if (pos >= from && pos <= to &&
				(from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
				found.push(spec.diagnostic);
				stackStart = Math.min(from, stackStart);
				stackEnd = Math.max(to, stackEnd);
			}
		});
		let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
		if (diagnosticFilter)
			found = diagnosticFilter(found);
		if (!found.length)
			return null;
		return {
			pos: stackStart,
			end: stackEnd,
			above: view.state.doc.lineAt(stackStart).to < stackEnd,
			create() {
				return { dom: diagnosticsTooltip(view, found) };
			}
		};
	}
	function diagnosticsTooltip(view, diagnostics) {
		return elt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
	}
	/**
	Command to open and focus the lint panel.
	*/
	const openLintPanel = (view$1) => {
		let field = view$1.state.field(lintState, false);
		if (!field || !field.panel)
			view$1.dispatch({ effects: maybeEnableLint(view$1.state, [togglePanel.of(true)]) });
		let panel = view.getPanel(view$1, LintPanel.open);
		if (panel)
			panel.dom.querySelector(".cm-panel-lint ul").focus();
		return true;
	};
	/**
	Command to close the lint panel, when open.
	*/
	const closeLintPanel = (view) => {
		let field = view.state.field(lintState, false);
		if (!field || !field.panel)
			return false;
		view.dispatch({ effects: togglePanel.of(false) });
		return true;
	};
	/**
	Move the selection to the next diagnostic.
	*/
	const nextDiagnostic = (view) => {
		let field = view.state.field(lintState, false);
		if (!field)
			return false;
		let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
		if (!next.value) {
			next = field.diagnostics.iter(0);
			if (!next.value || next.from == sel.from && next.to == sel.to)
				return false;
		}
		view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
		return true;
	};
	/**
	Move the selection to the previous diagnostic.
	*/
	const previousDiagnostic = (view) => {
		let { state } = view, field = state.field(lintState, false);
		if (!field)
			return false;
		let sel = state.selection.main;
		let prevFrom, prevTo, lastFrom, lastTo;
		field.diagnostics.between(0, state.doc.length, (from, to) => {
			if (to < sel.to && (prevFrom == null || prevFrom < from)) {
				prevFrom = from;
				prevTo = to;
			}
			if (lastFrom == null || from > lastFrom) {
				lastFrom = from;
				lastTo = to;
			}
		});
		if (lastFrom == null || prevFrom == null && lastFrom == sel.from)
			return false;
		view.dispatch({ selection: { anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom, head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo }, scrollIntoView: true });
		return true;
	};
	/**
	A set of default key bindings for the lint functionality.
	
	- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
	- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
	*/
	const lintKeymap = [
		{ key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
		{ key: "F8", run: nextDiagnostic }
	];
	const lintPlugin = view.ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.timeout = -1;
			this.set = true;
			let { delay } = view.state.facet(lintConfig);
			this.lintTime = Date.now() + delay;
			this.run = this.run.bind(this);
			this.timeout = setTimeout(this.run, delay);
		}
		run() {
			let now = Date.now();
			if (now < this.lintTime - 10) {
				this.timeout = setTimeout(this.run, this.lintTime - now);
			}
			else {
				this.set = false;
				let { state } = this.view, { sources } = state.facet(lintConfig);
				Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
					let all = annotations.reduce((a, b) => a.concat(b));
					if (this.view.state.doc == state.doc)
						this.view.dispatch(setDiagnostics(this.view.state, all));
				}, error => { view.logException(this.view.state, error); });
			}
		}
		update(update) {
			let config = update.state.facet(lintConfig);
			if (update.docChanged || config != update.startState.facet(lintConfig) ||
				config.needsRefresh && config.needsRefresh(update)) {
				this.lintTime = Date.now() + config.delay;
				if (!this.set) {
					this.set = true;
					this.timeout = setTimeout(this.run, config.delay);
				}
			}
		}
		force() {
			if (this.set) {
				this.lintTime = Date.now();
				this.run();
			}
		}
		destroy() {
			clearTimeout(this.timeout);
		}
	});
	const lintConfig = state.Facet.define({
		combine(input) {
			return Object.assign({ sources: input.map(i => i.source) }, state.combineConfig(input.map(i => i.config), {
				delay: 750,
				markerFilter: null,
				tooltipFilter: null,
				needsRefresh: null
			}, {
				needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)
			}));
		}
	});
	/**
	Given a diagnostic source, this function returns an extension that
	enables linting with that source. It will be called whenever the
	editor is idle (after its content changed).
	*/
	function linter(source, config = {}) {
		return [
			lintConfig.of({ source, config }),
			lintPlugin,
			lintExtensions
		];
	}
	/**
	Forces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the
	editor is idle to run right away.
	*/
	function forceLinting(view) {
		let plugin = view.plugin(lintPlugin);
		if (plugin)
			plugin.force();
	}
	function assignKeys(actions) {
		let assigned = [];
		if (actions)
			actions: for (let { name } of actions) {
				for (let i = 0; i < name.length; i++) {
					let ch = name[i];
					if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
						assigned.push(ch);
						continue actions;
					}
				}
				assigned.push("");
			}
		return assigned;
	}
	function renderDiagnostic(view, diagnostic, inPanel) {
		var _a;
		let keys = inPanel ? assignKeys(diagnostic.actions) : [];
		return elt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, elt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
			let fired = false, click = (e) => {
				e.preventDefault();
				if (fired)
					return;
				fired = true;
				let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
				if (found)
					action.apply(view, found.from, found.to);
			};
			let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
			let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
				elt("u", name.slice(keyIndex, keyIndex + 1)),
				name.slice(keyIndex + 1)];
			return elt("button", {
				type: "button",
				class: "cm-diagnosticAction",
				onclick: click,
				onmousedown: click,
				"aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
			}, nameElt);
		}), diagnostic.source && elt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
	}
	class DiagnosticWidget extends view.WidgetType {
		constructor(diagnostic) {
			super();
			this.diagnostic = diagnostic;
		}
		eq(other) { return other.diagnostic == this.diagnostic; }
		toDOM() {
			return elt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
		}
	}
	class PanelItem {
		constructor(view, diagnostic) {
			this.diagnostic = diagnostic;
			this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
			this.dom = renderDiagnostic(view, diagnostic, true);
			this.dom.id = this.id;
			this.dom.setAttribute("role", "option");
		}
	}
	class LintPanel {
		constructor(view) {
			this.view = view;
			this.items = [];
			let onkeydown = (event) => {
				if (event.keyCode == 27) { // Escape
					closeLintPanel(this.view);
					this.view.focus();
				}
				else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
					this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
				}
				else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
					this.moveSelection((this.selectedIndex + 1) % this.items.length);
				}
				else if (event.keyCode == 36) { // Home
					this.moveSelection(0);
				}
				else if (event.keyCode == 35) { // End
					this.moveSelection(this.items.length - 1);
				}
				else if (event.keyCode == 13) { // Enter
					this.view.focus();
				}
				else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
					let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
					for (let i = 0; i < keys.length; i++)
						if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
							let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
							if (found)
								diagnostic.actions[i].apply(view, found.from, found.to);
						}
				}
				else {
					return;
				}
				event.preventDefault();
			};
			let onclick = (event) => {
				for (let i = 0; i < this.items.length; i++) {
					if (this.items[i].dom.contains(event.target))
						this.moveSelection(i);
				}
			};
			this.list = elt("ul", {
				tabIndex: 0,
				role: "listbox",
				"aria-label": this.view.state.phrase("Diagnostics"),
				onkeydown,
				onclick
			});
			this.dom = elt("div", { class: "cm-panel-lint" }, this.list, elt("button", {
				type: "button",
				name: "close",
				"aria-label": this.view.state.phrase("close"),
				onclick: () => closeLintPanel(this.view)
			}, "×"));
			this.update();
		}
		get selectedIndex() {
			let selected = this.view.state.field(lintState).selected;
			if (!selected)
				return -1;
			for (let i = 0; i < this.items.length; i++)
				if (this.items[i].diagnostic == selected.diagnostic)
					return i;
			return -1;
		}
		update() {
			let { diagnostics, selected } = this.view.state.field(lintState);
			let i = 0, needsSync = false, newSelectedItem = null;
			diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
				let found = -1, item;
				for (let j = i; j < this.items.length; j++)
					if (this.items[j].diagnostic == spec.diagnostic) {
						found = j;
						break;
					}
				if (found < 0) {
					item = new PanelItem(this.view, spec.diagnostic);
					this.items.splice(i, 0, item);
					needsSync = true;
				}
				else {
					item = this.items[found];
					if (found > i) {
						this.items.splice(i, found - i);
						needsSync = true;
					}
				}
				if (selected && item.diagnostic == selected.diagnostic) {
					if (!item.dom.hasAttribute("aria-selected")) {
						item.dom.setAttribute("aria-selected", "true");
						newSelectedItem = item;
					}
				}
				else if (item.dom.hasAttribute("aria-selected")) {
					item.dom.removeAttribute("aria-selected");
				}
				i++;
			});
			while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
				needsSync = true;
				this.items.pop();
			}
			if (this.items.length == 0) {
				this.items.push(new PanelItem(this.view, {
					from: -1, to: -1,
					severity: "info",
					message: this.view.state.phrase("No diagnostics")
				}));
				needsSync = true;
			}
			if (newSelectedItem) {
				this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
				this.view.requestMeasure({
					key: this,
					read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
					write: ({ sel, panel }) => {
						let scaleY = panel.height / this.list.offsetHeight;
						if (sel.top < panel.top)
							this.list.scrollTop -= (panel.top - sel.top) / scaleY;
						else if (sel.bottom > panel.bottom)
							this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
					}
				});
			}
			else if (this.selectedIndex < 0) {
				this.list.removeAttribute("aria-activedescendant");
			}
			if (needsSync)
				this.sync();
		}
		sync() {
			let domPos = this.list.firstChild;
			function rm() {
				let prev = domPos;
				domPos = prev.nextSibling;
				prev.remove();
			}
			for (let item of this.items) {
				if (item.dom.parentNode == this.list) {
					while (domPos != item.dom)
						rm();
					domPos = item.dom.nextSibling;
				}
				else {
					this.list.insertBefore(item.dom, domPos);
				}
			}
			while (domPos)
				rm();
		}
		moveSelection(selectedIndex) {
			if (this.selectedIndex < 0)
				return;
			let field = this.view.state.field(lintState);
			let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
			if (!selection)
				return;
			this.view.dispatch({
				selection: { anchor: selection.from, head: selection.to },
				scrollIntoView: true,
				effects: movePanelSelection.of(selection)
			});
		}
		static open(view) { return new LintPanel(view); }
	}
	function svg(content, attrs = `viewBox="0 0 40 40"`) {
		return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
	}
	function underline(color) {
		return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
	}
	const baseTheme = view.EditorView.baseTheme({
		".cm-diagnostic": {
			padding: "3px 6px 3px 8px",
			marginLeft: "-1px",
			display: "block",
			whiteSpace: "pre-wrap"
		},
		".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
		".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
		".cm-diagnostic-info": { borderLeft: "5px solid #999" },
		".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
		".cm-diagnosticAction": {
			font: "inherit",
			border: "none",
			padding: "2px 4px",
			backgroundColor: "#444",
			color: "white",
			borderRadius: "3px",
			marginLeft: "8px",
			cursor: "pointer"
		},
		".cm-diagnosticSource": {
			fontSize: "70%",
			opacity: .7
		},
		".cm-lintRange": {
			backgroundPosition: "left bottom",
			backgroundRepeat: "repeat-x",
			paddingBottom: "0.7px",
		},
		".cm-lintRange-error": { backgroundImage: underline("#d11") },
		".cm-lintRange-warning": { backgroundImage: underline("orange") },
		".cm-lintRange-info": { backgroundImage: underline("#999") },
		".cm-lintRange-hint": { backgroundImage: underline("#66d") },
		".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
		".cm-tooltip-lint": {
			padding: 0,
			margin: 0
		},
		".cm-lintPoint": {
			position: "relative",
			"&:after": {
				content: '""',
				position: "absolute",
				bottom: 0,
				left: "-2px",
				borderLeft: "3px solid transparent",
				borderRight: "3px solid transparent",
				borderBottom: "4px solid #d11"
			}
		},
		".cm-lintPoint-warning": {
			"&:after": { borderBottomColor: "orange" }
		},
		".cm-lintPoint-info": {
			"&:after": { borderBottomColor: "#999" }
		},
		".cm-lintPoint-hint": {
			"&:after": { borderBottomColor: "#66d" }
		},
		".cm-panel.cm-panel-lint": {
			position: "relative",
			"& ul": {
				maxHeight: "100px",
				overflowY: "auto",
				"& [aria-selected]": {
					backgroundColor: "#ddd",
					"& u": { textDecoration: "underline" }
				},
				"&:focus [aria-selected]": {
					background_fallback: "#bdf",
					backgroundColor: "Highlight",
					color_fallback: "white",
					color: "HighlightText"
				},
				"& u": { textDecoration: "none" },
				padding: 0,
				margin: 0
			},
			"& [name=close]": {
				position: "absolute",
				top: "0",
				right: "2px",
				background: "inherit",
				border: "none",
				font: "inherit",
				padding: 0,
				margin: 0
			}
		}
	});
	function severityWeight(sev) {
		return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
	}
	class LintGutterMarker extends view.GutterMarker {
		constructor(diagnostics) {
			super();
			this.diagnostics = diagnostics;
			this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, "hint");
		}
		toDOM(view) {
			let elt = document.createElement("div");
			elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
			let diagnostics = this.diagnostics;
			let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
			if (diagnosticsFilter)
				diagnostics = diagnosticsFilter(diagnostics);
			if (diagnostics.length)
				elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);
			return elt;
		}
	}
	function trackHoverOn(view, marker) {
		let mousemove = (event) => {
			let rect = marker.getBoundingClientRect();
			if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&
				event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)
				return;
			for (let target = event.target; target; target = target.parentNode) {
				if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
					return;
			}
			window.removeEventListener("mousemove", mousemove);
			if (view.state.field(lintGutterTooltip))
				view.dispatch({ effects: setLintGutterTooltip.of(null) });
		};
		window.addEventListener("mousemove", mousemove);
	}
	function gutterMarkerMouseOver(view, marker, diagnostics) {
		function hovered() {
			let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
			const linePos = view.coordsAtPos(line.from);
			if (linePos) {
				view.dispatch({ effects: setLintGutterTooltip.of({
						pos: line.from,
						above: false,
						create() {
							return {
								dom: diagnosticsTooltip(view, diagnostics),
								getCoords: () => marker.getBoundingClientRect()
							};
						}
					}) });
			}
			marker.onmouseout = marker.onmousemove = null;
			trackHoverOn(view, marker);
		}
		let { hoverTime } = view.state.facet(lintGutterConfig);
		let hoverTimeout = setTimeout(hovered, hoverTime);
		marker.onmouseout = () => {
			clearTimeout(hoverTimeout);
			marker.onmouseout = marker.onmousemove = null;
		};
		marker.onmousemove = () => {
			clearTimeout(hoverTimeout);
			hoverTimeout = setTimeout(hovered, hoverTime);
		};
	}
	function markersForDiagnostics(doc, diagnostics) {
		let byLine = Object.create(null);
		for (let diagnostic of diagnostics) {
			let line = doc.lineAt(diagnostic.from);
			(byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
		}
		let markers = [];
		for (let line in byLine) {
			markers.push(new LintGutterMarker(byLine[line]).range(+line));
		}
		return state.RangeSet.of(markers, true);
	}
	const lintGutterExtension = view.gutter({
		class: "cm-gutter-lint",
		markers: view => view.state.field(lintGutterMarkers),
	});
	const lintGutterMarkers = state.StateField.define({
		create() {
			return state.RangeSet.empty;
		},
		update(markers, tr) {
			markers = markers.map(tr.changes);
			let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
			for (let effect of tr.effects) {
				if (effect.is(setDiagnosticsEffect)) {
					let diagnostics = effect.value;
					if (diagnosticFilter)
						diagnostics = diagnosticFilter(diagnostics || []);
					markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
				}
			}
			return markers;
		}
	});
	const setLintGutterTooltip = state.StateEffect.define();
	const lintGutterTooltip = state.StateField.define({
		create() { return null; },
		update(tooltip, tr) {
			if (tooltip && tr.docChanged)
				tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });
			return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);
		},
		provide: field => view.showTooltip.from(field)
	});
	const lintGutterTheme = view.EditorView.baseTheme({
		".cm-gutter-lint": {
			width: "1.4em",
			"& .cm-gutterElement": {
				padding: ".2em"
			}
		},
		".cm-lint-marker": {
			width: "1em",
			height: "1em"
		},
		".cm-lint-marker-info": {
			content: svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
		},
		".cm-lint-marker-warning": {
			content: svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`),
		},
		".cm-lint-marker-error": {
			content: svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
		},
	});
	const lintExtensions = [
		lintState,
		view.EditorView.decorations.compute([lintState], state => {
			let { selected, panel } = state.field(lintState);
			return !selected || !panel || selected.from == selected.to ? view.Decoration.none : view.Decoration.set([
				activeMark.range(selected.from, selected.to)
			]);
		}),
		view.hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
		baseTheme
	];
	const lintGutterConfig = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				hoverTime: 300 /* Hover.Time */,
				markerFilter: null,
				tooltipFilter: null
			});
		}
	});
	/**
	Returns an extension that installs a gutter showing markers for
	each line that has diagnostics, which can be hovered over to see
	the diagnostics.
	*/
	function lintGutter(config = {}) {
		return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
	}
	/**
	Iterate over the marked diagnostics for the given editor state,
	calling `f` for each of them. Note that, if the document changed
	since the diagnostics were created, the `Diagnostic` object will
	hold the original outdated position, whereas the `to` and `from`
	arguments hold the diagnostic's current position.
	*/
	function forEachDiagnostic(state$1, f) {
		let lState = state$1.field(lintState, false);
		if (lState && lState.diagnostics.size)
			for (let iter = state.RangeSet.iter([lState.diagnostics]); iter.value; iter.next())
				f(iter.value.spec.diagnostic, iter.from, iter.to);
	}
	
	exports.closeLintPanel = closeLintPanel;
	exports.diagnosticCount = diagnosticCount;
	exports.forEachDiagnostic = forEachDiagnostic;
	exports.forceLinting = forceLinting;
	exports.lintGutter = lintGutter;
	exports.lintKeymap = lintKeymap;
	exports.linter = linter;
	exports.nextDiagnostic = nextDiagnostic;
	exports.openLintPanel = openLintPanel;
	exports.previousDiagnostic = previousDiagnostic;
	exports.setDiagnostics = setDiagnostics;
	exports.setDiagnosticsEffect = setDiagnosticsEffect;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/search/dist/index.cjs":
	/*!****************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/search/dist/index.cjs ***!
	  \****************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var view = __webpack_require__(/*! @codemirror/view */ "../editor/node_modules/@codemirror/view/dist/index.cjs");
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var elt = __webpack_require__(/*! crelt */ "../editor/node_modules/crelt/dist/index.cjs");
	
	const basicNormalize = typeof String.prototype.normalize == "function"
		? x => x.normalize("NFKD") : x => x;
	/**
	A search cursor provides an iterator over text matches in a
	document.
	*/
	class SearchCursor {
		/**
		Create a text cursor. The query is the search string, `from` to
		`to` provides the region to search.
		
		When `normalize` is given, it will be called, on both the query
		string and the content it is matched against, before comparing.
		You can, for example, create a case-insensitive search by
		passing `s => s.toLowerCase()`.
		
		Text is always normalized with
		[`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
		(when supported).
		*/
		constructor(text, query, from = 0, to = text.length, normalize, test) {
			this.test = test;
			/**
			The current match (only holds a meaningful value after
			[`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
			`done` is false).
			*/
			this.value = { from: 0, to: 0 };
			/**
			Whether the end of the iterated region has been reached.
			*/
			this.done = false;
			this.matches = [];
			this.buffer = "";
			this.bufferPos = 0;
			this.iter = text.iterRange(from, to);
			this.bufferStart = from;
			this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
			this.query = this.normalize(query);
		}
		peek() {
			if (this.bufferPos == this.buffer.length) {
				this.bufferStart += this.buffer.length;
				this.iter.next();
				if (this.iter.done)
					return -1;
				this.bufferPos = 0;
				this.buffer = this.iter.value;
			}
			return state.codePointAt(this.buffer, this.bufferPos);
		}
		/**
		Look for the next match. Updates the iterator's
		[`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
		[`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
		at least once before using the cursor.
		*/
		next() {
			while (this.matches.length)
				this.matches.pop();
			return this.nextOverlapping();
		}
		/**
		The `next` method will ignore matches that partially overlap a
		previous match. This method behaves like `next`, but includes
		such matches.
		*/
		nextOverlapping() {
			for (;;) {
				let next = this.peek();
				if (next < 0) {
					this.done = true;
					return this;
				}
				let str = state.fromCodePoint(next), start = this.bufferStart + this.bufferPos;
				this.bufferPos += state.codePointSize(next);
				let norm = this.normalize(str);
				for (let i = 0, pos = start;; i++) {
					let code = norm.charCodeAt(i);
					let match = this.match(code, pos);
					if (i == norm.length - 1) {
						if (match) {
							this.value = match;
							return this;
						}
						break;
					}
					if (pos == start && i < str.length && str.charCodeAt(i) == code)
						pos++;
				}
			}
		}
		match(code, pos) {
			let match = null;
			for (let i = 0; i < this.matches.length; i += 2) {
				let index = this.matches[i], keep = false;
				if (this.query.charCodeAt(index) == code) {
					if (index == this.query.length - 1) {
						match = { from: this.matches[i + 1], to: pos + 1 };
					}
					else {
						this.matches[i]++;
						keep = true;
					}
				}
				if (!keep) {
					this.matches.splice(i, 2);
					i -= 2;
				}
			}
			if (this.query.charCodeAt(0) == code) {
				if (this.query.length == 1)
					match = { from: pos, to: pos + 1 };
				else
					this.matches.push(1, pos);
			}
			if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
				match = null;
			return match;
		}
	}
	if (typeof Symbol != "undefined")
		SearchCursor.prototype[Symbol.iterator] = function () { return this; };
	
	const empty = { from: -1, to: -1, match: /.*/.exec("") };
	const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
	/**
	This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
	but searches for a regular expression pattern instead of a plain
	string.
	*/
	class RegExpCursor {
		/**
		Create a cursor that will search the given range in the given
		document. `query` should be the raw pattern (as you'd pass it to
		`new RegExp`).
		*/
		constructor(text, query, options, from = 0, to = text.length) {
			this.text = text;
			this.to = to;
			this.curLine = "";
			/**
			Set to `true` when the cursor has reached the end of the search
			range.
			*/
			this.done = false;
			/**
			Will contain an object with the extent of the match and the
			match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
			sucessfully finds a match.
			*/
			this.value = empty;
			if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
				return new MultilineRegExpCursor(text, query, options, from, to);
			this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
			this.test = options === null || options === void 0 ? void 0 : options.test;
			this.iter = text.iter();
			let startLine = text.lineAt(from);
			this.curLineStart = startLine.from;
			this.matchPos = toCharEnd(text, from);
			this.getLine(this.curLineStart);
		}
		getLine(skip) {
			this.iter.next(skip);
			if (this.iter.lineBreak) {
				this.curLine = "";
			}
			else {
				this.curLine = this.iter.value;
				if (this.curLineStart + this.curLine.length > this.to)
					this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
				this.iter.next();
			}
		}
		nextLine() {
			this.curLineStart = this.curLineStart + this.curLine.length + 1;
			if (this.curLineStart > this.to)
				this.curLine = "";
			else
				this.getLine(0);
		}
		/**
		Move to the next match, if there is one.
		*/
		next() {
			for (let off = this.matchPos - this.curLineStart;;) {
				this.re.lastIndex = off;
				let match = this.matchPos <= this.to && this.re.exec(this.curLine);
				if (match) {
					let from = this.curLineStart + match.index, to = from + match[0].length;
					this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
					if (from == this.curLineStart + this.curLine.length)
						this.nextLine();
					if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
						this.value = { from, to, match };
						return this;
					}
					off = this.matchPos - this.curLineStart;
				}
				else if (this.curLineStart + this.curLine.length < this.to) {
					this.nextLine();
					off = 0;
				}
				else {
					this.done = true;
					return this;
				}
			}
		}
	}
	const flattened = new WeakMap();
	// Reusable (partially) flattened document strings
	class FlattenedDoc {
		constructor(from, text) {
			this.from = from;
			this.text = text;
		}
		get to() { return this.from + this.text.length; }
		static get(doc, from, to) {
			let cached = flattened.get(doc);
			if (!cached || cached.from >= to || cached.to <= from) {
				let flat = new FlattenedDoc(from, doc.sliceString(from, to));
				flattened.set(doc, flat);
				return flat;
			}
			if (cached.from == from && cached.to == to)
				return cached;
			let { text, from: cachedFrom } = cached;
			if (cachedFrom > from) {
				text = doc.sliceString(from, cachedFrom) + text;
				cachedFrom = from;
			}
			if (cached.to < to)
				text += doc.sliceString(cached.to, to);
			flattened.set(doc, new FlattenedDoc(cachedFrom, text));
			return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
		}
	}
	class MultilineRegExpCursor {
		constructor(text, query, options, from, to) {
			this.text = text;
			this.to = to;
			this.done = false;
			this.value = empty;
			this.matchPos = toCharEnd(text, from);
			this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
			this.test = options === null || options === void 0 ? void 0 : options.test;
			this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
		}
		chunkEnd(pos) {
			return pos >= this.to ? this.to : this.text.lineAt(pos).to;
		}
		next() {
			for (;;) {
				let off = this.re.lastIndex = this.matchPos - this.flat.from;
				let match = this.re.exec(this.flat.text);
				// Skip empty matches directly after the last match
				if (match && !match[0] && match.index == off) {
					this.re.lastIndex = off + 1;
					match = this.re.exec(this.flat.text);
				}
				if (match) {
					let from = this.flat.from + match.index, to = from + match[0].length;
					// If a match goes almost to the end of a noncomplete chunk, try
					// again, since it'll likely be able to match more
					if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
						(!this.test || this.test(from, to, match))) {
						this.value = { from, to, match };
						this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
						return this;
					}
				}
				if (this.flat.to == this.to) {
					this.done = true;
					return this;
				}
				// Grow the flattened doc
				this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
			}
		}
	}
	if (typeof Symbol != "undefined") {
		RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
			function () { return this; };
	}
	function validRegExp(source) {
		try {
			new RegExp(source, baseFlags);
			return true;
		}
		catch (_a) {
			return false;
		}
	}
	function toCharEnd(text, pos) {
		if (pos >= text.length)
			return pos;
		let line = text.lineAt(pos), next;
		while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
			pos++;
		return pos;
	}
	
	function createLineDialog(view$1) {
		let line = String(view$1.state.doc.lineAt(view$1.state.selection.main.head).number);
		let input = elt("input", { class: "cm-textfield", name: "line", value: line });
		let dom = elt("form", {
			class: "cm-gotoLine",
			onkeydown: (event) => {
				if (event.keyCode == 27) { // Escape
					event.preventDefault();
					view$1.dispatch({ effects: dialogEffect.of(false) });
					view$1.focus();
				}
				else if (event.keyCode == 13) { // Enter
					event.preventDefault();
					go();
				}
			},
			onsubmit: (event) => {
				event.preventDefault();
				go();
			}
		}, elt("label", view$1.state.phrase("Go to line"), ": ", input), " ", elt("button", { class: "cm-button", type: "submit" }, view$1.state.phrase("go")));
		function go() {
			let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
			if (!match)
				return;
			let { state: state$1 } = view$1, startLine = state$1.doc.lineAt(state$1.selection.main.head);
			let [, sign, ln, cl, percent] = match;
			let col = cl ? +cl.slice(1) : 0;
			let line = ln ? +ln : startLine.number;
			if (ln && percent) {
				let pc = line / 100;
				if (sign)
					pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state$1.doc.lines);
				line = Math.round(state$1.doc.lines * pc);
			}
			else if (ln && sign) {
				line = line * (sign == "-" ? -1 : 1) + startLine.number;
			}
			let docLine = state$1.doc.line(Math.max(1, Math.min(state$1.doc.lines, line)));
			let selection = state.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
			view$1.dispatch({
				effects: [dialogEffect.of(false), view.EditorView.scrollIntoView(selection.from, { y: 'center' })],
				selection,
			});
			view$1.focus();
		}
		return { dom };
	}
	const dialogEffect = state.StateEffect.define();
	const dialogField = state.StateField.define({
		create() { return true; },
		update(value, tr) {
			for (let e of tr.effects)
				if (e.is(dialogEffect))
					value = e.value;
			return value;
		},
		provide: f => view.showPanel.from(f, val => val ? createLineDialog : null)
	});
	/**
	Command that shows a dialog asking the user for a line number, and
	when a valid position is provided, moves the cursor to that line.
	
	Supports line numbers, relative line offsets prefixed with `+` or
	`-`, document percentages suffixed with `%`, and an optional
	column position by adding `:` and a second number after the line
	number.
	*/
	const gotoLine = view$1 => {
		let panel = view.getPanel(view$1, createLineDialog);
		if (!panel) {
			let effects = [dialogEffect.of(true)];
			if (view$1.state.field(dialogField, false) == null)
				effects.push(state.StateEffect.appendConfig.of([dialogField, baseTheme$1]));
			view$1.dispatch({ effects });
			panel = view.getPanel(view$1, createLineDialog);
		}
		if (panel)
			panel.dom.querySelector("input").select();
		return true;
	};
	const baseTheme$1 = view.EditorView.baseTheme({
		".cm-panel.cm-gotoLine": {
			padding: "2px 6px 4px",
			"& label": { fontSize: "80%" }
		}
	});
	
	const defaultHighlightOptions = {
		highlightWordAroundCursor: false,
		minSelectionLength: 1,
		maxMatches: 100,
		wholeWords: false
	};
	const highlightConfig = state.Facet.define({
		combine(options) {
			return state.combineConfig(options, defaultHighlightOptions, {
				highlightWordAroundCursor: (a, b) => a || b,
				minSelectionLength: Math.min,
				maxMatches: Math.min
			});
		}
	});
	/**
	This extension highlights text that matches the selection. It uses
	the `"cm-selectionMatch"` class for the highlighting. When
	`highlightWordAroundCursor` is enabled, the word at the cursor
	itself will be highlighted with `"cm-selectionMatch-main"`.
	*/
	function highlightSelectionMatches(options) {
		let ext = [defaultTheme, matchHighlighter];
		if (options)
			ext.push(highlightConfig.of(options));
		return ext;
	}
	const matchDeco = view.Decoration.mark({ class: "cm-selectionMatch" });
	const mainMatchDeco = view.Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
	// Whether the characters directly outside the given positions are non-word characters
	function insideWordBoundaries(check, state$1, from, to) {
		return (from == 0 || check(state$1.sliceDoc(from - 1, from)) != state.CharCategory.Word) &&
			(to == state$1.doc.length || check(state$1.sliceDoc(to, to + 1)) != state.CharCategory.Word);
	}
	// Whether the characters directly at the given positions are word characters
	function insideWord(check, state$1, from, to) {
		return check(state$1.sliceDoc(from, from + 1)) == state.CharCategory.Word
			&& check(state$1.sliceDoc(to - 1, to)) == state.CharCategory.Word;
	}
	const matchHighlighter = view.ViewPlugin.fromClass(class {
		constructor(view) {
			this.decorations = this.getDeco(view);
		}
		update(update) {
			if (update.selectionSet || update.docChanged || update.viewportChanged)
				this.decorations = this.getDeco(update.view);
		}
		getDeco(view$1) {
			let conf = view$1.state.facet(highlightConfig);
			let { state } = view$1, sel = state.selection;
			if (sel.ranges.length > 1)
				return view.Decoration.none;
			let range = sel.main, query, check = null;
			if (range.empty) {
				if (!conf.highlightWordAroundCursor)
					return view.Decoration.none;
				let word = state.wordAt(range.head);
				if (!word)
					return view.Decoration.none;
				check = state.charCategorizer(range.head);
				query = state.sliceDoc(word.from, word.to);
			}
			else {
				let len = range.to - range.from;
				if (len < conf.minSelectionLength || len > 200)
					return view.Decoration.none;
				if (conf.wholeWords) {
					query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
					check = state.charCategorizer(range.head);
					if (!(insideWordBoundaries(check, state, range.from, range.to)
						&& insideWord(check, state, range.from, range.to)))
						return view.Decoration.none;
				}
				else {
					query = state.sliceDoc(range.from, range.to).trim();
					if (!query)
						return view.Decoration.none;
				}
			}
			let deco = [];
			for (let part of view$1.visibleRanges) {
				let cursor = new SearchCursor(state.doc, query, part.from, part.to);
				while (!cursor.next().done) {
					let { from, to } = cursor.value;
					if (!check || insideWordBoundaries(check, state, from, to)) {
						if (range.empty && from <= range.from && to >= range.to)
							deco.push(mainMatchDeco.range(from, to));
						else if (from >= range.to || to <= range.from)
							deco.push(matchDeco.range(from, to));
						if (deco.length > conf.maxMatches)
							return view.Decoration.none;
					}
				}
			}
			return view.Decoration.set(deco);
		}
	}, {
		decorations: v => v.decorations
	});
	const defaultTheme = view.EditorView.baseTheme({
		".cm-selectionMatch": { backgroundColor: "#99ff7780" },
		".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
	});
	// Select the words around the cursors.
	const selectWord = ({ state: state$1, dispatch }) => {
		let { selection } = state$1;
		let newSel = state.EditorSelection.create(selection.ranges.map(range => state$1.wordAt(range.head) || state.EditorSelection.cursor(range.head)), selection.mainIndex);
		if (newSel.eq(selection))
			return false;
		dispatch(state$1.update({ selection: newSel }));
		return true;
	};
	// Find next occurrence of query relative to last cursor. Wrap around
	// the document if there are no more matches.
	function findNextOccurrence(state, query) {
		let { main, ranges } = state.selection;
		let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
		for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
			cursor.next();
			if (cursor.done) {
				if (cycled)
					return null;
				cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
				cycled = true;
			}
			else {
				if (cycled && ranges.some(r => r.from == cursor.value.from))
					continue;
				if (fullWord) {
					let word = state.wordAt(cursor.value.from);
					if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
						continue;
				}
				return cursor.value;
			}
		}
	}
	/**
	Select next occurrence of the current selection. Expand selection
	to the surrounding word when the selection is empty.
	*/
	const selectNextOccurrence = ({ state: state$1, dispatch }) => {
		let { ranges } = state$1.selection;
		if (ranges.some(sel => sel.from === sel.to))
			return selectWord({ state: state$1, dispatch });
		let searchedText = state$1.sliceDoc(ranges[0].from, ranges[0].to);
		if (state$1.selection.ranges.some(r => state$1.sliceDoc(r.from, r.to) != searchedText))
			return false;
		let range = findNextOccurrence(state$1, searchedText);
		if (!range)
			return false;
		dispatch(state$1.update({
			selection: state$1.selection.addRange(state.EditorSelection.range(range.from, range.to), false),
			effects: view.EditorView.scrollIntoView(range.to)
		}));
		return true;
	};
	
	const searchConfigFacet = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				top: false,
				caseSensitive: false,
				literal: false,
				regexp: false,
				wholeWord: false,
				createPanel: view => new SearchPanel(view),
				scrollToMatch: range => view.EditorView.scrollIntoView(range)
			});
		}
	});
	/**
	Add search state to the editor configuration, and optionally
	configure the search extension.
	([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically
	enable this if it isn't already on).
	*/
	function search(config) {
		return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;
	}
	/**
	A search query. Part of the editor's search state.
	*/
	class SearchQuery {
		/**
		Create a query object.
		*/
		constructor(config) {
			this.search = config.search;
			this.caseSensitive = !!config.caseSensitive;
			this.literal = !!config.literal;
			this.regexp = !!config.regexp;
			this.replace = config.replace || "";
			this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
			this.unquoted = this.unquote(this.search);
			this.wholeWord = !!config.wholeWord;
		}
		/**
		@internal
		*/
		unquote(text) {
			return this.literal ? text :
				text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
		}
		/**
		Compare this query to another query.
		*/
		eq(other) {
			return this.search == other.search && this.replace == other.replace &&
				this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
				this.wholeWord == other.wholeWord;
		}
		/**
		@internal
		*/
		create() {
			return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
		}
		/**
		Get a search cursor for this query, searching through the given
		range in the given state.
		*/
		getCursor(state$1, from = 0, to) {
			let st = state$1.doc ? state$1 : state.EditorState.create({ doc: state$1 });
			if (to == null)
				to = st.doc.length;
			return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
		}
	}
	class QueryType {
		constructor(spec) {
			this.spec = spec;
		}
	}
	function stringCursor(spec, state, from, to) {
		return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
	}
	function stringWordTest(doc, categorizer) {
		return (from, to, buf, bufPos) => {
			if (bufPos > from || bufPos + buf.length < to) {
				bufPos = Math.max(0, from - 2);
				buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
			}
			return (categorizer(charBefore(buf, from - bufPos)) != state.CharCategory.Word ||
				categorizer(charAfter(buf, from - bufPos)) != state.CharCategory.Word) &&
				(categorizer(charAfter(buf, to - bufPos)) != state.CharCategory.Word ||
					categorizer(charBefore(buf, to - bufPos)) != state.CharCategory.Word);
		};
	}
	class StringQuery extends QueryType {
		constructor(spec) {
			super(spec);
		}
		nextMatch(state, curFrom, curTo) {
			let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
			if (cursor.done)
				cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
			return cursor.done ? null : cursor.value;
		}
		// Searching in reverse is, rather than implementing an inverted search
		// cursor, done by scanning chunk after chunk forward.
		prevMatchInRange(state, from, to) {
			for (let pos = to;;) {
				let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
				let cursor = stringCursor(this.spec, state, start, pos), range = null;
				while (!cursor.nextOverlapping().done)
					range = cursor.value;
				if (range)
					return range;
				if (start == from)
					return null;
				pos -= 10000 /* FindPrev.ChunkSize */;
			}
		}
		prevMatch(state, curFrom, curTo) {
			return this.prevMatchInRange(state, 0, curFrom) ||
				this.prevMatchInRange(state, curTo, state.doc.length);
		}
		getReplacement(_result) { return this.spec.unquote(this.spec.replace); }
		matchAll(state, limit) {
			let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
			while (!cursor.next().done) {
				if (ranges.length >= limit)
					return null;
				ranges.push(cursor.value);
			}
			return ranges;
		}
		highlight(state, from, to, add) {
			let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
			while (!cursor.next().done)
				add(cursor.value.from, cursor.value.to);
		}
	}
	function regexpCursor(spec, state, from, to) {
		return new RegExpCursor(state.doc, spec.search, {
			ignoreCase: !spec.caseSensitive,
			test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
		}, from, to);
	}
	function charBefore(str, index) {
		return str.slice(state.findClusterBreak(str, index, false), index);
	}
	function charAfter(str, index) {
		return str.slice(index, state.findClusterBreak(str, index));
	}
	function regexpWordTest(categorizer) {
		return (_from, _to, match) => !match[0].length ||
			(categorizer(charBefore(match.input, match.index)) != state.CharCategory.Word ||
				categorizer(charAfter(match.input, match.index)) != state.CharCategory.Word) &&
				(categorizer(charAfter(match.input, match.index + match[0].length)) != state.CharCategory.Word ||
					categorizer(charBefore(match.input, match.index + match[0].length)) != state.CharCategory.Word);
	}
	class RegExpQuery extends QueryType {
		nextMatch(state, curFrom, curTo) {
			let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
			if (cursor.done)
				cursor = regexpCursor(this.spec, state, 0, curFrom).next();
			return cursor.done ? null : cursor.value;
		}
		prevMatchInRange(state, from, to) {
			for (let size = 1;; size++) {
				let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
				let cursor = regexpCursor(this.spec, state, start, to), range = null;
				while (!cursor.next().done)
					range = cursor.value;
				if (range && (start == from || range.from > start + 10))
					return range;
				if (start == from)
					return null;
			}
		}
		prevMatch(state, curFrom, curTo) {
			return this.prevMatchInRange(state, 0, curFrom) ||
				this.prevMatchInRange(state, curTo, state.doc.length);
		}
		getReplacement(result) {
			return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
				: i == "&" ? result.match[0]
					: i != "0" && +i < result.match.length ? result.match[i]
						: m);
		}
		matchAll(state, limit) {
			let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
			while (!cursor.next().done) {
				if (ranges.length >= limit)
					return null;
				ranges.push(cursor.value);
			}
			return ranges;
		}
		highlight(state, from, to, add) {
			let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
			while (!cursor.next().done)
				add(cursor.value.from, cursor.value.to);
		}
	}
	/**
	A state effect that updates the current search query. Note that
	this only has an effect if the search state has been initialized
	(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
	by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
	once).
	*/
	const setSearchQuery = state.StateEffect.define();
	const togglePanel = state.StateEffect.define();
	const searchState = state.StateField.define({
		create(state) {
			return new SearchState(defaultQuery(state).create(), null);
		},
		update(value, tr) {
			for (let effect of tr.effects) {
				if (effect.is(setSearchQuery))
					value = new SearchState(effect.value.create(), value.panel);
				else if (effect.is(togglePanel))
					value = new SearchState(value.query, effect.value ? createSearchPanel : null);
			}
			return value;
		},
		provide: f => view.showPanel.from(f, val => val.panel)
	});
	/**
	Get the current search query from an editor state.
	*/
	function getSearchQuery(state) {
		let curState = state.field(searchState, false);
		return curState ? curState.query.spec : defaultQuery(state);
	}
	/**
	Query whether the search panel is open in the given editor state.
	*/
	function searchPanelOpen(state) {
		var _a;
		return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;
	}
	class SearchState {
		constructor(query, panel) {
			this.query = query;
			this.panel = panel;
		}
	}
	const matchMark = view.Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = view.Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
	const searchHighlighter = view.ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.decorations = this.highlight(view.state.field(searchState));
		}
		update(update) {
			let state = update.state.field(searchState);
			if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
				this.decorations = this.highlight(state);
		}
		highlight({ query, panel }) {
			if (!panel || !query.spec.valid)
				return view.Decoration.none;
			let { view: view$1 } = this;
			let builder = new state.RangeSetBuilder();
			for (let i = 0, ranges = view$1.visibleRanges, l = ranges.length; i < l; i++) {
				let { from, to } = ranges[i];
				while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
					to = ranges[++i].to;
				query.highlight(view$1.state, from, to, (from, to) => {
					let selected = view$1.state.selection.ranges.some(r => r.from == from && r.to == to);
					builder.add(from, to, selected ? selectedMatchMark : matchMark);
				});
			}
			return builder.finish();
		}
	}, {
		decorations: v => v.decorations
	});
	function searchCommand(f) {
		return view => {
			let state = view.state.field(searchState, false);
			return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
		};
	}
	/**
	Open the search panel if it isn't already open, and move the
	selection to the first match after the current main selection.
	Will wrap around to the start of the document when it reaches the
	end.
	*/
	const findNext = searchCommand((view, { query }) => {
		let { to } = view.state.selection.main;
		let next = query.nextMatch(view.state, to, to);
		if (!next)
			return false;
		let selection = state.EditorSelection.single(next.from, next.to);
		let config = view.state.facet(searchConfigFacet);
		view.dispatch({
			selection,
			effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
			userEvent: "select.search"
		});
		selectSearchInput(view);
		return true;
	});
	/**
	Move the selection to the previous instance of the search query,
	before the current main selection. Will wrap past the start
	of the document to start searching at the end again.
	*/
	const findPrevious = searchCommand((view, { query }) => {
		let { state: state$1 } = view, { from } = state$1.selection.main;
		let prev = query.prevMatch(state$1, from, from);
		if (!prev)
			return false;
		let selection = state.EditorSelection.single(prev.from, prev.to);
		let config = view.state.facet(searchConfigFacet);
		view.dispatch({
			selection,
			effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
			userEvent: "select.search"
		});
		selectSearchInput(view);
		return true;
	});
	/**
	Select all instances of the search query.
	*/
	const selectMatches = searchCommand((view, { query }) => {
		let ranges = query.matchAll(view.state, 1000);
		if (!ranges || !ranges.length)
			return false;
		view.dispatch({
			selection: state.EditorSelection.create(ranges.map(r => state.EditorSelection.range(r.from, r.to))),
			userEvent: "select.search.matches"
		});
		return true;
	});
	/**
	Select all instances of the currently selected text.
	*/
	const selectSelectionMatches = ({ state: state$1, dispatch }) => {
		let sel = state$1.selection;
		if (sel.ranges.length > 1 || sel.main.empty)
			return false;
		let { from, to } = sel.main;
		let ranges = [], main = 0;
		for (let cur = new SearchCursor(state$1.doc, state$1.sliceDoc(from, to)); !cur.next().done;) {
			if (ranges.length > 1000)
				return false;
			if (cur.value.from == from)
				main = ranges.length;
			ranges.push(state.EditorSelection.range(cur.value.from, cur.value.to));
		}
		dispatch(state$1.update({
			selection: state.EditorSelection.create(ranges, main),
			userEvent: "select.search.matches"
		}));
		return true;
	};
	/**
	Replace the current match of the search query.
	*/
	const replaceNext = searchCommand((view$1, { query }) => {
		let { state: state$1 } = view$1, { from, to } = state$1.selection.main;
		if (state$1.readOnly)
			return false;
		let next = query.nextMatch(state$1, from, from);
		if (!next)
			return false;
		let changes = [], selection, replacement;
		let effects = [];
		if (next.from == from && next.to == to) {
			replacement = state$1.toText(query.getReplacement(next));
			changes.push({ from: next.from, to: next.to, insert: replacement });
			next = query.nextMatch(state$1, next.from, next.to);
			effects.push(view.EditorView.announce.of(state$1.phrase("replaced match on line $", state$1.doc.lineAt(from).number) + "."));
		}
		if (next) {
			let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
			selection = state.EditorSelection.single(next.from - off, next.to - off);
			effects.push(announceMatch(view$1, next));
			effects.push(state$1.facet(searchConfigFacet).scrollToMatch(selection.main, view$1));
		}
		view$1.dispatch({
			changes, selection, effects,
			userEvent: "input.replace"
		});
		return true;
	});
	/**
	Replace all instances of the search query with the given
	replacement.
	*/
	const replaceAll = searchCommand((view$1, { query }) => {
		if (view$1.state.readOnly)
			return false;
		let changes = query.matchAll(view$1.state, 1e9).map(match => {
			let { from, to } = match;
			return { from, to, insert: query.getReplacement(match) };
		});
		if (!changes.length)
			return false;
		let announceText = view$1.state.phrase("replaced $ matches", changes.length) + ".";
		view$1.dispatch({
			changes,
			effects: view.EditorView.announce.of(announceText),
			userEvent: "input.replace.all"
		});
		return true;
	});
	function createSearchPanel(view) {
		return view.state.facet(searchConfigFacet).createPanel(view);
	}
	function defaultQuery(state, fallback) {
		var _a, _b, _c, _d, _e;
		let sel = state.selection.main;
		let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
		if (fallback && !selText)
			return fallback;
		let config = state.facet(searchConfigFacet);
		return new SearchQuery({
			search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
			caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
			literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
			regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
			wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
		});
	}
	function getSearchInput(view$1) {
		let panel = view.getPanel(view$1, createSearchPanel);
		return panel && panel.dom.querySelector("[main-field]");
	}
	function selectSearchInput(view) {
		let input = getSearchInput(view);
		if (input && input == view.root.activeElement)
			input.select();
	}
	/**
	Make sure the search panel is open and focused.
	*/
	const openSearchPanel = view => {
		let state$1 = view.state.field(searchState, false);
		if (state$1 && state$1.panel) {
			let searchInput = getSearchInput(view);
			if (searchInput && searchInput != view.root.activeElement) {
				let query = defaultQuery(view.state, state$1.query.spec);
				if (query.valid)
					view.dispatch({ effects: setSearchQuery.of(query) });
				searchInput.focus();
				searchInput.select();
			}
		}
		else {
			view.dispatch({ effects: [
					togglePanel.of(true),
					state$1 ? setSearchQuery.of(defaultQuery(view.state, state$1.query.spec)) : state.StateEffect.appendConfig.of(searchExtensions)
				] });
		}
		return true;
	};
	/**
	Close the search panel.
	*/
	const closeSearchPanel = view$1 => {
		let state = view$1.state.field(searchState, false);
		if (!state || !state.panel)
			return false;
		let panel = view.getPanel(view$1, createSearchPanel);
		if (panel && panel.dom.contains(view$1.root.activeElement))
			view$1.focus();
		view$1.dispatch({ effects: togglePanel.of(false) });
		return true;
	};
	/**
	Default search-related key bindings.
	
	 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
	 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
	 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
	 - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
	 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
	*/
	const searchKeymap = [
		{ key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
		{ key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
		{ key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
		{ key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
		{ key: "Mod-Shift-l", run: selectSelectionMatches },
		{ key: "Mod-Alt-g", run: gotoLine },
		{ key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
	];
	class SearchPanel {
		constructor(view) {
			this.view = view;
			let query = this.query = view.state.field(searchState).query.spec;
			this.commit = this.commit.bind(this);
			this.searchField = elt("input", {
				value: query.search,
				placeholder: phrase(view, "Find"),
				"aria-label": phrase(view, "Find"),
				class: "cm-textfield",
				name: "search",
				form: "",
				"main-field": "true",
				onchange: this.commit,
				onkeyup: this.commit
			});
			this.replaceField = elt("input", {
				value: query.replace,
				placeholder: phrase(view, "Replace"),
				"aria-label": phrase(view, "Replace"),
				class: "cm-textfield",
				name: "replace",
				form: "",
				onchange: this.commit,
				onkeyup: this.commit
			});
			this.caseField = elt("input", {
				type: "checkbox",
				name: "case",
				form: "",
				checked: query.caseSensitive,
				onchange: this.commit
			});
			this.reField = elt("input", {
				type: "checkbox",
				name: "re",
				form: "",
				checked: query.regexp,
				onchange: this.commit
			});
			this.wordField = elt("input", {
				type: "checkbox",
				name: "word",
				form: "",
				checked: query.wholeWord,
				onchange: this.commit
			});
			function button(name, onclick, content) {
				return elt("button", { class: "cm-button", name, onclick, type: "button" }, content);
			}
			this.dom = elt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
				this.searchField,
				button("next", () => findNext(view), [phrase(view, "next")]),
				button("prev", () => findPrevious(view), [phrase(view, "previous")]),
				button("select", () => selectMatches(view), [phrase(view, "all")]),
				elt("label", null, [this.caseField, phrase(view, "match case")]),
				elt("label", null, [this.reField, phrase(view, "regexp")]),
				elt("label", null, [this.wordField, phrase(view, "by word")]),
				...view.state.readOnly ? [] : [
					elt("br"),
					this.replaceField,
					button("replace", () => replaceNext(view), [phrase(view, "replace")]),
					button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
				],
				elt("button", {
					name: "close",
					onclick: () => closeSearchPanel(view),
					"aria-label": phrase(view, "close"),
					type: "button"
				}, ["×"])
			]);
		}
		commit() {
			let query = new SearchQuery({
				search: this.searchField.value,
				caseSensitive: this.caseField.checked,
				regexp: this.reField.checked,
				wholeWord: this.wordField.checked,
				replace: this.replaceField.value,
			});
			if (!query.eq(this.query)) {
				this.query = query;
				this.view.dispatch({ effects: setSearchQuery.of(query) });
			}
		}
		keydown(e) {
			if (view.runScopeHandlers(this.view, e, "search-panel")) {
				e.preventDefault();
			}
			else if (e.keyCode == 13 && e.target == this.searchField) {
				e.preventDefault();
				(e.shiftKey ? findPrevious : findNext)(this.view);
			}
			else if (e.keyCode == 13 && e.target == this.replaceField) {
				e.preventDefault();
				replaceNext(this.view);
			}
		}
		update(update) {
			for (let tr of update.transactions)
				for (let effect of tr.effects) {
					if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
						this.setQuery(effect.value);
				}
		}
		setQuery(query) {
			this.query = query;
			this.searchField.value = query.search;
			this.replaceField.value = query.replace;
			this.caseField.checked = query.caseSensitive;
			this.reField.checked = query.regexp;
			this.wordField.checked = query.wholeWord;
		}
		mount() {
			this.searchField.select();
		}
		get pos() { return 80; }
		get top() { return this.view.state.facet(searchConfigFacet).top; }
	}
	function phrase(view, phrase) { return view.state.phrase(phrase); }
	const AnnounceMargin = 30;
	const Break = /[\s\.,:;?!]/;
	function announceMatch(view$1, { from, to }) {
		let line = view$1.state.doc.lineAt(from), lineEnd = view$1.state.doc.lineAt(to).to;
		let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
		let text = view$1.state.sliceDoc(start, end);
		if (start != line.from) {
			for (let i = 0; i < AnnounceMargin; i++)
				if (!Break.test(text[i + 1]) && Break.test(text[i])) {
					text = text.slice(i);
					break;
				}
		}
		if (end != lineEnd) {
			for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
				if (!Break.test(text[i - 1]) && Break.test(text[i])) {
					text = text.slice(0, i);
					break;
				}
		}
		return view.EditorView.announce.of(`${view$1.state.phrase("current match")}. ${text} ${view$1.state.phrase("on line")} ${line.number}.`);
	}
	const baseTheme = view.EditorView.baseTheme({
		".cm-panel.cm-search": {
			padding: "2px 6px 4px",
			position: "relative",
			"& [name=close]": {
				position: "absolute",
				top: "0",
				right: "4px",
				backgroundColor: "inherit",
				border: "none",
				font: "inherit",
				padding: 0,
				margin: 0
			},
			"& input, & button, & label": {
				margin: ".2em .6em .2em 0"
			},
			"& input[type=checkbox]": {
				marginRight: ".2em"
			},
			"& label": {
				fontSize: "80%",
				whiteSpace: "pre"
			}
		},
		"&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
		"&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
		"&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
		"&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
	});
	const searchExtensions = [
		searchState,
		state.Prec.low(searchHighlighter),
		baseTheme
	];
	
	exports.RegExpCursor = RegExpCursor;
	exports.SearchCursor = SearchCursor;
	exports.SearchQuery = SearchQuery;
	exports.closeSearchPanel = closeSearchPanel;
	exports.findNext = findNext;
	exports.findPrevious = findPrevious;
	exports.getSearchQuery = getSearchQuery;
	exports.gotoLine = gotoLine;
	exports.highlightSelectionMatches = highlightSelectionMatches;
	exports.openSearchPanel = openSearchPanel;
	exports.replaceAll = replaceAll;
	exports.replaceNext = replaceNext;
	exports.search = search;
	exports.searchKeymap = searchKeymap;
	exports.searchPanelOpen = searchPanelOpen;
	exports.selectMatches = selectMatches;
	exports.selectNextOccurrence = selectNextOccurrence;
	exports.selectSelectionMatches = selectSelectionMatches;
	exports.setSearchQuery = setSearchQuery;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/state/dist/index.cjs":
	/*!***************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/state/dist/index.cjs ***!
	  \***************************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	/**
	The data structure for documents. @nonabstract
	*/
	class Text {
		/**
		Get the line description around the given position.
		*/
		lineAt(pos) {
			if (pos < 0 || pos > this.length)
				throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
			return this.lineInner(pos, false, 1, 0);
		}
		/**
		Get the description for the given (1-based) line number.
		*/
		line(n) {
			if (n < 1 || n > this.lines)
				throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
			return this.lineInner(n, true, 1, 0);
		}
		/**
		Replace a range of the text with the given content.
		*/
		replace(from, to, text) {
			[from, to] = clip(this, from, to);
			let parts = [];
			this.decompose(0, from, parts, 2 /* Open.To */);
			if (text.length)
				text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
			this.decompose(to, this.length, parts, 1 /* Open.From */);
			return TextNode.from(parts, this.length - (to - from) + text.length);
		}
		/**
		Append another document to this one.
		*/
		append(other) {
			return this.replace(this.length, this.length, other);
		}
		/**
		Retrieve the text between the given points.
		*/
		slice(from, to = this.length) {
			[from, to] = clip(this, from, to);
			let parts = [];
			this.decompose(from, to, parts, 0);
			return TextNode.from(parts, to - from);
		}
		/**
		Test whether this text is equal to another instance.
		*/
		eq(other) {
			if (other == this)
				return true;
			if (other.length != this.length || other.lines != this.lines)
				return false;
			let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
			let a = new RawTextCursor(this), b = new RawTextCursor(other);
			for (let skip = start, pos = start;;) {
				a.next(skip);
				b.next(skip);
				skip = 0;
				if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
					return false;
				pos += a.value.length;
				if (a.done || pos >= end)
					return true;
			}
		}
		/**
		Iterate over the text. When `dir` is `-1`, iteration happens
		from end to start. This will return lines and the breaks between
		them as separate strings.
		*/
		iter(dir = 1) { return new RawTextCursor(this, dir); }
		/**
		Iterate over a range of the text. When `from` > `to`, the
		iterator will run in reverse.
		*/
		iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
		/**
		Return a cursor that iterates over the given range of lines,
		_without_ returning the line breaks between, and yielding empty
		strings for empty lines.
		
		When `from` and `to` are given, they should be 1-based line numbers.
		*/
		iterLines(from, to) {
			let inner;
			if (from == null) {
				inner = this.iter();
			}
			else {
				if (to == null)
					to = this.lines + 1;
				let start = this.line(from).from;
				inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
			}
			return new LineCursor(inner);
		}
		/**
		Return the document as a string, using newline characters to
		separate lines.
		*/
		toString() { return this.sliceString(0); }
		/**
		Convert the document to an array of lines (which can be
		deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
		*/
		toJSON() {
			let lines = [];
			this.flatten(lines);
			return lines;
		}
		/**
		@internal
		*/
		constructor() { }
		/**
		Create a `Text` instance for the given array of lines.
		*/
		static of(text) {
			if (text.length == 0)
				throw new RangeError("A document must have at least one line");
			if (text.length == 1 && !text[0])
				return Text.empty;
			return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
		}
	}
	// Leaves store an array of line strings. There are always line breaks
	// between these strings. Leaves are limited in size and have to be
	// contained in TextNode instances for bigger documents.
	class TextLeaf extends Text {
		constructor(text, length = textLength(text)) {
			super();
			this.text = text;
			this.length = length;
		}
		get lines() { return this.text.length; }
		get children() { return null; }
		lineInner(target, isLine, line, offset) {
			for (let i = 0;; i++) {
				let string = this.text[i], end = offset + string.length;
				if ((isLine ? line : end) >= target)
					return new Line(offset, end, line, string);
				offset = end + 1;
				line++;
			}
		}
		decompose(from, to, target, open) {
			let text = from <= 0 && to >= this.length ? this
				: new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
			if (open & 1 /* Open.From */) {
				let prev = target.pop();
				let joined = appendText(text.text, prev.text.slice(), 0, text.length);
				if (joined.length <= 32 /* Tree.Branch */) {
					target.push(new TextLeaf(joined, prev.length + text.length));
				}
				else {
					let mid = joined.length >> 1;
					target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
				}
			}
			else {
				target.push(text);
			}
		}
		replace(from, to, text) {
			if (!(text instanceof TextLeaf))
				return super.replace(from, to, text);
			[from, to] = clip(this, from, to);
			let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
			let newLen = this.length + text.length - (to - from);
			if (lines.length <= 32 /* Tree.Branch */)
				return new TextLeaf(lines, newLen);
			return TextNode.from(TextLeaf.split(lines, []), newLen);
		}
		sliceString(from, to = this.length, lineSep = "\n") {
			[from, to] = clip(this, from, to);
			let result = "";
			for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
				let line = this.text[i], end = pos + line.length;
				if (pos > from && i)
					result += lineSep;
				if (from < end && to > pos)
					result += line.slice(Math.max(0, from - pos), to - pos);
				pos = end + 1;
			}
			return result;
		}
		flatten(target) {
			for (let line of this.text)
				target.push(line);
		}
		scanIdentical() { return 0; }
		static split(text, target) {
			let part = [], len = -1;
			for (let line of text) {
				part.push(line);
				len += line.length + 1;
				if (part.length == 32 /* Tree.Branch */) {
					target.push(new TextLeaf(part, len));
					part = [];
					len = -1;
				}
			}
			if (len > -1)
				target.push(new TextLeaf(part, len));
			return target;
		}
	}
	// Nodes provide the tree structure of the `Text` type. They store a
	// number of other nodes or leaves, taking care to balance themselves
	// on changes. There are implied line breaks _between_ the children of
	// a node (but not before the first or after the last child).
	class TextNode extends Text {
		constructor(children, length) {
			super();
			this.children = children;
			this.length = length;
			this.lines = 0;
			for (let child of children)
				this.lines += child.lines;
		}
		lineInner(target, isLine, line, offset) {
			for (let i = 0;; i++) {
				let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
				if ((isLine ? endLine : end) >= target)
					return child.lineInner(target, isLine, line, offset);
				offset = end + 1;
				line = endLine + 1;
			}
		}
		decompose(from, to, target, open) {
			for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
				let child = this.children[i], end = pos + child.length;
				if (from <= end && to >= pos) {
					let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
					if (pos >= from && end <= to && !childOpen)
						target.push(child);
					else
						child.decompose(from - pos, to - pos, target, childOpen);
				}
				pos = end + 1;
			}
		}
		replace(from, to, text) {
			[from, to] = clip(this, from, to);
			if (text.lines < this.lines)
				for (let i = 0, pos = 0; i < this.children.length; i++) {
					let child = this.children[i], end = pos + child.length;
					// Fast path: if the change only affects one child and the
					// child's size remains in the acceptable range, only update
					// that child
					if (from >= pos && to <= end) {
						let updated = child.replace(from - pos, to - pos, text);
						let totalLines = this.lines - child.lines + updated.lines;
						if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
							updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
							let copy = this.children.slice();
							copy[i] = updated;
							return new TextNode(copy, this.length - (to - from) + text.length);
						}
						return super.replace(pos, end, updated);
					}
					pos = end + 1;
				}
			return super.replace(from, to, text);
		}
		sliceString(from, to = this.length, lineSep = "\n") {
			[from, to] = clip(this, from, to);
			let result = "";
			for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
				let child = this.children[i], end = pos + child.length;
				if (pos > from && i)
					result += lineSep;
				if (from < end && to > pos)
					result += child.sliceString(from - pos, to - pos, lineSep);
				pos = end + 1;
			}
			return result;
		}
		flatten(target) {
			for (let child of this.children)
				child.flatten(target);
		}
		scanIdentical(other, dir) {
			if (!(other instanceof TextNode))
				return 0;
			let length = 0;
			let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
				: [this.children.length - 1, other.children.length - 1, -1, -1];
			for (;; iA += dir, iB += dir) {
				if (iA == eA || iB == eB)
					return length;
				let chA = this.children[iA], chB = other.children[iB];
				if (chA != chB)
					return length + chA.scanIdentical(chB, dir);
				length += chA.length + 1;
			}
		}
		static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
			let lines = 0;
			for (let ch of children)
				lines += ch.lines;
			if (lines < 32 /* Tree.Branch */) {
				let flat = [];
				for (let ch of children)
					ch.flatten(flat);
				return new TextLeaf(flat, length);
			}
			let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
			let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
			function add(child) {
				let last;
				if (child.lines > maxChunk && child instanceof TextNode) {
					for (let node of child.children)
						add(node);
				}
				else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
					flush();
					chunked.push(child);
				}
				else if (child instanceof TextLeaf && currentLines &&
					(last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
					child.lines + last.lines <= 32 /* Tree.Branch */) {
					currentLines += child.lines;
					currentLen += child.length + 1;
					currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
				}
				else {
					if (currentLines + child.lines > chunk)
						flush();
					currentLines += child.lines;
					currentLen += child.length + 1;
					currentChunk.push(child);
				}
			}
			function flush() {
				if (currentLines == 0)
					return;
				chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
				currentLen = -1;
				currentLines = currentChunk.length = 0;
			}
			for (let child of children)
				add(child);
			flush();
			return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
		}
	}
	Text.empty = new TextLeaf([""], 0);
	function textLength(text) {
		let length = -1;
		for (let line of text)
			length += line.length + 1;
		return length;
	}
	function appendText(text, target, from = 0, to = 1e9) {
		for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
			let line = text[i], end = pos + line.length;
			if (end >= from) {
				if (end > to)
					line = line.slice(0, to - pos);
				if (pos < from)
					line = line.slice(from - pos);
				if (first) {
					target[target.length - 1] += line;
					first = false;
				}
				else
					target.push(line);
			}
			pos = end + 1;
		}
		return target;
	}
	function sliceText(text, from, to) {
		return appendText(text, [""], from, to);
	}
	class RawTextCursor {
		constructor(text, dir = 1) {
			this.dir = dir;
			this.done = false;
			this.lineBreak = false;
			this.value = "";
			this.nodes = [text];
			this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
		}
		nextInner(skip, dir) {
			this.done = this.lineBreak = false;
			for (;;) {
				let last = this.nodes.length - 1;
				let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
				let size = top instanceof TextLeaf ? top.text.length : top.children.length;
				if (offset == (dir > 0 ? size : 0)) {
					if (last == 0) {
						this.done = true;
						this.value = "";
						return this;
					}
					if (dir > 0)
						this.offsets[last - 1]++;
					this.nodes.pop();
					this.offsets.pop();
				}
				else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
					this.offsets[last] += dir;
					if (skip == 0) {
						this.lineBreak = true;
						this.value = "\n";
						return this;
					}
					skip--;
				}
				else if (top instanceof TextLeaf) {
					// Move to the next string
					let next = top.text[offset + (dir < 0 ? -1 : 0)];
					this.offsets[last] += dir;
					if (next.length > Math.max(0, skip)) {
						this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
						return this;
					}
					skip -= next.length;
				}
				else {
					let next = top.children[offset + (dir < 0 ? -1 : 0)];
					if (skip > next.length) {
						skip -= next.length;
						this.offsets[last] += dir;
					}
					else {
						if (dir < 0)
							this.offsets[last]--;
						this.nodes.push(next);
						this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
					}
				}
			}
		}
		next(skip = 0) {
			if (skip < 0) {
				this.nextInner(-skip, (-this.dir));
				skip = this.value.length;
			}
			return this.nextInner(skip, this.dir);
		}
	}
	class PartialTextCursor {
		constructor(text, start, end) {
			this.value = "";
			this.done = false;
			this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
			this.pos = start > end ? text.length : 0;
			this.from = Math.min(start, end);
			this.to = Math.max(start, end);
		}
		nextInner(skip, dir) {
			if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
				this.value = "";
				this.done = true;
				return this;
			}
			skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
			let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
			if (skip > limit)
				skip = limit;
			limit -= skip;
			let { value } = this.cursor.next(skip);
			this.pos += (value.length + skip) * dir;
			this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
			this.done = !this.value;
			return this;
		}
		next(skip = 0) {
			if (skip < 0)
				skip = Math.max(skip, this.from - this.pos);
			else if (skip > 0)
				skip = Math.min(skip, this.to - this.pos);
			return this.nextInner(skip, this.cursor.dir);
		}
		get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
	}
	class LineCursor {
		constructor(inner) {
			this.inner = inner;
			this.afterBreak = true;
			this.value = "";
			this.done = false;
		}
		next(skip = 0) {
			let { done, lineBreak, value } = this.inner.next(skip);
			if (done && this.afterBreak) {
				this.value = "";
				this.afterBreak = false;
			}
			else if (done) {
				this.done = true;
				this.value = "";
			}
			else if (lineBreak) {
				if (this.afterBreak) {
					this.value = "";
				}
				else {
					this.afterBreak = true;
					this.next();
				}
			}
			else {
				this.value = value;
				this.afterBreak = false;
			}
			return this;
		}
		get lineBreak() { return false; }
	}
	if (typeof Symbol != "undefined") {
		Text.prototype[Symbol.iterator] = function () { return this.iter(); };
		RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
			LineCursor.prototype[Symbol.iterator] = function () { return this; };
	}
	/**
	This type describes a line in the document. It is created
	on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
	*/
	class Line {
		/**
		@internal
		*/
		constructor(
		/**
		The position of the start of the line.
		*/
		from, 
		/**
		The position at the end of the line (_before_ the line break,
		or at the end of document for the last line).
		*/
		to, 
		/**
		This line's line number (1-based).
		*/
		number, 
		/**
		The line's content.
		*/
		text) {
			this.from = from;
			this.to = to;
			this.number = number;
			this.text = text;
		}
		/**
		The length of the line (not including any line break after it).
		*/
		get length() { return this.to - this.from; }
	}
	function clip(text, from, to) {
		from = Math.max(0, Math.min(text.length, from));
		return [from, Math.max(from, Math.min(text.length, to))];
	}
	
	// Compressed representation of the Grapheme_Cluster_Break=Extend
	// information from
	// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
	// Each pair of elements represents a range, as an offet from the
	// previous range and a length. Numbers are in base-36, with the empty
	// string being a shorthand for 1.
	let extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
	// Convert offsets into absolute values
	for (let i = 1; i < extend.length; i++)
		extend[i] += extend[i - 1];
	function isExtendingChar(code) {
		for (let i = 1; i < extend.length; i += 2)
			if (extend[i] > code)
				return extend[i - 1] <= code;
		return false;
	}
	function isRegionalIndicator(code) {
		return code >= 0x1F1E6 && code <= 0x1F1FF;
	}
	const ZWJ = 0x200d;
	/**
	Returns a next grapheme cluster break _after_ (not equal to)
	`pos`, if `forward` is true, or before otherwise. Returns `pos`
	itself if no further cluster break is available in the string.
	Moves across surrogate pairs, extending characters (when
	`includeExtending` is true), characters joined with zero-width
	joiners, and flag emoji.
	*/
	function findClusterBreak(str, pos, forward = true, includeExtending = true) {
		return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
	}
	function nextClusterBreak(str, pos, includeExtending) {
		if (pos == str.length)
			return pos;
		// If pos is in the middle of a surrogate pair, move to its start
		if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
			pos--;
		let prev = codePointAt(str, pos);
		pos += codePointSize(prev);
		while (pos < str.length) {
			let next = codePointAt(str, pos);
			if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
				pos += codePointSize(next);
				prev = next;
			}
			else if (isRegionalIndicator(next)) {
				let countBefore = 0, i = pos - 2;
				while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
					countBefore++;
					i -= 2;
				}
				if (countBefore % 2 == 0)
					break;
				else
					pos += 2;
			}
			else {
				break;
			}
		}
		return pos;
	}
	function prevClusterBreak(str, pos, includeExtending) {
		while (pos > 0) {
			let found = nextClusterBreak(str, pos - 2, includeExtending);
			if (found < pos)
				return found;
			pos--;
		}
		return 0;
	}
	function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
	function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
	/**
	Find the code point at the given position in a string (like the
	[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
	string method).
	*/
	function codePointAt(str, pos) {
		let code0 = str.charCodeAt(pos);
		if (!surrogateHigh(code0) || pos + 1 == str.length)
			return code0;
		let code1 = str.charCodeAt(pos + 1);
		if (!surrogateLow(code1))
			return code0;
		return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
	}
	/**
	Given a Unicode codepoint, return the JavaScript string that
	respresents it (like
	[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
	*/
	function fromCodePoint(code) {
		if (code <= 0xffff)
			return String.fromCharCode(code);
		code -= 0x10000;
		return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
	}
	/**
	The amount of positions a character takes up a JavaScript string.
	*/
	function codePointSize(code) { return code < 0x10000 ? 1 : 2; }
	
	const DefaultSplit = /\r\n?|\n/;
	/**
	Distinguishes different ways in which positions can be mapped.
	*/
	exports.MapMode = void 0;
	(function (MapMode) {
		/**
		Map a position to a valid new position, even when its context
		was deleted.
		*/
		MapMode[MapMode["Simple"] = 0] = "Simple";
		/**
		Return null if deletion happens across the position.
		*/
		MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
		/**
		Return null if the character _before_ the position is deleted.
		*/
		MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
		/**
		Return null if the character _after_ the position is deleted.
		*/
		MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
	})(exports.MapMode || (exports.MapMode = {}));
	/**
	A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
	that doesn't store the inserted text. As such, it can't be
	applied, but is cheaper to store and manipulate.
	*/
	class ChangeDesc {
		// Sections are encoded as pairs of integers. The first is the
		// length in the current document, and the second is -1 for
		// unaffected sections, and the length of the replacement content
		// otherwise. So an insertion would be (0, n>0), a deletion (n>0,
		// 0), and a replacement two positive numbers.
		/**
		@internal
		*/
		constructor(
		/**
		@internal
		*/
		sections) {
			this.sections = sections;
		}
		/**
		The length of the document before the change.
		*/
		get length() {
			let result = 0;
			for (let i = 0; i < this.sections.length; i += 2)
				result += this.sections[i];
			return result;
		}
		/**
		The length of the document after the change.
		*/
		get newLength() {
			let result = 0;
			for (let i = 0; i < this.sections.length; i += 2) {
				let ins = this.sections[i + 1];
				result += ins < 0 ? this.sections[i] : ins;
			}
			return result;
		}
		/**
		False when there are actual changes in this set.
		*/
		get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
		/**
		Iterate over the unchanged parts left by these changes. `posA`
		provides the position of the range in the old document, `posB`
		the new position in the changed document.
		*/
		iterGaps(f) {
			for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
				let len = this.sections[i++], ins = this.sections[i++];
				if (ins < 0) {
					f(posA, posB, len);
					posB += len;
				}
				else {
					posB += ins;
				}
				posA += len;
			}
		}
		/**
		Iterate over the ranges changed by these changes. (See
		[`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
		variant that also provides you with the inserted text.)
		`fromA`/`toA` provides the extent of the change in the starting
		document, `fromB`/`toB` the extent of the replacement in the
		changed document.
		
		When `individual` is true, adjacent changes (which are kept
		separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
		reported separately.
		*/
		iterChangedRanges(f, individual = false) {
			iterChanges(this, f, individual);
		}
		/**
		Get a description of the inverted form of these changes.
		*/
		get invertedDesc() {
			let sections = [];
			for (let i = 0; i < this.sections.length;) {
				let len = this.sections[i++], ins = this.sections[i++];
				if (ins < 0)
					sections.push(len, ins);
				else
					sections.push(ins, len);
			}
			return new ChangeDesc(sections);
		}
		/**
		Compute the combined effect of applying another set of changes
		after this one. The length of the document after this set should
		match the length before `other`.
		*/
		composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
		/**
		Map this description, which should start with the same document
		as `other`, over another set of changes, so that it can be
		applied after it. When `before` is true, map as if the changes
		in `other` happened before the ones in `this`.
		*/
		mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
		mapPos(pos, assoc = -1, mode = exports.MapMode.Simple) {
			let posA = 0, posB = 0;
			for (let i = 0; i < this.sections.length;) {
				let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
				if (ins < 0) {
					if (endA > pos)
						return posB + (pos - posA);
					posB += len;
				}
				else {
					if (mode != exports.MapMode.Simple && endA >= pos &&
						(mode == exports.MapMode.TrackDel && posA < pos && endA > pos ||
							mode == exports.MapMode.TrackBefore && posA < pos ||
							mode == exports.MapMode.TrackAfter && endA > pos))
						return null;
					if (endA > pos || endA == pos && assoc < 0 && !len)
						return pos == posA || assoc < 0 ? posB : posB + ins;
					posB += ins;
				}
				posA = endA;
			}
			if (pos > posA)
				throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
			return posB;
		}
		/**
		Check whether these changes touch a given range. When one of the
		changes entirely covers the range, the string `"cover"` is
		returned.
		*/
		touchesRange(from, to = from) {
			for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
				let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
				if (ins >= 0 && pos <= to && end >= from)
					return pos < from && end > to ? "cover" : true;
				pos = end;
			}
			return false;
		}
		/**
		@internal
		*/
		toString() {
			let result = "";
			for (let i = 0; i < this.sections.length;) {
				let len = this.sections[i++], ins = this.sections[i++];
				result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
			}
			return result;
		}
		/**
		Serialize this change desc to a JSON-representable value.
		*/
		toJSON() { return this.sections; }
		/**
		Create a change desc from its JSON representation (as produced
		by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
		*/
		static fromJSON(json) {
			if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
				throw new RangeError("Invalid JSON representation of ChangeDesc");
			return new ChangeDesc(json);
		}
		/**
		@internal
		*/
		static create(sections) { return new ChangeDesc(sections); }
	}
	/**
	A change set represents a group of modifications to a document. It
	stores the document length, and can only be applied to documents
	with exactly that length.
	*/
	class ChangeSet extends ChangeDesc {
		constructor(sections, 
		/**
		@internal
		*/
		inserted) {
			super(sections);
			this.inserted = inserted;
		}
		/**
		Apply the changes to a document, returning the modified
		document.
		*/
		apply(doc) {
			if (this.length != doc.length)
				throw new RangeError("Applying change set to a document with the wrong length");
			iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
			return doc;
		}
		mapDesc(other, before = false) { return mapSet(this, other, before, true); }
		/**
		Given the document as it existed _before_ the changes, return a
		change set that represents the inverse of this set, which could
		be used to go from the document created by the changes back to
		the document as it existed before the changes.
		*/
		invert(doc) {
			let sections = this.sections.slice(), inserted = [];
			for (let i = 0, pos = 0; i < sections.length; i += 2) {
				let len = sections[i], ins = sections[i + 1];
				if (ins >= 0) {
					sections[i] = ins;
					sections[i + 1] = len;
					let index = i >> 1;
					while (inserted.length < index)
						inserted.push(Text.empty);
					inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
				}
				pos += len;
			}
			return new ChangeSet(sections, inserted);
		}
		/**
		Combine two subsequent change sets into a single set. `other`
		must start in the document produced by `this`. If `this` goes
		`docA` → `docB` and `other` represents `docB` → `docC`, the
		returned value will represent the change `docA` → `docC`.
		*/
		compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
		/**
		Given another change set starting in the same document, maps this
		change set over the other, producing a new change set that can be
		applied to the document produced by applying `other`. When
		`before` is `true`, order changes as if `this` comes before
		`other`, otherwise (the default) treat `other` as coming first.
		
		Given two changes `A` and `B`, `A.compose(B.map(A))` and
		`B.compose(A.map(B, true))` will produce the same document. This
		provides a basic form of [operational
		transformation](https://en.wikipedia.org/wiki/Operational_transformation),
		and can be used for collaborative editing.
		*/
		map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
		/**
		Iterate over the changed ranges in the document, calling `f` for
		each, with the range in the original document (`fromA`-`toA`)
		and the range that replaces it in the new document
		(`fromB`-`toB`).
		
		When `individual` is true, adjacent changes are reported
		separately.
		*/
		iterChanges(f, individual = false) {
			iterChanges(this, f, individual);
		}
		/**
		Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
		set.
		*/
		get desc() { return ChangeDesc.create(this.sections); }
		/**
		@internal
		*/
		filter(ranges) {
			let resultSections = [], resultInserted = [], filteredSections = [];
			let iter = new SectionIter(this);
			done: for (let i = 0, pos = 0;;) {
				let next = i == ranges.length ? 1e9 : ranges[i++];
				while (pos < next || pos == next && iter.len == 0) {
					if (iter.done)
						break done;
					let len = Math.min(iter.len, next - pos);
					addSection(filteredSections, len, -1);
					let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
					addSection(resultSections, len, ins);
					if (ins > 0)
						addInsert(resultInserted, resultSections, iter.text);
					iter.forward(len);
					pos += len;
				}
				let end = ranges[i++];
				while (pos < end) {
					if (iter.done)
						break done;
					let len = Math.min(iter.len, end - pos);
					addSection(resultSections, len, -1);
					addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
					iter.forward(len);
					pos += len;
				}
			}
			return { changes: new ChangeSet(resultSections, resultInserted),
				filtered: ChangeDesc.create(filteredSections) };
		}
		/**
		Serialize this change set to a JSON-representable value.
		*/
		toJSON() {
			let parts = [];
			for (let i = 0; i < this.sections.length; i += 2) {
				let len = this.sections[i], ins = this.sections[i + 1];
				if (ins < 0)
					parts.push(len);
				else if (ins == 0)
					parts.push([len]);
				else
					parts.push([len].concat(this.inserted[i >> 1].toJSON()));
			}
			return parts;
		}
		/**
		Create a change set for the given changes, for a document of the
		given length, using `lineSep` as line separator.
		*/
		static of(changes, length, lineSep) {
			let sections = [], inserted = [], pos = 0;
			let total = null;
			function flush(force = false) {
				if (!force && !sections.length)
					return;
				if (pos < length)
					addSection(sections, length - pos, -1);
				let set = new ChangeSet(sections, inserted);
				total = total ? total.compose(set.map(total)) : set;
				sections = [];
				inserted = [];
				pos = 0;
			}
			function process(spec) {
				if (Array.isArray(spec)) {
					for (let sub of spec)
						process(sub);
				}
				else if (spec instanceof ChangeSet) {
					if (spec.length != length)
						throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
					flush();
					total = total ? total.compose(spec.map(total)) : spec;
				}
				else {
					let { from, to = from, insert } = spec;
					if (from > to || from < 0 || to > length)
						throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
					let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
					let insLen = insText.length;
					if (from == to && insLen == 0)
						return;
					if (from < pos)
						flush();
					if (from > pos)
						addSection(sections, from - pos, -1);
					addSection(sections, to - from, insLen);
					addInsert(inserted, sections, insText);
					pos = to;
				}
			}
			process(changes);
			flush(!total);
			return total;
		}
		/**
		Create an empty changeset of the given length.
		*/
		static empty(length) {
			return new ChangeSet(length ? [length, -1] : [], []);
		}
		/**
		Create a changeset from its JSON representation (as produced by
		[`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
		*/
		static fromJSON(json) {
			if (!Array.isArray(json))
				throw new RangeError("Invalid JSON representation of ChangeSet");
			let sections = [], inserted = [];
			for (let i = 0; i < json.length; i++) {
				let part = json[i];
				if (typeof part == "number") {
					sections.push(part, -1);
				}
				else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
					throw new RangeError("Invalid JSON representation of ChangeSet");
				}
				else if (part.length == 1) {
					sections.push(part[0], 0);
				}
				else {
					while (inserted.length < i)
						inserted.push(Text.empty);
					inserted[i] = Text.of(part.slice(1));
					sections.push(part[0], inserted[i].length);
				}
			}
			return new ChangeSet(sections, inserted);
		}
		/**
		@internal
		*/
		static createSet(sections, inserted) {
			return new ChangeSet(sections, inserted);
		}
	}
	function addSection(sections, len, ins, forceJoin = false) {
		if (len == 0 && ins <= 0)
			return;
		let last = sections.length - 2;
		if (last >= 0 && ins <= 0 && ins == sections[last + 1])
			sections[last] += len;
		else if (len == 0 && sections[last] == 0)
			sections[last + 1] += ins;
		else if (forceJoin) {
			sections[last] += len;
			sections[last + 1] += ins;
		}
		else
			sections.push(len, ins);
	}
	function addInsert(values, sections, value) {
		if (value.length == 0)
			return;
		let index = (sections.length - 2) >> 1;
		if (index < values.length) {
			values[values.length - 1] = values[values.length - 1].append(value);
		}
		else {
			while (values.length < index)
				values.push(Text.empty);
			values.push(value);
		}
	}
	function iterChanges(desc, f, individual) {
		let inserted = desc.inserted;
		for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
			let len = desc.sections[i++], ins = desc.sections[i++];
			if (ins < 0) {
				posA += len;
				posB += len;
			}
			else {
				let endA = posA, endB = posB, text = Text.empty;
				for (;;) {
					endA += len;
					endB += ins;
					if (ins && inserted)
						text = text.append(inserted[(i - 2) >> 1]);
					if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
						break;
					len = desc.sections[i++];
					ins = desc.sections[i++];
				}
				f(posA, endA, posB, endB, text);
				posA = endA;
				posB = endB;
			}
		}
	}
	function mapSet(setA, setB, before, mkSet = false) {
		// Produce a copy of setA that applies to the document after setB
		// has been applied (assuming both start at the same document).
		let sections = [], insert = mkSet ? [] : null;
		let a = new SectionIter(setA), b = new SectionIter(setB);
		// Iterate over both sets in parallel. inserted tracks, for changes
		// in A that have to be processed piece-by-piece, whether their
		// content has been inserted already, and refers to the section
		// index.
		for (let inserted = -1;;) {
			if (a.ins == -1 && b.ins == -1) {
				// Move across ranges skipped by both sets.
				let len = Math.min(a.len, b.len);
				addSection(sections, len, -1);
				a.forward(len);
				b.forward(len);
			}
			else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
				// If there's a change in B that comes before the next change in
				// A (ordered by start pos, then len, then before flag), skip
				// that (and process any changes in A it covers).
				let len = b.len;
				addSection(sections, b.ins, -1);
				while (len) {
					let piece = Math.min(a.len, len);
					if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
						addSection(sections, 0, a.ins);
						if (insert)
							addInsert(insert, sections, a.text);
						inserted = a.i;
					}
					a.forward(piece);
					len -= piece;
				}
				b.next();
			}
			else if (a.ins >= 0) {
				// Process the part of a change in A up to the start of the next
				// non-deletion change in B (if overlapping).
				let len = 0, left = a.len;
				while (left) {
					if (b.ins == -1) {
						let piece = Math.min(left, b.len);
						len += piece;
						left -= piece;
						b.forward(piece);
					}
					else if (b.ins == 0 && b.len < left) {
						left -= b.len;
						b.next();
					}
					else {
						break;
					}
				}
				addSection(sections, len, inserted < a.i ? a.ins : 0);
				if (insert && inserted < a.i)
					addInsert(insert, sections, a.text);
				inserted = a.i;
				a.forward(a.len - left);
			}
			else if (a.done && b.done) {
				return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
			}
			else {
				throw new Error("Mismatched change set lengths");
			}
		}
	}
	function composeSets(setA, setB, mkSet = false) {
		let sections = [];
		let insert = mkSet ? [] : null;
		let a = new SectionIter(setA), b = new SectionIter(setB);
		for (let open = false;;) {
			if (a.done && b.done) {
				return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
			}
			else if (a.ins == 0) { // Deletion in A
				addSection(sections, a.len, 0, open);
				a.next();
			}
			else if (b.len == 0 && !b.done) { // Insertion in B
				addSection(sections, 0, b.ins, open);
				if (insert)
					addInsert(insert, sections, b.text);
				b.next();
			}
			else if (a.done || b.done) {
				throw new Error("Mismatched change set lengths");
			}
			else {
				let len = Math.min(a.len2, b.len), sectionLen = sections.length;
				if (a.ins == -1) {
					let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
					addSection(sections, len, insB, open);
					if (insert && insB)
						addInsert(insert, sections, b.text);
				}
				else if (b.ins == -1) {
					addSection(sections, a.off ? 0 : a.len, len, open);
					if (insert)
						addInsert(insert, sections, a.textBit(len));
				}
				else {
					addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
					if (insert && !b.off)
						addInsert(insert, sections, b.text);
				}
				open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
				a.forward2(len);
				b.forward(len);
			}
		}
	}
	class SectionIter {
		constructor(set) {
			this.set = set;
			this.i = 0;
			this.next();
		}
		next() {
			let { sections } = this.set;
			if (this.i < sections.length) {
				this.len = sections[this.i++];
				this.ins = sections[this.i++];
			}
			else {
				this.len = 0;
				this.ins = -2;
			}
			this.off = 0;
		}
		get done() { return this.ins == -2; }
		get len2() { return this.ins < 0 ? this.len : this.ins; }
		get text() {
			let { inserted } = this.set, index = (this.i - 2) >> 1;
			return index >= inserted.length ? Text.empty : inserted[index];
		}
		textBit(len) {
			let { inserted } = this.set, index = (this.i - 2) >> 1;
			return index >= inserted.length && !len ? Text.empty
				: inserted[index].slice(this.off, len == null ? undefined : this.off + len);
		}
		forward(len) {
			if (len == this.len)
				this.next();
			else {
				this.len -= len;
				this.off += len;
			}
		}
		forward2(len) {
			if (this.ins == -1)
				this.forward(len);
			else if (len == this.ins)
				this.next();
			else {
				this.ins -= len;
				this.off += len;
			}
		}
	}
	
	/**
	A single selection range. When
	[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
	is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
	multiple ranges. By default, selections hold exactly one range.
	*/
	class SelectionRange {
		constructor(
		/**
		The lower boundary of the range.
		*/
		from, 
		/**
		The upper boundary of the range.
		*/
		to, flags) {
			this.from = from;
			this.to = to;
			this.flags = flags;
		}
		/**
		The anchor of the range—the side that doesn't move when you
		extend it.
		*/
		get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
		/**
		The head of the range, which is moved when the range is
		[extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
		*/
		get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
		/**
		True when `anchor` and `head` are at the same position.
		*/
		get empty() { return this.from == this.to; }
		/**
		If this is a cursor that is explicitly associated with the
		character on one of its sides, this returns the side. -1 means
		the character before its position, 1 the character after, and 0
		means no association.
		*/
		get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
		/**
		The bidirectional text level associated with this cursor, if
		any.
		*/
		get bidiLevel() {
			let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
			return level == 7 ? null : level;
		}
		/**
		The goal column (stored vertical offset) associated with a
		cursor. This is used to preserve the vertical position when
		[moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
		lines of different length.
		*/
		get goalColumn() {
			let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
			return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
		}
		/**
		Map this range through a change, producing a valid range in the
		updated document.
		*/
		map(change, assoc = -1) {
			let from, to;
			if (this.empty) {
				from = to = change.mapPos(this.from, assoc);
			}
			else {
				from = change.mapPos(this.from, 1);
				to = change.mapPos(this.to, -1);
			}
			return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
		}
		/**
		Extend this range to cover at least `from` to `to`.
		*/
		extend(from, to = from) {
			if (from <= this.anchor && to >= this.anchor)
				return EditorSelection.range(from, to);
			let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
			return EditorSelection.range(this.anchor, head);
		}
		/**
		Compare this range to another range.
		*/
		eq(other) {
			return this.anchor == other.anchor && this.head == other.head;
		}
		/**
		Return a JSON-serializable object representing the range.
		*/
		toJSON() { return { anchor: this.anchor, head: this.head }; }
		/**
		Convert a JSON representation of a range to a `SelectionRange`
		instance.
		*/
		static fromJSON(json) {
			if (!json || typeof json.anchor != "number" || typeof json.head != "number")
				throw new RangeError("Invalid JSON representation for SelectionRange");
			return EditorSelection.range(json.anchor, json.head);
		}
		/**
		@internal
		*/
		static create(from, to, flags) {
			return new SelectionRange(from, to, flags);
		}
	}
	/**
	An editor selection holds one or more selection ranges.
	*/
	class EditorSelection {
		constructor(
		/**
		The ranges in the selection, sorted by position. Ranges cannot
		overlap (but they may touch, if they aren't empty).
		*/
		ranges, 
		/**
		The index of the _main_ range in the selection (which is
		usually the range that was added last).
		*/
		mainIndex) {
			this.ranges = ranges;
			this.mainIndex = mainIndex;
		}
		/**
		Map a selection through a change. Used to adjust the selection
		position for changes.
		*/
		map(change, assoc = -1) {
			if (change.empty)
				return this;
			return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
		}
		/**
		Compare this selection to another selection.
		*/
		eq(other) {
			if (this.ranges.length != other.ranges.length ||
				this.mainIndex != other.mainIndex)
				return false;
			for (let i = 0; i < this.ranges.length; i++)
				if (!this.ranges[i].eq(other.ranges[i]))
					return false;
			return true;
		}
		/**
		Get the primary selection range. Usually, you should make sure
		your code applies to _all_ ranges, by using methods like
		[`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
		*/
		get main() { return this.ranges[this.mainIndex]; }
		/**
		Make sure the selection only has one range. Returns a selection
		holding only the main range from this selection.
		*/
		asSingle() {
			return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
		}
		/**
		Extend this selection with an extra range.
		*/
		addRange(range, main = true) {
			return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
		}
		/**
		Replace a given range with another range, and then normalize the
		selection to merge and sort ranges if necessary.
		*/
		replaceRange(range, which = this.mainIndex) {
			let ranges = this.ranges.slice();
			ranges[which] = range;
			return EditorSelection.create(ranges, this.mainIndex);
		}
		/**
		Convert this selection to an object that can be serialized to
		JSON.
		*/
		toJSON() {
			return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
		}
		/**
		Create a selection from a JSON representation.
		*/
		static fromJSON(json) {
			if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
				throw new RangeError("Invalid JSON representation for EditorSelection");
			return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
		}
		/**
		Create a selection holding a single range.
		*/
		static single(anchor, head = anchor) {
			return new EditorSelection([EditorSelection.range(anchor, head)], 0);
		}
		/**
		Sort and merge the given set of ranges, creating a valid
		selection.
		*/
		static create(ranges, mainIndex = 0) {
			if (ranges.length == 0)
				throw new RangeError("A selection needs at least one range");
			for (let pos = 0, i = 0; i < ranges.length; i++) {
				let range = ranges[i];
				if (range.empty ? range.from <= pos : range.from < pos)
					return EditorSelection.normalized(ranges.slice(), mainIndex);
				pos = range.to;
			}
			return new EditorSelection(ranges, mainIndex);
		}
		/**
		Create a cursor selection range at the given position. You can
		safely ignore the optional arguments in most situations.
		*/
		static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
			return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
				(bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
				((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
		}
		/**
		Create a selection range.
		*/
		static range(anchor, head, goalColumn, bidiLevel) {
			let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
				(bidiLevel == null ? 7 : Math.min(6, bidiLevel));
			return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
				: SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
		}
		/**
		@internal
		*/
		static normalized(ranges, mainIndex = 0) {
			let main = ranges[mainIndex];
			ranges.sort((a, b) => a.from - b.from);
			mainIndex = ranges.indexOf(main);
			for (let i = 1; i < ranges.length; i++) {
				let range = ranges[i], prev = ranges[i - 1];
				if (range.empty ? range.from <= prev.to : range.from < prev.to) {
					let from = prev.from, to = Math.max(range.to, prev.to);
					if (i <= mainIndex)
						mainIndex--;
					ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
				}
			}
			return new EditorSelection(ranges, mainIndex);
		}
	}
	function checkSelection(selection, docLength) {
		for (let range of selection.ranges)
			if (range.to > docLength)
				throw new RangeError("Selection points outside of document");
	}
	
	let nextID = 0;
	/**
	A facet is a labeled value that is associated with an editor
	state. It takes inputs from any number of extensions, and combines
	those into a single output value.
	
	Examples of uses of facets are the [tab
	size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
	attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
	listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
	
	Note that `Facet` instances can be used anywhere where
	[`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
	*/
	class Facet {
		constructor(
		/**
		@internal
		*/
		combine, 
		/**
		@internal
		*/
		compareInput, 
		/**
		@internal
		*/
		compare, isStatic, enables) {
			this.combine = combine;
			this.compareInput = compareInput;
			this.compare = compare;
			this.isStatic = isStatic;
			/**
			@internal
			*/
			this.id = nextID++;
			this.default = combine([]);
			this.extensions = typeof enables == "function" ? enables(this) : enables;
		}
		/**
		Returns a facet reader for this facet, which can be used to
		[read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
		*/
		get reader() { return this; }
		/**
		Define a new facet.
		*/
		static define(config = {}) {
			return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
		}
		/**
		Returns an extension that adds the given value to this facet.
		*/
		of(value) {
			return new FacetProvider([], this, 0 /* Provider.Static */, value);
		}
		/**
		Create an extension that computes a value for the facet from a
		state. You must take care to declare the parts of the state that
		this value depends on, since your function is only called again
		for a new state when one of those parts changed.
		
		In cases where your value depends only on a single field, you'll
		want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
		*/
		compute(deps, get) {
			if (this.isStatic)
				throw new Error("Can't compute a static facet");
			return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
		}
		/**
		Create an extension that computes zero or more values for this
		facet from a state.
		*/
		computeN(deps, get) {
			if (this.isStatic)
				throw new Error("Can't compute a static facet");
			return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
		}
		from(field, get) {
			if (!get)
				get = x => x;
			return this.compute([field], state => get(state.field(field)));
		}
	}
	function sameArray(a, b) {
		return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
	}
	class FacetProvider {
		constructor(dependencies, facet, type, value) {
			this.dependencies = dependencies;
			this.facet = facet;
			this.type = type;
			this.value = value;
			this.id = nextID++;
		}
		dynamicSlot(addresses) {
			var _a;
			let getter = this.value;
			let compare = this.facet.compareInput;
			let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
			let depDoc = false, depSel = false, depAddrs = [];
			for (let dep of this.dependencies) {
				if (dep == "doc")
					depDoc = true;
				else if (dep == "selection")
					depSel = true;
				else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
					depAddrs.push(addresses[dep.id]);
			}
			return {
				create(state) {
					state.values[idx] = getter(state);
					return 1 /* SlotStatus.Changed */;
				},
				update(state, tr) {
					if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
						let newVal = getter(state);
						if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
							state.values[idx] = newVal;
							return 1 /* SlotStatus.Changed */;
						}
					}
					return 0;
				},
				reconfigure: (state, oldState) => {
					let newVal, oldAddr = oldState.config.address[id];
					if (oldAddr != null) {
						let oldVal = getAddr(oldState, oldAddr);
						if (this.dependencies.every(dep => {
							return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
								dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
						}) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
							state.values[idx] = oldVal;
							return 0;
						}
					}
					else {
						newVal = getter(state);
					}
					state.values[idx] = newVal;
					return 1 /* SlotStatus.Changed */;
				}
			};
		}
	}
	function compareArray(a, b, compare) {
		if (a.length != b.length)
			return false;
		for (let i = 0; i < a.length; i++)
			if (!compare(a[i], b[i]))
				return false;
		return true;
	}
	function ensureAll(state, addrs) {
		let changed = false;
		for (let addr of addrs)
			if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
				changed = true;
		return changed;
	}
	function dynamicFacetSlot(addresses, facet, providers) {
		let providerAddrs = providers.map(p => addresses[p.id]);
		let providerTypes = providers.map(p => p.type);
		let dynamic = providerAddrs.filter(p => !(p & 1));
		let idx = addresses[facet.id] >> 1;
		function get(state) {
			let values = [];
			for (let i = 0; i < providerAddrs.length; i++) {
				let value = getAddr(state, providerAddrs[i]);
				if (providerTypes[i] == 2 /* Provider.Multi */)
					for (let val of value)
						values.push(val);
				else
					values.push(value);
			}
			return facet.combine(values);
		}
		return {
			create(state) {
				for (let addr of providerAddrs)
					ensureAddr(state, addr);
				state.values[idx] = get(state);
				return 1 /* SlotStatus.Changed */;
			},
			update(state, tr) {
				if (!ensureAll(state, dynamic))
					return 0;
				let value = get(state);
				if (facet.compare(value, state.values[idx]))
					return 0;
				state.values[idx] = value;
				return 1 /* SlotStatus.Changed */;
			},
			reconfigure(state, oldState) {
				let depChanged = ensureAll(state, providerAddrs);
				let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
				if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
					state.values[idx] = oldValue;
					return 0;
				}
				let value = get(state);
				if (facet.compare(value, oldValue)) {
					state.values[idx] = oldValue;
					return 0;
				}
				state.values[idx] = value;
				return 1 /* SlotStatus.Changed */;
			}
		};
	}
	const initField = Facet.define({ static: true });
	/**
	Fields can store additional information in an editor state, and
	keep it in sync with the rest of the state.
	*/
	class StateField {
		constructor(
		/**
		@internal
		*/
		id, createF, updateF, compareF, 
		/**
		@internal
		*/
		spec) {
			this.id = id;
			this.createF = createF;
			this.updateF = updateF;
			this.compareF = compareF;
			this.spec = spec;
			/**
			@internal
			*/
			this.provides = undefined;
		}
		/**
		Define a state field.
		*/
		static define(config) {
			let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
			if (config.provide)
				field.provides = config.provide(field);
			return field;
		}
		create(state) {
			let init = state.facet(initField).find(i => i.field == this);
			return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
		}
		/**
		@internal
		*/
		slot(addresses) {
			let idx = addresses[this.id] >> 1;
			return {
				create: (state) => {
					state.values[idx] = this.create(state);
					return 1 /* SlotStatus.Changed */;
				},
				update: (state, tr) => {
					let oldVal = state.values[idx];
					let value = this.updateF(oldVal, tr);
					if (this.compareF(oldVal, value))
						return 0;
					state.values[idx] = value;
					return 1 /* SlotStatus.Changed */;
				},
				reconfigure: (state, oldState) => {
					if (oldState.config.address[this.id] != null) {
						state.values[idx] = oldState.field(this);
						return 0;
					}
					state.values[idx] = this.create(state);
					return 1 /* SlotStatus.Changed */;
				}
			};
		}
		/**
		Returns an extension that enables this field and overrides the
		way it is initialized. Can be useful when you need to provide a
		non-default starting value for the field.
		*/
		init(create) {
			return [this, initField.of({ field: this, create })];
		}
		/**
		State field instances can be used as
		[`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
		given state.
		*/
		get extension() { return this; }
	}
	const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
	function prec(value) {
		return (ext) => new PrecExtension(ext, value);
	}
	/**
	By default extensions are registered in the order they are found
	in the flattened form of nested array that was provided.
	Individual extension values can be assigned a precedence to
	override this. Extensions that do not have a precedence set get
	the precedence of the nearest parent with a precedence, or
	[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
	final ordering of extensions is determined by first sorting by
	precedence and then by order within each precedence.
	*/
	const Prec = {
		/**
		The highest precedence level, for extensions that should end up
		near the start of the precedence ordering.
		*/
		highest: prec(Prec_.highest),
		/**
		A higher-than-default precedence, for extensions that should
		come before those with default precedence.
		*/
		high: prec(Prec_.high),
		/**
		The default precedence, which is also used for extensions
		without an explicit precedence.
		*/
		default: prec(Prec_.default),
		/**
		A lower-than-default precedence.
		*/
		low: prec(Prec_.low),
		/**
		The lowest precedence level. Meant for things that should end up
		near the end of the extension order.
		*/
		lowest: prec(Prec_.lowest)
	};
	class PrecExtension {
		constructor(inner, prec) {
			this.inner = inner;
			this.prec = prec;
		}
	}
	/**
	Extension compartments can be used to make a configuration
	dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
	configuration in a compartment, you can later
	[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
	transaction.
	*/
	class Compartment {
		/**
		Create an instance of this compartment to add to your [state
		configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
		*/
		of(ext) { return new CompartmentInstance(this, ext); }
		/**
		Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
		reconfigures this compartment.
		*/
		reconfigure(content) {
			return Compartment.reconfigure.of({ compartment: this, extension: content });
		}
		/**
		Get the current content of the compartment in the state, or
		`undefined` if it isn't present.
		*/
		get(state) {
			return state.config.compartments.get(this);
		}
	}
	class CompartmentInstance {
		constructor(compartment, inner) {
			this.compartment = compartment;
			this.inner = inner;
		}
	}
	class Configuration {
		constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
			this.base = base;
			this.compartments = compartments;
			this.dynamicSlots = dynamicSlots;
			this.address = address;
			this.staticValues = staticValues;
			this.facets = facets;
			this.statusTemplate = [];
			while (this.statusTemplate.length < dynamicSlots.length)
				this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
		}
		staticFacet(facet) {
			let addr = this.address[facet.id];
			return addr == null ? facet.default : this.staticValues[addr >> 1];
		}
		static resolve(base, compartments, oldState) {
			let fields = [];
			let facets = Object.create(null);
			let newCompartments = new Map();
			for (let ext of flatten(base, compartments, newCompartments)) {
				if (ext instanceof StateField)
					fields.push(ext);
				else
					(facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
			}
			let address = Object.create(null);
			let staticValues = [];
			let dynamicSlots = [];
			for (let field of fields) {
				address[field.id] = dynamicSlots.length << 1;
				dynamicSlots.push(a => field.slot(a));
			}
			let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
			for (let id in facets) {
				let providers = facets[id], facet = providers[0].facet;
				let oldProviders = oldFacets && oldFacets[id] || [];
				if (providers.every(p => p.type == 0 /* Provider.Static */)) {
					address[facet.id] = (staticValues.length << 1) | 1;
					if (sameArray(oldProviders, providers)) {
						staticValues.push(oldState.facet(facet));
					}
					else {
						let value = facet.combine(providers.map(p => p.value));
						staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
					}
				}
				else {
					for (let p of providers) {
						if (p.type == 0 /* Provider.Static */) {
							address[p.id] = (staticValues.length << 1) | 1;
							staticValues.push(p.value);
						}
						else {
							address[p.id] = dynamicSlots.length << 1;
							dynamicSlots.push(a => p.dynamicSlot(a));
						}
					}
					address[facet.id] = dynamicSlots.length << 1;
					dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
				}
			}
			let dynamic = dynamicSlots.map(f => f(address));
			return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
		}
	}
	function flatten(extension, compartments, newCompartments) {
		let result = [[], [], [], [], []];
		let seen = new Map();
		function inner(ext, prec) {
			let known = seen.get(ext);
			if (known != null) {
				if (known <= prec)
					return;
				let found = result[known].indexOf(ext);
				if (found > -1)
					result[known].splice(found, 1);
				if (ext instanceof CompartmentInstance)
					newCompartments.delete(ext.compartment);
			}
			seen.set(ext, prec);
			if (Array.isArray(ext)) {
				for (let e of ext)
					inner(e, prec);
			}
			else if (ext instanceof CompartmentInstance) {
				if (newCompartments.has(ext.compartment))
					throw new RangeError(`Duplicate use of compartment in extensions`);
				let content = compartments.get(ext.compartment) || ext.inner;
				newCompartments.set(ext.compartment, content);
				inner(content, prec);
			}
			else if (ext instanceof PrecExtension) {
				inner(ext.inner, ext.prec);
			}
			else if (ext instanceof StateField) {
				result[prec].push(ext);
				if (ext.provides)
					inner(ext.provides, prec);
			}
			else if (ext instanceof FacetProvider) {
				result[prec].push(ext);
				if (ext.facet.extensions)
					inner(ext.facet.extensions, Prec_.default);
			}
			else {
				let content = ext.extension;
				if (!content)
					throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
				inner(content, prec);
			}
		}
		inner(extension, Prec_.default);
		return result.reduce((a, b) => a.concat(b));
	}
	function ensureAddr(state, addr) {
		if (addr & 1)
			return 2 /* SlotStatus.Computed */;
		let idx = addr >> 1;
		let status = state.status[idx];
		if (status == 4 /* SlotStatus.Computing */)
			throw new Error("Cyclic dependency between fields and/or facets");
		if (status & 2 /* SlotStatus.Computed */)
			return status;
		state.status[idx] = 4 /* SlotStatus.Computing */;
		let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
		return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
	}
	function getAddr(state, addr) {
		return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
	}
	
	const languageData = Facet.define();
	const allowMultipleSelections = Facet.define({
		combine: values => values.some(v => v),
		static: true
	});
	const lineSeparator = Facet.define({
		combine: values => values.length ? values[0] : undefined,
		static: true
	});
	const changeFilter = Facet.define();
	const transactionFilter = Facet.define();
	const transactionExtender = Facet.define();
	const readOnly = Facet.define({
		combine: values => values.length ? values[0] : false
	});
	
	/**
	Annotations are tagged values that are used to add metadata to
	transactions in an extensible way. They should be used to model
	things that effect the entire transaction (such as its [time
	stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
	[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
	_alongside_ the other changes made by the transaction, [state
	effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
	*/
	class Annotation {
		/**
		@internal
		*/
		constructor(
		/**
		The annotation type.
		*/
		type, 
		/**
		The value of this annotation.
		*/
		value) {
			this.type = type;
			this.value = value;
		}
		/**
		Define a new type of annotation.
		*/
		static define() { return new AnnotationType(); }
	}
	/**
	Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
	*/
	class AnnotationType {
		/**
		Create an instance of this annotation.
		*/
		of(value) { return new Annotation(this, value); }
	}
	/**
	Representation of a type of state effect. Defined with
	[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
	*/
	class StateEffectType {
		/**
		@internal
		*/
		constructor(
		// The `any` types in these function types are there to work
		// around TypeScript issue #37631, where the type guard on
		// `StateEffect.is` mysteriously stops working when these properly
		// have type `Value`.
		/**
		@internal
		*/
		map) {
			this.map = map;
		}
		/**
		Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
		type.
		*/
		of(value) { return new StateEffect(this, value); }
	}
	/**
	State effects can be used to represent additional effects
	associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
	are often useful to model changes to custom [state
	fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
	document or selection changes.
	*/
	class StateEffect {
		/**
		@internal
		*/
		constructor(
		/**
		@internal
		*/
		type, 
		/**
		The value of this effect.
		*/
		value) {
			this.type = type;
			this.value = value;
		}
		/**
		Map this effect through a position mapping. Will return
		`undefined` when that ends up deleting the effect.
		*/
		map(mapping) {
			let mapped = this.type.map(this.value, mapping);
			return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
		}
		/**
		Tells you whether this effect object is of a given
		[type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
		*/
		is(type) { return this.type == type; }
		/**
		Define a new effect type. The type parameter indicates the type
		of values that his effect holds. It should be a type that
		doesn't include `undefined`, since that is used in
		[mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
		removed.
		*/
		static define(spec = {}) {
			return new StateEffectType(spec.map || (v => v));
		}
		/**
		Map an array of effects through a change set.
		*/
		static mapEffects(effects, mapping) {
			if (!effects.length)
				return effects;
			let result = [];
			for (let effect of effects) {
				let mapped = effect.map(mapping);
				if (mapped)
					result.push(mapped);
			}
			return result;
		}
	}
	/**
	This effect can be used to reconfigure the root extensions of
	the editor. Doing this will discard any extensions
	[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
	the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
	compartments.
	*/
	StateEffect.reconfigure = StateEffect.define();
	/**
	Append extensions to the top-level configuration of the editor.
	*/
	StateEffect.appendConfig = StateEffect.define();
	/**
	Changes to the editor state are grouped into transactions.
	Typically, a user action creates a single transaction, which may
	contain any number of document changes, may change the selection,
	or have other effects. Create a transaction by calling
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
	dispatch one by calling
	[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
	*/
	class Transaction {
		constructor(
		/**
		The state from which the transaction starts.
		*/
		startState, 
		/**
		The document changes made by this transaction.
		*/
		changes, 
		/**
		The selection set by this transaction, or undefined if it
		doesn't explicitly set a selection.
		*/
		selection, 
		/**
		The effects added to the transaction.
		*/
		effects, 
		/**
		@internal
		*/
		annotations, 
		/**
		Whether the selection should be scrolled into view after this
		transaction is dispatched.
		*/
		scrollIntoView) {
			this.startState = startState;
			this.changes = changes;
			this.selection = selection;
			this.effects = effects;
			this.annotations = annotations;
			this.scrollIntoView = scrollIntoView;
			/**
			@internal
			*/
			this._doc = null;
			/**
			@internal
			*/
			this._state = null;
			if (selection)
				checkSelection(selection, changes.newLength);
			if (!annotations.some((a) => a.type == Transaction.time))
				this.annotations = annotations.concat(Transaction.time.of(Date.now()));
		}
		/**
		@internal
		*/
		static create(startState, changes, selection, effects, annotations, scrollIntoView) {
			return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
		}
		/**
		The new document produced by the transaction. Contrary to
		[`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
		force the entire new state to be computed right away, so it is
		recommended that [transaction
		filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
		when they need to look at the new document.
		*/
		get newDoc() {
			return this._doc || (this._doc = this.changes.apply(this.startState.doc));
		}
		/**
		The new selection produced by the transaction. If
		[`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
		this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
		current selection through the changes made by the transaction.
		*/
		get newSelection() {
			return this.selection || this.startState.selection.map(this.changes);
		}
		/**
		The new state created by the transaction. Computed on demand
		(but retained for subsequent access), so it is recommended not to
		access it in [transaction
		filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
		*/
		get state() {
			if (!this._state)
				this.startState.applyTransaction(this);
			return this._state;
		}
		/**
		Get the value of the given annotation type, if any.
		*/
		annotation(type) {
			for (let ann of this.annotations)
				if (ann.type == type)
					return ann.value;
			return undefined;
		}
		/**
		Indicates whether the transaction changed the document.
		*/
		get docChanged() { return !this.changes.empty; }
		/**
		Indicates whether this transaction reconfigures the state
		(through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
		with a top-level configuration
		[effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
		*/
		get reconfigured() { return this.startState.config != this.state.config; }
		/**
		Returns true if the transaction has a [user
		event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
		or more specific than `event`. For example, if the transaction
		has `"select.pointer"` as user event, `"select"` and
		`"select.pointer"` will match it.
		*/
		isUserEvent(event) {
			let e = this.annotation(Transaction.userEvent);
			return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
		}
	}
	/**
	Annotation used to store transaction timestamps. Automatically
	added to every transaction, holding `Date.now()`.
	*/
	Transaction.time = Annotation.define();
	/**
	Annotation used to associate a transaction with a user interface
	event. Holds a string identifying the event, using a
	dot-separated format to support attaching more specific
	information. The events used by the core libraries are:
	
	 - `"input"` when content is entered
	   - `"input.type"` for typed input
		 - `"input.type.compose"` for composition
	   - `"input.paste"` for pasted input
	   - `"input.drop"` when adding content with drag-and-drop
	   - `"input.complete"` when autocompleting
	 - `"delete"` when the user deletes content
	   - `"delete.selection"` when deleting the selection
	   - `"delete.forward"` when deleting forward from the selection
	   - `"delete.backward"` when deleting backward from the selection
	   - `"delete.cut"` when cutting to the clipboard
	 - `"move"` when content is moved
	   - `"move.drop"` when content is moved within the editor through drag-and-drop
	 - `"select"` when explicitly changing the selection
	   - `"select.pointer"` when selecting with a mouse or other pointing device
	 - `"undo"` and `"redo"` for history actions
	
	Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
	whether the annotation matches a given event.
	*/
	Transaction.userEvent = Annotation.define();
	/**
	Annotation indicating whether a transaction should be added to
	the undo history or not.
	*/
	Transaction.addToHistory = Annotation.define();
	/**
	Annotation indicating (when present and true) that a transaction
	represents a change made by some other actor, not the user. This
	is used, for example, to tag other people's changes in
	collaborative editing.
	*/
	Transaction.remote = Annotation.define();
	function joinRanges(a, b) {
		let result = [];
		for (let iA = 0, iB = 0;;) {
			let from, to;
			if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
				from = a[iA++];
				to = a[iA++];
			}
			else if (iB < b.length) {
				from = b[iB++];
				to = b[iB++];
			}
			else
				return result;
			if (!result.length || result[result.length - 1] < from)
				result.push(from, to);
			else if (result[result.length - 1] < to)
				result[result.length - 1] = to;
		}
	}
	function mergeTransaction(a, b, sequential) {
		var _a;
		let mapForA, mapForB, changes;
		if (sequential) {
			mapForA = b.changes;
			mapForB = ChangeSet.empty(b.changes.length);
			changes = a.changes.compose(b.changes);
		}
		else {
			mapForA = b.changes.map(a.changes);
			mapForB = a.changes.mapDesc(b.changes, true);
			changes = a.changes.compose(mapForA);
		}
		return {
			changes,
			selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
			effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
			annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
			scrollIntoView: a.scrollIntoView || b.scrollIntoView
		};
	}
	function resolveTransactionInner(state, spec, docSize) {
		let sel = spec.selection, annotations = asArray(spec.annotations);
		if (spec.userEvent)
			annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
		return {
			changes: spec.changes instanceof ChangeSet ? spec.changes
				: ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
			selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
			effects: asArray(spec.effects),
			annotations,
			scrollIntoView: !!spec.scrollIntoView
		};
	}
	function resolveTransaction(state, specs, filter) {
		let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
		if (specs.length && specs[0].filter === false)
			filter = false;
		for (let i = 1; i < specs.length; i++) {
			if (specs[i].filter === false)
				filter = false;
			let seq = !!specs[i].sequential;
			s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
		}
		let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
		return extendTransaction(filter ? filterTransaction(tr) : tr);
	}
	// Finish a transaction by applying filters if necessary.
	function filterTransaction(tr) {
		let state = tr.startState;
		// Change filters
		let result = true;
		for (let filter of state.facet(changeFilter)) {
			let value = filter(tr);
			if (value === false) {
				result = false;
				break;
			}
			if (Array.isArray(value))
				result = result === true ? value : joinRanges(result, value);
		}
		if (result !== true) {
			let changes, back;
			if (result === false) {
				back = tr.changes.invertedDesc;
				changes = ChangeSet.empty(state.doc.length);
			}
			else {
				let filtered = tr.changes.filter(result);
				changes = filtered.changes;
				back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
			}
			tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
		}
		// Transaction filters
		let filters = state.facet(transactionFilter);
		for (let i = filters.length - 1; i >= 0; i--) {
			let filtered = filters[i](tr);
			if (filtered instanceof Transaction)
				tr = filtered;
			else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
				tr = filtered[0];
			else
				tr = resolveTransaction(state, asArray(filtered), false);
		}
		return tr;
	}
	function extendTransaction(tr) {
		let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
		for (let i = extenders.length - 1; i >= 0; i--) {
			let extension = extenders[i](tr);
			if (extension && Object.keys(extension).length)
				spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
		}
		return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
	}
	const none = [];
	function asArray(value) {
		return value == null ? none : Array.isArray(value) ? value : [value];
	}
	
	/**
	The categories produced by a [character
	categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
	do things like selecting by word.
	*/
	exports.CharCategory = void 0;
	(function (CharCategory) {
		/**
		Word characters.
		*/
		CharCategory[CharCategory["Word"] = 0] = "Word";
		/**
		Whitespace.
		*/
		CharCategory[CharCategory["Space"] = 1] = "Space";
		/**
		Anything else.
		*/
		CharCategory[CharCategory["Other"] = 2] = "Other";
	})(exports.CharCategory || (exports.CharCategory = {}));
	const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
	let wordChar;
	try {
		wordChar = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
	}
	catch (_) { }
	function hasWordChar(str) {
		if (wordChar)
			return wordChar.test(str);
		for (let i = 0; i < str.length; i++) {
			let ch = str[i];
			if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
				return true;
		}
		return false;
	}
	function makeCategorizer(wordChars) {
		return (char) => {
			if (!/\S/.test(char))
				return exports.CharCategory.Space;
			if (hasWordChar(char))
				return exports.CharCategory.Word;
			for (let i = 0; i < wordChars.length; i++)
				if (char.indexOf(wordChars[i]) > -1)
					return exports.CharCategory.Word;
			return exports.CharCategory.Other;
		};
	}
	
	/**
	The editor state class is a persistent (immutable) data structure.
	To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
	[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
	instance, without modifying the original object.
	
	As such, _never_ mutate properties of a state directly. That'll
	just break things.
	*/
	class EditorState {
		constructor(
		/**
		@internal
		*/
		config, 
		/**
		The current document.
		*/
		doc, 
		/**
		The current selection.
		*/
		selection, 
		/**
		@internal
		*/
		values, computeSlot, tr) {
			this.config = config;
			this.doc = doc;
			this.selection = selection;
			this.values = values;
			this.status = config.statusTemplate.slice();
			this.computeSlot = computeSlot;
			// Fill in the computed state immediately, so that further queries
			// for it made during the update return this state
			if (tr)
				tr._state = this;
			for (let i = 0; i < this.config.dynamicSlots.length; i++)
				ensureAddr(this, i << 1);
			this.computeSlot = null;
		}
		field(field, require = true) {
			let addr = this.config.address[field.id];
			if (addr == null) {
				if (require)
					throw new RangeError("Field is not present in this state");
				return undefined;
			}
			ensureAddr(this, addr);
			return getAddr(this, addr);
		}
		/**
		Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
		state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
		can be passed. Unless
		[`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
		[changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
		are assumed to start in the _current_ document (not the document
		produced by previous specs), and its
		[selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
		[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
		to the document created by its _own_ changes. The resulting
		transaction contains the combined effect of all the different
		specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
		specs take precedence over earlier ones.
		*/
		update(...specs) {
			return resolveTransaction(this, specs, true);
		}
		/**
		@internal
		*/
		applyTransaction(tr) {
			let conf = this.config, { base, compartments } = conf;
			for (let effect of tr.effects) {
				if (effect.is(Compartment.reconfigure)) {
					if (conf) {
						compartments = new Map;
						conf.compartments.forEach((val, key) => compartments.set(key, val));
						conf = null;
					}
					compartments.set(effect.value.compartment, effect.value.extension);
				}
				else if (effect.is(StateEffect.reconfigure)) {
					conf = null;
					base = effect.value;
				}
				else if (effect.is(StateEffect.appendConfig)) {
					conf = null;
					base = asArray(base).concat(effect.value);
				}
			}
			let startValues;
			if (!conf) {
				conf = Configuration.resolve(base, compartments, this);
				let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
				startValues = intermediateState.values;
			}
			else {
				startValues = tr.startState.values.slice();
			}
			let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
			new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
		}
		/**
		Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
		replaces every selection range with the given content.
		*/
		replaceSelection(text) {
			if (typeof text == "string")
				text = this.toText(text);
			return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
				range: EditorSelection.cursor(range.from + text.length) }));
		}
		/**
		Create a set of changes and a new selection by running the given
		function for each range in the active selection. The function
		can return an optional set of changes (in the coordinate space
		of the start document), plus an updated range (in the coordinate
		space of the document produced by the call's own changes). This
		method will merge all the changes and ranges into a single
		changeset and selection, and return it as a [transaction
		spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
		[`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
		*/
		changeByRange(f) {
			let sel = this.selection;
			let result1 = f(sel.ranges[0]);
			let changes = this.changes(result1.changes), ranges = [result1.range];
			let effects = asArray(result1.effects);
			for (let i = 1; i < sel.ranges.length; i++) {
				let result = f(sel.ranges[i]);
				let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
				for (let j = 0; j < i; j++)
					ranges[j] = ranges[j].map(newMapped);
				let mapBy = changes.mapDesc(newChanges, true);
				ranges.push(result.range.map(mapBy));
				changes = changes.compose(newMapped);
				effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
			}
			return {
				changes,
				selection: EditorSelection.create(ranges, sel.mainIndex),
				effects
			};
		}
		/**
		Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
		description, taking the state's document length and line
		separator into account.
		*/
		changes(spec = []) {
			if (spec instanceof ChangeSet)
				return spec;
			return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
		}
		/**
		Using the state's [line
		separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
		[`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
		*/
		toText(string) {
			return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
		}
		/**
		Return the given range of the document as a string.
		*/
		sliceDoc(from = 0, to = this.doc.length) {
			return this.doc.sliceString(from, to, this.lineBreak);
		}
		/**
		Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
		*/
		facet(facet) {
			let addr = this.config.address[facet.id];
			if (addr == null)
				return facet.default;
			ensureAddr(this, addr);
			return getAddr(this, addr);
		}
		/**
		Convert this state to a JSON-serializable object. When custom
		fields should be serialized, you can pass them in as an object
		mapping property names (in the resulting object, which should
		not use `doc` or `selection`) to fields.
		*/
		toJSON(fields) {
			let result = {
				doc: this.sliceDoc(),
				selection: this.selection.toJSON()
			};
			if (fields)
				for (let prop in fields) {
					let value = fields[prop];
					if (value instanceof StateField && this.config.address[value.id] != null)
						result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
				}
			return result;
		}
		/**
		Deserialize a state from its JSON representation. When custom
		fields should be deserialized, pass the same object you passed
		to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
		third argument.
		*/
		static fromJSON(json, config = {}, fields) {
			if (!json || typeof json.doc != "string")
				throw new RangeError("Invalid JSON representation for EditorState");
			let fieldInit = [];
			if (fields)
				for (let prop in fields) {
					if (Object.prototype.hasOwnProperty.call(json, prop)) {
						let field = fields[prop], value = json[prop];
						fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
					}
				}
			return EditorState.create({
				doc: json.doc,
				selection: EditorSelection.fromJSON(json.selection),
				extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
			});
		}
		/**
		Create a new state. You'll usually only need this when
		initializing an editor—updated states are created by applying
		transactions.
		*/
		static create(config = {}) {
			let configuration = Configuration.resolve(config.extensions || [], new Map);
			let doc = config.doc instanceof Text ? config.doc
				: Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
			let selection = !config.selection ? EditorSelection.single(0)
				: config.selection instanceof EditorSelection ? config.selection
					: EditorSelection.single(config.selection.anchor, config.selection.head);
			checkSelection(selection, doc.length);
			if (!configuration.staticFacet(allowMultipleSelections))
				selection = selection.asSingle();
			return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
		}
		/**
		The size (in columns) of a tab in the document, determined by
		the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
		*/
		get tabSize() { return this.facet(EditorState.tabSize); }
		/**
		Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
		string for this state.
		*/
		get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
		/**
		Returns true when the editor is
		[configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
		*/
		get readOnly() { return this.facet(readOnly); }
		/**
		Look up a translation for the given phrase (via the
		[`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
		original string if no translation is found.
		
		If additional arguments are passed, they will be inserted in
		place of markers like `$1` (for the first value) and `$2`, etc.
		A single `$` is equivalent to `$1`, and `$$` will produce a
		literal dollar sign.
		*/
		phrase(phrase, ...insert) {
			for (let map of this.facet(EditorState.phrases))
				if (Object.prototype.hasOwnProperty.call(map, phrase)) {
					phrase = map[phrase];
					break;
				}
			if (insert.length)
				phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
					if (i == "$")
						return "$";
					let n = +(i || 1);
					return !n || n > insert.length ? m : insert[n - 1];
				});
			return phrase;
		}
		/**
		Find the values for a given language data field, provided by the
		the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
		
		Examples of language data fields are...
		
		- [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
		  comment syntax.
		- [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
		  for providing language-specific completion sources.
		- [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
		  characters that should be considered part of words in this
		  language.
		- [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
		  bracket closing behavior.
		*/
		languageDataAt(name, pos, side = -1) {
			let values = [];
			for (let provider of this.facet(languageData)) {
				for (let result of provider(this, pos, side)) {
					if (Object.prototype.hasOwnProperty.call(result, name))
						values.push(result[name]);
				}
			}
			return values;
		}
		/**
		Return a function that can categorize strings (expected to
		represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
		into one of:
		
		 - Word (contains an alphanumeric character or a character
		   explicitly listed in the local language's `"wordChars"`
		   language data, which should be a string)
		 - Space (contains only whitespace)
		 - Other (anything else)
		*/
		charCategorizer(at) {
			return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
		}
		/**
		Find the word at the given position, meaning the range
		containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
		around it. If no word characters are adjacent to the position,
		this returns null.
		*/
		wordAt(pos) {
			let { text, from, length } = this.doc.lineAt(pos);
			let cat = this.charCategorizer(pos);
			let start = pos - from, end = pos - from;
			while (start > 0) {
				let prev = findClusterBreak(text, start, false);
				if (cat(text.slice(prev, start)) != exports.CharCategory.Word)
					break;
				start = prev;
			}
			while (end < length) {
				let next = findClusterBreak(text, end);
				if (cat(text.slice(end, next)) != exports.CharCategory.Word)
					break;
				end = next;
			}
			return start == end ? null : EditorSelection.range(start + from, end + from);
		}
	}
	/**
	A facet that, when enabled, causes the editor to allow multiple
	ranges to be selected. Be careful though, because by default the
	editor relies on the native DOM selection, which cannot handle
	multiple selections. An extension like
	[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
	secondary selections visible to the user.
	*/
	EditorState.allowMultipleSelections = allowMultipleSelections;
	/**
	Configures the tab size to use in this state. The first
	(highest-precedence) value of the facet is used. If no value is
	given, this defaults to 4.
	*/
	EditorState.tabSize = Facet.define({
		combine: values => values.length ? values[0] : 4
	});
	/**
	The line separator to use. By default, any of `"\n"`, `"\r\n"`
	and `"\r"` is treated as a separator when splitting lines, and
	lines are joined with `"\n"`.
	
	When you configure a value here, only that precise separator
	will be used, allowing you to round-trip documents through the
	editor without normalizing line separators.
	*/
	EditorState.lineSeparator = lineSeparator;
	/**
	This facet controls the value of the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
	consulted by commands and extensions that implement editing
	functionality to determine whether they should apply. It
	defaults to false, but when its highest-precedence value is
	`true`, such functionality disables itself.
	
	Not to be confused with
	[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
	controls whether the editor's DOM is set to be editable (and
	thus focusable).
	*/
	EditorState.readOnly = readOnly;
	/**
	Registers translation phrases. The
	[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
	all objects registered with this facet to find translations for
	its argument.
	*/
	EditorState.phrases = Facet.define({
		compare(a, b) {
			let kA = Object.keys(a), kB = Object.keys(b);
			return kA.length == kB.length && kA.every(k => a[k] == b[k]);
		}
	});
	/**
	A facet used to register [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
	*/
	EditorState.languageData = languageData;
	/**
	Facet used to register change filters, which are called for each
	transaction (unless explicitly
	[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
	part of the transaction's changes.
	
	Such a function can return `true` to indicate that it doesn't
	want to do anything, `false` to completely stop the changes in
	the transaction, or a set of ranges in which changes should be
	suppressed. Such ranges are represented as an array of numbers,
	with each pair of two numbers indicating the start and end of a
	range. So for example `[10, 20, 100, 110]` suppresses changes
	between 10 and 20, and between 100 and 110.
	*/
	EditorState.changeFilter = changeFilter;
	/**
	Facet used to register a hook that gets a chance to update or
	replace transaction specs before they are applied. This will
	only be applied for transactions that don't have
	[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
	can either return a single transaction spec (possibly the input
	transaction), or an array of specs (which will be combined in
	the same way as the arguments to
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).
	
	When possible, it is recommended to avoid accessing
	[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
	since it will force creation of a state that will then be
	discarded again, if the transaction is actually filtered.
	
	(This functionality should be used with care. Indiscriminately
	modifying transaction is likely to break something or degrade
	the user experience.)
	*/
	EditorState.transactionFilter = transactionFilter;
	/**
	This is a more limited form of
	[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
	which can only add
	[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
	[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
	of filter runs even if the transaction has disabled regular
	[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
	for effects that don't need to touch the changes or selection,
	but do want to process every transaction.
	
	Extenders run _after_ filters, when both are present.
	*/
	EditorState.transactionExtender = transactionExtender;
	Compartment.reconfigure = StateEffect.define();
	
	/**
	Utility function for combining behaviors to fill in a config
	object from an array of provided configs. `defaults` should hold
	default values for all optional fields in `Config`.
	
	The function will, by default, error
	when a field gets two values that aren't `===`-equal, but you can
	provide combine functions per field to do something else.
	*/
	function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
	combine = {}) {
		let result = {};
		for (let config of configs)
			for (let key of Object.keys(config)) {
				let value = config[key], current = result[key];
				if (current === undefined)
					result[key] = value;
				else if (current === value || value === undefined) ; // No conflict
				else if (Object.hasOwnProperty.call(combine, key))
					result[key] = combine[key](current, value);
				else
					throw new Error("Config merge conflict for field " + key);
			}
		for (let key in defaults)
			if (result[key] === undefined)
				result[key] = defaults[key];
		return result;
	}
	
	/**
	Each range is associated with a value, which must inherit from
	this class.
	*/
	class RangeValue {
		/**
		Compare this value with another value. Used when comparing
		rangesets. The default implementation compares by identity.
		Unless you are only creating a fixed number of unique instances
		of your value type, it is a good idea to implement this
		properly.
		*/
		eq(other) { return this == other; }
		/**
		Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
		*/
		range(from, to = from) { return Range.create(from, to, this); }
	}
	RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
	RangeValue.prototype.point = false;
	RangeValue.prototype.mapMode = exports.MapMode.TrackDel;
	/**
	A range associates a value with a range of positions.
	*/
	class Range {
		constructor(
		/**
		The range's start position.
		*/
		from, 
		/**
		Its end position.
		*/
		to, 
		/**
		The value associated with this range.
		*/
		value) {
			this.from = from;
			this.to = to;
			this.value = value;
		}
		/**
		@internal
		*/
		static create(from, to, value) {
			return new Range(from, to, value);
		}
	}
	function cmpRange(a, b) {
		return a.from - b.from || a.value.startSide - b.value.startSide;
	}
	class Chunk {
		constructor(from, to, value, 
		// Chunks are marked with the largest point that occurs
		// in them (or -1 for no points), so that scans that are
		// only interested in points (such as the
		// heightmap-related logic) can skip range-only chunks.
		maxPoint) {
			this.from = from;
			this.to = to;
			this.value = value;
			this.maxPoint = maxPoint;
		}
		get length() { return this.to[this.to.length - 1]; }
		// Find the index of the given position and side. Use the ranges'
		// `from` pos when `end == false`, `to` when `end == true`.
		findIndex(pos, side, end, startAt = 0) {
			let arr = end ? this.to : this.from;
			for (let lo = startAt, hi = arr.length;;) {
				if (lo == hi)
					return lo;
				let mid = (lo + hi) >> 1;
				let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
				if (mid == lo)
					return diff >= 0 ? lo : hi;
				if (diff >= 0)
					hi = mid;
				else
					lo = mid + 1;
			}
		}
		between(offset, from, to, f) {
			for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
				if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
					return false;
		}
		map(offset, changes) {
			let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
			for (let i = 0; i < this.value.length; i++) {
				let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
				if (curFrom == curTo) {
					let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
					if (mapped == null)
						continue;
					newFrom = newTo = mapped;
					if (val.startSide != val.endSide) {
						newTo = changes.mapPos(curFrom, val.endSide);
						if (newTo < newFrom)
							continue;
					}
				}
				else {
					newFrom = changes.mapPos(curFrom, val.startSide);
					newTo = changes.mapPos(curTo, val.endSide);
					if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
						continue;
				}
				if ((newTo - newFrom || val.endSide - val.startSide) < 0)
					continue;
				if (newPos < 0)
					newPos = newFrom;
				if (val.point)
					maxPoint = Math.max(maxPoint, newTo - newFrom);
				value.push(val);
				from.push(newFrom - newPos);
				to.push(newTo - newPos);
			}
			return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
		}
	}
	/**
	A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
	way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
	[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
	structure.
	*/
	class RangeSet {
		constructor(
		/**
		@internal
		*/
		chunkPos, 
		/**
		@internal
		*/
		chunk, 
		/**
		@internal
		*/
		nextLayer, 
		/**
		@internal
		*/
		maxPoint) {
			this.chunkPos = chunkPos;
			this.chunk = chunk;
			this.nextLayer = nextLayer;
			this.maxPoint = maxPoint;
		}
		/**
		@internal
		*/
		static create(chunkPos, chunk, nextLayer, maxPoint) {
			return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
		}
		/**
		@internal
		*/
		get length() {
			let last = this.chunk.length - 1;
			return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
		}
		/**
		The number of ranges in the set.
		*/
		get size() {
			if (this.isEmpty)
				return 0;
			let size = this.nextLayer.size;
			for (let chunk of this.chunk)
				size += chunk.value.length;
			return size;
		}
		/**
		@internal
		*/
		chunkEnd(index) {
			return this.chunkPos[index] + this.chunk[index].length;
		}
		/**
		Update the range set, optionally adding new ranges or filtering
		out existing ones.
		
		(Note: The type parameter is just there as a kludge to work
		around TypeScript variance issues that prevented `RangeSet<X>`
		from being a subtype of `RangeSet<Y>` when `X` is a subtype of
		`Y`.)
		*/
		update(updateSpec) {
			let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
			let filter = updateSpec.filter;
			if (add.length == 0 && !filter)
				return this;
			if (sort)
				add = add.slice().sort(cmpRange);
			if (this.isEmpty)
				return add.length ? RangeSet.of(add) : this;
			let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
			let builder = new RangeSetBuilder();
			while (cur.value || i < add.length) {
				if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
					let range = add[i++];
					if (!builder.addInner(range.from, range.to, range.value))
						spill.push(range);
				}
				else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
					(i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
					(!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
					builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
					cur.nextChunk();
				}
				else {
					if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
						if (!builder.addInner(cur.from, cur.to, cur.value))
							spill.push(Range.create(cur.from, cur.to, cur.value));
					}
					cur.next();
				}
			}
			return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
				: this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
		}
		/**
		Map this range set through a set of changes, return the new set.
		*/
		map(changes) {
			if (changes.empty || this.isEmpty)
				return this;
			let chunks = [], chunkPos = [], maxPoint = -1;
			for (let i = 0; i < this.chunk.length; i++) {
				let start = this.chunkPos[i], chunk = this.chunk[i];
				let touch = changes.touchesRange(start, start + chunk.length);
				if (touch === false) {
					maxPoint = Math.max(maxPoint, chunk.maxPoint);
					chunks.push(chunk);
					chunkPos.push(changes.mapPos(start));
				}
				else if (touch === true) {
					let { mapped, pos } = chunk.map(start, changes);
					if (mapped) {
						maxPoint = Math.max(maxPoint, mapped.maxPoint);
						chunks.push(mapped);
						chunkPos.push(pos);
					}
				}
			}
			let next = this.nextLayer.map(changes);
			return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
		}
		/**
		Iterate over the ranges that touch the region `from` to `to`,
		calling `f` for each. There is no guarantee that the ranges will
		be reported in any specific order. When the callback returns
		`false`, iteration stops.
		*/
		between(from, to, f) {
			if (this.isEmpty)
				return;
			for (let i = 0; i < this.chunk.length; i++) {
				let start = this.chunkPos[i], chunk = this.chunk[i];
				if (to >= start && from <= start + chunk.length &&
					chunk.between(start, from - start, to - start, f) === false)
					return;
			}
			this.nextLayer.between(from, to, f);
		}
		/**
		Iterate over the ranges in this set, in order, including all
		ranges that end at or after `from`.
		*/
		iter(from = 0) {
			return HeapCursor.from([this]).goto(from);
		}
		/**
		@internal
		*/
		get isEmpty() { return this.nextLayer == this; }
		/**
		Iterate over the ranges in a collection of sets, in order,
		starting from `from`.
		*/
		static iter(sets, from = 0) {
			return HeapCursor.from(sets).goto(from);
		}
		/**
		Iterate over two groups of sets, calling methods on `comparator`
		to notify it of possible differences.
		*/
		static compare(oldSets, newSets, 
		/**
		This indicates how the underlying data changed between these
		ranges, and is needed to synchronize the iteration.
		*/
		textDiff, comparator, 
		/**
		Can be used to ignore all non-point ranges, and points below
		the given size. When -1, all ranges are compared.
		*/
		minPointSize = -1) {
			let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
			let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
			let sharedChunks = findSharedChunks(a, b, textDiff);
			let sideA = new SpanCursor(a, sharedChunks, minPointSize);
			let sideB = new SpanCursor(b, sharedChunks, minPointSize);
			textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
			if (textDiff.empty && textDiff.length == 0)
				compare(sideA, 0, sideB, 0, 0, comparator);
		}
		/**
		Compare the contents of two groups of range sets, returning true
		if they are equivalent in the given range.
		*/
		static eq(oldSets, newSets, from = 0, to) {
			if (to == null)
				to = 1000000000 /* C.Far */ - 1;
			let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
			let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
			if (a.length != b.length)
				return false;
			if (!a.length)
				return true;
			let sharedChunks = findSharedChunks(a, b);
			let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
			for (;;) {
				if (sideA.to != sideB.to ||
					!sameValues(sideA.active, sideB.active) ||
					sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
					return false;
				if (sideA.to > to)
					return true;
				sideA.next();
				sideB.next();
			}
		}
		/**
		Iterate over a group of range sets at the same time, notifying
		the iterator about the ranges covering every given piece of
		content. Returns the open count (see
		[`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
		of the iteration.
		*/
		static spans(sets, from, to, iterator, 
		/**
		When given and greater than -1, only points of at least this
		size are taken into account.
		*/
		minPointSize = -1) {
			let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
			let openRanges = cursor.openStart;
			for (;;) {
				let curTo = Math.min(cursor.to, to);
				if (cursor.point) {
					let active = cursor.activeForPoint(cursor.to);
					let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
					iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
					openRanges = Math.min(cursor.openEnd(curTo), active.length);
				}
				else if (curTo > pos) {
					iterator.span(pos, curTo, cursor.active, openRanges);
					openRanges = cursor.openEnd(curTo);
				}
				if (cursor.to > to)
					return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
				pos = cursor.to;
				cursor.next();
			}
		}
		/**
		Create a range set for the given range or array of ranges. By
		default, this expects the ranges to be _sorted_ (by start
		position and, if two start at the same position,
		`value.startSide`). You can pass `true` as second argument to
		cause the method to sort them.
		*/
		static of(ranges, sort = false) {
			let build = new RangeSetBuilder();
			for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
				build.add(range.from, range.to, range.value);
			return build.finish();
		}
	}
	/**
	The empty set of ranges.
	*/
	RangeSet.empty = new RangeSet([], [], null, -1);
	function lazySort(ranges) {
		if (ranges.length > 1)
			for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
				let cur = ranges[i];
				if (cmpRange(prev, cur) > 0)
					return ranges.slice().sort(cmpRange);
				prev = cur;
			}
		return ranges;
	}
	RangeSet.empty.nextLayer = RangeSet.empty;
	/**
	A range set builder is a data structure that helps build up a
	[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
	an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
	*/
	class RangeSetBuilder {
		finishChunk(newArrays) {
			this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
			this.chunkPos.push(this.chunkStart);
			this.chunkStart = -1;
			this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
			this.maxPoint = -1;
			if (newArrays) {
				this.from = [];
				this.to = [];
				this.value = [];
			}
		}
		/**
		Create an empty builder.
		*/
		constructor() {
			this.chunks = [];
			this.chunkPos = [];
			this.chunkStart = -1;
			this.last = null;
			this.lastFrom = -1000000000 /* C.Far */;
			this.lastTo = -1000000000 /* C.Far */;
			this.from = [];
			this.to = [];
			this.value = [];
			this.maxPoint = -1;
			this.setMaxPoint = -1;
			this.nextLayer = null;
		}
		/**
		Add a range. Ranges should be added in sorted (by `from` and
		`value.startSide`) order.
		*/
		add(from, to, value) {
			if (!this.addInner(from, to, value))
				(this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
		}
		/**
		@internal
		*/
		addInner(from, to, value) {
			let diff = from - this.lastTo || value.startSide - this.last.endSide;
			if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
				throw new Error("Ranges must be added sorted by `from` position and `startSide`");
			if (diff < 0)
				return false;
			if (this.from.length == 250 /* C.ChunkSize */)
				this.finishChunk(true);
			if (this.chunkStart < 0)
				this.chunkStart = from;
			this.from.push(from - this.chunkStart);
			this.to.push(to - this.chunkStart);
			this.last = value;
			this.lastFrom = from;
			this.lastTo = to;
			this.value.push(value);
			if (value.point)
				this.maxPoint = Math.max(this.maxPoint, to - from);
			return true;
		}
		/**
		@internal
		*/
		addChunk(from, chunk) {
			if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
				return false;
			if (this.from.length)
				this.finishChunk(true);
			this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
			this.chunks.push(chunk);
			this.chunkPos.push(from);
			let last = chunk.value.length - 1;
			this.last = chunk.value[last];
			this.lastFrom = chunk.from[last] + from;
			this.lastTo = chunk.to[last] + from;
			return true;
		}
		/**
		Finish the range set. Returns the new set. The builder can't be
		used anymore after this has been called.
		*/
		finish() { return this.finishInner(RangeSet.empty); }
		/**
		@internal
		*/
		finishInner(next) {
			if (this.from.length)
				this.finishChunk(false);
			if (this.chunks.length == 0)
				return next;
			let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
			this.from = null; // Make sure further `add` calls produce errors
			return result;
		}
	}
	function findSharedChunks(a, b, textDiff) {
		let inA = new Map();
		for (let set of a)
			for (let i = 0; i < set.chunk.length; i++)
				if (set.chunk[i].maxPoint <= 0)
					inA.set(set.chunk[i], set.chunkPos[i]);
		let shared = new Set();
		for (let set of b)
			for (let i = 0; i < set.chunk.length; i++) {
				let known = inA.get(set.chunk[i]);
				if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
					!(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
					shared.add(set.chunk[i]);
			}
		return shared;
	}
	class LayerCursor {
		constructor(layer, skip, minPoint, rank = 0) {
			this.layer = layer;
			this.skip = skip;
			this.minPoint = minPoint;
			this.rank = rank;
		}
		get startSide() { return this.value ? this.value.startSide : 0; }
		get endSide() { return this.value ? this.value.endSide : 0; }
		goto(pos, side = -1000000000 /* C.Far */) {
			this.chunkIndex = this.rangeIndex = 0;
			this.gotoInner(pos, side, false);
			return this;
		}
		gotoInner(pos, side, forward) {
			while (this.chunkIndex < this.layer.chunk.length) {
				let next = this.layer.chunk[this.chunkIndex];
				if (!(this.skip && this.skip.has(next) ||
					this.layer.chunkEnd(this.chunkIndex) < pos ||
					next.maxPoint < this.minPoint))
					break;
				this.chunkIndex++;
				forward = false;
			}
			if (this.chunkIndex < this.layer.chunk.length) {
				let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
				if (!forward || this.rangeIndex < rangeIndex)
					this.setRangeIndex(rangeIndex);
			}
			this.next();
		}
		forward(pos, side) {
			if ((this.to - pos || this.endSide - side) < 0)
				this.gotoInner(pos, side, true);
		}
		next() {
			for (;;) {
				if (this.chunkIndex == this.layer.chunk.length) {
					this.from = this.to = 1000000000 /* C.Far */;
					this.value = null;
					break;
				}
				else {
					let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
					let from = chunkPos + chunk.from[this.rangeIndex];
					this.from = from;
					this.to = chunkPos + chunk.to[this.rangeIndex];
					this.value = chunk.value[this.rangeIndex];
					this.setRangeIndex(this.rangeIndex + 1);
					if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
						break;
				}
			}
		}
		setRangeIndex(index) {
			if (index == this.layer.chunk[this.chunkIndex].value.length) {
				this.chunkIndex++;
				if (this.skip) {
					while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
						this.chunkIndex++;
				}
				this.rangeIndex = 0;
			}
			else {
				this.rangeIndex = index;
			}
		}
		nextChunk() {
			this.chunkIndex++;
			this.rangeIndex = 0;
			this.next();
		}
		compare(other) {
			return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
				this.to - other.to || this.endSide - other.endSide;
		}
	}
	class HeapCursor {
		constructor(heap) {
			this.heap = heap;
		}
		static from(sets, skip = null, minPoint = -1) {
			let heap = [];
			for (let i = 0; i < sets.length; i++) {
				for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
					if (cur.maxPoint >= minPoint)
						heap.push(new LayerCursor(cur, skip, minPoint, i));
				}
			}
			return heap.length == 1 ? heap[0] : new HeapCursor(heap);
		}
		get startSide() { return this.value ? this.value.startSide : 0; }
		goto(pos, side = -1000000000 /* C.Far */) {
			for (let cur of this.heap)
				cur.goto(pos, side);
			for (let i = this.heap.length >> 1; i >= 0; i--)
				heapBubble(this.heap, i);
			this.next();
			return this;
		}
		forward(pos, side) {
			for (let cur of this.heap)
				cur.forward(pos, side);
			for (let i = this.heap.length >> 1; i >= 0; i--)
				heapBubble(this.heap, i);
			if ((this.to - pos || this.value.endSide - side) < 0)
				this.next();
		}
		next() {
			if (this.heap.length == 0) {
				this.from = this.to = 1000000000 /* C.Far */;
				this.value = null;
				this.rank = -1;
			}
			else {
				let top = this.heap[0];
				this.from = top.from;
				this.to = top.to;
				this.value = top.value;
				this.rank = top.rank;
				if (top.value)
					top.next();
				heapBubble(this.heap, 0);
			}
		}
	}
	function heapBubble(heap, index) {
		for (let cur = heap[index];;) {
			let childIndex = (index << 1) + 1;
			if (childIndex >= heap.length)
				break;
			let child = heap[childIndex];
			if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
				child = heap[childIndex + 1];
				childIndex++;
			}
			if (cur.compare(child) < 0)
				break;
			heap[childIndex] = cur;
			heap[index] = child;
			index = childIndex;
		}
	}
	class SpanCursor {
		constructor(sets, skip, minPoint) {
			this.minPoint = minPoint;
			this.active = [];
			this.activeTo = [];
			this.activeRank = [];
			this.minActive = -1;
			// A currently active point range, if any
			this.point = null;
			this.pointFrom = 0;
			this.pointRank = 0;
			this.to = -1000000000 /* C.Far */;
			this.endSide = 0;
			// The amount of open active ranges at the start of the iterator.
			// Not including points.
			this.openStart = -1;
			this.cursor = HeapCursor.from(sets, skip, minPoint);
		}
		goto(pos, side = -1000000000 /* C.Far */) {
			this.cursor.goto(pos, side);
			this.active.length = this.activeTo.length = this.activeRank.length = 0;
			this.minActive = -1;
			this.to = pos;
			this.endSide = side;
			this.openStart = -1;
			this.next();
			return this;
		}
		forward(pos, side) {
			while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
				this.removeActive(this.minActive);
			this.cursor.forward(pos, side);
		}
		removeActive(index) {
			remove(this.active, index);
			remove(this.activeTo, index);
			remove(this.activeRank, index);
			this.minActive = findMinIndex(this.active, this.activeTo);
		}
		addActive(trackOpen) {
			let i = 0, { value, to, rank } = this.cursor;
			while (i < this.activeRank.length && this.activeRank[i] <= rank)
				i++;
			insert(this.active, i, value);
			insert(this.activeTo, i, to);
			insert(this.activeRank, i, rank);
			if (trackOpen)
				insert(trackOpen, i, this.cursor.from);
			this.minActive = findMinIndex(this.active, this.activeTo);
		}
		// After calling this, if `this.point` != null, the next range is a
		// point. Otherwise, it's a regular range, covered by `this.active`.
		next() {
			let from = this.to, wasPoint = this.point;
			this.point = null;
			let trackOpen = this.openStart < 0 ? [] : null;
			for (;;) {
				let a = this.minActive;
				if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
					if (this.activeTo[a] > from) {
						this.to = this.activeTo[a];
						this.endSide = this.active[a].endSide;
						break;
					}
					this.removeActive(a);
					if (trackOpen)
						remove(trackOpen, a);
				}
				else if (!this.cursor.value) {
					this.to = this.endSide = 1000000000 /* C.Far */;
					break;
				}
				else if (this.cursor.from > from) {
					this.to = this.cursor.from;
					this.endSide = this.cursor.startSide;
					break;
				}
				else {
					let nextVal = this.cursor.value;
					if (!nextVal.point) { // Opening a range
						this.addActive(trackOpen);
						this.cursor.next();
					}
					else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
						// Ignore any non-empty points that end precisely at the end of the prev point
						this.cursor.next();
					}
					else { // New point
						this.point = nextVal;
						this.pointFrom = this.cursor.from;
						this.pointRank = this.cursor.rank;
						this.to = this.cursor.to;
						this.endSide = nextVal.endSide;
						this.cursor.next();
						this.forward(this.to, this.endSide);
						break;
					}
				}
			}
			if (trackOpen) {
				this.openStart = 0;
				for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
					this.openStart++;
			}
		}
		activeForPoint(to) {
			if (!this.active.length)
				return this.active;
			let active = [];
			for (let i = this.active.length - 1; i >= 0; i--) {
				if (this.activeRank[i] < this.pointRank)
					break;
				if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
					active.push(this.active[i]);
			}
			return active.reverse();
		}
		openEnd(to) {
			let open = 0;
			for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
				open++;
			return open;
		}
	}
	function compare(a, startA, b, startB, length, comparator) {
		a.goto(startA);
		b.goto(startB);
		let endB = startB + length;
		let pos = startB, dPos = startB - startA;
		for (;;) {
			let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
			let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
			if (a.point || b.point) {
				if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
					sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
					comparator.comparePoint(pos, clipEnd, a.point, b.point);
			}
			else {
				if (clipEnd > pos && !sameValues(a.active, b.active))
					comparator.compareRange(pos, clipEnd, a.active, b.active);
			}
			if (end > endB)
				break;
			pos = end;
			if (diff <= 0)
				a.next();
			if (diff >= 0)
				b.next();
		}
	}
	function sameValues(a, b) {
		if (a.length != b.length)
			return false;
		for (let i = 0; i < a.length; i++)
			if (a[i] != b[i] && !a[i].eq(b[i]))
				return false;
		return true;
	}
	function remove(array, index) {
		for (let i = index, e = array.length - 1; i < e; i++)
			array[i] = array[i + 1];
		array.pop();
	}
	function insert(array, index, value) {
		for (let i = array.length - 1; i >= index; i--)
			array[i + 1] = array[i];
		array[index] = value;
	}
	function findMinIndex(value, array) {
		let found = -1, foundPos = 1000000000 /* C.Far */;
		for (let i = 0; i < array.length; i++)
			if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
				found = i;
				foundPos = array[i];
			}
		return found;
	}
	
	/**
	Count the column position at the given offset into the string,
	taking extending characters and tab size into account.
	*/
	function countColumn(string, tabSize, to = string.length) {
		let n = 0;
		for (let i = 0; i < to;) {
			if (string.charCodeAt(i) == 9) {
				n += tabSize - (n % tabSize);
				i++;
			}
			else {
				n++;
				i = findClusterBreak(string, i);
			}
		}
		return n;
	}
	/**
	Find the offset that corresponds to the given column position in a
	string, taking extending characters and tab size into account. By
	default, the string length is returned when it is too short to
	reach the column. Pass `strict` true to make it return -1 in that
	situation.
	*/
	function findColumn(string, col, tabSize, strict) {
		for (let i = 0, n = 0;;) {
			if (n >= col)
				return i;
			if (i == string.length)
				break;
			n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
			i = findClusterBreak(string, i);
		}
		return strict === true ? -1 : string.length;
	}
	
	exports.Annotation = Annotation;
	exports.AnnotationType = AnnotationType;
	exports.ChangeDesc = ChangeDesc;
	exports.ChangeSet = ChangeSet;
	exports.Compartment = Compartment;
	exports.EditorSelection = EditorSelection;
	exports.EditorState = EditorState;
	exports.Facet = Facet;
	exports.Line = Line;
	exports.Prec = Prec;
	exports.Range = Range;
	exports.RangeSet = RangeSet;
	exports.RangeSetBuilder = RangeSetBuilder;
	exports.RangeValue = RangeValue;
	exports.SelectionRange = SelectionRange;
	exports.StateEffect = StateEffect;
	exports.StateEffectType = StateEffectType;
	exports.StateField = StateField;
	exports.Text = Text;
	exports.Transaction = Transaction;
	exports.codePointAt = codePointAt;
	exports.codePointSize = codePointSize;
	exports.combineConfig = combineConfig;
	exports.countColumn = countColumn;
	exports.findClusterBreak = findClusterBreak;
	exports.findColumn = findColumn;
	exports.fromCodePoint = fromCodePoint;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@codemirror/view/dist/index.cjs":
	/*!**************************************************************!*\
	  !*** ../editor/node_modules/@codemirror/view/dist/index.cjs ***!
	  \**************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var state = __webpack_require__(/*! @codemirror/state */ "../editor/node_modules/@codemirror/state/dist/index.cjs");
	var styleMod = __webpack_require__(/*! style-mod */ "../editor/node_modules/style-mod/dist/style-mod.cjs");
	var w3cKeyname = __webpack_require__(/*! w3c-keyname */ "../editor/node_modules/w3c-keyname/index.cjs");
	
	function getSelection(root) {
		let target;
		// Browsers differ on whether shadow roots have a getSelection
		// method. If it exists, use that, otherwise, call it on the
		// document.
		if (root.nodeType == 11) { // Shadow root
			target = root.getSelection ? root : root.ownerDocument;
		}
		else {
			target = root;
		}
		return target.getSelection();
	}
	function contains(dom, node) {
		return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
	}
	function deepActiveElement(doc) {
		let elt = doc.activeElement;
		while (elt && elt.shadowRoot)
			elt = elt.shadowRoot.activeElement;
		return elt;
	}
	function hasSelection(dom, selection) {
		if (!selection.anchorNode)
			return false;
		try {
			// Firefox will raise 'permission denied' errors when accessing
			// properties of `sel.anchorNode` when it's in a generated CSS
			// element.
			return contains(dom, selection.anchorNode);
		}
		catch (_) {
			return false;
		}
	}
	function clientRectsFor(dom) {
		if (dom.nodeType == 3)
			return textRange(dom, 0, dom.nodeValue.length).getClientRects();
		else if (dom.nodeType == 1)
			return dom.getClientRects();
		else
			return [];
	}
	// Scans forward and backward through DOM positions equivalent to the
	// given one to see if the two are in the same place (i.e. after a
	// text node vs at the end of that text node)
	function isEquivalentPosition(node, off, targetNode, targetOff) {
		return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
			scanFor(node, off, targetNode, targetOff, 1)) : false;
	}
	function domIndex(node) {
		for (var index = 0;; index++) {
			node = node.previousSibling;
			if (!node)
				return index;
		}
	}
	function scanFor(node, off, targetNode, targetOff, dir) {
		for (;;) {
			if (node == targetNode && off == targetOff)
				return true;
			if (off == (dir < 0 ? 0 : maxOffset(node))) {
				if (node.nodeName == "DIV")
					return false;
				let parent = node.parentNode;
				if (!parent || parent.nodeType != 1)
					return false;
				off = domIndex(node) + (dir < 0 ? 0 : 1);
				node = parent;
			}
			else if (node.nodeType == 1) {
				node = node.childNodes[off + (dir < 0 ? -1 : 0)];
				if (node.nodeType == 1 && node.contentEditable == "false")
					return false;
				off = dir < 0 ? maxOffset(node) : 0;
			}
			else {
				return false;
			}
		}
	}
	function maxOffset(node) {
		return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
	}
	function flattenRect(rect, left) {
		let x = left ? rect.left : rect.right;
		return { left: x, right: x, top: rect.top, bottom: rect.bottom };
	}
	function windowRect(win) {
		return { left: 0, right: win.innerWidth,
			top: 0, bottom: win.innerHeight };
	}
	function getScale(elt, rect) {
		let scaleX = rect.width / elt.offsetWidth;
		let scaleY = rect.height / elt.offsetHeight;
		if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
			scaleX = 1;
		if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
			scaleY = 1;
		return { scaleX, scaleY };
	}
	function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
		let doc = dom.ownerDocument, win = doc.defaultView || window;
		for (let cur = dom, stop = false; cur && !stop;) {
			if (cur.nodeType == 1) { // Element
				let bounding, top = cur == doc.body;
				let scaleX = 1, scaleY = 1;
				if (top) {
					bounding = windowRect(win);
				}
				else {
					if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
						stop = true;
					if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
						cur = cur.assignedSlot || cur.parentNode;
						continue;
					}
					let rect = cur.getBoundingClientRect();
					({ scaleX, scaleY } = getScale(cur, rect));
					// Make sure scrollbar width isn't included in the rectangle
					bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
						top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
				}
				let moveX = 0, moveY = 0;
				if (y == "nearest") {
					if (rect.top < bounding.top) {
						moveY = -(bounding.top - rect.top + yMargin);
						if (side > 0 && rect.bottom > bounding.bottom + moveY)
							moveY = rect.bottom - bounding.bottom + moveY + yMargin;
					}
					else if (rect.bottom > bounding.bottom) {
						moveY = rect.bottom - bounding.bottom + yMargin;
						if (side < 0 && (rect.top - moveY) < bounding.top)
							moveY = -(bounding.top + moveY - rect.top + yMargin);
					}
				}
				else {
					let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
					let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
						y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
							rect.bottom - boundingHeight + yMargin;
					moveY = targetTop - bounding.top;
				}
				if (x == "nearest") {
					if (rect.left < bounding.left) {
						moveX = -(bounding.left - rect.left + xMargin);
						if (side > 0 && rect.right > bounding.right + moveX)
							moveX = rect.right - bounding.right + moveX + xMargin;
					}
					else if (rect.right > bounding.right) {
						moveX = rect.right - bounding.right + xMargin;
						if (side < 0 && rect.left < bounding.left + moveX)
							moveX = -(bounding.left + moveX - rect.left + xMargin);
					}
				}
				else {
					let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
						(x == "start") == ltr ? rect.left - xMargin :
							rect.right - (bounding.right - bounding.left) + xMargin;
					moveX = targetLeft - bounding.left;
				}
				if (moveX || moveY) {
					if (top) {
						win.scrollBy(moveX, moveY);
					}
					else {
						let movedX = 0, movedY = 0;
						if (moveY) {
							let start = cur.scrollTop;
							cur.scrollTop += moveY / scaleY;
							movedY = (cur.scrollTop - start) * scaleY;
						}
						if (moveX) {
							let start = cur.scrollLeft;
							cur.scrollLeft += moveX / scaleX;
							movedX = (cur.scrollLeft - start) * scaleX;
						}
						rect = { left: rect.left - movedX, top: rect.top - movedY,
							right: rect.right - movedX, bottom: rect.bottom - movedY };
						if (movedX && Math.abs(movedX - moveX) < 1)
							x = "nearest";
						if (movedY && Math.abs(movedY - moveY) < 1)
							y = "nearest";
					}
				}
				if (top)
					break;
				cur = cur.assignedSlot || cur.parentNode;
			}
			else if (cur.nodeType == 11) { // A shadow root
				cur = cur.host;
			}
			else {
				break;
			}
		}
	}
	function scrollableParent(dom) {
		let doc = dom.ownerDocument;
		for (let cur = dom.parentNode; cur;) {
			if (cur == doc.body) {
				break;
			}
			else if (cur.nodeType == 1) {
				if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
					return cur;
				cur = cur.assignedSlot || cur.parentNode;
			}
			else if (cur.nodeType == 11) {
				cur = cur.host;
			}
			else {
				break;
			}
		}
		return null;
	}
	class DOMSelectionState {
		constructor() {
			this.anchorNode = null;
			this.anchorOffset = 0;
			this.focusNode = null;
			this.focusOffset = 0;
		}
		eq(domSel) {
			return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
				this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
		}
		setRange(range) {
			let { anchorNode, focusNode } = range;
			// Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
			this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
		}
		set(anchorNode, anchorOffset, focusNode, focusOffset) {
			this.anchorNode = anchorNode;
			this.anchorOffset = anchorOffset;
			this.focusNode = focusNode;
			this.focusOffset = focusOffset;
		}
	}
	let preventScrollSupported = null;
	// Feature-detects support for .focus({preventScroll: true}), and uses
	// a fallback kludge when not supported.
	function focusPreventScroll(dom) {
		if (dom.setActive)
			return dom.setActive(); // in IE
		if (preventScrollSupported)
			return dom.focus(preventScrollSupported);
		let stack = [];
		for (let cur = dom; cur; cur = cur.parentNode) {
			stack.push(cur, cur.scrollTop, cur.scrollLeft);
			if (cur == cur.ownerDocument)
				break;
		}
		dom.focus(preventScrollSupported == null ? {
			get preventScroll() {
				preventScrollSupported = { preventScroll: true };
				return true;
			}
		} : undefined);
		if (!preventScrollSupported) {
			preventScrollSupported = false;
			for (let i = 0; i < stack.length;) {
				let elt = stack[i++], top = stack[i++], left = stack[i++];
				if (elt.scrollTop != top)
					elt.scrollTop = top;
				if (elt.scrollLeft != left)
					elt.scrollLeft = left;
			}
		}
	}
	let scratchRange;
	function textRange(node, from, to = from) {
		let range = scratchRange || (scratchRange = document.createRange());
		range.setEnd(node, to);
		range.setStart(node, from);
		return range;
	}
	function dispatchKey(elt, name, code) {
		let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
		let down = new KeyboardEvent("keydown", options);
		down.synthetic = true;
		elt.dispatchEvent(down);
		let up = new KeyboardEvent("keyup", options);
		up.synthetic = true;
		elt.dispatchEvent(up);
		return down.defaultPrevented || up.defaultPrevented;
	}
	function getRoot(node) {
		while (node) {
			if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
				return node;
			node = node.assignedSlot || node.parentNode;
		}
		return null;
	}
	function clearAttributes(node) {
		while (node.attributes.length)
			node.removeAttributeNode(node.attributes[0]);
	}
	function atElementStart(doc, selection) {
		let node = selection.focusNode, offset = selection.focusOffset;
		if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
			return false;
		// Safari can report bogus offsets (#1152)
		offset = Math.min(offset, maxOffset(node));
		for (;;) {
			if (offset) {
				if (node.nodeType != 1)
					return false;
				let prev = node.childNodes[offset - 1];
				if (prev.contentEditable == "false")
					offset--;
				else {
					node = prev;
					offset = maxOffset(node);
				}
			}
			else if (node == doc) {
				return true;
			}
			else {
				offset = domIndex(node);
				node = node.parentNode;
			}
		}
	}
	function isScrolledToBottom(elt) {
		return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
	}
	
	class DOMPos {
		constructor(node, offset, precise = true) {
			this.node = node;
			this.offset = offset;
			this.precise = precise;
		}
		static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
		static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
	}
	const noChildren = [];
	class ContentView {
		constructor() {
			this.parent = null;
			this.dom = null;
			this.flags = 2 /* ViewFlag.NodeDirty */;
		}
		get overrideDOMText() { return null; }
		get posAtStart() {
			return this.parent ? this.parent.posBefore(this) : 0;
		}
		get posAtEnd() {
			return this.posAtStart + this.length;
		}
		posBefore(view) {
			let pos = this.posAtStart;
			for (let child of this.children) {
				if (child == view)
					return pos;
				pos += child.length + child.breakAfter;
			}
			throw new RangeError("Invalid child in posBefore");
		}
		posAfter(view) {
			return this.posBefore(view) + view.length;
		}
		sync(view, track) {
			if (this.flags & 2 /* ViewFlag.NodeDirty */) {
				let parent = this.dom;
				let prev = null, next;
				for (let child of this.children) {
					if (child.flags & 7 /* ViewFlag.Dirty */) {
						if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
							let contentView = ContentView.get(next);
							if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
								child.reuseDOM(next);
						}
						child.sync(view, track);
						child.flags &= ~7 /* ViewFlag.Dirty */;
					}
					next = prev ? prev.nextSibling : parent.firstChild;
					if (track && !track.written && track.node == parent && next != child.dom)
						track.written = true;
					if (child.dom.parentNode == parent) {
						while (next && next != child.dom)
							next = rm$1(next);
					}
					else {
						parent.insertBefore(child.dom, next);
					}
					prev = child.dom;
				}
				next = prev ? prev.nextSibling : parent.firstChild;
				if (next && track && track.node == parent)
					track.written = true;
				while (next)
					next = rm$1(next);
			}
			else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
				for (let child of this.children)
					if (child.flags & 7 /* ViewFlag.Dirty */) {
						child.sync(view, track);
						child.flags &= ~7 /* ViewFlag.Dirty */;
					}
			}
		}
		reuseDOM(_dom) { }
		localPosFromDOM(node, offset) {
			let after;
			if (node == this.dom) {
				after = this.dom.childNodes[offset];
			}
			else {
				let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
				for (;;) {
					let parent = node.parentNode;
					if (parent == this.dom)
						break;
					if (bias == 0 && parent.firstChild != parent.lastChild) {
						if (node == parent.firstChild)
							bias = -1;
						else
							bias = 1;
					}
					node = parent;
				}
				if (bias < 0)
					after = node;
				else
					after = node.nextSibling;
			}
			if (after == this.dom.firstChild)
				return 0;
			while (after && !ContentView.get(after))
				after = after.nextSibling;
			if (!after)
				return this.length;
			for (let i = 0, pos = 0;; i++) {
				let child = this.children[i];
				if (child.dom == after)
					return pos;
				pos += child.length + child.breakAfter;
			}
		}
		domBoundsAround(from, to, offset = 0) {
			let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
			for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
				let child = this.children[i], end = pos + child.length;
				if (pos < from && end > to)
					return child.domBoundsAround(from, to, pos);
				if (end >= from && fromI == -1) {
					fromI = i;
					fromStart = pos;
				}
				if (pos > to && child.dom.parentNode == this.dom) {
					toI = i;
					toEnd = prevEnd;
					break;
				}
				prevEnd = end;
				pos = end + child.breakAfter;
			}
			return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
				startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
				endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
		}
		markDirty(andParent = false) {
			this.flags |= 2 /* ViewFlag.NodeDirty */;
			this.markParentsDirty(andParent);
		}
		markParentsDirty(childList) {
			for (let parent = this.parent; parent; parent = parent.parent) {
				if (childList)
					parent.flags |= 2 /* ViewFlag.NodeDirty */;
				if (parent.flags & 1 /* ViewFlag.ChildDirty */)
					return;
				parent.flags |= 1 /* ViewFlag.ChildDirty */;
				childList = false;
			}
		}
		setParent(parent) {
			if (this.parent != parent) {
				this.parent = parent;
				if (this.flags & 7 /* ViewFlag.Dirty */)
					this.markParentsDirty(true);
			}
		}
		setDOM(dom) {
			if (this.dom == dom)
				return;
			if (this.dom)
				this.dom.cmView = null;
			this.dom = dom;
			dom.cmView = this;
		}
		get rootView() {
			for (let v = this;;) {
				let parent = v.parent;
				if (!parent)
					return v;
				v = parent;
			}
		}
		replaceChildren(from, to, children = noChildren) {
			this.markDirty();
			for (let i = from; i < to; i++) {
				let child = this.children[i];
				if (child.parent == this && children.indexOf(child) < 0)
					child.destroy();
			}
			this.children.splice(from, to - from, ...children);
			for (let i = 0; i < children.length; i++)
				children[i].setParent(this);
		}
		ignoreMutation(_rec) { return false; }
		ignoreEvent(_event) { return false; }
		childCursor(pos = this.length) {
			return new ChildCursor(this.children, pos, this.children.length);
		}
		childPos(pos, bias = 1) {
			return this.childCursor().findPos(pos, bias);
		}
		toString() {
			let name = this.constructor.name.replace("View", "");
			return name + (this.children.length ? "(" + this.children.join() + ")" :
				this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
				(this.breakAfter ? "#" : "");
		}
		static get(node) { return node.cmView; }
		get isEditable() { return true; }
		get isWidget() { return false; }
		get isHidden() { return false; }
		merge(from, to, source, hasStart, openStart, openEnd) {
			return false;
		}
		become(other) { return false; }
		canReuseDOM(other) {
			return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
		}
		// When this is a zero-length view with a side, this should return a
		// number <= 0 to indicate it is before its position, or a
		// number > 0 when after its position.
		getSide() { return 0; }
		destroy() {
			for (let child of this.children)
				if (child.parent == this)
					child.destroy();
			this.parent = null;
		}
	}
	ContentView.prototype.breakAfter = 0;
	// Remove a DOM node and return its next sibling.
	function rm$1(dom) {
		let next = dom.nextSibling;
		dom.parentNode.removeChild(dom);
		return next;
	}
	class ChildCursor {
		constructor(children, pos, i) {
			this.children = children;
			this.pos = pos;
			this.i = i;
			this.off = 0;
		}
		findPos(pos, bias = 1) {
			for (;;) {
				if (pos > this.pos || pos == this.pos &&
					(bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
					this.off = pos - this.pos;
					return this;
				}
				let next = this.children[--this.i];
				this.pos -= next.length + next.breakAfter;
			}
		}
	}
	function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
		let { children } = parent;
		let before = children.length ? children[fromI] : null;
		let last = insert.length ? insert[insert.length - 1] : null;
		let breakAtEnd = last ? last.breakAfter : breakAtStart;
		// Change within a single child
		if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
			before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
			return;
		if (toI < children.length) {
			let after = children[toI];
			// Make sure the end of the child after the update is preserved in `after`
			if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
				// If we're splitting a child, separate part of it to avoid that
				// being mangled when updating the child before the update.
				if (fromI == toI) {
					after = after.split(toOff);
					toOff = 0;
				}
				// If the element after the replacement should be merged with
				// the last replacing element, update `content`
				if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
					insert[insert.length - 1] = after;
				}
				else {
					// Remove the start of the after element, if necessary, and
					// add it to `content`.
					if (toOff || after.children.length && !after.children[0].length)
						after.merge(0, toOff, null, false, 0, openEnd);
					insert.push(after);
				}
			}
			else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
				// The element at `toI` is entirely covered by this range.
				// Preserve its line break, if any.
				if (last)
					last.breakAfter = 1;
				else
					breakAtStart = 1;
			}
			// Since we've handled the next element from the current elements
			// now, make sure `toI` points after that.
			toI++;
		}
		if (before) {
			before.breakAfter = breakAtStart;
			if (fromOff > 0) {
				if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
					before.breakAfter = insert.shift().breakAfter;
				}
				else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
					before.merge(fromOff, before.length, null, false, openStart, 0);
				}
				fromI++;
			}
		}
		// Try to merge widgets on the boundaries of the replacement
		while (fromI < toI && insert.length) {
			if (children[toI - 1].become(insert[insert.length - 1])) {
				toI--;
				insert.pop();
				openEnd = insert.length ? 0 : openStart;
			}
			else if (children[fromI].become(insert[0])) {
				fromI++;
				insert.shift();
				openStart = insert.length ? 0 : openEnd;
			}
			else {
				break;
			}
		}
		if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
			children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
			fromI--;
		if (fromI < toI || insert.length)
			parent.replaceChildren(fromI, toI, insert);
	}
	function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
		let cur = parent.childCursor();
		let { i: toI, off: toOff } = cur.findPos(to, 1);
		let { i: fromI, off: fromOff } = cur.findPos(from, -1);
		let dLen = from - to;
		for (let view of insert)
			dLen += view.length;
		parent.length += dLen;
		replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
	}
	
	let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
	let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
	const ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
	const ie_upto10 = /MSIE \d/.test(nav.userAgent);
	const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
	const ie = !!(ie_upto10 || ie_11up || ie_edge);
	const gecko = !ie && /gecko\/(\d+)/i.test(nav.userAgent);
	const chrome = !ie && /Chrome\/(\d+)/.exec(nav.userAgent);
	const webkit = "webkitFontSmoothing" in doc.documentElement.style;
	const safari = !ie && /Apple Computer/.test(nav.vendor);
	const ios = safari && (/Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
	var browser = {
		mac: ios || /Mac/.test(nav.platform),
		windows: /Win/.test(nav.platform),
		linux: /Linux|X11/.test(nav.platform),
		ie,
		ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
		gecko,
		gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
		chrome: !!chrome,
		chrome_version: chrome ? +chrome[1] : 0,
		ios,
		android: /Android\b/.test(nav.userAgent),
		webkit,
		safari,
		webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
		tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
	};
	
	const MaxJoinLen = 256;
	class TextView extends ContentView {
		constructor(text) {
			super();
			this.text = text;
		}
		get length() { return this.text.length; }
		createDOM(textDOM) {
			this.setDOM(textDOM || document.createTextNode(this.text));
		}
		sync(view, track) {
			if (!this.dom)
				this.createDOM();
			if (this.dom.nodeValue != this.text) {
				if (track && track.node == this.dom)
					track.written = true;
				this.dom.nodeValue = this.text;
			}
		}
		reuseDOM(dom) {
			if (dom.nodeType == 3)
				this.createDOM(dom);
		}
		merge(from, to, source) {
			if ((this.flags & 8 /* ViewFlag.Composition */) ||
				source && (!(source instanceof TextView) ||
					this.length - (to - from) + source.length > MaxJoinLen ||
					(source.flags & 8 /* ViewFlag.Composition */)))
				return false;
			this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
			this.markDirty();
			return true;
		}
		split(from) {
			let result = new TextView(this.text.slice(from));
			this.text = this.text.slice(0, from);
			this.markDirty();
			result.flags |= this.flags & 8 /* ViewFlag.Composition */;
			return result;
		}
		localPosFromDOM(node, offset) {
			return node == this.dom ? offset : offset ? this.text.length : 0;
		}
		domAtPos(pos) { return new DOMPos(this.dom, pos); }
		domBoundsAround(_from, _to, offset) {
			return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
		}
		coordsAt(pos, side) {
			return textCoords(this.dom, pos, side);
		}
	}
	class MarkView extends ContentView {
		constructor(mark, children = [], length = 0) {
			super();
			this.mark = mark;
			this.children = children;
			this.length = length;
			for (let ch of children)
				ch.setParent(this);
		}
		setAttrs(dom) {
			clearAttributes(dom);
			if (this.mark.class)
				dom.className = this.mark.class;
			if (this.mark.attrs)
				for (let name in this.mark.attrs)
					dom.setAttribute(name, this.mark.attrs[name]);
			return dom;
		}
		canReuseDOM(other) {
			return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
		}
		reuseDOM(node) {
			if (node.nodeName == this.mark.tagName.toUpperCase()) {
				this.setDOM(node);
				this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
			}
		}
		sync(view, track) {
			if (!this.dom)
				this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
			else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
				this.setAttrs(this.dom);
			super.sync(view, track);
		}
		merge(from, to, source, _hasStart, openStart, openEnd) {
			if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
				(from && openStart <= 0) || (to < this.length && openEnd <= 0)))
				return false;
			mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
			this.markDirty();
			return true;
		}
		split(from) {
			let result = [], off = 0, detachFrom = -1, i = 0;
			for (let elt of this.children) {
				let end = off + elt.length;
				if (end > from)
					result.push(off < from ? elt.split(from - off) : elt);
				if (detachFrom < 0 && off >= from)
					detachFrom = i;
				off = end;
				i++;
			}
			let length = this.length - from;
			this.length = from;
			if (detachFrom > -1) {
				this.children.length = detachFrom;
				this.markDirty();
			}
			return new MarkView(this.mark, result, length);
		}
		domAtPos(pos) {
			return inlineDOMAtPos(this, pos);
		}
		coordsAt(pos, side) {
			return coordsInChildren(this, pos, side);
		}
	}
	function textCoords(text, pos, side) {
		let length = text.nodeValue.length;
		if (pos > length)
			pos = length;
		let from = pos, to = pos, flatten = 0;
		if (pos == 0 && side < 0 || pos == length && side >= 0) {
			if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
				if (pos) {
					from--;
					flatten = 1;
				} // FIXME this is wrong in RTL text
				else if (to < length) {
					to++;
					flatten = -1;
				}
			}
		}
		else {
			if (side < 0)
				from--;
			else if (to < length)
				to++;
		}
		let rects = textRange(text, from, to).getClientRects();
		if (!rects.length)
			return null;
		let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
		if (browser.safari && !flatten && rect.width == 0)
			rect = Array.prototype.find.call(rects, r => r.width) || rect;
		return flatten ? flattenRect(rect, flatten < 0) : rect || null;
	}
	// Also used for collapsed ranges that don't have a placeholder widget!
	class WidgetView extends ContentView {
		static create(widget, length, side) {
			return new WidgetView(widget, length, side);
		}
		constructor(widget, length, side) {
			super();
			this.widget = widget;
			this.length = length;
			this.side = side;
			this.prevWidget = null;
		}
		split(from) {
			let result = WidgetView.create(this.widget, this.length - from, this.side);
			this.length -= from;
			return result;
		}
		sync(view) {
			if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
				if (this.dom && this.prevWidget)
					this.prevWidget.destroy(this.dom);
				this.prevWidget = null;
				this.setDOM(this.widget.toDOM(view));
				this.dom.contentEditable = "false";
			}
		}
		getSide() { return this.side; }
		merge(from, to, source, hasStart, openStart, openEnd) {
			if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
				from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
				return false;
			this.length = from + (source ? source.length : 0) + (this.length - to);
			return true;
		}
		become(other) {
			if (other instanceof WidgetView && other.side == this.side &&
				this.widget.constructor == other.widget.constructor) {
				if (!this.widget.compare(other.widget))
					this.markDirty(true);
				if (this.dom && !this.prevWidget)
					this.prevWidget = this.widget;
				this.widget = other.widget;
				this.length = other.length;
				return true;
			}
			return false;
		}
		ignoreMutation() { return true; }
		ignoreEvent(event) { return this.widget.ignoreEvent(event); }
		get overrideDOMText() {
			if (this.length == 0)
				return state.Text.empty;
			let top = this;
			while (top.parent)
				top = top.parent;
			let { view } = top, text = view && view.state.doc, start = this.posAtStart;
			return text ? text.slice(start, start + this.length) : state.Text.empty;
		}
		domAtPos(pos) {
			return (this.length ? pos == 0 : this.side > 0)
				? DOMPos.before(this.dom)
				: DOMPos.after(this.dom, pos == this.length);
		}
		domBoundsAround() { return null; }
		coordsAt(pos, side) {
			let custom = this.widget.coordsAt(this.dom, pos, side);
			if (custom)
				return custom;
			let rects = this.dom.getClientRects(), rect = null;
			if (!rects.length)
				return null;
			let fromBack = this.side ? this.side < 0 : pos > 0;
			for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
				rect = rects[i];
				if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
					break;
			}
			return flattenRect(rect, !fromBack);
		}
		get isEditable() { return false; }
		get isWidget() { return true; }
		get isHidden() { return this.widget.isHidden; }
		destroy() {
			super.destroy();
			if (this.dom)
				this.widget.destroy(this.dom);
		}
	}
	// These are drawn around uneditable widgets to avoid a number of
	// browser bugs that show up when the cursor is directly next to
	// uneditable inline content.
	class WidgetBufferView extends ContentView {
		constructor(side) {
			super();
			this.side = side;
		}
		get length() { return 0; }
		merge() { return false; }
		become(other) {
			return other instanceof WidgetBufferView && other.side == this.side;
		}
		split() { return new WidgetBufferView(this.side); }
		sync() {
			if (!this.dom) {
				let dom = document.createElement("img");
				dom.className = "cm-widgetBuffer";
				dom.setAttribute("aria-hidden", "true");
				this.setDOM(dom);
			}
		}
		getSide() { return this.side; }
		domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
		localPosFromDOM() { return 0; }
		domBoundsAround() { return null; }
		coordsAt(pos) {
			return this.dom.getBoundingClientRect();
		}
		get overrideDOMText() {
			return state.Text.empty;
		}
		get isHidden() { return true; }
	}
	TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
	function inlineDOMAtPos(parent, pos) {
		let dom = parent.dom, { children } = parent, i = 0;
		for (let off = 0; i < children.length; i++) {
			let child = children[i], end = off + child.length;
			if (end == off && child.getSide() <= 0)
				continue;
			if (pos > off && pos < end && child.dom.parentNode == dom)
				return child.domAtPos(pos - off);
			if (pos <= off)
				break;
			off = end;
		}
		for (let j = i; j > 0; j--) {
			let prev = children[j - 1];
			if (prev.dom.parentNode == dom)
				return prev.domAtPos(prev.length);
		}
		for (let j = i; j < children.length; j++) {
			let next = children[j];
			if (next.dom.parentNode == dom)
				return next.domAtPos(0);
		}
		return new DOMPos(dom, 0);
	}
	// Assumes `view`, if a mark view, has precisely 1 child.
	function joinInlineInto(parent, view, open) {
		let last, { children } = parent;
		if (open > 0 && view instanceof MarkView && children.length &&
			(last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
			joinInlineInto(last, view.children[0], open - 1);
		}
		else {
			children.push(view);
			view.setParent(parent);
		}
		parent.length += view.length;
	}
	function coordsInChildren(view, pos, side) {
		let before = null, beforePos = -1, after = null, afterPos = -1;
		function scan(view, pos) {
			for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
				let child = view.children[i], end = off + child.length;
				if (end >= pos) {
					if (child.children.length) {
						scan(child, pos - off);
					}
					else if ((!after || after.isHidden && side > 0) &&
						(end > pos || off == end && child.getSide() > 0)) {
						after = child;
						afterPos = pos - off;
					}
					else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
						before = child;
						beforePos = pos - off;
					}
				}
				off = end;
			}
		}
		scan(view, pos);
		let target = (side < 0 ? before : after) || before || after;
		if (target)
			return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
		return fallbackRect(view);
	}
	function fallbackRect(view) {
		let last = view.dom.lastChild;
		if (!last)
			return view.dom.getBoundingClientRect();
		let rects = clientRectsFor(last);
		return rects[rects.length - 1] || null;
	}
	
	function combineAttrs(source, target) {
		for (let name in source) {
			if (name == "class" && target.class)
				target.class += " " + source.class;
			else if (name == "style" && target.style)
				target.style += ";" + source.style;
			else
				target[name] = source[name];
		}
		return target;
	}
	const noAttrs = Object.create(null);
	function attrsEq(a, b, ignore) {
		if (a == b)
			return true;
		if (!a)
			a = noAttrs;
		if (!b)
			b = noAttrs;
		let keysA = Object.keys(a), keysB = Object.keys(b);
		if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
			keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
			return false;
		for (let key of keysA) {
			if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
				return false;
		}
		return true;
	}
	function updateAttrs(dom, prev, attrs) {
		let changed = false;
		if (prev)
			for (let name in prev)
				if (!(attrs && name in attrs)) {
					changed = true;
					if (name == "style")
						dom.style.cssText = "";
					else
						dom.removeAttribute(name);
				}
		if (attrs)
			for (let name in attrs)
				if (!(prev && prev[name] == attrs[name])) {
					changed = true;
					if (name == "style")
						dom.style.cssText = attrs[name];
					else
						dom.setAttribute(name, attrs[name]);
				}
		return changed;
	}
	function getAttrs(dom) {
		let attrs = Object.create(null);
		for (let i = 0; i < dom.attributes.length; i++) {
			let attr = dom.attributes[i];
			attrs[attr.name] = attr.value;
		}
		return attrs;
	}
	
	class LineView extends ContentView {
		constructor() {
			super(...arguments);
			this.children = [];
			this.length = 0;
			this.prevAttrs = undefined;
			this.attrs = null;
			this.breakAfter = 0;
		}
		// Consumes source
		merge(from, to, source, hasStart, openStart, openEnd) {
			if (source) {
				if (!(source instanceof LineView))
					return false;
				if (!this.dom)
					source.transferDOM(this); // Reuse source.dom when appropriate
			}
			if (hasStart)
				this.setDeco(source ? source.attrs : null);
			mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
			return true;
		}
		split(at) {
			let end = new LineView;
			end.breakAfter = this.breakAfter;
			if (this.length == 0)
				return end;
			let { i, off } = this.childPos(at);
			if (off) {
				end.append(this.children[i].split(off), 0);
				this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
				i++;
			}
			for (let j = i; j < this.children.length; j++)
				end.append(this.children[j], 0);
			while (i > 0 && this.children[i - 1].length == 0)
				this.children[--i].destroy();
			this.children.length = i;
			this.markDirty();
			this.length = at;
			return end;
		}
		transferDOM(other) {
			if (!this.dom)
				return;
			this.markDirty();
			other.setDOM(this.dom);
			other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
			this.prevAttrs = undefined;
			this.dom = null;
		}
		setDeco(attrs) {
			if (!attrsEq(this.attrs, attrs)) {
				if (this.dom) {
					this.prevAttrs = this.attrs;
					this.markDirty();
				}
				this.attrs = attrs;
			}
		}
		append(child, openStart) {
			joinInlineInto(this, child, openStart);
		}
		// Only called when building a line view in ContentBuilder
		addLineDeco(deco) {
			let attrs = deco.spec.attributes, cls = deco.spec.class;
			if (attrs)
				this.attrs = combineAttrs(attrs, this.attrs || {});
			if (cls)
				this.attrs = combineAttrs({ class: cls }, this.attrs || {});
		}
		domAtPos(pos) {
			return inlineDOMAtPos(this, pos);
		}
		reuseDOM(node) {
			if (node.nodeName == "DIV") {
				this.setDOM(node);
				this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
			}
		}
		sync(view, track) {
			var _a;
			if (!this.dom) {
				this.setDOM(document.createElement("div"));
				this.dom.className = "cm-line";
				this.prevAttrs = this.attrs ? null : undefined;
			}
			else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
				clearAttributes(this.dom);
				this.dom.className = "cm-line";
				this.prevAttrs = this.attrs ? null : undefined;
			}
			if (this.prevAttrs !== undefined) {
				updateAttrs(this.dom, this.prevAttrs, this.attrs);
				this.dom.classList.add("cm-line");
				this.prevAttrs = undefined;
			}
			super.sync(view, track);
			let last = this.dom.lastChild;
			while (last && ContentView.get(last) instanceof MarkView)
				last = last.lastChild;
			if (!last || !this.length ||
				last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
					(!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
				let hack = document.createElement("BR");
				hack.cmIgnore = true;
				this.dom.appendChild(hack);
			}
		}
		measureTextSize() {
			if (this.children.length == 0 || this.length > 20)
				return null;
			let totalWidth = 0, textHeight;
			for (let child of this.children) {
				if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
					return null;
				let rects = clientRectsFor(child.dom);
				if (rects.length != 1)
					return null;
				totalWidth += rects[0].width;
				textHeight = rects[0].height;
			}
			return !totalWidth ? null : {
				lineHeight: this.dom.getBoundingClientRect().height,
				charWidth: totalWidth / this.length,
				textHeight
			};
		}
		coordsAt(pos, side) {
			let rect = coordsInChildren(this, pos, side);
			// Correct rectangle height for empty lines when the returned
			// height is larger than the text height.
			if (!this.children.length && rect && this.parent) {
				let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
				if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
					let dist = (height - heightOracle.textHeight) / 2;
					return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
				}
			}
			return rect;
		}
		become(_other) { return false; }
		covers() { return true; }
		static find(docView, pos) {
			for (let i = 0, off = 0; i < docView.children.length; i++) {
				let block = docView.children[i], end = off + block.length;
				if (end >= pos) {
					if (block instanceof LineView)
						return block;
					if (end > pos)
						break;
				}
				off = end + block.breakAfter;
			}
			return null;
		}
	}
	class BlockWidgetView extends ContentView {
		constructor(widget, length, deco) {
			super();
			this.widget = widget;
			this.length = length;
			this.deco = deco;
			this.breakAfter = 0;
			this.prevWidget = null;
		}
		merge(from, to, source, _takeDeco, openStart, openEnd) {
			if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
				from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
				return false;
			this.length = from + (source ? source.length : 0) + (this.length - to);
			return true;
		}
		domAtPos(pos) {
			return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
		}
		split(at) {
			let len = this.length - at;
			this.length = at;
			let end = new BlockWidgetView(this.widget, len, this.deco);
			end.breakAfter = this.breakAfter;
			return end;
		}
		get children() { return noChildren; }
		sync(view) {
			if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
				if (this.dom && this.prevWidget)
					this.prevWidget.destroy(this.dom);
				this.prevWidget = null;
				this.setDOM(this.widget.toDOM(view));
				this.dom.contentEditable = "false";
			}
		}
		get overrideDOMText() {
			return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : state.Text.empty;
		}
		domBoundsAround() { return null; }
		become(other) {
			if (other instanceof BlockWidgetView &&
				other.widget.constructor == this.widget.constructor) {
				if (!other.widget.compare(this.widget))
					this.markDirty(true);
				if (this.dom && !this.prevWidget)
					this.prevWidget = this.widget;
				this.widget = other.widget;
				this.length = other.length;
				this.deco = other.deco;
				this.breakAfter = other.breakAfter;
				return true;
			}
			return false;
		}
		ignoreMutation() { return true; }
		ignoreEvent(event) { return this.widget.ignoreEvent(event); }
		get isEditable() { return false; }
		get isWidget() { return true; }
		coordsAt(pos, side) {
			return this.widget.coordsAt(this.dom, pos, side);
		}
		destroy() {
			super.destroy();
			if (this.dom)
				this.widget.destroy(this.dom);
		}
		covers(side) {
			let { startSide, endSide } = this.deco;
			return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
		}
	}
	
	/**
	Widgets added to the content are described by subclasses of this
	class. Using a description object like that makes it possible to
	delay creating of the DOM structure for a widget until it is
	needed, and to avoid redrawing widgets even if the decorations
	that define them are recreated.
	*/
	class WidgetType {
		/**
		Compare this instance to another instance of the same type.
		(TypeScript can't express this, but only instances of the same
		specific class will be passed to this method.) This is used to
		avoid redrawing widgets when they are replaced by a new
		decoration of the same type. The default implementation just
		returns `false`, which will cause new instances of the widget to
		always be redrawn.
		*/
		eq(widget) { return false; }
		/**
		Update a DOM element created by a widget of the same type (but
		different, non-`eq` content) to reflect this widget. May return
		true to indicate that it could update, false to indicate it
		couldn't (in which case the widget will be redrawn). The default
		implementation just returns false.
		*/
		updateDOM(dom, view) { return false; }
		/**
		@internal
		*/
		compare(other) {
			return this == other || this.constructor == other.constructor && this.eq(other);
		}
		/**
		The estimated height this widget will have, to be used when
		estimating the height of content that hasn't been drawn. May
		return -1 to indicate you don't know. The default implementation
		returns -1.
		*/
		get estimatedHeight() { return -1; }
		/**
		For inline widgets that are displayed inline (as opposed to
		`inline-block`) and introduce line breaks (through `<br>` tags
		or textual newlines), this must indicate the amount of line
		breaks they introduce. Defaults to 0.
		*/
		get lineBreaks() { return 0; }
		/**
		Can be used to configure which kinds of events inside the widget
		should be ignored by the editor. The default is to ignore all
		events.
		*/
		ignoreEvent(event) { return true; }
		/**
		Override the way screen coordinates for positions at/in the
		widget are found. `pos` will be the offset into the widget, and
		`side` the side of the position that is being queried—less than
		zero for before, greater than zero for after, and zero for
		directly at that position.
		*/
		coordsAt(dom, pos, side) { return null; }
		/**
		@internal
		*/
		get isHidden() { return false; }
		/**
		This is called when the an instance of the widget is removed
		from the editor view.
		*/
		destroy(dom) { }
	}
	/**
	The different types of blocks that can occur in an editor view.
	*/
	exports.BlockType = void 0;
	(function (BlockType) {
		/**
		A line of text.
		*/
		BlockType[BlockType["Text"] = 0] = "Text";
		/**
		A block widget associated with the position after it.
		*/
		BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
		/**
		A block widget associated with the position before it.
		*/
		BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
		/**
		A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
		*/
		BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
	})(exports.BlockType || (exports.BlockType = {}));
	/**
	A decoration provides information on how to draw or style a piece
	of content. You'll usually use it wrapped in a
	[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
	@nonabstract
	*/
	class Decoration extends state.RangeValue {
		constructor(
		/**
		@internal
		*/
		startSide, 
		/**
		@internal
		*/
		endSide, 
		/**
		@internal
		*/
		widget, 
		/**
		The config object used to create this decoration. You can
		include additional properties in there to store metadata about
		your decoration.
		*/
		spec) {
			super();
			this.startSide = startSide;
			this.endSide = endSide;
			this.widget = widget;
			this.spec = spec;
		}
		/**
		@internal
		*/
		get heightRelevant() { return false; }
		/**
		Create a mark decoration, which influences the styling of the
		content in its range. Nested mark decorations will cause nested
		DOM elements to be created. Nesting order is determined by
		precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
		the higher-precedence decorations creating the inner DOM nodes.
		Such elements are split on line boundaries and on the boundaries
		of lower-precedence decorations.
		*/
		static mark(spec) {
			return new MarkDecoration(spec);
		}
		/**
		Create a widget decoration, which displays a DOM element at the
		given position.
		*/
		static widget(spec) {
			let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
			side += (block && !spec.inlineOrder)
				? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
				: (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
			return new PointDecoration(spec, side, side, block, spec.widget || null, false);
		}
		/**
		Create a replace decoration which replaces the given range with
		a widget, or simply hides it.
		*/
		static replace(spec) {
			let block = !!spec.block, startSide, endSide;
			if (spec.isBlockGap) {
				startSide = -500000000 /* Side.GapStart */;
				endSide = 400000000 /* Side.GapEnd */;
			}
			else {
				let { start, end } = getInclusive(spec, block);
				startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
				endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
			}
			return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
		}
		/**
		Create a line decoration, which can add DOM attributes to the
		line starting at the given position.
		*/
		static line(spec) {
			return new LineDecoration(spec);
		}
		/**
		Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
		decorated range or ranges. If the ranges aren't already sorted,
		pass `true` for `sort` to make the library sort them for you.
		*/
		static set(of, sort = false) {
			return state.RangeSet.of(of, sort);
		}
		/**
		@internal
		*/
		hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
	}
	/**
	The empty set of decorations.
	*/
	Decoration.none = state.RangeSet.empty;
	class MarkDecoration extends Decoration {
		constructor(spec) {
			let { start, end } = getInclusive(spec);
			super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
			this.tagName = spec.tagName || "span";
			this.class = spec.class || "";
			this.attrs = spec.attributes || null;
		}
		eq(other) {
			var _a, _b;
			return this == other ||
				other instanceof MarkDecoration &&
					this.tagName == other.tagName &&
					(this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
					attrsEq(this.attrs, other.attrs, "class");
		}
		range(from, to = from) {
			if (from >= to)
				throw new RangeError("Mark decorations may not be empty");
			return super.range(from, to);
		}
	}
	MarkDecoration.prototype.point = false;
	class LineDecoration extends Decoration {
		constructor(spec) {
			super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
		}
		eq(other) {
			return other instanceof LineDecoration &&
				this.spec.class == other.spec.class &&
				attrsEq(this.spec.attributes, other.spec.attributes);
		}
		range(from, to = from) {
			if (to != from)
				throw new RangeError("Line decoration ranges must be zero-length");
			return super.range(from, to);
		}
	}
	LineDecoration.prototype.mapMode = state.MapMode.TrackBefore;
	LineDecoration.prototype.point = true;
	class PointDecoration extends Decoration {
		constructor(spec, startSide, endSide, block, widget, isReplace) {
			super(startSide, endSide, widget, spec);
			this.block = block;
			this.isReplace = isReplace;
			this.mapMode = !block ? state.MapMode.TrackDel : startSide <= 0 ? state.MapMode.TrackBefore : state.MapMode.TrackAfter;
		}
		// Only relevant when this.block == true
		get type() {
			return this.startSide != this.endSide ? exports.BlockType.WidgetRange
				: this.startSide <= 0 ? exports.BlockType.WidgetBefore : exports.BlockType.WidgetAfter;
		}
		get heightRelevant() {
			return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
		}
		eq(other) {
			return other instanceof PointDecoration &&
				widgetsEq(this.widget, other.widget) &&
				this.block == other.block &&
				this.startSide == other.startSide && this.endSide == other.endSide;
		}
		range(from, to = from) {
			if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
				throw new RangeError("Invalid range for replacement decoration");
			if (!this.isReplace && to != from)
				throw new RangeError("Widget decorations can only have zero-length ranges");
			return super.range(from, to);
		}
	}
	PointDecoration.prototype.point = true;
	function getInclusive(spec, block = false) {
		let { inclusiveStart: start, inclusiveEnd: end } = spec;
		if (start == null)
			start = spec.inclusive;
		if (end == null)
			end = spec.inclusive;
		return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
	}
	function widgetsEq(a, b) {
		return a == b || !!(a && b && a.compare(b));
	}
	function addRange(from, to, ranges, margin = 0) {
		let last = ranges.length - 1;
		if (last >= 0 && ranges[last] + margin >= from)
			ranges[last] = Math.max(ranges[last], to);
		else
			ranges.push(from, to);
	}
	
	class ContentBuilder {
		constructor(doc, pos, end, disallowBlockEffectsFor) {
			this.doc = doc;
			this.pos = pos;
			this.end = end;
			this.disallowBlockEffectsFor = disallowBlockEffectsFor;
			this.content = [];
			this.curLine = null;
			this.breakAtStart = 0;
			this.pendingBuffer = 0 /* Buf.No */;
			this.bufferMarks = [];
			// Set to false directly after a widget that covers the position after it
			this.atCursorPos = true;
			this.openStart = -1;
			this.openEnd = -1;
			this.text = "";
			this.textOff = 0;
			this.cursor = doc.iter();
			this.skip = pos;
		}
		posCovered() {
			if (this.content.length == 0)
				return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
			let last = this.content[this.content.length - 1];
			return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
		}
		getLine() {
			if (!this.curLine) {
				this.content.push(this.curLine = new LineView);
				this.atCursorPos = true;
			}
			return this.curLine;
		}
		flushBuffer(active = this.bufferMarks) {
			if (this.pendingBuffer) {
				this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
				this.pendingBuffer = 0 /* Buf.No */;
			}
		}
		addBlockWidget(view) {
			this.flushBuffer();
			this.curLine = null;
			this.content.push(view);
		}
		finish(openEnd) {
			if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
				this.flushBuffer();
			else
				this.pendingBuffer = 0 /* Buf.No */;
			if (!this.posCovered() &&
				!(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
				this.getLine();
		}
		buildText(length, active, openStart) {
			while (length > 0) {
				if (this.textOff == this.text.length) {
					let { value, lineBreak, done } = this.cursor.next(this.skip);
					this.skip = 0;
					if (done)
						throw new Error("Ran out of text content when drawing inline views");
					if (lineBreak) {
						if (!this.posCovered())
							this.getLine();
						if (this.content.length)
							this.content[this.content.length - 1].breakAfter = 1;
						else
							this.breakAtStart = 1;
						this.flushBuffer();
						this.curLine = null;
						this.atCursorPos = true;
						length--;
						continue;
					}
					else {
						this.text = value;
						this.textOff = 0;
					}
				}
				let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
				this.flushBuffer(active.slice(active.length - openStart));
				this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
				this.atCursorPos = true;
				this.textOff += take;
				length -= take;
				openStart = 0;
			}
		}
		span(from, to, active, openStart) {
			this.buildText(to - from, active, openStart);
			this.pos = to;
			if (this.openStart < 0)
				this.openStart = openStart;
		}
		point(from, to, deco, active, openStart, index) {
			if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
				if (deco.block)
					throw new RangeError("Block decorations may not be specified via plugins");
				if (to > this.doc.lineAt(this.pos).to)
					throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
			}
			let len = to - from;
			if (deco instanceof PointDecoration) {
				if (deco.block) {
					if (deco.startSide > 0 && !this.posCovered())
						this.getLine();
					this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, deco));
				}
				else {
					let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
					let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
						(from < to || deco.startSide > 0);
					let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
					let line = this.getLine();
					if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
						this.pendingBuffer = 0 /* Buf.No */;
					this.flushBuffer(active);
					if (cursorBefore) {
						line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
						openStart = active.length + Math.max(0, openStart - active.length);
					}
					line.append(wrapMarks(view, active), openStart);
					this.atCursorPos = cursorAfter;
					this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
					if (this.pendingBuffer)
						this.bufferMarks = active.slice();
				}
			}
			else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
				this.getLine().addLineDeco(deco);
			}
			if (len) {
				// Advance the iterator past the replaced content
				if (this.textOff + len <= this.text.length) {
					this.textOff += len;
				}
				else {
					this.skip += len - (this.text.length - this.textOff);
					this.text = "";
					this.textOff = 0;
				}
				this.pos = to;
			}
			if (this.openStart < 0)
				this.openStart = openStart;
		}
		static build(text, from, to, decorations, dynamicDecorationMap) {
			let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
			builder.openEnd = state.RangeSet.spans(decorations, from, to, builder);
			if (builder.openStart < 0)
				builder.openStart = builder.openEnd;
			builder.finish(builder.openEnd);
			return builder;
		}
	}
	function wrapMarks(view, active) {
		for (let mark of active)
			view = new MarkView(mark, [view], view.length);
		return view;
	}
	class NullWidget extends WidgetType {
		constructor(tag) {
			super();
			this.tag = tag;
		}
		eq(other) { return other.tag == this.tag; }
		toDOM() { return document.createElement(this.tag); }
		updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
		get isHidden() { return true; }
	}
	
	const clickAddsSelectionRange = state.Facet.define();
	const dragMovesSelection$1 = state.Facet.define();
	const mouseSelectionStyle = state.Facet.define();
	const exceptionSink = state.Facet.define();
	const updateListener = state.Facet.define();
	const inputHandler = state.Facet.define();
	const focusChangeEffect = state.Facet.define();
	const perLineTextDirection = state.Facet.define({
		combine: values => values.some(x => x)
	});
	const nativeSelectionHidden = state.Facet.define({
		combine: values => values.some(x => x)
	});
	class ScrollTarget {
		constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
		// This data structure is abused to also store precise scroll
		// snapshots, instead of a `scrollIntoView` request. When this
		// flag is `true`, `range` points at a position in the reference
		// line, `yMargin` holds the difference between the top of that
		// line and the top of the editor, and `xMargin` holds the
		// editor's `scrollLeft`.
		isSnapshot = false) {
			this.range = range;
			this.y = y;
			this.x = x;
			this.yMargin = yMargin;
			this.xMargin = xMargin;
			this.isSnapshot = isSnapshot;
		}
		map(changes) {
			return changes.empty ? this :
				new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
		}
		clip(state$1) {
			return this.range.to <= state$1.doc.length ? this :
				new ScrollTarget(state.EditorSelection.cursor(state$1.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
		}
	}
	const scrollIntoView = state.StateEffect.define({ map: (t, ch) => t.map(ch) });
	/**
	Log or report an unhandled exception in client code. Should
	probably only be used by extension code that allows client code to
	provide functions, and calls those functions in a context where an
	exception can't be propagated to calling code in a reasonable way
	(for example when in an event handler).
	
	Either calls a handler registered with
	[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
	`window.onerror`, if defined, or `console.error` (in which case
	it'll pass `context`, when given, as first argument).
	*/
	function logException(state, exception, context) {
		let handler = state.facet(exceptionSink);
		if (handler.length)
			handler[0](exception);
		else if (window.onerror)
			window.onerror(String(exception), context, undefined, undefined, exception);
		else if (context)
			console.error(context + ":", exception);
		else
			console.error(exception);
	}
	const editable = state.Facet.define({ combine: values => values.length ? values[0] : true });
	let nextPluginID = 0;
	const viewPlugin = state.Facet.define();
	/**
	View plugins associate stateful values with a view. They can
	influence the way the content is drawn, and are notified of things
	that happen in the view.
	*/
	class ViewPlugin {
		constructor(
		/**
		@internal
		*/
		id, 
		/**
		@internal
		*/
		create, 
		/**
		@internal
		*/
		domEventHandlers, 
		/**
		@internal
		*/
		domEventObservers, buildExtensions) {
			this.id = id;
			this.create = create;
			this.domEventHandlers = domEventHandlers;
			this.domEventObservers = domEventObservers;
			this.extension = buildExtensions(this);
		}
		/**
		Define a plugin from a constructor function that creates the
		plugin's value, given an editor view.
		*/
		static define(create, spec) {
			const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
			return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
				let ext = [viewPlugin.of(plugin)];
				if (deco)
					ext.push(decorations.of(view => {
						let pluginInst = view.plugin(plugin);
						return pluginInst ? deco(pluginInst) : Decoration.none;
					}));
				if (provide)
					ext.push(provide(plugin));
				return ext;
			});
		}
		/**
		Create a plugin for a class whose constructor takes a single
		editor view as argument.
		*/
		static fromClass(cls, spec) {
			return ViewPlugin.define(view => new cls(view), spec);
		}
	}
	class PluginInstance {
		constructor(spec) {
			this.spec = spec;
			// When starting an update, all plugins have this field set to the
			// update object, indicating they need to be updated. When finished
			// updating, it is set to `false`. Retrieving a plugin that needs to
			// be updated with `view.plugin` forces an eager update.
			this.mustUpdate = null;
			// This is null when the plugin is initially created, but
			// initialized on the first update.
			this.value = null;
		}
		update(view) {
			if (!this.value) {
				if (this.spec) {
					try {
						this.value = this.spec.create(view);
					}
					catch (e) {
						logException(view.state, e, "CodeMirror plugin crashed");
						this.deactivate();
					}
				}
			}
			else if (this.mustUpdate) {
				let update = this.mustUpdate;
				this.mustUpdate = null;
				if (this.value.update) {
					try {
						this.value.update(update);
					}
					catch (e) {
						logException(update.state, e, "CodeMirror plugin crashed");
						if (this.value.destroy)
							try {
								this.value.destroy();
							}
							catch (_) { }
						this.deactivate();
					}
				}
			}
			return this;
		}
		destroy(view) {
			var _a;
			if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
				try {
					this.value.destroy();
				}
				catch (e) {
					logException(view.state, e, "CodeMirror plugin crashed");
				}
			}
		}
		deactivate() {
			this.spec = this.value = null;
		}
	}
	const editorAttributes = state.Facet.define();
	const contentAttributes = state.Facet.define();
	// Provide decorations
	const decorations = state.Facet.define();
	const atomicRanges = state.Facet.define();
	const bidiIsolatedRanges = state.Facet.define();
	function getIsolatedRanges(view, from, to) {
		let isolates = view.state.facet(bidiIsolatedRanges);
		if (!isolates.length)
			return isolates;
		let sets = isolates.map(i => i instanceof Function ? i(view) : i);
		let result = [];
		state.RangeSet.spans(sets, from, to, {
			point() { },
			span(from, to, active, open) {
				let level = result;
				for (let i = active.length - 1; i >= 0; i--, open--) {
					let iso = active[i].spec.bidiIsolate, update;
					if (iso == null)
						continue;
					if (open > 0 && level.length &&
						(update = level[level.length - 1]).to == from && update.direction == iso) {
						update.to = to;
						level = update.inner;
					}
					else {
						let add = { from, to, direction: iso, inner: [] };
						level.push(add);
						level = add.inner;
					}
				}
			}
		});
		return result;
	}
	const scrollMargins = state.Facet.define();
	function getScrollMargins(view) {
		let left = 0, right = 0, top = 0, bottom = 0;
		for (let source of view.state.facet(scrollMargins)) {
			let m = source(view);
			if (m) {
				if (m.left != null)
					left = Math.max(left, m.left);
				if (m.right != null)
					right = Math.max(right, m.right);
				if (m.top != null)
					top = Math.max(top, m.top);
				if (m.bottom != null)
					bottom = Math.max(bottom, m.bottom);
			}
		}
		return { left, right, top, bottom };
	}
	const styleModule = state.Facet.define();
	class ChangedRange {
		constructor(fromA, toA, fromB, toB) {
			this.fromA = fromA;
			this.toA = toA;
			this.fromB = fromB;
			this.toB = toB;
		}
		join(other) {
			return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
		}
		addToSet(set) {
			let i = set.length, me = this;
			for (; i > 0; i--) {
				let range = set[i - 1];
				if (range.fromA > me.toA)
					continue;
				if (range.toA < me.fromA)
					break;
				me = me.join(range);
				set.splice(i - 1, 1);
			}
			set.splice(i, 0, me);
			return set;
		}
		static extendWithRanges(diff, ranges) {
			if (ranges.length == 0)
				return diff;
			let result = [];
			for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
				let next = dI == diff.length ? null : diff[dI], off = posA - posB;
				let end = next ? next.fromB : 1e9;
				while (rI < ranges.length && ranges[rI] < end) {
					let from = ranges[rI], to = ranges[rI + 1];
					let fromB = Math.max(posB, from), toB = Math.min(end, to);
					if (fromB <= toB)
						new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
					if (to > end)
						break;
					else
						rI += 2;
				}
				if (!next)
					return result;
				new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
				posA = next.toA;
				posB = next.toB;
			}
		}
	}
	/**
	View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
	class, which describe what happened, whenever the view is updated.
	*/
	class ViewUpdate {
		constructor(
		/**
		The editor view that the update is associated with.
		*/
		view, 
		/**
		The new editor state.
		*/
		state$1, 
		/**
		The transactions involved in the update. May be empty.
		*/
		transactions) {
			this.view = view;
			this.state = state$1;
			this.transactions = transactions;
			/**
			@internal
			*/
			this.flags = 0;
			this.startState = view.state;
			this.changes = state.ChangeSet.empty(this.startState.doc.length);
			for (let tr of transactions)
				this.changes = this.changes.compose(tr.changes);
			let changedRanges = [];
			this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
			this.changedRanges = changedRanges;
		}
		/**
		@internal
		*/
		static create(view, state, transactions) {
			return new ViewUpdate(view, state, transactions);
		}
		/**
		Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
		[visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
		update.
		*/
		get viewportChanged() {
			return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
		}
		/**
		Indicates whether the height of a block element in the editor
		changed in this update.
		*/
		get heightChanged() {
			return (this.flags & 2 /* UpdateFlag.Height */) > 0;
		}
		/**
		Returns true when the document was modified or the size of the
		editor, or elements within the editor, changed.
		*/
		get geometryChanged() {
			return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
		}
		/**
		True when this update indicates a focus change.
		*/
		get focusChanged() {
			return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
		}
		/**
		Whether the document changed in this update.
		*/
		get docChanged() {
			return !this.changes.empty;
		}
		/**
		Whether the selection was explicitly set in this update.
		*/
		get selectionSet() {
			return this.transactions.some(tr => tr.selection);
		}
		/**
		@internal
		*/
		get empty() { return this.flags == 0 && this.transactions.length == 0; }
	}
	
	/**
	Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
	*/
	exports.Direction = void 0;
	(function (Direction) {
		// (These are chosen to match the base levels, in bidi algorithm
		// terms, of spans in that direction.)
		/**
		Left-to-right.
		*/
		Direction[Direction["LTR"] = 0] = "LTR";
		/**
		Right-to-left.
		*/
		Direction[Direction["RTL"] = 1] = "RTL";
	})(exports.Direction || (exports.Direction = {}));
	const LTR = exports.Direction.LTR, RTL = exports.Direction.RTL;
	// Decode a string with each type encoded as log2(type)
	function dec(str) {
		let result = [];
		for (let i = 0; i < str.length; i++)
			result.push(1 << +str[i]);
		return result;
	}
	// Character types for codepoints 0 to 0xf8
	const LowTypes = dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
	// Character types for codepoints 0x600 to 0x6f9
	const ArabicTypes = dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
	const Brackets = Object.create(null), BracketStack = [];
	// There's a lot more in
	// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
	// which are left out to keep code size down.
	for (let p of ["()", "[]", "{}"]) {
		let l = p.charCodeAt(0), r = p.charCodeAt(1);
		Brackets[l] = r;
		Brackets[r] = -l;
	}
	function charType(ch) {
		return ch <= 0xf7 ? LowTypes[ch] :
			0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
				0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
					0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
						0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
							0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
	}
	const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
	/**
	Represents a contiguous range of text that has a single direction
	(as in left-to-right or right-to-left).
	*/
	class BidiSpan {
		/**
		The direction of this span.
		*/
		get dir() { return this.level % 2 ? RTL : LTR; }
		/**
		@internal
		*/
		constructor(
		/**
		The start of the span (relative to the start of the line).
		*/
		from, 
		/**
		The end of the span.
		*/
		to, 
		/**
		The ["bidi
		level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
		of the span (in this context, 0 means
		left-to-right, 1 means right-to-left, 2 means left-to-right
		number inside right-to-left text).
		*/
		level) {
			this.from = from;
			this.to = to;
			this.level = level;
		}
		/**
		@internal
		*/
		side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
		/**
		@internal
		*/
		static find(order, index, level, assoc) {
			let maybe = -1;
			for (let i = 0; i < order.length; i++) {
				let span = order[i];
				if (span.from <= index && span.to >= index) {
					if (span.level == level)
						return i;
					// When multiple spans match, if assoc != 0, take the one that
					// covers that side, otherwise take the one with the minimum
					// level.
					if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
						maybe = i;
				}
			}
			if (maybe < 0)
				throw new RangeError("Index out of range");
			return maybe;
		}
	}
	function isolatesEq(a, b) {
		if (a.length != b.length)
			return false;
		for (let i = 0; i < a.length; i++) {
			let iA = a[i], iB = b[i];
			if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
				return false;
		}
		return true;
	}
	// Reused array of character types
	const types = [];
	// Fill in the character types (in `types`) from `from` to `to` and
	// apply W normalization rules.
	function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
		for (let iI = 0; iI <= isolates.length; iI++) {
			let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
			let prevType = iI ? 256 /* T.NI */ : outerType;
			// W1. Examine each non-spacing mark (NSM) in the level run, and
			// change the type of the NSM to the type of the previous
			// character. If the NSM is at the start of the level run, it will
			// get the type of sor.
			// W2. Search backwards from each instance of a European number
			// until the first strong type (R, L, AL, or sor) is found. If an
			// AL is found, change the type of the European number to Arabic
			// number.
			// W3. Change all ALs to R.
			// (Left after this: L, R, EN, AN, ET, CS, NI)
			for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
				let type = charType(line.charCodeAt(i));
				if (type == 512 /* T.NSM */)
					type = prev;
				else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
					type = 16 /* T.AN */;
				types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
				if (type & 7 /* T.Strong */)
					prevStrong = type;
				prev = type;
			}
			// W5. A sequence of European terminators adjacent to European
			// numbers changes to all European numbers.
			// W6. Otherwise, separators and terminators change to Other
			// Neutral.
			// W7. Search backwards from each instance of a European number
			// until the first strong type (R, L, or sor) is found. If an L is
			// found, then change the type of the European number to L.
			// (Left after this: L, R, EN+AN, NI)
			for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
				let type = types[i];
				if (type == 128 /* T.CS */) {
					if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
						type = types[i] = prev;
					else
						types[i] = 256 /* T.NI */;
				}
				else if (type == 64 /* T.ET */) {
					let end = i + 1;
					while (end < to && types[end] == 64 /* T.ET */)
						end++;
					let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
					for (let j = i; j < end; j++)
						types[j] = replace;
					i = end - 1;
				}
				else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
					types[i] = 1 /* T.L */;
				}
				prev = type;
				if (type & 7 /* T.Strong */)
					prevStrong = type;
			}
		}
	}
	// Process brackets throughout a run sequence.
	function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
		let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
		for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
			let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
			// N0. Process bracket pairs in an isolating run sequence
			// sequentially in the logical order of the text positions of the
			// opening paired brackets using the logic given below. Within this
			// scope, bidirectional types EN and AN are treated as R.
			for (let i = from, ch, br, type; i < to; i++) {
				// Keeps [startIndex, type, strongSeen] triples for each open
				// bracket on BracketStack.
				if (br = Brackets[ch = line.charCodeAt(i)]) {
					if (br < 0) { // Closing bracket
						for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
							if (BracketStack[sJ + 1] == -br) {
								let flags = BracketStack[sJ + 2];
								let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
									!(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
										(flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
								if (type)
									types[i] = types[BracketStack[sJ]] = type;
								sI = sJ;
								break;
							}
						}
					}
					else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
						break;
					}
					else {
						BracketStack[sI++] = i;
						BracketStack[sI++] = ch;
						BracketStack[sI++] = context;
					}
				}
				else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
					let embed = type == outerType;
					context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
					for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
						let cur = BracketStack[sJ + 2];
						if (cur & 2 /* Bracketed.EmbedInside */)
							break;
						if (embed) {
							BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
						}
						else {
							if (cur & 4 /* Bracketed.OppositeInside */)
								break;
							BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
						}
					}
				}
			}
		}
	}
	function processNeutrals(rFrom, rTo, isolates, outerType) {
		for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
			let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
			// N1. A sequence of neutrals takes the direction of the
			// surrounding strong text if the text on both sides has the same
			// direction. European and Arabic numbers act as if they were R in
			// terms of their influence on neutrals. Start-of-level-run (sor)
			// and end-of-level-run (eor) are used at level run boundaries.
			// N2. Any remaining neutrals take the embedding direction.
			// (Left after this: L, R, EN+AN)
			for (let i = from; i < to;) {
				let type = types[i];
				if (type == 256 /* T.NI */) {
					let end = i + 1;
					for (;;) {
						if (end == to) {
							if (iI == isolates.length)
								break;
							end = isolates[iI++].to;
							to = iI < isolates.length ? isolates[iI].from : rTo;
						}
						else if (types[end] == 256 /* T.NI */) {
							end++;
						}
						else {
							break;
						}
					}
					let beforeL = prev == 1 /* T.L */;
					let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
					let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
					for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
						if (j == fromJ) {
							j = isolates[--jI].from;
							fromJ = jI ? isolates[jI - 1].to : rFrom;
						}
						types[--j] = replace;
					}
					i = end;
				}
				else {
					prev = type;
					i++;
				}
			}
		}
	}
	// Find the contiguous ranges of character types in a given range, and
	// emit spans for them. Flip the order of the spans as appropriate
	// based on the level, and call through to compute the spans for
	// isolates at the proper point.
	function emitSpans(line, from, to, level, baseLevel, isolates, order) {
		let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
		if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
			for (let iCh = from, iI = 0; iCh < to;) {
				// Scan a section of characters in direction ourType, unless
				// there's another type of char right after iCh, in which case
				// we scan a section of other characters (which, if ourType ==
				// T.L, may contain both T.R and T.AN chars).
				let sameDir = true, isNum = false;
				if (iI == isolates.length || iCh < isolates[iI].from) {
					let next = types[iCh];
					if (next != ourType) {
						sameDir = false;
						isNum = next == 16 /* T.AN */;
					}
				}
				// Holds an array of isolates to pass to a recursive call if we
				// must recurse (to distinguish T.AN inside an RTL section in
				// LTR text), null if we can emit directly
				let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
				let localLevel = sameDir ? level : level + 1;
				let iScan = iCh;
				run: for (;;) {
					if (iI < isolates.length && iScan == isolates[iI].from) {
						if (isNum)
							break run;
						let iso = isolates[iI];
						// Scan ahead to verify that there is another char in this dir after the isolate(s)
						if (!sameDir)
							for (let upto = iso.to, jI = iI + 1;;) {
								if (upto == to)
									break run;
								if (jI < isolates.length && isolates[jI].from == upto)
									upto = isolates[jI++].to;
								else if (types[upto] == ourType)
									break run;
								else
									break;
							}
						iI++;
						if (recurse) {
							recurse.push(iso);
						}
						else {
							if (iso.from > iCh)
								order.push(new BidiSpan(iCh, iso.from, localLevel));
							let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
							computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
							iCh = iso.to;
						}
						iScan = iso.to;
					}
					else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
						break;
					}
					else {
						iScan++;
					}
				}
				if (recurse)
					emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
				else if (iCh < iScan)
					order.push(new BidiSpan(iCh, iScan, localLevel));
				iCh = iScan;
			}
		}
		else {
			// Iterate in reverse to flip the span order. Same code again, but
			// going from the back of the section to the front
			for (let iCh = to, iI = isolates.length; iCh > from;) {
				let sameDir = true, isNum = false;
				if (!iI || iCh > isolates[iI - 1].to) {
					let next = types[iCh - 1];
					if (next != ourType) {
						sameDir = false;
						isNum = next == 16 /* T.AN */;
					}
				}
				let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
				let localLevel = sameDir ? level : level + 1;
				let iScan = iCh;
				run: for (;;) {
					if (iI && iScan == isolates[iI - 1].to) {
						if (isNum)
							break run;
						let iso = isolates[--iI];
						// Scan ahead to verify that there is another char in this dir after the isolate(s)
						if (!sameDir)
							for (let upto = iso.from, jI = iI;;) {
								if (upto == from)
									break run;
								if (jI && isolates[jI - 1].to == upto)
									upto = isolates[--jI].from;
								else if (types[upto - 1] == ourType)
									break run;
								else
									break;
							}
						if (recurse) {
							recurse.push(iso);
						}
						else {
							if (iso.to < iCh)
								order.push(new BidiSpan(iso.to, iCh, localLevel));
							let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
							computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
							iCh = iso.from;
						}
						iScan = iso.from;
					}
					else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
						break;
					}
					else {
						iScan--;
					}
				}
				if (recurse)
					emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
				else if (iScan < iCh)
					order.push(new BidiSpan(iScan, iCh, localLevel));
				iCh = iScan;
			}
		}
	}
	function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
		let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
		computeCharTypes(line, from, to, isolates, outerType);
		processBracketPairs(line, from, to, isolates, outerType);
		processNeutrals(from, to, isolates, outerType);
		emitSpans(line, from, to, level, baseLevel, isolates, order);
	}
	function computeOrder(line, direction, isolates) {
		if (!line)
			return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
		if (direction == LTR && !isolates.length && !BidiRE.test(line))
			return trivialOrder(line.length);
		if (isolates.length)
			while (line.length > types.length)
				types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
		let order = [], level = direction == LTR ? 0 : 1;
		computeSectionOrder(line, level, level, isolates, 0, line.length, order);
		return order;
	}
	function trivialOrder(length) {
		return [new BidiSpan(0, length, 0)];
	}
	let movedOver = "";
	function moveVisually(line, order, dir, start, forward) {
		var _a;
		let startIndex = start.head - line.from, spanI = -1;
		if (startIndex == 0) {
			if (!forward || !line.length)
				return null;
			if (order[0].level != dir) {
				startIndex = order[0].side(false, dir);
				spanI = 0;
			}
		}
		else if (startIndex == line.length) {
			if (forward)
				return null;
			let last = order[order.length - 1];
			if (last.level != dir) {
				startIndex = last.side(true, dir);
				spanI = order.length - 1;
			}
		}
		if (spanI < 0)
			spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
		let span = order[spanI];
		// End of span. (But not end of line--that was checked for above.)
		if (startIndex == span.side(forward, dir)) {
			span = order[spanI += forward ? 1 : -1];
			startIndex = span.side(!forward, dir);
		}
		let indexForward = forward == (span.dir == dir);
		let nextIndex = state.findClusterBreak(line.text, startIndex, indexForward);
		movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
		if (nextIndex > span.from && nextIndex < span.to)
			return state.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
		let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
		if (!nextSpan && span.level != dir)
			return state.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
		if (nextSpan && nextSpan.level < span.level)
			return state.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
		return state.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
	}
	
	class DocView extends ContentView {
		get length() { return this.view.state.doc.length; }
		constructor(view) {
			super();
			this.view = view;
			this.decorations = [];
			this.dynamicDecorationMap = [];
			this.domChanged = null;
			this.hasComposition = null;
			this.markedForComposition = new Set;
			// Track a minimum width for the editor. When measuring sizes in
			// measureVisibleLineHeights, this is updated to point at the width
			// of a given element and its extent in the document. When a change
			// happens in that range, these are reset. That way, once we've seen
			// a line/element of a given length, we keep the editor wide enough
			// to fit at least that element, until it is changed, at which point
			// we forget it again.
			this.minWidth = 0;
			this.minWidthFrom = 0;
			this.minWidthTo = 0;
			// Track whether the DOM selection was set in a lossy way, so that
			// we don't mess it up when reading it back it
			this.impreciseAnchor = null;
			this.impreciseHead = null;
			this.forceSelection = false;
			// Used by the resize observer to ignore resizes that we caused
			// ourselves
			this.lastUpdate = Date.now();
			this.setDOM(view.contentDOM);
			this.children = [new LineView];
			this.children[0].setParent(this);
			this.updateDeco();
			this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
		}
		// Update the document view to a given state.
		update(update) {
			var _a;
			let changedRanges = update.changedRanges;
			if (this.minWidth > 0 && changedRanges.length) {
				if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
					this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
				}
				else {
					this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
					this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
				}
			}
			let readCompositionAt = -1;
			if (this.view.inputState.composing >= 0) {
				if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
					readCompositionAt = this.domChanged.newSel.head;
				else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
					readCompositionAt = update.state.selection.main.head;
			}
			let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
			this.domChanged = null;
			if (this.hasComposition) {
				this.markedForComposition.clear();
				let { from, to } = this.hasComposition;
				changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
					.addToSet(changedRanges.slice());
			}
			this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
			// When the DOM nodes around the selection are moved to another
			// parent, Chrome sometimes reports a different selection through
			// getSelection than the one that it actually shows to the user.
			// This forces a selection update when lines are joined to work
			// around that. Issue #54
			if ((browser.ie || browser.chrome) && !composition && update &&
				update.state.doc.lines != update.startState.doc.lines)
				this.forceSelection = true;
			let prevDeco = this.decorations, deco = this.updateDeco();
			let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
			changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
			if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
				return false;
			}
			else {
				this.updateInner(changedRanges, update.startState.doc.length, composition);
				if (update.transactions.length)
					this.lastUpdate = Date.now();
				return true;
			}
		}
		// Used by update and the constructor do perform the actual DOM
		// update
		updateInner(changes, oldLength, composition) {
			this.view.viewState.mustMeasureContent = true;
			this.updateChildren(changes, oldLength, composition);
			let { observer } = this.view;
			observer.ignore(() => {
				// Lock the height during redrawing, since Chrome sometimes
				// messes with the scroll position during DOM mutation (though
				// no relayout is triggered and I cannot imagine how it can
				// recompute the scroll position without a layout)
				this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
				this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
				// Chrome will sometimes, when DOM mutations occur directly
				// around the selection, get confused and report a different
				// selection from the one it displays (issue #218). This tries
				// to detect that situation.
				let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
				this.sync(this.view, track);
				this.flags &= ~7 /* ViewFlag.Dirty */;
				if (track && (track.written || observer.selectionRange.focusNode != track.node))
					this.forceSelection = true;
				this.dom.style.height = "";
			});
			this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
			let gaps = [];
			if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
				for (let child of this.children)
					if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
						gaps.push(child.dom);
			observer.updateGaps(gaps);
		}
		updateChildren(changes, oldLength, composition) {
			let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
			let cursor = this.childCursor(oldLength);
			for (let i = ranges.length - 1;; i--) {
				let next = i >= 0 ? ranges[i] : null;
				if (!next)
					break;
				let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
				if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
					let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
					let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
					breakAtStart = before.breakAtStart;
					openStart = before.openStart;
					openEnd = after.openEnd;
					let compLine = this.compositionView(composition);
					if (after.breakAtStart) {
						compLine.breakAfter = 1;
					}
					else if (after.content.length &&
						compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
						compLine.breakAfter = after.content[0].breakAfter;
						after.content.shift();
					}
					if (before.content.length &&
						compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
						before.content.pop();
					}
					content = before.content.concat(compLine).concat(after.content);
				}
				else {
					({ content, breakAtStart, openStart, openEnd } =
						ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
				}
				let { i: toI, off: toOff } = cursor.findPos(toA, 1);
				let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
				replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
			}
			if (composition)
				this.fixCompositionDOM(composition);
		}
		compositionView(composition) {
			let cur = new TextView(composition.text.nodeValue);
			cur.flags |= 8 /* ViewFlag.Composition */;
			for (let { deco } of composition.marks)
				cur = new MarkView(deco, [cur], cur.length);
			let line = new LineView;
			line.append(cur, 0);
			return line;
		}
		fixCompositionDOM(composition) {
			let fix = (dom, cView) => {
				cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
				this.markedForComposition.add(cView);
				let prev = ContentView.get(dom);
				if (prev && prev != cView)
					prev.dom = null;
				cView.setDOM(dom);
			};
			let pos = this.childPos(composition.range.fromB, 1);
			let cView = this.children[pos.i];
			fix(composition.line, cView);
			for (let i = composition.marks.length - 1; i >= -1; i--) {
				pos = cView.childPos(pos.off, 1);
				cView = cView.children[pos.i];
				fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
			}
		}
		// Sync the DOM selection to this.state.selection
		updateSelection(mustRead = false, fromPointer = false) {
			if (mustRead || !this.view.observer.selectionRange.focusNode)
				this.view.observer.readSelectionRange();
			let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
			let selectionNotFocus = !focused &&
				hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
			if (!(focused || fromPointer || selectionNotFocus))
				return;
			let force = this.forceSelection;
			this.forceSelection = false;
			let main = this.view.state.selection.main;
			let anchor = this.moveToLine(this.domAtPos(main.anchor));
			let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
			// Always reset on Firefox when next to an uneditable node to
			// avoid invisible cursor bugs (#111)
			if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
				let dummy = document.createTextNode("");
				this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
				anchor = head = new DOMPos(dummy, 0);
				force = true;
			}
			let domSel = this.view.observer.selectionRange;
			// If the selection is already here, or in an equivalent position, don't touch it
			if (force || !domSel.focusNode ||
				!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
				!isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
				this.view.observer.ignore(() => {
					// Chrome Android will hide the virtual keyboard when tapping
					// inside an uneditable node, and not bring it back when we
					// move the cursor to its proper position. This tries to
					// restore the keyboard by cycling focus.
					if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
						inUneditable(domSel.focusNode, this.dom)) {
						this.dom.blur();
						this.dom.focus({ preventScroll: true });
					}
					let rawSel = getSelection(this.view.root);
					if (!rawSel) ;
					else if (main.empty) {
						// Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
						if (browser.gecko) {
							let nextTo = nextToUneditable(anchor.node, anchor.offset);
							if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
								let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
								if (text)
									anchor = new DOMPos(text.node, text.offset);
							}
						}
						rawSel.collapse(anchor.node, anchor.offset);
						if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
							rawSel.caretBidiLevel = main.bidiLevel;
					}
					else if (rawSel.extend) {
						// Selection.extend can be used to create an 'inverted' selection
						// (one where the focus is before the anchor), but not all
						// browsers support it yet.
						rawSel.collapse(anchor.node, anchor.offset);
						// Safari will ignore the call above when the editor is
						// hidden, and then raise an error on the call to extend
						// (#940).
						try {
							rawSel.extend(head.node, head.offset);
						}
						catch (_) { }
					}
					else {
						// Primitive (IE) way
						let range = document.createRange();
						if (main.anchor > main.head)
							[anchor, head] = [head, anchor];
						range.setEnd(head.node, head.offset);
						range.setStart(anchor.node, anchor.offset);
						rawSel.removeAllRanges();
						rawSel.addRange(range);
					}
					if (selectionNotFocus && this.view.root.activeElement == this.dom) {
						this.dom.blur();
						if (activeElt)
							activeElt.focus();
					}
				});
				this.view.observer.setSelectionRange(anchor, head);
			}
			this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
			this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
		}
		enforceCursorAssoc() {
			if (this.hasComposition)
				return;
			let { view } = this, cursor = view.state.selection.main;
			let sel = getSelection(view.root);
			let { anchorNode, anchorOffset } = view.observer.selectionRange;
			if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
				return;
			let line = LineView.find(this, cursor.head);
			if (!line)
				return;
			let lineStart = line.posAtStart;
			if (cursor.head == lineStart || cursor.head == lineStart + line.length)
				return;
			let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
			if (!before || !after || before.bottom > after.top)
				return;
			let dom = this.domAtPos(cursor.head + cursor.assoc);
			sel.collapse(dom.node, dom.offset);
			sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
			// This can go wrong in corner cases like single-character lines,
			// so check and reset if necessary.
			view.observer.readSelectionRange();
			let newRange = view.observer.selectionRange;
			if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
				sel.collapse(anchorNode, anchorOffset);
		}
		// If a position is in/near a block widget, move it to a nearby text
		// line, since we don't want the cursor inside a block widget.
		moveToLine(pos) {
			// Block widgets will return positions before/after them, which
			// are thus directly in the document DOM element.
			let dom = this.dom, newPos;
			if (pos.node != dom)
				return pos;
			for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
				let view = ContentView.get(dom.childNodes[i]);
				if (view instanceof LineView)
					newPos = view.domAtPos(0);
			}
			for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
				let view = ContentView.get(dom.childNodes[i]);
				if (view instanceof LineView)
					newPos = view.domAtPos(view.length);
			}
			return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
		}
		nearest(dom) {
			for (let cur = dom; cur;) {
				let domView = ContentView.get(cur);
				if (domView && domView.rootView == this)
					return domView;
				cur = cur.parentNode;
			}
			return null;
		}
		posFromDOM(node, offset) {
			let view = this.nearest(node);
			if (!view)
				throw new RangeError("Trying to find position for a DOM position outside of the document");
			return view.localPosFromDOM(node, offset) + view.posAtStart;
		}
		domAtPos(pos) {
			let { i, off } = this.childCursor().findPos(pos, -1);
			for (; i < this.children.length - 1;) {
				let child = this.children[i];
				if (off < child.length || child instanceof LineView)
					break;
				i++;
				off = 0;
			}
			return this.children[i].domAtPos(off);
		}
		coordsAt(pos, side) {
			let best = null, bestPos = 0;
			for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
				let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
				if (end < pos)
					break;
				if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
					(!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
					best = child;
					bestPos = start;
				}
				off = start;
			}
			return best ? best.coordsAt(pos - bestPos, side) : null;
		}
		coordsForChar(pos) {
			let { i, off } = this.childPos(pos, 1), child = this.children[i];
			if (!(child instanceof LineView))
				return null;
			while (child.children.length) {
				let { i, off: childOff } = child.childPos(off, 1);
				for (;; i++) {
					if (i == child.children.length)
						return null;
					if ((child = child.children[i]).length)
						break;
				}
				off = childOff;
			}
			if (!(child instanceof TextView))
				return null;
			let end = state.findClusterBreak(child.text, off);
			if (end == off)
				return null;
			let rects = textRange(child.dom, off, end).getClientRects();
			for (let i = 0; i < rects.length; i++) {
				let rect = rects[i];
				if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
					return rect;
			}
			return null;
		}
		measureVisibleLineHeights(viewport) {
			let result = [], { from, to } = viewport;
			let contentWidth = this.view.contentDOM.clientWidth;
			let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
			let widest = -1, ltr = this.view.textDirection == exports.Direction.LTR;
			for (let pos = 0, i = 0; i < this.children.length; i++) {
				let child = this.children[i], end = pos + child.length;
				if (end > to)
					break;
				if (pos >= from) {
					let childRect = child.dom.getBoundingClientRect();
					result.push(childRect.height);
					if (isWider) {
						let last = child.dom.lastChild;
						let rects = last ? clientRectsFor(last) : [];
						if (rects.length) {
							let rect = rects[rects.length - 1];
							let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
							if (width > widest) {
								widest = width;
								this.minWidth = contentWidth;
								this.minWidthFrom = pos;
								this.minWidthTo = end;
							}
						}
					}
				}
				pos = end + child.breakAfter;
			}
			return result;
		}
		textDirectionAt(pos) {
			let { i } = this.childPos(pos, 1);
			return getComputedStyle(this.children[i].dom).direction == "rtl" ? exports.Direction.RTL : exports.Direction.LTR;
		}
		measureTextSize() {
			for (let child of this.children) {
				if (child instanceof LineView) {
					let measure = child.measureTextSize();
					if (measure)
						return measure;
				}
			}
			// If no workable line exists, force a layout of a measurable element
			let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
			dummy.className = "cm-line";
			dummy.style.width = "99999px";
			dummy.style.position = "absolute";
			dummy.textContent = "abc def ghi jkl mno pqr stu";
			this.view.observer.ignore(() => {
				this.dom.appendChild(dummy);
				let rect = clientRectsFor(dummy.firstChild)[0];
				lineHeight = dummy.getBoundingClientRect().height;
				charWidth = rect ? rect.width / 27 : 7;
				textHeight = rect ? rect.height : lineHeight;
				dummy.remove();
			});
			return { lineHeight, charWidth, textHeight };
		}
		childCursor(pos = this.length) {
			// Move back to start of last element when possible, so that
			// `ChildCursor.findPos` doesn't have to deal with the edge case
			// of being after the last element.
			let i = this.children.length;
			if (i)
				pos -= this.children[--i].length;
			return new ChildCursor(this.children, pos, i);
		}
		computeBlockGapDeco() {
			let deco = [], vs = this.view.viewState;
			for (let pos = 0, i = 0;; i++) {
				let next = i == vs.viewports.length ? null : vs.viewports[i];
				let end = next ? next.from - 1 : this.length;
				if (end > pos) {
					let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
					deco.push(Decoration.replace({
						widget: new BlockGapWidget(height),
						block: true,
						inclusive: true,
						isBlockGap: true,
					}).range(pos, end));
				}
				if (!next)
					break;
				pos = next.to + 1;
			}
			return Decoration.set(deco);
		}
		updateDeco() {
			let allDeco = this.view.state.facet(decorations).map((d, i) => {
				let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
				return dynamic ? d(this.view) : d;
			});
			for (let i = allDeco.length; i < allDeco.length + 3; i++)
				this.dynamicDecorationMap[i] = false;
			return this.decorations = [
				...allDeco,
				this.computeBlockGapDeco(),
				this.view.viewState.lineGapDeco
			];
		}
		scrollIntoView(target) {
			if (target.isSnapshot) {
				let ref = this.view.viewState.lineBlockAt(target.range.head);
				this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
				this.view.scrollDOM.scrollLeft = target.xMargin;
				return;
			}
			let { range } = target;
			let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
			if (!rect)
				return;
			if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
				rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
					right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
			let margins = getScrollMargins(this.view);
			let targetRect = {
				left: rect.left - margins.left, top: rect.top - margins.top,
				right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
			};
			let { offsetWidth, offsetHeight } = this.view.scrollDOM;
			scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == exports.Direction.LTR);
		}
	}
	function betweenUneditable(pos) {
		return pos.node.nodeType == 1 && pos.node.firstChild &&
			(pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
			(pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
	}
	class BlockGapWidget extends WidgetType {
		constructor(height) {
			super();
			this.height = height;
		}
		toDOM() {
			let elt = document.createElement("div");
			this.updateDOM(elt);
			return elt;
		}
		eq(other) { return other.height == this.height; }
		updateDOM(elt) {
			elt.style.height = this.height + "px";
			return true;
		}
		get estimatedHeight() { return this.height; }
	}
	function findCompositionNode(view, headPos) {
		let sel = view.observer.selectionRange;
		let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
		if (!textNode)
			return null;
		let from = headPos - textNode.offset;
		return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
	}
	function findCompositionRange(view, changes, headPos) {
		let found = findCompositionNode(view, headPos);
		if (!found)
			return null;
		let { node: textNode, from, to } = found, text = textNode.nodeValue;
		// Don't try to preserve multi-line compositions
		if (/[\n\r]/.test(text))
			return null;
		if (view.state.doc.sliceString(found.from, found.to) != text)
			return null;
		let inv = changes.invertedDesc;
		let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
		let marks = [];
		for (let parent = textNode.parentNode;; parent = parent.parentNode) {
			let parentView = ContentView.get(parent);
			if (parentView instanceof MarkView)
				marks.push({ node: parent, deco: parentView.mark });
			else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
				return { range, text: textNode, marks, line: parent };
			else if (parent != view.contentDOM)
				marks.push({ node: parent, deco: new MarkDecoration({
						inclusive: true,
						attributes: getAttrs(parent),
						tagName: parent.tagName.toLowerCase()
					}) });
			else
				return null;
		}
	}
	function nearbyTextNode(startNode, startOffset, side) {
		if (side <= 0)
			for (let node = startNode, offset = startOffset;;) {
				if (node.nodeType == 3)
					return { node: node, offset: offset };
				if (node.nodeType == 1 && offset > 0) {
					node = node.childNodes[offset - 1];
					offset = maxOffset(node);
				}
				else {
					break;
				}
			}
		if (side >= 0)
			for (let node = startNode, offset = startOffset;;) {
				if (node.nodeType == 3)
					return { node: node, offset: offset };
				if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
					node = node.childNodes[offset];
					offset = 0;
				}
				else {
					break;
				}
			}
		return null;
	}
	function nextToUneditable(node, offset) {
		if (node.nodeType != 1)
			return 0;
		return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
			(offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
	}
	let DecorationComparator$1 = class DecorationComparator {
		constructor() {
			this.changes = [];
		}
		compareRange(from, to) { addRange(from, to, this.changes); }
		comparePoint(from, to) { addRange(from, to, this.changes); }
	};
	function findChangedDeco(a, b, diff) {
		let comp = new DecorationComparator$1;
		state.RangeSet.compare(a, b, diff, comp);
		return comp.changes;
	}
	function inUneditable(node, inside) {
		for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
			if (cur.nodeType == 1 && cur.contentEditable == 'false') {
				return true;
			}
		}
		return false;
	}
	function touchesComposition(changes, composition) {
		let touched = false;
		if (composition)
			changes.iterChangedRanges((from, to) => {
				if (from < composition.to && to > composition.from)
					touched = true;
			});
		return touched;
	}
	
	function groupAt(state$1, pos, bias = 1) {
		let categorize = state$1.charCategorizer(pos);
		let line = state$1.doc.lineAt(pos), linePos = pos - line.from;
		if (line.length == 0)
			return state.EditorSelection.cursor(pos);
		if (linePos == 0)
			bias = 1;
		else if (linePos == line.length)
			bias = -1;
		let from = linePos, to = linePos;
		if (bias < 0)
			from = state.findClusterBreak(line.text, linePos, false);
		else
			to = state.findClusterBreak(line.text, linePos);
		let cat = categorize(line.text.slice(from, to));
		while (from > 0) {
			let prev = state.findClusterBreak(line.text, from, false);
			if (categorize(line.text.slice(prev, from)) != cat)
				break;
			from = prev;
		}
		while (to < line.length) {
			let next = state.findClusterBreak(line.text, to);
			if (categorize(line.text.slice(to, next)) != cat)
				break;
			to = next;
		}
		return state.EditorSelection.range(from + line.from, to + line.from);
	}
	// Search the DOM for the {node, offset} position closest to the given
	// coordinates. Very inefficient and crude, but can usually be avoided
	// by calling caret(Position|Range)FromPoint instead.
	function getdx(x, rect) {
		return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
	}
	function getdy(y, rect) {
		return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
	}
	function yOverlap(a, b) {
		return a.top < b.bottom - 1 && a.bottom > b.top + 1;
	}
	function upTop(rect, top) {
		return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
	}
	function upBot(rect, bottom) {
		return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
	}
	function domPosAtCoords(parent, x, y) {
		let closest, closestRect, closestX, closestY, closestOverlap = false;
		let above, below, aboveRect, belowRect;
		for (let child = parent.firstChild; child; child = child.nextSibling) {
			let rects = clientRectsFor(child);
			for (let i = 0; i < rects.length; i++) {
				let rect = rects[i];
				if (closestRect && yOverlap(closestRect, rect))
					rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
				let dx = getdx(x, rect), dy = getdy(y, rect);
				if (dx == 0 && dy == 0)
					return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
				if (!closest || closestY > dy || closestY == dy && closestX > dx) {
					closest = child;
					closestRect = rect;
					closestX = dx;
					closestY = dy;
					let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
					closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
				}
				if (dx == 0) {
					if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
						above = child;
						aboveRect = rect;
					}
					else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
						below = child;
						belowRect = rect;
					}
				}
				else if (aboveRect && yOverlap(aboveRect, rect)) {
					aboveRect = upBot(aboveRect, rect.bottom);
				}
				else if (belowRect && yOverlap(belowRect, rect)) {
					belowRect = upTop(belowRect, rect.top);
				}
			}
		}
		if (aboveRect && aboveRect.bottom >= y) {
			closest = above;
			closestRect = aboveRect;
		}
		else if (belowRect && belowRect.top <= y) {
			closest = below;
			closestRect = belowRect;
		}
		if (!closest)
			return { node: parent, offset: 0 };
		let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
		if (closest.nodeType == 3)
			return domPosInText(closest, clipX, y);
		if (closestOverlap && closest.contentEditable != "false")
			return domPosAtCoords(closest, clipX, y);
		let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
			(x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
		return { node: parent, offset };
	}
	function domPosInText(node, x, y) {
		let len = node.nodeValue.length;
		let closestOffset = -1, closestDY = 1e9, generalSide = 0;
		for (let i = 0; i < len; i++) {
			let rects = textRange(node, i, i + 1).getClientRects();
			for (let j = 0; j < rects.length; j++) {
				let rect = rects[j];
				if (rect.top == rect.bottom)
					continue;
				if (!generalSide)
					generalSide = x - rect.left;
				let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
				if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
					let right = x >= (rect.left + rect.right) / 2, after = right;
					if (browser.chrome || browser.gecko) {
						// Check for RTL on browsers that support getting client
						// rects for empty ranges.
						let rectBefore = textRange(node, i).getBoundingClientRect();
						if (rectBefore.left == rect.right)
							after = !right;
					}
					if (dy <= 0)
						return { node, offset: i + (after ? 1 : 0) };
					closestOffset = i + (after ? 1 : 0);
					closestDY = dy;
				}
			}
		}
		return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
	}
	function posAtCoords(view, coords, precise, bias = -1) {
		var _a, _b;
		let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
		let block, { docHeight } = view.viewState;
		let { x, y } = coords, yOffset = y - docTop;
		if (yOffset < 0)
			return 0;
		if (yOffset > docHeight)
			return view.state.doc.length;
		// Scan for a text block near the queried y position
		for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
			block = view.elementAtHeight(yOffset);
			if (block.type == exports.BlockType.Text)
				break;
			for (;;) {
				// Move the y position out of this block
				yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
				if (yOffset >= 0 && yOffset <= docHeight)
					break;
				// If the document consists entirely of replaced widgets, we
				// won't find a text block, so return 0
				if (bounced)
					return precise ? null : 0;
				bounced = true;
				bias = -bias;
			}
		}
		y = docTop + yOffset;
		let lineStart = block.from;
		// If this is outside of the rendered viewport, we can't determine a position
		if (lineStart < view.viewport.from)
			return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
		if (lineStart > view.viewport.to)
			return view.viewport.to == view.state.doc.length ? view.state.doc.length :
				precise ? null : posAtCoordsImprecise(view, content, block, x, y);
		// Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
		let doc = view.dom.ownerDocument;
		let root = view.root.elementFromPoint ? view.root : doc;
		let element = root.elementFromPoint(x, y);
		if (element && !view.contentDOM.contains(element))
			element = null;
		// If the element is unexpected, clip x at the sides of the content area and try again
		if (!element) {
			x = Math.max(content.left + 1, Math.min(content.right - 1, x));
			element = root.elementFromPoint(x, y);
			if (element && !view.contentDOM.contains(element))
				element = null;
		}
		// There's visible editor content under the point, so we can try
		// using caret(Position|Range)FromPoint as a shortcut
		let node, offset = -1;
		if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
			if (doc.caretPositionFromPoint) {
				let pos = doc.caretPositionFromPoint(x, y);
				if (pos)
					({ offsetNode: node, offset } = pos);
			}
			else if (doc.caretRangeFromPoint) {
				let range = doc.caretRangeFromPoint(x, y);
				if (range) {
					({ startContainer: node, startOffset: offset } = range);
					if (!view.contentDOM.contains(node) ||
						browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
						browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
						node = undefined;
				}
			}
		}
		// No luck, do our own (potentially expensive) search
		if (!node || !view.docView.dom.contains(node)) {
			let line = LineView.find(view.docView, lineStart);
			if (!line)
				return yOffset > block.top + block.height / 2 ? block.to : block.from;
			({ node, offset } = domPosAtCoords(line.dom, x, y));
		}
		let nearest = view.docView.nearest(node);
		if (!nearest)
			return null;
		if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
			let rect = nearest.dom.getBoundingClientRect();
			return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
				? nearest.posAtStart : nearest.posAtEnd;
		}
		else {
			return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
		}
	}
	function posAtCoordsImprecise(view, contentRect, block, x, y) {
		let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
		if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
			let textHeight = view.viewState.heightOracle.textHeight;
			let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
			into += line * view.viewState.heightOracle.lineLength;
		}
		let content = view.state.sliceDoc(block.from, block.to);
		return block.from + state.findColumn(content, into, view.state.tabSize);
	}
	// In case of a high line height, Safari's caretRangeFromPoint treats
	// the space between lines as belonging to the last character of the
	// line before. This is used to detect such a result so that it can be
	// ignored (issue #401).
	function isSuspiciousSafariCaretResult(node, offset, x) {
		let len;
		if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
			return false;
		for (let next = node.nextSibling; next; next = next.nextSibling)
			if (next.nodeType != 1 || next.nodeName != "BR")
				return false;
		return textRange(node, len - 1, len).getBoundingClientRect().left > x;
	}
	// Chrome will move positions between lines to the start of the next line
	function isSuspiciousChromeCaretResult(node, offset, x) {
		if (offset != 0)
			return false;
		for (let cur = node;;) {
			let parent = cur.parentNode;
			if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
				return false;
			if (parent.classList.contains("cm-line"))
				break;
			cur = parent;
		}
		let rect = node.nodeType == 1 ? node.getBoundingClientRect()
			: textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
		return x - rect.left > 5;
	}
	function blockAt(view, pos) {
		let line = view.lineBlockAt(pos);
		if (Array.isArray(line.type))
			for (let l of line.type) {
				if (l.to > pos || l.to == pos && (l.to == line.to || l.type == exports.BlockType.Text))
					return l;
			}
		return line;
	}
	function moveToLineBoundary(view, start, forward, includeWrap) {
		let line = blockAt(view, start.head);
		let coords = !includeWrap || line.type != exports.BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
			: view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
		if (coords) {
			let editorRect = view.dom.getBoundingClientRect();
			let direction = view.textDirectionAt(line.from);
			let pos = view.posAtCoords({ x: forward == (direction == exports.Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
				y: (coords.top + coords.bottom) / 2 });
			if (pos != null)
				return state.EditorSelection.cursor(pos, forward ? -1 : 1);
		}
		return state.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
	}
	function moveByChar(view, start, forward, by) {
		let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
		let direction = view.textDirectionAt(line.from);
		for (let cur = start, check = null;;) {
			let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
			if (!next) {
				if (line.number == (forward ? view.state.doc.lines : 1))
					return cur;
				char = "\n";
				line = view.state.doc.line(line.number + (forward ? 1 : -1));
				spans = view.bidiSpans(line);
				next = state.EditorSelection.cursor(forward ? line.from : line.to);
			}
			if (!check) {
				if (!by)
					return next;
				check = by(char);
			}
			else if (!check(char)) {
				return cur;
			}
			cur = next;
		}
	}
	function byGroup(view, pos, start) {
		let categorize = view.state.charCategorizer(pos);
		let cat = categorize(start);
		return (next) => {
			let nextCat = categorize(next);
			if (cat == state.CharCategory.Space)
				cat = nextCat;
			return cat == nextCat;
		};
	}
	function moveVertically(view, start, forward, distance) {
		let startPos = start.head, dir = forward ? 1 : -1;
		if (startPos == (forward ? view.state.doc.length : 0))
			return state.EditorSelection.cursor(startPos, start.assoc);
		let goal = start.goalColumn, startY;
		let rect = view.contentDOM.getBoundingClientRect();
		let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
		if (startCoords) {
			if (goal == null)
				goal = startCoords.left - rect.left;
			startY = dir < 0 ? startCoords.top : startCoords.bottom;
		}
		else {
			let line = view.viewState.lineBlockAt(startPos);
			if (goal == null)
				goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
			startY = (dir < 0 ? line.top : line.bottom) + docTop;
		}
		let resolvedGoal = rect.left + goal;
		let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
		for (let extra = 0;; extra += 10) {
			let curY = startY + (dist + extra) * dir;
			let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
			if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
				let charRect = view.docView.coordsForChar(pos);
				let assoc = !charRect || curY < charRect.top ? -1 : 1;
				return state.EditorSelection.cursor(pos, assoc, undefined, goal);
			}
		}
	}
	function skipAtomicRanges(atoms, pos, bias) {
		for (;;) {
			let moved = 0;
			for (let set of atoms) {
				set.between(pos - 1, pos + 1, (from, to, value) => {
					if (pos > from && pos < to) {
						let side = moved || bias || (pos - from < to - pos ? -1 : 1);
						pos = side < 0 ? from : to;
						moved = side;
					}
				});
			}
			if (!moved)
				return pos;
		}
	}
	function skipAtoms(view, oldPos, pos) {
		let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
		return newPos == pos.from ? pos : state.EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
	}
	
	// This will also be where dragging info and such goes
	class InputState {
		setSelectionOrigin(origin) {
			this.lastSelectionOrigin = origin;
			this.lastSelectionTime = Date.now();
		}
		constructor(view) {
			this.view = view;
			this.lastKeyCode = 0;
			this.lastKeyTime = 0;
			this.lastTouchTime = 0;
			this.lastFocusTime = 0;
			this.lastScrollTop = 0;
			this.lastScrollLeft = 0;
			// On iOS, some keys need to have their default behavior happen
			// (after which we retroactively handle them and reset the DOM) to
			// avoid messing up the virtual keyboard state.
			this.pendingIOSKey = undefined;
			this.lastSelectionOrigin = null;
			this.lastSelectionTime = 0;
			this.lastEscPress = 0;
			this.lastContextMenu = 0;
			this.scrollHandlers = [];
			this.handlers = Object.create(null);
			// -1 means not in a composition. Otherwise, this counts the number
			// of changes made during the composition. The count is used to
			// avoid treating the start state of the composition, before any
			// changes have been made, as part of the composition.
			this.composing = -1;
			// Tracks whether the next change should be marked as starting the
			// composition (null means no composition, true means next is the
			// first, false means first has already been marked for this
			// composition)
			this.compositionFirstChange = null;
			// End time of the previous composition
			this.compositionEndedAt = 0;
			// Used in a kludge to detect when an Enter keypress should be
			// considered part of the composition on Safari, which fires events
			// in the wrong order
			this.compositionPendingKey = false;
			// Used to categorize changes as part of a composition, even when
			// the mutation events fire shortly after the compositionend event
			this.compositionPendingChange = false;
			this.mouseSelection = null;
			// When a drag from the editor is active, this points at the range
			// being dragged.
			this.draggedContent = null;
			this.handleEvent = this.handleEvent.bind(this);
			this.notifiedFocused = view.hasFocus;
			// On Safari adding an input event handler somehow prevents an
			// issue where the composition vanishes when you press enter.
			if (browser.safari)
				view.contentDOM.addEventListener("input", () => null);
			if (browser.gecko)
				firefoxCopyCutHack(view.contentDOM.ownerDocument);
		}
		handleEvent(event) {
			if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
				return;
			if (event.type == "keydown" && this.keydown(event))
				return;
			this.runHandlers(event.type, event);
		}
		runHandlers(type, event) {
			let handlers = this.handlers[type];
			if (handlers) {
				for (let observer of handlers.observers)
					observer(this.view, event);
				for (let handler of handlers.handlers) {
					if (event.defaultPrevented)
						break;
					if (handler(this.view, event)) {
						event.preventDefault();
						break;
					}
				}
			}
		}
		ensureHandlers(plugins) {
			let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
			for (let type in handlers)
				if (type != "scroll") {
					let passive = !handlers[type].handlers.length;
					let exists = prev[type];
					if (exists && passive != !exists.handlers.length) {
						dom.removeEventListener(type, this.handleEvent);
						exists = null;
					}
					if (!exists)
						dom.addEventListener(type, this.handleEvent, { passive });
				}
			for (let type in prev)
				if (type != "scroll" && !handlers[type])
					dom.removeEventListener(type, this.handleEvent);
			this.handlers = handlers;
		}
		keydown(event) {
			// Must always run, even if a custom handler handled the event
			this.lastKeyCode = event.keyCode;
			this.lastKeyTime = Date.now();
			if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
				return true;
			if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
				this.view.inputState.lastEscPress = 0;
			// Chrome for Android usually doesn't fire proper key events, but
			// occasionally does, usually surrounded by a bunch of complicated
			// composition changes. When an enter or backspace key event is
			// seen, hold off on handling DOM events for a bit, and then
			// dispatch it.
			if (browser.android && browser.chrome && !event.synthetic &&
				(event.keyCode == 13 || event.keyCode == 8)) {
				this.view.observer.delayAndroidKey(event.key, event.keyCode);
				return true;
			}
			// Preventing the default behavior of Enter on iOS makes the
			// virtual keyboard get stuck in the wrong (lowercase)
			// state. So we let it go through, and then, in
			// applyDOMChange, notify key handlers of it and reset to
			// the state they produce.
			let pending;
			if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
				((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
					EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
				this.pendingIOSKey = pending || event;
				setTimeout(() => this.flushIOSKey(), 250);
				return true;
			}
			if (event.keyCode != 229)
				this.view.observer.forceFlush();
			return false;
		}
		flushIOSKey() {
			let key = this.pendingIOSKey;
			if (!key)
				return false;
			this.pendingIOSKey = undefined;
			return dispatchKey(this.view.contentDOM, key.key, key.keyCode);
		}
		ignoreDuringComposition(event) {
			if (!/^key/.test(event.type))
				return false;
			if (this.composing > 0)
				return true;
			// See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
			// On some input method editors (IMEs), the Enter key is used to
			// confirm character selection. On Safari, when Enter is pressed,
			// compositionend and keydown events are sometimes emitted in the
			// wrong order. The key event should still be ignored, even when
			// it happens after the compositionend event.
			if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
				this.compositionPendingKey = false;
				return true;
			}
			return false;
		}
		startMouseSelection(mouseSelection) {
			if (this.mouseSelection)
				this.mouseSelection.destroy();
			this.mouseSelection = mouseSelection;
		}
		update(update) {
			if (this.mouseSelection)
				this.mouseSelection.update(update);
			if (this.draggedContent && update.docChanged)
				this.draggedContent = this.draggedContent.map(update.changes);
			if (update.transactions.length)
				this.lastKeyCode = this.lastSelectionTime = 0;
		}
		destroy() {
			if (this.mouseSelection)
				this.mouseSelection.destroy();
		}
	}
	function bindHandler(plugin, handler) {
		return (view, event) => {
			try {
				return handler.call(plugin, event, view);
			}
			catch (e) {
				logException(view.state, e);
			}
		};
	}
	function computeHandlers(plugins) {
		let result = Object.create(null);
		function record(type) {
			return result[type] || (result[type] = { observers: [], handlers: [] });
		}
		for (let plugin of plugins) {
			let spec = plugin.spec;
			if (spec && spec.domEventHandlers)
				for (let type in spec.domEventHandlers) {
					let f = spec.domEventHandlers[type];
					if (f)
						record(type).handlers.push(bindHandler(plugin.value, f));
				}
			if (spec && spec.domEventObservers)
				for (let type in spec.domEventObservers) {
					let f = spec.domEventObservers[type];
					if (f)
						record(type).observers.push(bindHandler(plugin.value, f));
				}
		}
		for (let type in handlers)
			record(type).handlers.push(handlers[type]);
		for (let type in observers)
			record(type).observers.push(observers[type]);
		return result;
	}
	const PendingKeys = [
		{ key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
		{ key: "Enter", keyCode: 13, inputType: "insertParagraph" },
		{ key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
		{ key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
	];
	const EmacsyPendingKeys = "dthko";
	// Key codes for modifier keys
	const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
	const dragScrollMargin = 6;
	function dragScrollSpeed(dist) {
		return Math.max(0, dist) * 0.7 + 8;
	}
	function dist(a, b) {
		return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
	}
	class MouseSelection {
		constructor(view, startEvent, style, mustSelect) {
			this.view = view;
			this.startEvent = startEvent;
			this.style = style;
			this.mustSelect = mustSelect;
			this.scrollSpeed = { x: 0, y: 0 };
			this.scrolling = -1;
			this.lastEvent = startEvent;
			this.scrollParent = scrollableParent(view.contentDOM);
			this.atoms = view.state.facet(atomicRanges).map(f => f(view));
			let doc = view.contentDOM.ownerDocument;
			doc.addEventListener("mousemove", this.move = this.move.bind(this));
			doc.addEventListener("mouseup", this.up = this.up.bind(this));
			this.extend = startEvent.shiftKey;
			this.multiple = view.state.facet(state.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
			this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
		}
		start(event) {
			// When clicking outside of the selection, immediately apply the
			// effect of starting the selection
			if (this.dragging === false)
				this.select(event);
		}
		move(event) {
			var _a;
			if (event.buttons == 0)
				return this.destroy();
			if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
				return;
			this.select(this.lastEvent = event);
			let sx = 0, sy = 0;
			let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
				|| { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
			let margins = getScrollMargins(this.view);
			if (event.clientX - margins.left <= rect.left + dragScrollMargin)
				sx = -dragScrollSpeed(rect.left - event.clientX);
			else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
				sx = dragScrollSpeed(event.clientX - rect.right);
			if (event.clientY - margins.top <= rect.top + dragScrollMargin)
				sy = -dragScrollSpeed(rect.top - event.clientY);
			else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
				sy = dragScrollSpeed(event.clientY - rect.bottom);
			this.setScrollSpeed(sx, sy);
		}
		up(event) {
			if (this.dragging == null)
				this.select(this.lastEvent);
			if (!this.dragging)
				event.preventDefault();
			this.destroy();
		}
		destroy() {
			this.setScrollSpeed(0, 0);
			let doc = this.view.contentDOM.ownerDocument;
			doc.removeEventListener("mousemove", this.move);
			doc.removeEventListener("mouseup", this.up);
			this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
		}
		setScrollSpeed(sx, sy) {
			this.scrollSpeed = { x: sx, y: sy };
			if (sx || sy) {
				if (this.scrolling < 0)
					this.scrolling = setInterval(() => this.scroll(), 50);
			}
			else if (this.scrolling > -1) {
				clearInterval(this.scrolling);
				this.scrolling = -1;
			}
		}
		scroll() {
			if (this.scrollParent) {
				this.scrollParent.scrollLeft += this.scrollSpeed.x;
				this.scrollParent.scrollTop += this.scrollSpeed.y;
			}
			else {
				this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
			}
			if (this.dragging === false)
				this.select(this.lastEvent);
		}
		skipAtoms(sel) {
			let ranges = null;
			for (let i = 0; i < sel.ranges.length; i++) {
				let range = sel.ranges[i], updated = null;
				if (range.empty) {
					let pos = skipAtomicRanges(this.atoms, range.from, 0);
					if (pos != range.from)
						updated = state.EditorSelection.cursor(pos, -1);
				}
				else {
					let from = skipAtomicRanges(this.atoms, range.from, -1);
					let to = skipAtomicRanges(this.atoms, range.to, 1);
					if (from != range.from || to != range.to)
						updated = state.EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
				}
				if (updated) {
					if (!ranges)
						ranges = sel.ranges.slice();
					ranges[i] = updated;
				}
			}
			return ranges ? state.EditorSelection.create(ranges, sel.mainIndex) : sel;
		}
		select(event) {
			let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
			if (this.mustSelect || !selection.eq(view.state.selection) ||
				selection.main.assoc != view.state.selection.main.assoc && this.dragging === false)
				this.view.dispatch({
					selection,
					userEvent: "select.pointer"
				});
			this.mustSelect = false;
		}
		update(update) {
			if (this.style.update(update))
				setTimeout(() => this.select(this.lastEvent), 20);
		}
	}
	function addsSelectionRange(view, event) {
		let facet = view.state.facet(clickAddsSelectionRange);
		return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
	}
	function dragMovesSelection(view, event) {
		let facet = view.state.facet(dragMovesSelection$1);
		return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
	}
	function isInPrimarySelection(view, event) {
		let { main } = view.state.selection;
		if (main.empty)
			return false;
		// On boundary clicks, check whether the coordinates are inside the
		// selection's client rectangles
		let sel = getSelection(view.root);
		if (!sel || sel.rangeCount == 0)
			return true;
		let rects = sel.getRangeAt(0).getClientRects();
		for (let i = 0; i < rects.length; i++) {
			let rect = rects[i];
			if (rect.left <= event.clientX && rect.right >= event.clientX &&
				rect.top <= event.clientY && rect.bottom >= event.clientY)
				return true;
		}
		return false;
	}
	function eventBelongsToEditor(view, event) {
		if (!event.bubbles)
			return true;
		if (event.defaultPrevented)
			return false;
		for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
			if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
				return false;
		return true;
	}
	const handlers = Object.create(null);
	const observers = Object.create(null);
	// This is very crude, but unfortunately both these browsers _pretend_
	// that they have a clipboard API—all the objects and methods are
	// there, they just don't work, and they are hard to test.
	const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
		(browser.ios && browser.webkit_version < 604);
	function capturePaste(view) {
		let parent = view.dom.parentNode;
		if (!parent)
			return;
		let target = parent.appendChild(document.createElement("textarea"));
		target.style.cssText = "position: fixed; left: -10000px; top: 10px";
		target.focus();
		setTimeout(() => {
			view.focus();
			target.remove();
			doPaste(view, target.value);
		}, 50);
	}
	function doPaste(view, input) {
		let { state: state$1 } = view, changes, i = 1, text = state$1.toText(input);
		let byLine = text.lines == state$1.selection.ranges.length;
		let linewise = lastLinewiseCopy != null && state$1.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
		if (linewise) {
			let lastLine = -1;
			changes = state$1.changeByRange(range => {
				let line = state$1.doc.lineAt(range.from);
				if (line.from == lastLine)
					return { range };
				lastLine = line.from;
				let insert = state$1.toText((byLine ? text.line(i++).text : input) + state$1.lineBreak);
				return { changes: { from: line.from, insert },
					range: state.EditorSelection.cursor(range.from + insert.length) };
			});
		}
		else if (byLine) {
			changes = state$1.changeByRange(range => {
				let line = text.line(i++);
				return { changes: { from: range.from, to: range.to, insert: line.text },
					range: state.EditorSelection.cursor(range.from + line.length) };
			});
		}
		else {
			changes = state$1.replaceSelection(text);
		}
		view.dispatch(changes, {
			userEvent: "input.paste",
			scrollIntoView: true
		});
	}
	observers.scroll = view => {
		view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
		view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
	};
	handlers.keydown = (view, event) => {
		view.inputState.setSelectionOrigin("select");
		if (event.keyCode == 27)
			view.inputState.lastEscPress = Date.now();
		return false;
	};
	observers.touchstart = (view, e) => {
		view.inputState.lastTouchTime = Date.now();
		view.inputState.setSelectionOrigin("select.pointer");
	};
	observers.touchmove = view => {
		view.inputState.setSelectionOrigin("select.pointer");
	};
	handlers.mousedown = (view, event) => {
		view.observer.flush();
		if (view.inputState.lastTouchTime > Date.now() - 2000)
			return false; // Ignore touch interaction
		let style = null;
		for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
			style = makeStyle(view, event);
			if (style)
				break;
		}
		if (!style && event.button == 0)
			style = basicMouseSelection(view, event);
		if (style) {
			let mustFocus = !view.hasFocus;
			view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
			if (mustFocus)
				view.observer.ignore(() => focusPreventScroll(view.contentDOM));
			let mouseSel = view.inputState.mouseSelection;
			if (mouseSel) {
				mouseSel.start(event);
				return mouseSel.dragging === false;
			}
		}
		return false;
	};
	function rangeForClick(view, pos, bias, type) {
		if (type == 1) { // Single click
			return state.EditorSelection.cursor(pos, bias);
		}
		else if (type == 2) { // Double click
			return groupAt(view.state, pos, bias);
		}
		else { // Triple click
			let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
			let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
			if (to < view.state.doc.length && to == line.to)
				to++;
			return state.EditorSelection.range(from, to);
		}
	}
	let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
	let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
	// Try to determine, for the given coordinates, associated with the
	// given position, whether they are related to the element before or
	// the element after the position.
	function findPositionSide(view, pos, x, y) {
		let line = LineView.find(view.docView, pos);
		if (!line)
			return 1;
		let off = pos - line.posAtStart;
		// Line boundaries point into the line
		if (off == 0)
			return 1;
		if (off == line.length)
			return -1;
		// Positions on top of an element point at that element
		let before = line.coordsAt(off, -1);
		if (before && inside(x, y, before))
			return -1;
		let after = line.coordsAt(off, 1);
		if (after && inside(x, y, after))
			return 1;
		// This is probably a line wrap point. Pick before if the point is
		// beside it.
		return before && insideY(y, before) ? -1 : 1;
	}
	function queryPos(view, event) {
		let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
		return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
	}
	const BadMouseDetail = browser.ie && browser.ie_version <= 11;
	let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
	function getClickType(event) {
		if (!BadMouseDetail)
			return event.detail;
		let last = lastMouseDown, lastTime = lastMouseDownTime;
		lastMouseDown = event;
		lastMouseDownTime = Date.now();
		return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
			Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
	}
	function basicMouseSelection(view, event) {
		let start = queryPos(view, event), type = getClickType(event);
		let startSel = view.state.selection;
		return {
			update(update) {
				if (update.docChanged) {
					start.pos = update.changes.mapPos(start.pos);
					startSel = startSel.map(update.changes);
				}
			},
			get(event, extend, multiple) {
				let cur = queryPos(view, event), removed;
				let range = rangeForClick(view, cur.pos, cur.bias, type);
				if (start.pos != cur.pos && !extend) {
					let startRange = rangeForClick(view, start.pos, start.bias, type);
					let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
					range = from < range.from ? state.EditorSelection.range(from, to) : state.EditorSelection.range(to, from);
				}
				if (extend)
					return startSel.replaceRange(startSel.main.extend(range.from, range.to));
				else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
					return removed;
				else if (multiple)
					return startSel.addRange(range);
				else
					return state.EditorSelection.create([range]);
			}
		};
	}
	function removeRangeAround(sel, pos) {
		for (let i = 0; i < sel.ranges.length; i++) {
			let { from, to } = sel.ranges[i];
			if (from <= pos && to >= pos)
				return state.EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
		}
		return null;
	}
	handlers.dragstart = (view, event) => {
		let { selection: { main: range } } = view.state;
		if (event.target.draggable) {
			let cView = view.docView.nearest(event.target);
			if (cView && cView.isWidget) {
				let from = cView.posAtStart, to = from + cView.length;
				if (from >= range.to || to <= range.from)
					range = state.EditorSelection.range(from, to);
			}
		}
		let { inputState } = view;
		if (inputState.mouseSelection)
			inputState.mouseSelection.dragging = true;
		inputState.draggedContent = range;
		if (event.dataTransfer) {
			event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
			event.dataTransfer.effectAllowed = "copyMove";
		}
		return false;
	};
	handlers.dragend = view => {
		view.inputState.draggedContent = null;
		return false;
	};
	function dropText(view, event, text, direct) {
		if (!text)
			return;
		let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
		let { draggedContent } = view.inputState;
		let del = direct && draggedContent && dragMovesSelection(view, event)
			? { from: draggedContent.from, to: draggedContent.to } : null;
		let ins = { from: dropPos, insert: text };
		let changes = view.state.changes(del ? [del, ins] : ins);
		view.focus();
		view.dispatch({
			changes,
			selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
			userEvent: del ? "move.drop" : "input.drop"
		});
		view.inputState.draggedContent = null;
	}
	handlers.drop = (view, event) => {
		if (!event.dataTransfer)
			return false;
		if (view.state.readOnly)
			return true;
		let files = event.dataTransfer.files;
		if (files && files.length) { // For a file drop, read the file's text.
			let text = Array(files.length), read = 0;
			let finishFile = () => {
				if (++read == files.length)
					dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
			};
			for (let i = 0; i < files.length; i++) {
				let reader = new FileReader;
				reader.onerror = finishFile;
				reader.onload = () => {
					if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
						text[i] = reader.result;
					finishFile();
				};
				reader.readAsText(files[i]);
			}
			return true;
		}
		else {
			let text = event.dataTransfer.getData("Text");
			if (text) {
				dropText(view, event, text, true);
				return true;
			}
		}
		return false;
	};
	handlers.paste = (view, event) => {
		if (view.state.readOnly)
			return true;
		view.observer.flush();
		let data = brokenClipboardAPI ? null : event.clipboardData;
		if (data) {
			doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
			return true;
		}
		else {
			capturePaste(view);
			return false;
		}
	};
	function captureCopy(view, text) {
		// The extra wrapper is somehow necessary on IE/Edge to prevent the
		// content from being mangled when it is put onto the clipboard
		let parent = view.dom.parentNode;
		if (!parent)
			return;
		let target = parent.appendChild(document.createElement("textarea"));
		target.style.cssText = "position: fixed; left: -10000px; top: 10px";
		target.value = text;
		target.focus();
		target.selectionEnd = text.length;
		target.selectionStart = 0;
		setTimeout(() => {
			target.remove();
			view.focus();
		}, 50);
	}
	function copiedRange(state) {
		let content = [], ranges = [], linewise = false;
		for (let range of state.selection.ranges)
			if (!range.empty) {
				content.push(state.sliceDoc(range.from, range.to));
				ranges.push(range);
			}
		if (!content.length) {
			// Nothing selected, do a line-wise copy
			let upto = -1;
			for (let { from } of state.selection.ranges) {
				let line = state.doc.lineAt(from);
				if (line.number > upto) {
					content.push(line.text);
					ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
				}
				upto = line.number;
			}
			linewise = true;
		}
		return { text: content.join(state.lineBreak), ranges, linewise };
	}
	let lastLinewiseCopy = null;
	handlers.copy = handlers.cut = (view, event) => {
		let { text, ranges, linewise } = copiedRange(view.state);
		if (!text && !linewise)
			return false;
		lastLinewiseCopy = linewise ? text : null;
		if (event.type == "cut" && !view.state.readOnly)
			view.dispatch({
				changes: ranges,
				scrollIntoView: true,
				userEvent: "delete.cut"
			});
		let data = brokenClipboardAPI ? null : event.clipboardData;
		if (data) {
			data.clearData();
			data.setData("text/plain", text);
			return true;
		}
		else {
			captureCopy(view, text);
			return false;
		}
	};
	const isFocusChange = state.Annotation.define();
	function focusChangeTransaction(state, focus) {
		let effects = [];
		for (let getEffect of state.facet(focusChangeEffect)) {
			let effect = getEffect(state, focus);
			if (effect)
				effects.push(effect);
		}
		return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
	}
	function updateForFocusChange(view) {
		setTimeout(() => {
			let focus = view.hasFocus;
			if (focus != view.inputState.notifiedFocused) {
				let tr = focusChangeTransaction(view.state, focus);
				if (tr)
					view.dispatch(tr);
				else
					view.update([]);
			}
		}, 10);
	}
	observers.focus = view => {
		view.inputState.lastFocusTime = Date.now();
		// When focusing reset the scroll position, move it back to where it was
		if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
			view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
			view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
		}
		updateForFocusChange(view);
	};
	observers.blur = view => {
		view.observer.clearSelectionRange();
		updateForFocusChange(view);
	};
	observers.compositionstart = observers.compositionupdate = view => {
		if (view.inputState.compositionFirstChange == null)
			view.inputState.compositionFirstChange = true;
		if (view.inputState.composing < 0) {
			// FIXME possibly set a timeout to clear it again on Android
			view.inputState.composing = 0;
		}
	};
	observers.compositionend = view => {
		view.inputState.composing = -1;
		view.inputState.compositionEndedAt = Date.now();
		view.inputState.compositionPendingKey = true;
		view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
		view.inputState.compositionFirstChange = null;
		if (browser.chrome && browser.android) {
			// Delay flushing for a bit on Android because it'll often fire a
			// bunch of contradictory changes in a row at end of compositon
			view.observer.flushSoon();
		}
		else if (view.inputState.compositionPendingChange) {
			// If we found pending records, schedule a flush.
			Promise.resolve().then(() => view.observer.flush());
		}
		else {
			// Otherwise, make sure that, if no changes come in soon, the
			// composition view is cleared.
			setTimeout(() => {
				if (view.inputState.composing < 0 && view.docView.hasComposition)
					view.update([]);
			}, 50);
		}
	};
	observers.contextmenu = view => {
		view.inputState.lastContextMenu = Date.now();
	};
	handlers.beforeinput = (view, event) => {
		var _a;
		// Because Chrome Android doesn't fire useful key events, use
		// beforeinput to detect backspace (and possibly enter and delete,
		// but those usually don't even seem to fire beforeinput events at
		// the moment) and fake a key event for it.
		//
		// (preventDefault on beforeinput, though supported in the spec,
		// seems to do nothing at all on Chrome).
		let pending;
		if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
			view.observer.delayAndroidKey(pending.key, pending.keyCode);
			if (pending.key == "Backspace" || pending.key == "Delete") {
				let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
				setTimeout(() => {
					var _a;
					// Backspacing near uneditable nodes on Chrome Android sometimes
					// closes the virtual keyboard. This tries to crudely detect
					// that and refocus to get it back.
					if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
						view.contentDOM.blur();
						view.focus();
					}
				}, 100);
			}
		}
		return false;
	};
	const appliedFirefoxHack = new Set;
	// In Firefox, when cut/copy handlers are added to the document, that
	// somehow avoids a bug where those events aren't fired when the
	// selection is empty. See https://github.com/codemirror/dev/issues/1082
	// and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
	function firefoxCopyCutHack(doc) {
		if (!appliedFirefoxHack.has(doc)) {
			appliedFirefoxHack.add(doc);
			doc.addEventListener("copy", () => { });
			doc.addEventListener("cut", () => { });
		}
	}
	
	const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
	class HeightOracle {
		constructor(lineWrapping) {
			this.lineWrapping = lineWrapping;
			this.doc = state.Text.empty;
			this.heightSamples = {};
			this.lineHeight = 14; // The height of an entire line (line-height)
			this.charWidth = 7;
			this.textHeight = 14; // The height of the actual font (font-size)
			this.lineLength = 30;
			// Used to track, during updateHeight, if any actual heights changed
			this.heightChanged = false;
		}
		heightForGap(from, to) {
			let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
			if (this.lineWrapping)
				lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
			return this.lineHeight * lines;
		}
		heightForLine(length) {
			if (!this.lineWrapping)
				return this.lineHeight;
			let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
			return lines * this.lineHeight;
		}
		setDoc(doc) { this.doc = doc; return this; }
		mustRefreshForWrapping(whiteSpace) {
			return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
		}
		mustRefreshForHeights(lineHeights) {
			let newHeight = false;
			for (let i = 0; i < lineHeights.length; i++) {
				let h = lineHeights[i];
				if (h < 0) {
					i++;
				}
				else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
					newHeight = true;
					this.heightSamples[Math.floor(h * 10)] = true;
				}
			}
			return newHeight;
		}
		refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
			let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
			let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
			this.lineWrapping = lineWrapping;
			this.lineHeight = lineHeight;
			this.charWidth = charWidth;
			this.textHeight = textHeight;
			this.lineLength = lineLength;
			if (changed) {
				this.heightSamples = {};
				for (let i = 0; i < knownHeights.length; i++) {
					let h = knownHeights[i];
					if (h < 0)
						i++;
					else
						this.heightSamples[Math.floor(h * 10)] = true;
				}
			}
			return changed;
		}
	}
	// This object is used by `updateHeight` to make DOM measurements
	// arrive at the right nides. The `heights` array is a sequence of
	// block heights, starting from position `from`.
	class MeasuredHeights {
		constructor(from, heights) {
			this.from = from;
			this.heights = heights;
			this.index = 0;
		}
		get more() { return this.index < this.heights.length; }
	}
	/**
	Record used to represent information about a block-level element
	in the editor view.
	*/
	class BlockInfo {
		/**
		@internal
		*/
		constructor(
		/**
		The start of the element in the document.
		*/
		from, 
		/**
		The length of the element.
		*/
		length, 
		/**
		The top position of the element (relative to the top of the
		document).
		*/
		top, 
		/**
		Its height.
		*/
		height, 
		/**
		@internal Weird packed field that holds an array of children
		for composite blocks, a decoration for block widgets, and a
		number indicating the amount of widget-create line breaks for
		text blocks.
		*/
		_content) {
			this.from = from;
			this.length = length;
			this.top = top;
			this.height = height;
			this._content = _content;
		}
		/**
		The type of element this is. When querying lines, this may be
		an array of all the blocks that make up the line.
		*/
		get type() {
			return typeof this._content == "number" ? exports.BlockType.Text :
				Array.isArray(this._content) ? this._content : this._content.type;
		}
		/**
		The end of the element as a document position.
		*/
		get to() { return this.from + this.length; }
		/**
		The bottom position of the element.
		*/
		get bottom() { return this.top + this.height; }
		/**
		If this is a widget block, this will return the widget
		associated with it.
		*/
		get widget() {
			return this._content instanceof PointDecoration ? this._content.widget : null;
		}
		/**
		If this is a textblock, this holds the number of line breaks
		that appear in widgets inside the block.
		*/
		get widgetLineBreaks() {
			return typeof this._content == "number" ? this._content : 0;
		}
		/**
		@internal
		*/
		join(other) {
			let content = (Array.isArray(this._content) ? this._content : [this])
				.concat(Array.isArray(other._content) ? other._content : [other]);
			return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
		}
	}
	var QueryType;
	(function (QueryType) {
		QueryType[QueryType["ByPos"] = 0] = "ByPos";
		QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
		QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
	})(QueryType || (QueryType = {}));
	const Epsilon = 1e-3;
	class HeightMap {
		constructor(length, // The number of characters covered
		height, // Height of this part of the document
		flags = 2 /* Flag.Outdated */) {
			this.length = length;
			this.height = height;
			this.flags = flags;
		}
		get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
		set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
		setHeight(oracle, height) {
			if (this.height != height) {
				if (Math.abs(this.height - height) > Epsilon)
					oracle.heightChanged = true;
				this.height = height;
			}
		}
		// Base case is to replace a leaf node, which simply builds a tree
		// from the new nodes and returns that (HeightMapBranch and
		// HeightMapGap override this to actually use from/to)
		replace(_from, _to, nodes) {
			return HeightMap.of(nodes);
		}
		// Again, these are base cases, and are overridden for branch and gap nodes.
		decomposeLeft(_to, result) { result.push(this); }
		decomposeRight(_from, result) { result.push(this); }
		applyChanges(decorations, oldDoc, oracle, changes) {
			let me = this, doc = oracle.doc;
			for (let i = changes.length - 1; i >= 0; i--) {
				let { fromA, toA, fromB, toB } = changes[i];
				let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
				let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
				toB += end.to - toA;
				toA = end.to;
				while (i > 0 && start.from <= changes[i - 1].toA) {
					fromA = changes[i - 1].fromA;
					fromB = changes[i - 1].fromB;
					i--;
					if (fromA < start.from)
						start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
				}
				fromB += start.from - fromA;
				fromA = start.from;
				let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
				me = me.replace(fromA, toA, nodes);
			}
			return me.updateHeight(oracle, 0);
		}
		static empty() { return new HeightMapText(0, 0); }
		// nodes uses null values to indicate the position of line breaks.
		// There are never line breaks at the start or end of the array, or
		// two line breaks next to each other, and the array isn't allowed
		// to be empty (same restrictions as return value from the builder).
		static of(nodes) {
			if (nodes.length == 1)
				return nodes[0];
			let i = 0, j = nodes.length, before = 0, after = 0;
			for (;;) {
				if (i == j) {
					if (before > after * 2) {
						let split = nodes[i - 1];
						if (split.break)
							nodes.splice(--i, 1, split.left, null, split.right);
						else
							nodes.splice(--i, 1, split.left, split.right);
						j += 1 + split.break;
						before -= split.size;
					}
					else if (after > before * 2) {
						let split = nodes[j];
						if (split.break)
							nodes.splice(j, 1, split.left, null, split.right);
						else
							nodes.splice(j, 1, split.left, split.right);
						j += 2 + split.break;
						after -= split.size;
					}
					else {
						break;
					}
				}
				else if (before < after) {
					let next = nodes[i++];
					if (next)
						before += next.size;
				}
				else {
					let next = nodes[--j];
					if (next)
						after += next.size;
				}
			}
			let brk = 0;
			if (nodes[i - 1] == null) {
				brk = 1;
				i--;
			}
			else if (nodes[i] == null) {
				brk = 1;
				j++;
			}
			return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
		}
	}
	HeightMap.prototype.size = 1;
	class HeightMapBlock extends HeightMap {
		constructor(length, height, deco) {
			super(length, height);
			this.deco = deco;
		}
		blockAt(_height, _oracle, top, offset) {
			return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
		}
		lineAt(_value, _type, oracle, top, offset) {
			return this.blockAt(0, oracle, top, offset);
		}
		forEachLine(from, to, oracle, top, offset, f) {
			if (from <= offset + this.length && to >= offset)
				f(this.blockAt(0, oracle, top, offset));
		}
		updateHeight(oracle, offset = 0, _force = false, measured) {
			if (measured && measured.from <= offset && measured.more)
				this.setHeight(oracle, measured.heights[measured.index++]);
			this.outdated = false;
			return this;
		}
		toString() { return `block(${this.length})`; }
	}
	class HeightMapText extends HeightMapBlock {
		constructor(length, height) {
			super(length, height, null);
			this.collapsed = 0; // Amount of collapsed content in the line
			this.widgetHeight = 0; // Maximum inline widget height
			this.breaks = 0; // Number of widget-introduced line breaks on the line
		}
		blockAt(_height, _oracle, top, offset) {
			return new BlockInfo(offset, this.length, top, this.height, this.breaks);
		}
		replace(_from, _to, nodes) {
			let node = nodes[0];
			if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
				Math.abs(this.length - node.length) < 10) {
				if (node instanceof HeightMapGap)
					node = new HeightMapText(node.length, this.height);
				else
					node.height = this.height;
				if (!this.outdated)
					node.outdated = false;
				return node;
			}
			else {
				return HeightMap.of(nodes);
			}
		}
		updateHeight(oracle, offset = 0, force = false, measured) {
			if (measured && measured.from <= offset && measured.more)
				this.setHeight(oracle, measured.heights[measured.index++]);
			else if (force || this.outdated)
				this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
					this.breaks * oracle.lineHeight);
			this.outdated = false;
			return this;
		}
		toString() {
			return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
		}
	}
	class HeightMapGap extends HeightMap {
		constructor(length) { super(length, 0); }
		heightMetrics(oracle, offset) {
			let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
			let lines = lastLine - firstLine + 1;
			let perLine, perChar = 0;
			if (oracle.lineWrapping) {
				let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
				perLine = totalPerLine / lines;
				if (this.length > lines + 1)
					perChar = (this.height - totalPerLine) / (this.length - lines - 1);
			}
			else {
				perLine = this.height / lines;
			}
			return { firstLine, lastLine, perLine, perChar };
		}
		blockAt(height, oracle, top, offset) {
			let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
			if (oracle.lineWrapping) {
				let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
				let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
				let lineTop = Math.max(top, height - lineHeight / 2);
				return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
			}
			else {
				let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
				let { from, length } = oracle.doc.line(firstLine + line);
				return new BlockInfo(from, length, top + perLine * line, perLine, 0);
			}
		}
		lineAt(value, type, oracle, top, offset) {
			if (type == QueryType.ByHeight)
				return this.blockAt(value, oracle, top, offset);
			if (type == QueryType.ByPosNoHeight) {
				let { from, to } = oracle.doc.lineAt(value);
				return new BlockInfo(from, to - from, 0, 0, 0);
			}
			let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
			let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
			let linesAbove = line.number - firstLine;
			let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
			return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
		}
		forEachLine(from, to, oracle, top, offset, f) {
			from = Math.max(from, offset);
			to = Math.min(to, offset + this.length);
			let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
			for (let pos = from, lineTop = top; pos <= to;) {
				let line = oracle.doc.lineAt(pos);
				if (pos == from) {
					let linesAbove = line.number - firstLine;
					lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
				}
				let lineHeight = perLine + perChar * line.length;
				f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
				lineTop += lineHeight;
				pos = line.to + 1;
			}
		}
		replace(from, to, nodes) {
			let after = this.length - to;
			if (after > 0) {
				let last = nodes[nodes.length - 1];
				if (last instanceof HeightMapGap)
					nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
				else
					nodes.push(null, new HeightMapGap(after - 1));
			}
			if (from > 0) {
				let first = nodes[0];
				if (first instanceof HeightMapGap)
					nodes[0] = new HeightMapGap(from + first.length);
				else
					nodes.unshift(new HeightMapGap(from - 1), null);
			}
			return HeightMap.of(nodes);
		}
		decomposeLeft(to, result) {
			result.push(new HeightMapGap(to - 1), null);
		}
		decomposeRight(from, result) {
			result.push(null, new HeightMapGap(this.length - from - 1));
		}
		updateHeight(oracle, offset = 0, force = false, measured) {
			let end = offset + this.length;
			if (measured && measured.from <= offset + this.length && measured.more) {
				// Fill in part of this gap with measured lines. We know there
				// can't be widgets or collapsed ranges in those lines, because
				// they would already have been added to the heightmap (gaps
				// only contain plain text).
				let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
				if (measured.from > offset)
					nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
				while (pos <= end && measured.more) {
					let len = oracle.doc.lineAt(pos).length;
					if (nodes.length)
						nodes.push(null);
					let height = measured.heights[measured.index++];
					if (singleHeight == -1)
						singleHeight = height;
					else if (Math.abs(height - singleHeight) >= Epsilon)
						singleHeight = -2;
					let line = new HeightMapText(len, height);
					line.outdated = false;
					nodes.push(line);
					pos += len + 1;
				}
				if (pos <= end)
					nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
				let result = HeightMap.of(nodes);
				if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
					Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
					oracle.heightChanged = true;
				return result;
			}
			else if (force || this.outdated) {
				this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
				this.outdated = false;
			}
			return this;
		}
		toString() { return `gap(${this.length})`; }
	}
	class HeightMapBranch extends HeightMap {
		constructor(left, brk, right) {
			super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
			this.left = left;
			this.right = right;
			this.size = left.size + right.size;
		}
		get break() { return this.flags & 1 /* Flag.Break */; }
		blockAt(height, oracle, top, offset) {
			let mid = top + this.left.height;
			return height < mid ? this.left.blockAt(height, oracle, top, offset)
				: this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
		}
		lineAt(value, type, oracle, top, offset) {
			let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
			let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
			let base = left ? this.left.lineAt(value, type, oracle, top, offset)
				: this.right.lineAt(value, type, oracle, rightTop, rightOffset);
			if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
				return base;
			let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
			if (left)
				return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
			else
				return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
		}
		forEachLine(from, to, oracle, top, offset, f) {
			let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
			if (this.break) {
				if (from < rightOffset)
					this.left.forEachLine(from, to, oracle, top, offset, f);
				if (to >= rightOffset)
					this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
			}
			else {
				let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
				if (from < mid.from)
					this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
				if (mid.to >= from && mid.from <= to)
					f(mid);
				if (to > mid.to)
					this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
			}
		}
		replace(from, to, nodes) {
			let rightStart = this.left.length + this.break;
			if (to < rightStart)
				return this.balanced(this.left.replace(from, to, nodes), this.right);
			if (from > this.left.length)
				return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
			let result = [];
			if (from > 0)
				this.decomposeLeft(from, result);
			let left = result.length;
			for (let node of nodes)
				result.push(node);
			if (from > 0)
				mergeGaps(result, left - 1);
			if (to < this.length) {
				let right = result.length;
				this.decomposeRight(to, result);
				mergeGaps(result, right);
			}
			return HeightMap.of(result);
		}
		decomposeLeft(to, result) {
			let left = this.left.length;
			if (to <= left)
				return this.left.decomposeLeft(to, result);
			result.push(this.left);
			if (this.break) {
				left++;
				if (to >= left)
					result.push(null);
			}
			if (to > left)
				this.right.decomposeLeft(to - left, result);
		}
		decomposeRight(from, result) {
			let left = this.left.length, right = left + this.break;
			if (from >= right)
				return this.right.decomposeRight(from - right, result);
			if (from < left)
				this.left.decomposeRight(from, result);
			if (this.break && from < right)
				result.push(null);
			result.push(this.right);
		}
		balanced(left, right) {
			if (left.size > 2 * right.size || right.size > 2 * left.size)
				return HeightMap.of(this.break ? [left, null, right] : [left, right]);
			this.left = left;
			this.right = right;
			this.height = left.height + right.height;
			this.outdated = left.outdated || right.outdated;
			this.size = left.size + right.size;
			this.length = left.length + this.break + right.length;
			return this;
		}
		updateHeight(oracle, offset = 0, force = false, measured) {
			let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
			if (measured && measured.from <= offset + left.length && measured.more)
				rebalance = left = left.updateHeight(oracle, offset, force, measured);
			else
				left.updateHeight(oracle, offset, force);
			if (measured && measured.from <= rightStart + right.length && measured.more)
				rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
			else
				right.updateHeight(oracle, rightStart, force);
			if (rebalance)
				return this.balanced(left, right);
			this.height = this.left.height + this.right.height;
			this.outdated = false;
			return this;
		}
		toString() { return this.left + (this.break ? " " : "-") + this.right; }
	}
	function mergeGaps(nodes, around) {
		let before, after;
		if (nodes[around] == null &&
			(before = nodes[around - 1]) instanceof HeightMapGap &&
			(after = nodes[around + 1]) instanceof HeightMapGap)
			nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
	}
	const relevantWidgetHeight = 5;
	class NodeBuilder {
		constructor(pos, oracle) {
			this.pos = pos;
			this.oracle = oracle;
			this.nodes = [];
			this.lineStart = -1;
			this.lineEnd = -1;
			this.covering = null;
			this.writtenTo = pos;
		}
		get isCovered() {
			return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
		}
		span(_from, to) {
			if (this.lineStart > -1) {
				let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
				if (last instanceof HeightMapText)
					last.length += end - this.pos;
				else if (end > this.pos || !this.isCovered)
					this.nodes.push(new HeightMapText(end - this.pos, -1));
				this.writtenTo = end;
				if (to > end) {
					this.nodes.push(null);
					this.writtenTo++;
					this.lineStart = -1;
				}
			}
			this.pos = to;
		}
		point(from, to, deco) {
			if (from < to || deco.heightRelevant) {
				let height = deco.widget ? deco.widget.estimatedHeight : 0;
				let breaks = deco.widget ? deco.widget.lineBreaks : 0;
				if (height < 0)
					height = this.oracle.lineHeight;
				let len = to - from;
				if (deco.block) {
					this.addBlock(new HeightMapBlock(len, height, deco));
				}
				else if (len || breaks || height >= relevantWidgetHeight) {
					this.addLineDeco(height, breaks, len);
				}
			}
			else if (to > from) {
				this.span(from, to);
			}
			if (this.lineEnd > -1 && this.lineEnd < this.pos)
				this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
		}
		enterLine() {
			if (this.lineStart > -1)
				return;
			let { from, to } = this.oracle.doc.lineAt(this.pos);
			this.lineStart = from;
			this.lineEnd = to;
			if (this.writtenTo < from) {
				if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
					this.nodes.push(this.blankContent(this.writtenTo, from - 1));
				this.nodes.push(null);
			}
			if (this.pos > from)
				this.nodes.push(new HeightMapText(this.pos - from, -1));
			this.writtenTo = this.pos;
		}
		blankContent(from, to) {
			let gap = new HeightMapGap(to - from);
			if (this.oracle.doc.lineAt(from).to == to)
				gap.flags |= 4 /* Flag.SingleLine */;
			return gap;
		}
		ensureLine() {
			this.enterLine();
			let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
			if (last instanceof HeightMapText)
				return last;
			let line = new HeightMapText(0, -1);
			this.nodes.push(line);
			return line;
		}
		addBlock(block) {
			this.enterLine();
			let deco = block.deco;
			if (deco && deco.startSide > 0 && !this.isCovered)
				this.ensureLine();
			this.nodes.push(block);
			this.writtenTo = this.pos = this.pos + block.length;
			if (deco && deco.endSide > 0)
				this.covering = block;
		}
		addLineDeco(height, breaks, length) {
			let line = this.ensureLine();
			line.length += length;
			line.collapsed += length;
			line.widgetHeight = Math.max(line.widgetHeight, height);
			line.breaks += breaks;
			this.writtenTo = this.pos = this.pos + length;
		}
		finish(from) {
			let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
			if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
				this.nodes.push(new HeightMapText(0, -1));
			else if (this.writtenTo < this.pos || last == null)
				this.nodes.push(this.blankContent(this.writtenTo, this.pos));
			let pos = from;
			for (let node of this.nodes) {
				if (node instanceof HeightMapText)
					node.updateHeight(this.oracle, pos);
				pos += node ? node.length : 1;
			}
			return this.nodes;
		}
		// Always called with a region that on both sides either stretches
		// to a line break or the end of the document.
		// The returned array uses null to indicate line breaks, but never
		// starts or ends in a line break, or has multiple line breaks next
		// to each other.
		static build(oracle, decorations, from, to) {
			let builder = new NodeBuilder(from, oracle);
			state.RangeSet.spans(decorations, from, to, builder, 0);
			return builder.finish(from);
		}
	}
	function heightRelevantDecoChanges(a, b, diff) {
		let comp = new DecorationComparator;
		state.RangeSet.compare(a, b, diff, comp, 0);
		return comp.changes;
	}
	class DecorationComparator {
		constructor() {
			this.changes = [];
		}
		compareRange() { }
		comparePoint(from, to, a, b) {
			if (from < to || a && a.heightRelevant || b && b.heightRelevant)
				addRange(from, to, this.changes, 5);
		}
	}
	
	function visiblePixelRange(dom, paddingTop) {
		let rect = dom.getBoundingClientRect();
		let doc = dom.ownerDocument, win = doc.defaultView || window;
		let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
		let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
		for (let parent = dom.parentNode; parent && parent != doc.body;) {
			if (parent.nodeType == 1) {
				let elt = parent;
				let style = window.getComputedStyle(elt);
				if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
					style.overflow != "visible") {
					let parentRect = elt.getBoundingClientRect();
					left = Math.max(left, parentRect.left);
					right = Math.min(right, parentRect.right);
					top = Math.max(top, parentRect.top);
					bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
				}
				parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
			}
			else if (parent.nodeType == 11) { // Shadow root
				parent = parent.host;
			}
			else {
				break;
			}
		}
		return { left: left - rect.left, right: Math.max(left, right) - rect.left,
			top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
	}
	function fullPixelRange(dom, paddingTop) {
		let rect = dom.getBoundingClientRect();
		return { left: 0, right: rect.right - rect.left,
			top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
	}
	// Line gaps are placeholder widgets used to hide pieces of overlong
	// lines within the viewport, as a kludge to keep the editor
	// responsive when a ridiculously long line is loaded into it.
	class LineGap {
		constructor(from, to, size) {
			this.from = from;
			this.to = to;
			this.size = size;
		}
		static same(a, b) {
			if (a.length != b.length)
				return false;
			for (let i = 0; i < a.length; i++) {
				let gA = a[i], gB = b[i];
				if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
					return false;
			}
			return true;
		}
		draw(viewState, wrapping) {
			return Decoration.replace({
				widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
			}).range(this.from, this.to);
		}
	}
	class LineGapWidget extends WidgetType {
		constructor(size, vertical) {
			super();
			this.size = size;
			this.vertical = vertical;
		}
		eq(other) { return other.size == this.size && other.vertical == this.vertical; }
		toDOM() {
			let elt = document.createElement("div");
			if (this.vertical) {
				elt.style.height = this.size + "px";
			}
			else {
				elt.style.width = this.size + "px";
				elt.style.height = "2px";
				elt.style.display = "inline-block";
			}
			return elt;
		}
		get estimatedHeight() { return this.vertical ? this.size : -1; }
	}
	class ViewState {
		constructor(state$1) {
			this.state = state$1;
			// These are contentDOM-local coordinates
			this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
			this.inView = true;
			this.paddingTop = 0; // Padding above the document, scaled
			this.paddingBottom = 0; // Padding below the document, scaled
			this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
			this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
			this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
			this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
			this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
			this.scrolledToBottom = true;
			// The CSS-transformation scale of the editor (transformed size /
			// concrete size)
			this.scaleX = 1;
			this.scaleY = 1;
			// The vertical position (document-relative) to which to anchor the
			// scroll position. -1 means anchor to the end of the document.
			this.scrollAnchorPos = 0;
			// The height at the anchor position. Set by the DOM update phase.
			// -1 means no height available.
			this.scrollAnchorHeight = -1;
			// See VP.MaxDOMHeight
			this.scaler = IdScaler;
			this.scrollTarget = null;
			// Briefly set to true when printing, to disable viewport limiting
			this.printing = false;
			// Flag set when editor content was redrawn, so that the next
			// measure stage knows it must read DOM layout
			this.mustMeasureContent = true;
			this.defaultTextDirection = exports.Direction.LTR;
			this.visibleRanges = [];
			// Cursor 'assoc' is only significant when the cursor is on a line
			// wrap point, where it must stick to the character that it is
			// associated with. Since browsers don't provide a reasonable
			// interface to set or query this, when a selection is set that
			// might cause this to be significant, this flag is set. The next
			// measure phase will check whether the cursor is on a line-wrapping
			// boundary and, if so, reset it to make sure it is positioned in
			// the right place.
			this.mustEnforceCursorAssoc = false;
			let guessWrapping = state$1.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
			this.heightOracle = new HeightOracle(guessWrapping);
			this.stateDeco = state$1.facet(decorations).filter(d => typeof d != "function");
			this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, state.Text.empty, this.heightOracle.setDoc(state$1.doc), [new ChangedRange(0, 0, 0, state$1.doc.length)]);
			this.viewport = this.getViewport(0, null);
			this.updateViewportLines();
			this.updateForViewport();
			this.lineGaps = this.ensureLineGaps([]);
			this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
			this.computeVisibleRanges();
		}
		updateForViewport() {
			let viewports = [this.viewport], { main } = this.state.selection;
			for (let i = 0; i <= 1; i++) {
				let pos = i ? main.head : main.anchor;
				if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
					let { from, to } = this.lineBlockAt(pos);
					viewports.push(new Viewport(from, to));
				}
			}
			this.viewports = viewports.sort((a, b) => a.from - b.from);
			this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
				new BigScaler(this.heightOracle, this.heightMap, this.viewports);
		}
		updateViewportLines() {
			this.viewportLines = [];
			this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
				this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
			});
		}
		update(update, scrollTarget = null) {
			this.state = update.state;
			let prevDeco = this.stateDeco;
			this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
			let contentChanges = update.changedRanges;
			let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : state.ChangeSet.empty(this.state.doc.length)));
			let prevHeight = this.heightMap.height;
			let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
			this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
			if (this.heightMap.height != prevHeight)
				update.flags |= 2 /* UpdateFlag.Height */;
			if (scrollAnchor) {
				this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
				this.scrollAnchorHeight = scrollAnchor.top;
			}
			else {
				this.scrollAnchorPos = -1;
				this.scrollAnchorHeight = this.heightMap.height;
			}
			let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
			if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
				!this.viewportIsAppropriate(viewport))
				viewport = this.getViewport(0, scrollTarget);
			let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
				viewport.from != this.viewport.from || viewport.to != this.viewport.to;
			this.viewport = viewport;
			this.updateForViewport();
			if (updateLines)
				this.updateViewportLines();
			if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
				this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
			update.flags |= this.computeVisibleRanges();
			if (scrollTarget)
				this.scrollTarget = scrollTarget;
			if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
				update.state.selection.main.empty && update.state.selection.main.assoc &&
				!update.state.facet(nativeSelectionHidden))
				this.mustEnforceCursorAssoc = true;
		}
		measure(view) {
			let dom = view.contentDOM, style = window.getComputedStyle(dom);
			let oracle = this.heightOracle;
			let whiteSpace = style.whiteSpace;
			this.defaultTextDirection = style.direction == "rtl" ? exports.Direction.RTL : exports.Direction.LTR;
			let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
			let domRect = dom.getBoundingClientRect();
			let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
			this.contentDOMHeight = domRect.height;
			this.mustMeasureContent = false;
			let result = 0, bias = 0;
			if (domRect.width && domRect.height) {
				let { scaleX, scaleY } = getScale(dom, domRect);
				if (this.scaleX != scaleX || this.scaleY != scaleY) {
					this.scaleX = scaleX;
					this.scaleY = scaleY;
					result |= 8 /* UpdateFlag.Geometry */;
					refresh = measureContent = true;
				}
			}
			// Vertical padding
			let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
			let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
			if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
				this.paddingTop = paddingTop;
				this.paddingBottom = paddingBottom;
				result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
			}
			if (this.editorWidth != view.scrollDOM.clientWidth) {
				if (oracle.lineWrapping)
					measureContent = true;
				this.editorWidth = view.scrollDOM.clientWidth;
				result |= 8 /* UpdateFlag.Geometry */;
			}
			let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
			if (this.scrollTop != scrollTop) {
				this.scrollAnchorHeight = -1;
				this.scrollTop = scrollTop;
			}
			this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
			// Pixel viewport
			let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
			let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
			this.pixelViewport = pixelViewport;
			let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
			if (inView != this.inView) {
				this.inView = inView;
				if (inView)
					measureContent = true;
			}
			if (!this.inView && !this.scrollTarget)
				return 0;
			let contentWidth = domRect.width;
			if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
				this.contentDOMWidth = domRect.width;
				this.editorHeight = view.scrollDOM.clientHeight;
				result |= 8 /* UpdateFlag.Geometry */;
			}
			if (measureContent) {
				let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
				if (oracle.mustRefreshForHeights(lineHeights))
					refresh = true;
				if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
					let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
					refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
					if (refresh) {
						view.docView.minWidth = 0;
						result |= 8 /* UpdateFlag.Geometry */;
					}
				}
				if (dTop > 0 && dBottom > 0)
					bias = Math.max(dTop, dBottom);
				else if (dTop < 0 && dBottom < 0)
					bias = Math.min(dTop, dBottom);
				oracle.heightChanged = false;
				for (let vp of this.viewports) {
					let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
					this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, state.Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
				}
				if (oracle.heightChanged)
					result |= 2 /* UpdateFlag.Height */;
			}
			let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
				this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
					this.scrollTarget.range.head > this.viewport.to);
			if (viewportChange)
				this.viewport = this.getViewport(bias, this.scrollTarget);
			this.updateForViewport();
			if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
				this.updateViewportLines();
			if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
				this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
			result |= this.computeVisibleRanges();
			if (this.mustEnforceCursorAssoc) {
				this.mustEnforceCursorAssoc = false;
				// This is done in the read stage, because moving the selection
				// to a line end is going to trigger a layout anyway, so it
				// can't be a pure write. It should be rare that it does any
				// writing.
				view.docView.enforceCursorAssoc();
			}
			return result;
		}
		get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
		get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
		getViewport(bias, scrollTarget) {
			// This will divide VP.Margin between the top and the
			// bottom, depending on the bias (the change in viewport position
			// since the last update). It'll hold a number between 0 and 1
			let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
			let map = this.heightMap, oracle = this.heightOracle;
			let { visibleTop, visibleBottom } = this;
			let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
			// If scrollTarget is given, make sure the viewport includes that position
			if (scrollTarget) {
				let { head } = scrollTarget.range;
				if (head < viewport.from || head > viewport.to) {
					let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
					let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
					if (scrollTarget.y == "center")
						topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
					else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
						topPos = block.top;
					else
						topPos = block.bottom - viewHeight;
					viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
				}
			}
			return viewport;
		}
		mapViewport(viewport, changes) {
			let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
			return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
		}
		// Checks if a given viewport covers the visible part of the
		// document and not too much beyond that.
		viewportIsAppropriate({ from, to }, bias = 0) {
			if (!this.inView)
				return true;
			let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
			let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
			let { visibleTop, visibleBottom } = this;
			return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
				(to == this.state.doc.length ||
					bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
				(top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
		}
		mapLineGaps(gaps, changes) {
			if (!gaps.length || changes.empty)
				return gaps;
			let mapped = [];
			for (let gap of gaps)
				if (!changes.touchesRange(gap.from, gap.to))
					mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
			return mapped;
		}
		// Computes positions in the viewport where the start or end of a
		// line should be hidden, trying to reuse existing line gaps when
		// appropriate to avoid unneccesary redraws.
		// Uses crude character-counting for the positioning and sizing,
		// since actual DOM coordinates aren't always available and
		// predictable. Relies on generous margins (see LG.Margin) to hide
		// the artifacts this might produce from the user.
		ensureLineGaps(current, mayMeasure) {
			let wrapping = this.heightOracle.lineWrapping;
			let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
			// The non-wrapping logic won't work at all in predominantly right-to-left text.
			if (this.defaultTextDirection != exports.Direction.LTR && !wrapping)
				return [];
			let gaps = [];
			let addGap = (from, to, line, structure) => {
				if (to - from < halfMargin)
					return;
				let sel = this.state.selection.main, avoid = [sel.from];
				if (!sel.empty)
					avoid.push(sel.to);
				for (let pos of avoid) {
					if (pos > from && pos < to) {
						addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
						addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
						return;
					}
				}
				let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
					Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
					!avoid.some(pos => gap.from < pos && gap.to > pos));
				if (!gap) {
					// When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
					if (to < line.to && mayMeasure && wrapping &&
						mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
						let lineStart = mayMeasure.moveToLineBoundary(state.EditorSelection.cursor(to), false, true).head;
						if (lineStart > from)
							to = lineStart;
					}
					gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
				}
				gaps.push(gap);
			};
			for (let line of this.viewportLines) {
				if (line.length < doubleMargin)
					continue;
				let structure = lineStructure(line.from, line.to, this.stateDeco);
				if (structure.total < doubleMargin)
					continue;
				let target = this.scrollTarget ? this.scrollTarget.range.head : null;
				let viewFrom, viewTo;
				if (wrapping) {
					let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
					let top, bot;
					if (target != null) {
						let targetFrac = findFraction(structure, target);
						let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
						top = targetFrac - spaceFrac;
						bot = targetFrac + spaceFrac;
					}
					else {
						top = (this.visibleTop - line.top - marginHeight) / line.height;
						bot = (this.visibleBottom - line.top + marginHeight) / line.height;
					}
					viewFrom = findPosition(structure, top);
					viewTo = findPosition(structure, bot);
				}
				else {
					let totalWidth = structure.total * this.heightOracle.charWidth;
					let marginWidth = margin * this.heightOracle.charWidth;
					let left, right;
					if (target != null) {
						let targetFrac = findFraction(structure, target);
						let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
						left = targetFrac - spaceFrac;
						right = targetFrac + spaceFrac;
					}
					else {
						left = (this.pixelViewport.left - marginWidth) / totalWidth;
						right = (this.pixelViewport.right + marginWidth) / totalWidth;
					}
					viewFrom = findPosition(structure, left);
					viewTo = findPosition(structure, right);
				}
				if (viewFrom > line.from)
					addGap(line.from, viewFrom, line, structure);
				if (viewTo < line.to)
					addGap(viewTo, line.to, line, structure);
			}
			return gaps;
		}
		gapSize(line, from, to, structure) {
			let fraction = findFraction(structure, to) - findFraction(structure, from);
			if (this.heightOracle.lineWrapping) {
				return line.height * fraction;
			}
			else {
				return structure.total * this.heightOracle.charWidth * fraction;
			}
		}
		updateLineGaps(gaps) {
			if (!LineGap.same(gaps, this.lineGaps)) {
				this.lineGaps = gaps;
				this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
			}
		}
		computeVisibleRanges() {
			let deco = this.stateDeco;
			if (this.lineGaps.length)
				deco = deco.concat(this.lineGapDeco);
			let ranges = [];
			state.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
				span(from, to) { ranges.push({ from, to }); },
				point() { }
			}, 20);
			let changed = ranges.length != this.visibleRanges.length ||
				this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
			this.visibleRanges = ranges;
			return changed ? 4 /* UpdateFlag.Viewport */ : 0;
		}
		lineBlockAt(pos) {
			return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
				scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
		}
		lineBlockAtHeight(height) {
			return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
		}
		scrollAnchorAt(scrollTop) {
			let block = this.lineBlockAtHeight(scrollTop + 8);
			return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
		}
		elementAtHeight(height) {
			return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
		}
		get docHeight() {
			return this.scaler.toDOM(this.heightMap.height);
		}
		get contentHeight() {
			return this.docHeight + this.paddingTop + this.paddingBottom;
		}
	}
	class Viewport {
		constructor(from, to) {
			this.from = from;
			this.to = to;
		}
	}
	function lineStructure(from, to, stateDeco) {
		let ranges = [], pos = from, total = 0;
		state.RangeSet.spans(stateDeco, from, to, {
			span() { },
			point(from, to) {
				if (from > pos) {
					ranges.push({ from: pos, to: from });
					total += from - pos;
				}
				pos = to;
			}
		}, 20); // We're only interested in collapsed ranges of a significant size
		if (pos < to) {
			ranges.push({ from: pos, to });
			total += to - pos;
		}
		return { total, ranges };
	}
	function findPosition({ total, ranges }, ratio) {
		if (ratio <= 0)
			return ranges[0].from;
		if (ratio >= 1)
			return ranges[ranges.length - 1].to;
		let dist = Math.floor(total * ratio);
		for (let i = 0;; i++) {
			let { from, to } = ranges[i], size = to - from;
			if (dist <= size)
				return from + dist;
			dist -= size;
		}
	}
	function findFraction(structure, pos) {
		let counted = 0;
		for (let { from, to } of structure.ranges) {
			if (pos <= to) {
				counted += pos - from;
				break;
			}
			counted += to - from;
		}
		return counted / structure.total;
	}
	function find(array, f) {
		for (let val of array)
			if (f(val))
				return val;
		return undefined;
	}
	// Don't scale when the document height is within the range of what
	// the DOM can handle.
	const IdScaler = {
		toDOM(n) { return n; },
		fromDOM(n) { return n; },
		scale: 1
	};
	// When the height is too big (> VP.MaxDOMHeight), scale down the
	// regions outside the viewports so that the total height is
	// VP.MaxDOMHeight.
	class BigScaler {
		constructor(oracle, heightMap, viewports) {
			let vpHeight = 0, base = 0, domBase = 0;
			this.viewports = viewports.map(({ from, to }) => {
				let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
				let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
				vpHeight += bottom - top;
				return { from, to, top, bottom, domTop: 0, domBottom: 0 };
			});
			this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
			for (let obj of this.viewports) {
				obj.domTop = domBase + (obj.top - base) * this.scale;
				domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
				base = obj.bottom;
			}
		}
		toDOM(n) {
			for (let i = 0, base = 0, domBase = 0;; i++) {
				let vp = i < this.viewports.length ? this.viewports[i] : null;
				if (!vp || n < vp.top)
					return domBase + (n - base) * this.scale;
				if (n <= vp.bottom)
					return vp.domTop + (n - vp.top);
				base = vp.bottom;
				domBase = vp.domBottom;
			}
		}
		fromDOM(n) {
			for (let i = 0, base = 0, domBase = 0;; i++) {
				let vp = i < this.viewports.length ? this.viewports[i] : null;
				if (!vp || n < vp.domTop)
					return base + (n - domBase) / this.scale;
				if (n <= vp.domBottom)
					return vp.top + (n - vp.domTop);
				base = vp.bottom;
				domBase = vp.domBottom;
			}
		}
	}
	function scaleBlock(block, scaler) {
		if (scaler.scale == 1)
			return block;
		let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
		return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
	}
	
	const theme = state.Facet.define({ combine: strs => strs.join(" ") });
	const darkTheme = state.Facet.define({ combine: values => values.indexOf(true) > -1 });
	const baseThemeID = styleMod.StyleModule.newName(), baseLightID = styleMod.StyleModule.newName(), baseDarkID = styleMod.StyleModule.newName();
	const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
	function buildTheme(main, spec, scopes) {
		return new styleMod.StyleModule(spec, {
			finish(sel) {
				return /&/.test(sel) ? sel.replace(/&\w*/, m => {
					if (m == "&")
						return main;
					if (!scopes || !scopes[m])
						throw new RangeError(`Unsupported selector: ${m}`);
					return scopes[m];
				}) : main + " " + sel;
			}
		});
	}
	const baseTheme$1 = buildTheme("." + baseThemeID, {
		"&": {
			position: "relative !important",
			boxSizing: "border-box",
			"&.cm-focused": {
				// Provide a simple default outline to make sure a focused
				// editor is visually distinct. Can't leave the default behavior
				// because that will apply to the content element, which is
				// inside the scrollable container and doesn't include the
				// gutters. We also can't use an 'auto' outline, since those
				// are, for some reason, drawn behind the element content, which
				// will cause things like the active line background to cover
				// the outline (#297).
				outline: "1px dotted #212121"
			},
			display: "flex !important",
			flexDirection: "column"
		},
		".cm-scroller": {
			display: "flex !important",
			alignItems: "flex-start !important",
			fontFamily: "monospace",
			lineHeight: 1.4,
			height: "100%",
			overflowX: "auto",
			position: "relative",
			zIndex: 0
		},
		".cm-content": {
			margin: 0,
			flexGrow: 2,
			flexShrink: 0,
			display: "block",
			whiteSpace: "pre",
			wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
			boxSizing: "border-box",
			minHeight: "100%",
			padding: "4px 0",
			outline: "none",
			"&[contenteditable=true]": {
				WebkitUserModify: "read-write-plaintext-only",
			}
		},
		".cm-lineWrapping": {
			whiteSpace_fallback: "pre-wrap", // For IE
			whiteSpace: "break-spaces",
			wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
			overflowWrap: "anywhere",
			flexShrink: 1
		},
		"&light .cm-content": { caretColor: "black" },
		"&dark .cm-content": { caretColor: "white" },
		".cm-line": {
			display: "block",
			padding: "0 2px 0 6px"
		},
		".cm-layer": {
			position: "absolute",
			left: 0,
			top: 0,
			contain: "size style",
			"& > *": {
				position: "absolute"
			}
		},
		"&light .cm-selectionBackground": {
			background: "#d9d9d9"
		},
		"&dark .cm-selectionBackground": {
			background: "#222"
		},
		"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
			background: "#d7d4f0"
		},
		"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
			background: "#233"
		},
		".cm-cursorLayer": {
			pointerEvents: "none"
		},
		"&.cm-focused > .cm-scroller > .cm-cursorLayer": {
			animation: "steps(1) cm-blink 1.2s infinite"
		},
		// Two animations defined so that we can switch between them to
		// restart the animation without forcing another style
		// recomputation.
		"@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
		"@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
		".cm-cursor, .cm-dropCursor": {
			borderLeft: "1.2px solid black",
			marginLeft: "-0.6px",
			pointerEvents: "none",
		},
		".cm-cursor": {
			display: "none"
		},
		"&dark .cm-cursor": {
			borderLeftColor: "#444"
		},
		".cm-dropCursor": {
			position: "absolute"
		},
		"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
			display: "block"
		},
		".cm-announced": {
			position: "fixed",
			top: "-10000px"
		},
		"@media print": {
			".cm-announced": { display: "none" }
		},
		"&light .cm-activeLine": { backgroundColor: "#cceeff44" },
		"&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
		"&light .cm-specialChar": { color: "red" },
		"&dark .cm-specialChar": { color: "#f78" },
		".cm-gutters": {
			flexShrink: 0,
			display: "flex",
			height: "100%",
			boxSizing: "border-box",
			insetInlineStart: 0,
			zIndex: 200
		},
		"&light .cm-gutters": {
			backgroundColor: "#f5f5f5",
			color: "#6c6c6c",
			borderRight: "1px solid #ddd"
		},
		"&dark .cm-gutters": {
			backgroundColor: "#333338",
			color: "#ccc"
		},
		".cm-gutter": {
			display: "flex !important", // Necessary -- prevents margin collapsing
			flexDirection: "column",
			flexShrink: 0,
			boxSizing: "border-box",
			minHeight: "100%",
			overflow: "hidden"
		},
		".cm-gutterElement": {
			boxSizing: "border-box"
		},
		".cm-lineNumbers .cm-gutterElement": {
			padding: "0 3px 0 5px",
			minWidth: "20px",
			textAlign: "right",
			whiteSpace: "nowrap"
		},
		"&light .cm-activeLineGutter": {
			backgroundColor: "#e2f2ff"
		},
		"&dark .cm-activeLineGutter": {
			backgroundColor: "#222227"
		},
		".cm-panels": {
			boxSizing: "border-box",
			position: "sticky",
			left: 0,
			right: 0
		},
		"&light .cm-panels": {
			backgroundColor: "#f5f5f5",
			color: "black"
		},
		"&light .cm-panels-top": {
			borderBottom: "1px solid #ddd"
		},
		"&light .cm-panels-bottom": {
			borderTop: "1px solid #ddd"
		},
		"&dark .cm-panels": {
			backgroundColor: "#333338",
			color: "white"
		},
		".cm-tab": {
			display: "inline-block",
			overflow: "hidden",
			verticalAlign: "bottom"
		},
		".cm-widgetBuffer": {
			verticalAlign: "text-top",
			height: "1em",
			width: 0,
			display: "inline"
		},
		".cm-placeholder": {
			color: "#888",
			display: "inline-block",
			verticalAlign: "top",
		},
		".cm-highlightSpace:before": {
			content: "attr(data-display)",
			position: "absolute",
			pointerEvents: "none",
			color: "#888"
		},
		".cm-highlightTab": {
			backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
			backgroundSize: "auto 100%",
			backgroundPosition: "right 90%",
			backgroundRepeat: "no-repeat"
		},
		".cm-trailingSpace": {
			backgroundColor: "#ff332255"
		},
		".cm-button": {
			verticalAlign: "middle",
			color: "inherit",
			fontSize: "70%",
			padding: ".2em 1em",
			borderRadius: "1px"
		},
		"&light .cm-button": {
			backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
			border: "1px solid #888",
			"&:active": {
				backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
			}
		},
		"&dark .cm-button": {
			backgroundImage: "linear-gradient(#393939, #111)",
			border: "1px solid #888",
			"&:active": {
				backgroundImage: "linear-gradient(#111, #333)"
			}
		},
		".cm-textfield": {
			verticalAlign: "middle",
			color: "inherit",
			fontSize: "70%",
			border: "1px solid silver",
			padding: ".2em .5em"
		},
		"&light .cm-textfield": {
			backgroundColor: "white"
		},
		"&dark .cm-textfield": {
			border: "1px solid #555",
			backgroundColor: "inherit"
		}
	}, lightDarkIDs);
	
	const LineBreakPlaceholder = "\uffff";
	class DOMReader {
		constructor(points, state$1) {
			this.points = points;
			this.text = "";
			this.lineSeparator = state$1.facet(state.EditorState.lineSeparator);
		}
		append(text) {
			this.text += text;
		}
		lineBreak() {
			this.text += LineBreakPlaceholder;
		}
		readRange(start, end) {
			if (!start)
				return this;
			let parent = start.parentNode;
			for (let cur = start;;) {
				this.findPointBefore(parent, cur);
				let oldLen = this.text.length;
				this.readNode(cur);
				let next = cur.nextSibling;
				if (next == end)
					break;
				let view = ContentView.get(cur), nextView = ContentView.get(next);
				if (view && nextView ? view.breakAfter :
					(view ? view.breakAfter : isBlockElement(cur)) ||
						(isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
					this.lineBreak();
				cur = next;
			}
			this.findPointBefore(parent, end);
			return this;
		}
		readTextNode(node) {
			let text = node.nodeValue;
			for (let point of this.points)
				if (point.node == node)
					point.pos = this.text.length + Math.min(point.offset, text.length);
			for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
				let nextBreak = -1, breakSize = 1, m;
				if (this.lineSeparator) {
					nextBreak = text.indexOf(this.lineSeparator, off);
					breakSize = this.lineSeparator.length;
				}
				else if (m = re.exec(text)) {
					nextBreak = m.index;
					breakSize = m[0].length;
				}
				this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
				if (nextBreak < 0)
					break;
				this.lineBreak();
				if (breakSize > 1)
					for (let point of this.points)
						if (point.node == node && point.pos > this.text.length)
							point.pos -= breakSize - 1;
				off = nextBreak + breakSize;
			}
		}
		readNode(node) {
			if (node.cmIgnore)
				return;
			let view = ContentView.get(node);
			let fromView = view && view.overrideDOMText;
			if (fromView != null) {
				this.findPointInside(node, fromView.length);
				for (let i = fromView.iter(); !i.next().done;) {
					if (i.lineBreak)
						this.lineBreak();
					else
						this.append(i.value);
				}
			}
			else if (node.nodeType == 3) {
				this.readTextNode(node);
			}
			else if (node.nodeName == "BR") {
				if (node.nextSibling)
					this.lineBreak();
			}
			else if (node.nodeType == 1) {
				this.readRange(node.firstChild, null);
			}
		}
		findPointBefore(node, next) {
			for (let point of this.points)
				if (point.node == node && node.childNodes[point.offset] == next)
					point.pos = this.text.length;
		}
		findPointInside(node, length) {
			for (let point of this.points)
				if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
					point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
		}
	}
	function isAtEnd(parent, node, offset) {
		for (;;) {
			if (!node || offset < maxOffset(node))
				return false;
			if (node == parent)
				return true;
			offset = domIndex(node) + 1;
			node = node.parentNode;
		}
	}
	function isBlockElement(node) {
		return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
	}
	class DOMPoint {
		constructor(node, offset) {
			this.node = node;
			this.offset = offset;
			this.pos = -1;
		}
	}
	
	class DOMChange {
		constructor(view, start, end, typeOver) {
			this.typeOver = typeOver;
			this.bounds = null;
			this.text = "";
			let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
			if (view.state.readOnly && start > -1) {
				// Ignore changes when the editor is read-only
				this.newSel = null;
			}
			else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
				let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
				let reader = new DOMReader(selPoints, view.state);
				reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
				this.text = reader.text;
				this.newSel = selectionFromPoints(selPoints, this.bounds.from);
			}
			else {
				let domSel = view.observer.selectionRange;
				let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
					!contains(view.contentDOM, domSel.focusNode)
					? view.state.selection.main.head
					: view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
				let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
					!contains(view.contentDOM, domSel.anchorNode)
					? view.state.selection.main.anchor
					: view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
				this.newSel = state.EditorSelection.single(anchor, head);
			}
		}
	}
	function applyDOMChange(view, domChange) {
		let change;
		let { newSel } = domChange, sel = view.state.selection.main;
		let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
		if (domChange.bounds) {
			let { from, to } = domChange.bounds;
			let preferredPos = sel.from, preferredSide = null;
			// Prefer anchoring to end when Backspace is pressed (or, on
			// Android, when something was deleted)
			if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
				preferredPos = sel.to;
				preferredSide = "end";
			}
			let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
			if (diff) {
				// Chrome inserts two newlines when pressing shift-enter at the
				// end of a line. DomChange drops one of those.
				if (browser.chrome && lastKey == 13 &&
					diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
					diff.toB--;
				change = { from: from + diff.from, to: from + diff.toA,
					insert: state.Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
			}
		}
		else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
			newSel = null;
		}
		if (!change && !newSel)
			return false;
		if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
			// Heuristic to notice typing over a selected character
			change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
		}
		else if (change && change.from >= sel.from && change.to <= sel.to &&
			(change.from != sel.from || change.to != sel.to) &&
			(sel.to - sel.from) - (change.to - change.from) <= 4) {
			// If the change is inside the selection and covers most of it,
			// assume it is a selection replace (with identical characters at
			// the start/end not included in the diff)
			change = {
				from: sel.from, to: sel.to,
				insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
			};
		}
		else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
			/^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
			// Detect insert-period-on-double-space Mac and Android behavior,
			// and transform it into a regular space insert.
			if (newSel && change.insert.length == 2)
				newSel = state.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
			change = { from: sel.from, to: sel.to, insert: state.Text.of([" "]) };
		}
		else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
			change.insert.toString() == "\n " && view.lineWrapping) {
			// In Chrome, if you insert a space at the start of a wrapped
			// line, it will actually insert a newline and a space, causing a
			// bogus new line to be created in CodeMirror (#968)
			if (newSel)
				newSel = state.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
			change = { from: sel.from, to: sel.to, insert: state.Text.of([" "]) };
		}
		if (change) {
			if (browser.ios && view.inputState.flushIOSKey())
				return true;
			// Android browsers don't fire reasonable key events for enter,
			// backspace, or delete. So this detects changes that look like
			// they're caused by those keys, and reinterprets them as key
			// events. (Some of these keys are also handled by beforeinput
			// events and the pendingAndroidKey mechanism, but that's not
			// reliable in all situations.)
			if (browser.android &&
				((change.from == sel.from && change.to == sel.to &&
					change.insert.length == 1 && change.insert.lines == 2 &&
					dispatchKey(view.contentDOM, "Enter", 13)) ||
					((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
						lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
						dispatchKey(view.contentDOM, "Backspace", 8)) ||
					(change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
						dispatchKey(view.contentDOM, "Delete", 46))))
				return true;
			let text = change.insert.toString();
			if (view.inputState.composing >= 0)
				view.inputState.composing++;
			let defaultTr;
			let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
			if (!view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text, defaultInsert)))
				view.dispatch(defaultInsert());
			return true;
		}
		else if (newSel && !newSel.main.eq(sel)) {
			let scrollIntoView = false, userEvent = "select";
			if (view.inputState.lastSelectionTime > Date.now() - 50) {
				if (view.inputState.lastSelectionOrigin == "select")
					scrollIntoView = true;
				userEvent = view.inputState.lastSelectionOrigin;
			}
			view.dispatch({ selection: newSel, scrollIntoView, userEvent });
			return true;
		}
		else {
			return false;
		}
	}
	function applyDefaultInsert(view, change, newSel) {
		let tr, startState = view.state, sel = startState.selection.main;
		if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
			(!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
			view.inputState.composing < 0) {
			let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
			let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
			tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
		}
		else {
			let changes = startState.changes(change);
			let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
			// Try to apply a composition change to all cursors
			if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
				change.to <= sel.to && change.to >= sel.to - 10) {
				let replaced = view.state.sliceDoc(change.from, change.to);
				let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
				if (composition) {
					let dLen = change.insert.length - (change.to - change.from);
					compositionRange = { from: composition.from, to: composition.to - dLen };
				}
				else {
					compositionRange = view.state.doc.lineAt(sel.head);
				}
				let offset = sel.to - change.to, size = sel.to - sel.from;
				tr = startState.changeByRange(range => {
					if (range.from == sel.from && range.to == sel.to)
						return { changes, range: mainSel || range.map(changes) };
					let to = range.to - offset, from = to - replaced.length;
					if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
						// Unfortunately, there's no way to make multiple
						// changes in the same node work without aborting
						// composition, so cursors in the composition range are
						// ignored.
						range.to >= compositionRange.from && range.from <= compositionRange.to)
						return { range };
					let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
					return {
						changes: rangeChanges,
						range: !mainSel ? range.map(rangeChanges) :
							state.EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
					};
				});
			}
			else {
				tr = {
					changes,
					selection: mainSel && startState.selection.replaceRange(mainSel)
				};
			}
		}
		let userEvent = "input.type";
		if (view.composing ||
			view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
			view.inputState.compositionPendingChange = false;
			userEvent += ".compose";
			if (view.inputState.compositionFirstChange) {
				userEvent += ".start";
				view.inputState.compositionFirstChange = false;
			}
		}
		return startState.update(tr, { userEvent, scrollIntoView: true });
	}
	function findDiff(a, b, preferredPos, preferredSide) {
		let minLen = Math.min(a.length, b.length);
		let from = 0;
		while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
			from++;
		if (from == minLen && a.length == b.length)
			return null;
		let toA = a.length, toB = b.length;
		while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
			toA--;
			toB--;
		}
		if (preferredSide == "end") {
			let adjust = Math.max(0, from - Math.min(toA, toB));
			preferredPos -= toA + adjust - from;
		}
		if (toA < from && a.length < b.length) {
			let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
			from -= move;
			toB = from + (toB - toA);
			toA = from;
		}
		else if (toB < from) {
			let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
			from -= move;
			toA = from + (toA - toB);
			toB = from;
		}
		return { from, toA, toB };
	}
	function selectionPoints(view) {
		let result = [];
		if (view.root.activeElement != view.contentDOM)
			return result;
		let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
		if (anchorNode) {
			result.push(new DOMPoint(anchorNode, anchorOffset));
			if (focusNode != anchorNode || focusOffset != anchorOffset)
				result.push(new DOMPoint(focusNode, focusOffset));
		}
		return result;
	}
	function selectionFromPoints(points, base) {
		if (points.length == 0)
			return null;
		let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
		return anchor > -1 && head > -1 ? state.EditorSelection.single(anchor + base, head + base) : null;
	}
	
	const observeOptions = {
		childList: true,
		characterData: true,
		subtree: true,
		attributes: true,
		characterDataOldValue: true
	};
	// IE11 has very broken mutation observers, so we also listen to
	// DOMCharacterDataModified there
	const useCharData = browser.ie && browser.ie_version <= 11;
	class DOMObserver {
		constructor(view) {
			this.view = view;
			this.active = false;
			// The known selection. Kept in our own object, as opposed to just
			// directly accessing the selection because:
			//  - Safari doesn't report the right selection in shadow DOM
			//  - Reading from the selection forces a DOM layout
			//  - This way, we can ignore selectionchange events if we have
			//    already seen the 'new' selection
			this.selectionRange = new DOMSelectionState;
			// Set when a selection change is detected, cleared on flush
			this.selectionChanged = false;
			this.delayedFlush = -1;
			this.resizeTimeout = -1;
			this.queue = [];
			this.delayedAndroidKey = null;
			this.flushingAndroidKey = -1;
			this.lastChange = 0;
			this.scrollTargets = [];
			this.intersection = null;
			this.resizeScroll = null;
			this.intersecting = false;
			this.gapIntersection = null;
			this.gaps = [];
			// Timeout for scheduling check of the parents that need scroll handlers
			this.parentCheck = -1;
			this.dom = view.contentDOM;
			this.observer = new MutationObserver(mutations => {
				for (let mut of mutations)
					this.queue.push(mut);
				// IE11 will sometimes (on typing over a selection or
				// backspacing out a single character text node) call the
				// observer callback before actually updating the DOM.
				//
				// Unrelatedly, iOS Safari will, when ending a composition,
				// sometimes first clear it, deliver the mutations, and then
				// reinsert the finished text. CodeMirror's handling of the
				// deletion will prevent the reinsertion from happening,
				// breaking composition.
				if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
					mutations.some(m => m.type == "childList" && m.removedNodes.length ||
						m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
					this.flushSoon();
				else
					this.flush();
			});
			if (useCharData)
				this.onCharData = (event) => {
					this.queue.push({ target: event.target,
						type: "characterData",
						oldValue: event.prevValue });
					this.flushSoon();
				};
			this.onSelectionChange = this.onSelectionChange.bind(this);
			this.onResize = this.onResize.bind(this);
			this.onPrint = this.onPrint.bind(this);
			this.onScroll = this.onScroll.bind(this);
			if (typeof ResizeObserver == "function") {
				this.resizeScroll = new ResizeObserver(() => {
					var _a;
					if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
						this.onResize();
				});
				this.resizeScroll.observe(view.scrollDOM);
			}
			this.addWindowListeners(this.win = view.win);
			this.start();
			if (typeof IntersectionObserver == "function") {
				this.intersection = new IntersectionObserver(entries => {
					if (this.parentCheck < 0)
						this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
					if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
						this.intersecting = !this.intersecting;
						if (this.intersecting != this.view.inView)
							this.onScrollChanged(document.createEvent("Event"));
					}
				}, { threshold: [0, .001] });
				this.intersection.observe(this.dom);
				this.gapIntersection = new IntersectionObserver(entries => {
					if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
						this.onScrollChanged(document.createEvent("Event"));
				}, {});
			}
			this.listenForScroll();
			this.readSelectionRange();
		}
		onScrollChanged(e) {
			this.view.inputState.runHandlers("scroll", e);
			if (this.intersecting)
				this.view.measure();
		}
		onScroll(e) {
			if (this.intersecting)
				this.flush(false);
			this.onScrollChanged(e);
		}
		onResize() {
			if (this.resizeTimeout < 0)
				this.resizeTimeout = setTimeout(() => {
					this.resizeTimeout = -1;
					this.view.requestMeasure();
				}, 50);
		}
		onPrint() {
			this.view.viewState.printing = true;
			this.view.measure();
			setTimeout(() => {
				this.view.viewState.printing = false;
				this.view.requestMeasure();
			}, 500);
		}
		updateGaps(gaps) {
			if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
				this.gapIntersection.disconnect();
				for (let gap of gaps)
					this.gapIntersection.observe(gap);
				this.gaps = gaps;
			}
		}
		onSelectionChange(event) {
			let wasChanged = this.selectionChanged;
			if (!this.readSelectionRange() || this.delayedAndroidKey)
				return;
			let { view } = this, sel = this.selectionRange;
			if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
				return;
			let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
			if (context && context.ignoreEvent(event)) {
				if (!wasChanged)
					this.selectionChanged = false;
				return;
			}
			// Deletions on IE11 fire their events in the wrong order, giving
			// us a selection change event before the DOM changes are
			// reported.
			// Chrome Android has a similar issue when backspacing out a
			// selection (#645).
			if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
				// (Selection.isCollapsed isn't reliable on IE)
				sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
				this.flushSoon();
			else
				this.flush(false);
		}
		readSelectionRange() {
			let { view } = this;
			// The Selection object is broken in shadow roots in Safari. See
			// https://github.com/codemirror/dev/issues/414
			let range = browser.safari && view.root.nodeType == 11 &&
				deepActiveElement(this.dom.ownerDocument) == this.dom &&
				safariSelectionRangeHack(this.view) || getSelection(view.root);
			if (!range || this.selectionRange.eq(range))
				return false;
			let local = hasSelection(this.dom, range);
			// Detect the situation where the browser has, on focus, moved the
			// selection to the start of the content element. Reset it to the
			// position from the editor state.
			if (local && !this.selectionChanged &&
				view.inputState.lastFocusTime > Date.now() - 200 &&
				view.inputState.lastTouchTime < Date.now() - 300 &&
				atElementStart(this.dom, range)) {
				this.view.inputState.lastFocusTime = 0;
				view.docView.updateSelection();
				return false;
			}
			this.selectionRange.setRange(range);
			if (local)
				this.selectionChanged = true;
			return true;
		}
		setSelectionRange(anchor, head) {
			this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
			this.selectionChanged = false;
		}
		clearSelectionRange() {
			this.selectionRange.set(null, 0, null, 0);
		}
		listenForScroll() {
			this.parentCheck = -1;
			let i = 0, changed = null;
			for (let dom = this.dom; dom;) {
				if (dom.nodeType == 1) {
					if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
						i++;
					else if (!changed)
						changed = this.scrollTargets.slice(0, i);
					if (changed)
						changed.push(dom);
					dom = dom.assignedSlot || dom.parentNode;
				}
				else if (dom.nodeType == 11) { // Shadow root
					dom = dom.host;
				}
				else {
					break;
				}
			}
			if (i < this.scrollTargets.length && !changed)
				changed = this.scrollTargets.slice(0, i);
			if (changed) {
				for (let dom of this.scrollTargets)
					dom.removeEventListener("scroll", this.onScroll);
				for (let dom of this.scrollTargets = changed)
					dom.addEventListener("scroll", this.onScroll);
			}
		}
		ignore(f) {
			if (!this.active)
				return f();
			try {
				this.stop();
				return f();
			}
			finally {
				this.start();
				this.clear();
			}
		}
		start() {
			if (this.active)
				return;
			this.observer.observe(this.dom, observeOptions);
			if (useCharData)
				this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
			this.active = true;
		}
		stop() {
			if (!this.active)
				return;
			this.active = false;
			this.observer.disconnect();
			if (useCharData)
				this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
		}
		// Throw away any pending changes
		clear() {
			this.processRecords();
			this.queue.length = 0;
			this.selectionChanged = false;
		}
		// Chrome Android, especially in combination with GBoard, not only
		// doesn't reliably fire regular key events, but also often
		// surrounds the effect of enter or backspace with a bunch of
		// composition events that, when interrupted, cause text duplication
		// or other kinds of corruption. This hack makes the editor back off
		// from handling DOM changes for a moment when such a key is
		// detected (via beforeinput or keydown), and then tries to flush
		// them or, if that has no effect, dispatches the given key.
		delayAndroidKey(key, keyCode) {
			var _a;
			if (!this.delayedAndroidKey) {
				let flush = () => {
					let key = this.delayedAndroidKey;
					if (key) {
						this.clearDelayedAndroidKey();
						this.view.inputState.lastKeyCode = key.keyCode;
						this.view.inputState.lastKeyTime = Date.now();
						let flushed = this.flush();
						if (!flushed && key.force)
							dispatchKey(this.dom, key.key, key.keyCode);
					}
				};
				this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
			}
			// Since backspace beforeinput is sometimes signalled spuriously,
			// Enter always takes precedence.
			if (!this.delayedAndroidKey || key == "Enter")
				this.delayedAndroidKey = {
					key, keyCode,
					// Only run the key handler when no changes are detected if
					// this isn't coming right after another change, in which case
					// it is probably part of a weird chain of updates, and should
					// be ignored if it returns the DOM to its previous state.
					force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
				};
		}
		clearDelayedAndroidKey() {
			this.win.cancelAnimationFrame(this.flushingAndroidKey);
			this.delayedAndroidKey = null;
			this.flushingAndroidKey = -1;
		}
		flushSoon() {
			if (this.delayedFlush < 0)
				this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
		}
		forceFlush() {
			if (this.delayedFlush >= 0) {
				this.view.win.cancelAnimationFrame(this.delayedFlush);
				this.delayedFlush = -1;
			}
			this.flush();
		}
		pendingRecords() {
			for (let mut of this.observer.takeRecords())
				this.queue.push(mut);
			return this.queue;
		}
		processRecords() {
			let records = this.pendingRecords();
			if (records.length)
				this.queue = [];
			let from = -1, to = -1, typeOver = false;
			for (let record of records) {
				let range = this.readMutation(record);
				if (!range)
					continue;
				if (range.typeOver)
					typeOver = true;
				if (from == -1) {
					({ from, to } = range);
				}
				else {
					from = Math.min(range.from, from);
					to = Math.max(range.to, to);
				}
			}
			return { from, to, typeOver };
		}
		readChange() {
			let { from, to, typeOver } = this.processRecords();
			let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
			if (from < 0 && !newSel)
				return null;
			if (from > -1)
				this.lastChange = Date.now();
			this.view.inputState.lastFocusTime = 0;
			this.selectionChanged = false;
			let change = new DOMChange(this.view, from, to, typeOver);
			this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
			return change;
		}
		// Apply pending changes, if any
		flush(readSelection = true) {
			// Completely hold off flushing when pending keys are set—the code
			// managing those will make sure processRecords is called and the
			// view is resynchronized after
			if (this.delayedFlush >= 0 || this.delayedAndroidKey)
				return false;
			if (readSelection)
				this.readSelectionRange();
			let domChange = this.readChange();
			if (!domChange) {
				this.view.requestMeasure();
				return false;
			}
			let startState = this.view.state;
			let handled = applyDOMChange(this.view, domChange);
			// The view wasn't updated
			if (this.view.state == startState)
				this.view.update([]);
			return handled;
		}
		readMutation(rec) {
			let cView = this.view.docView.nearest(rec.target);
			if (!cView || cView.ignoreMutation(rec))
				return null;
			cView.markDirty(rec.type == "attributes");
			if (rec.type == "attributes")
				cView.flags |= 4 /* ViewFlag.AttrsDirty */;
			if (rec.type == "childList") {
				let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
				let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
				return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
					to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
			}
			else if (rec.type == "characterData") {
				return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
			}
			else {
				return null;
			}
		}
		setWindow(win) {
			if (win != this.win) {
				this.removeWindowListeners(this.win);
				this.win = win;
				this.addWindowListeners(this.win);
			}
		}
		addWindowListeners(win) {
			win.addEventListener("resize", this.onResize);
			win.addEventListener("beforeprint", this.onPrint);
			win.addEventListener("scroll", this.onScroll);
			win.document.addEventListener("selectionchange", this.onSelectionChange);
		}
		removeWindowListeners(win) {
			win.removeEventListener("scroll", this.onScroll);
			win.removeEventListener("resize", this.onResize);
			win.removeEventListener("beforeprint", this.onPrint);
			win.document.removeEventListener("selectionchange", this.onSelectionChange);
		}
		destroy() {
			var _a, _b, _c;
			this.stop();
			(_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
			(_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
			(_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
			for (let dom of this.scrollTargets)
				dom.removeEventListener("scroll", this.onScroll);
			this.removeWindowListeners(this.win);
			clearTimeout(this.parentCheck);
			clearTimeout(this.resizeTimeout);
			this.win.cancelAnimationFrame(this.delayedFlush);
			this.win.cancelAnimationFrame(this.flushingAndroidKey);
		}
	}
	function findChild(cView, dom, dir) {
		while (dom) {
			let curView = ContentView.get(dom);
			if (curView && curView.parent == cView)
				return curView;
			let parent = dom.parentNode;
			dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
		}
		return null;
	}
	// Used to work around a Safari Selection/shadow DOM bug (#414)
	function safariSelectionRangeHack(view) {
		let found = null;
		// Because Safari (at least in 2018-2021) doesn't provide regular
		// access to the selection inside a shadowroot, we have to perform a
		// ridiculous hack to get at it—using `execCommand` to trigger a
		// `beforeInput` event so that we can read the target range from the
		// event.
		function read(event) {
			event.preventDefault();
			event.stopImmediatePropagation();
			found = event.getTargetRanges()[0];
		}
		view.contentDOM.addEventListener("beforeinput", read, true);
		view.dom.ownerDocument.execCommand("indent");
		view.contentDOM.removeEventListener("beforeinput", read, true);
		if (!found)
			return null;
		let anchorNode = found.startContainer, anchorOffset = found.startOffset;
		let focusNode = found.endContainer, focusOffset = found.endOffset;
		let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
		// Since such a range doesn't distinguish between anchor and head,
		// use a heuristic that flips it around if its end matches the
		// current anchor.
		if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
			[anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
		return { anchorNode, anchorOffset, focusNode, focusOffset };
	}
	
	// The editor's update state machine looks something like this:
	//
	//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
	//                                         ↑      ↓
	//                                         Updating (measure)
	//
	// The difference between 'Idle' and 'Idle (unchecked)' lies in
	// whether a layout check has been scheduled. A regular update through
	// the `update` method updates the DOM in a write-only fashion, and
	// relies on a check (scheduled with `requestAnimationFrame`) to make
	// sure everything is where it should be and the viewport covers the
	// visible code. That check continues to measure and then optionally
	// update until it reaches a coherent state.
	/**
	An editor view represents the editor's user interface. It holds
	the editable DOM surface, and possibly other elements such as the
	line number gutter. It handles events and dispatches state
	transactions for editing actions.
	*/
	class EditorView {
		/**
		The current editor state.
		*/
		get state() { return this.viewState.state; }
		/**
		To be able to display large documents without consuming too much
		memory or overloading the browser, CodeMirror only draws the
		code that is visible (plus a margin around it) to the DOM. This
		property tells you the extent of the current drawn viewport, in
		document positions.
		*/
		get viewport() { return this.viewState.viewport; }
		/**
		When there are, for example, large collapsed ranges in the
		viewport, its size can be a lot bigger than the actual visible
		content. Thus, if you are doing something like styling the
		content in the viewport, it is preferable to only do so for
		these ranges, which are the subset of the viewport that is
		actually drawn.
		*/
		get visibleRanges() { return this.viewState.visibleRanges; }
		/**
		Returns false when the editor is entirely scrolled out of view
		or otherwise hidden.
		*/
		get inView() { return this.viewState.inView; }
		/**
		Indicates whether the user is currently composing text via
		[IME](https://en.wikipedia.org/wiki/Input_method), and at least
		one change has been made in the current composition.
		*/
		get composing() { return this.inputState.composing > 0; }
		/**
		Indicates whether the user is currently in composing state. Note
		that on some platforms, like Android, this will be the case a
		lot, since just putting the cursor on a word starts a
		composition there.
		*/
		get compositionStarted() { return this.inputState.composing >= 0; }
		/**
		The document or shadow root that the view lives in.
		*/
		get root() { return this._root; }
		/**
		@internal
		*/
		get win() { return this.dom.ownerDocument.defaultView || window; }
		/**
		Construct a new view. You'll want to either provide a `parent`
		option, or put `view.dom` into your document after creating a
		view, so that the user can see the editor.
		*/
		constructor(config = {}) {
			this.plugins = [];
			this.pluginMap = new Map;
			this.editorAttrs = {};
			this.contentAttrs = {};
			this.bidiCache = [];
			this.destroyed = false;
			/**
			@internal
			*/
			this.updateState = 2 /* UpdateState.Updating */;
			/**
			@internal
			*/
			this.measureScheduled = -1;
			/**
			@internal
			*/
			this.measureRequests = [];
			this.contentDOM = document.createElement("div");
			this.scrollDOM = document.createElement("div");
			this.scrollDOM.tabIndex = -1;
			this.scrollDOM.className = "cm-scroller";
			this.scrollDOM.appendChild(this.contentDOM);
			this.announceDOM = document.createElement("div");
			this.announceDOM.className = "cm-announced";
			this.announceDOM.setAttribute("aria-live", "polite");
			this.dom = document.createElement("div");
			this.dom.appendChild(this.announceDOM);
			this.dom.appendChild(this.scrollDOM);
			if (config.parent)
				config.parent.appendChild(this.dom);
			let { dispatch } = config;
			this.dispatchTransactions = config.dispatchTransactions ||
				(dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
				((trs) => this.update(trs));
			this.dispatch = this.dispatch.bind(this);
			this._root = (config.root || getRoot(config.parent) || document);
			this.viewState = new ViewState(config.state || state.EditorState.create(config));
			if (config.scrollTo && config.scrollTo.is(scrollIntoView))
				this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
			this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
			for (let plugin of this.plugins)
				plugin.update(this);
			this.observer = new DOMObserver(this);
			this.inputState = new InputState(this);
			this.inputState.ensureHandlers(this.plugins);
			this.docView = new DocView(this);
			this.mountStyles();
			this.updateAttrs();
			this.updateState = 0 /* UpdateState.Idle */;
			this.requestMeasure();
		}
		dispatch(...input) {
			let trs = input.length == 1 && input[0] instanceof state.Transaction ? input
				: input.length == 1 && Array.isArray(input[0]) ? input[0]
					: [this.state.update(...input)];
			this.dispatchTransactions(trs, this);
		}
		/**
		Update the view for the given array of transactions. This will
		update the visible document and selection to match the state
		produced by the transactions, and notify view plugins of the
		change. You should usually call
		[`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
		as a primitive.
		*/
		update(transactions) {
			if (this.updateState != 0 /* UpdateState.Idle */)
				throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
			let redrawn = false, attrsChanged = false, update;
			let state$1 = this.state;
			for (let tr of transactions) {
				if (tr.startState != state$1)
					throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
				state$1 = tr.state;
			}
			if (this.destroyed) {
				this.viewState.state = state$1;
				return;
			}
			let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
			if (transactions.some(tr => tr.annotation(isFocusChange))) {
				this.inputState.notifiedFocused = focus;
				// If a focus-change transaction is being dispatched, set this update flag.
				focusFlag = 1 /* UpdateFlag.Focus */;
			}
			else if (focus != this.inputState.notifiedFocused) {
				this.inputState.notifiedFocused = focus;
				// Schedule a separate focus transaction if necessary, otherwise
				// add a flag to this update
				dispatchFocus = focusChangeTransaction(state$1, focus);
				if (!dispatchFocus)
					focusFlag = 1 /* UpdateFlag.Focus */;
			}
			// If there was a pending DOM change, eagerly read it and try to
			// apply it after the given transactions.
			let pendingKey = this.observer.delayedAndroidKey, domChange = null;
			if (pendingKey) {
				this.observer.clearDelayedAndroidKey();
				domChange = this.observer.readChange();
				// Only try to apply DOM changes if the transactions didn't
				// change the doc or selection.
				if (domChange && !this.state.doc.eq(state$1.doc) || !this.state.selection.eq(state$1.selection))
					domChange = null;
			}
			else {
				this.observer.clear();
			}
			// When the phrases change, redraw the editor
			if (state$1.facet(state.EditorState.phrases) != this.state.facet(state.EditorState.phrases))
				return this.setState(state$1);
			update = ViewUpdate.create(this, state$1, transactions);
			update.flags |= focusFlag;
			let scrollTarget = this.viewState.scrollTarget;
			try {
				this.updateState = 2 /* UpdateState.Updating */;
				for (let tr of transactions) {
					if (scrollTarget)
						scrollTarget = scrollTarget.map(tr.changes);
					if (tr.scrollIntoView) {
						let { main } = tr.state.selection;
						scrollTarget = new ScrollTarget(main.empty ? main : state.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
					}
					for (let e of tr.effects)
						if (e.is(scrollIntoView))
							scrollTarget = e.value.clip(this.state);
				}
				this.viewState.update(update, scrollTarget);
				this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
				if (!update.empty) {
					this.updatePlugins(update);
					this.inputState.update(update);
				}
				redrawn = this.docView.update(update);
				if (this.state.facet(styleModule) != this.styleModules)
					this.mountStyles();
				attrsChanged = this.updateAttrs();
				this.showAnnouncements(transactions);
				this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
			}
			finally {
				this.updateState = 0 /* UpdateState.Idle */;
			}
			if (update.startState.facet(theme) != update.state.facet(theme))
				this.viewState.mustMeasureContent = true;
			if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
				this.requestMeasure();
			if (!update.empty)
				for (let listener of this.state.facet(updateListener)) {
					try {
						listener(update);
					}
					catch (e) {
						logException(this.state, e, "update listener");
					}
				}
			if (dispatchFocus || domChange)
				Promise.resolve().then(() => {
					if (dispatchFocus && this.state == dispatchFocus.startState)
						this.dispatch(dispatchFocus);
					if (domChange) {
						if (!applyDOMChange(this, domChange) && pendingKey.force)
							dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
					}
				});
		}
		/**
		Reset the view to the given state. (This will cause the entire
		document to be redrawn and all view plugins to be reinitialized,
		so you should probably only use it when the new state isn't
		derived from the old state. Otherwise, use
		[`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
		*/
		setState(newState) {
			if (this.updateState != 0 /* UpdateState.Idle */)
				throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
			if (this.destroyed) {
				this.viewState.state = newState;
				return;
			}
			this.updateState = 2 /* UpdateState.Updating */;
			let hadFocus = this.hasFocus;
			try {
				for (let plugin of this.plugins)
					plugin.destroy(this);
				this.viewState = new ViewState(newState);
				this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
				this.pluginMap.clear();
				for (let plugin of this.plugins)
					plugin.update(this);
				this.docView.destroy();
				this.docView = new DocView(this);
				this.inputState.ensureHandlers(this.plugins);
				this.mountStyles();
				this.updateAttrs();
				this.bidiCache = [];
			}
			finally {
				this.updateState = 0 /* UpdateState.Idle */;
			}
			if (hadFocus)
				this.focus();
			this.requestMeasure();
		}
		updatePlugins(update) {
			let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
			if (prevSpecs != specs) {
				let newPlugins = [];
				for (let spec of specs) {
					let found = prevSpecs.indexOf(spec);
					if (found < 0) {
						newPlugins.push(new PluginInstance(spec));
					}
					else {
						let plugin = this.plugins[found];
						plugin.mustUpdate = update;
						newPlugins.push(plugin);
					}
				}
				for (let plugin of this.plugins)
					if (plugin.mustUpdate != update)
						plugin.destroy(this);
				this.plugins = newPlugins;
				this.pluginMap.clear();
			}
			else {
				for (let p of this.plugins)
					p.mustUpdate = update;
			}
			for (let i = 0; i < this.plugins.length; i++)
				this.plugins[i].update(this);
			if (prevSpecs != specs)
				this.inputState.ensureHandlers(this.plugins);
		}
		/**
		@internal
		*/
		measure(flush = true) {
			if (this.destroyed)
				return;
			if (this.measureScheduled > -1)
				this.win.cancelAnimationFrame(this.measureScheduled);
			if (this.observer.delayedAndroidKey) {
				this.measureScheduled = -1;
				this.requestMeasure();
				return;
			}
			this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
			if (flush)
				this.observer.forceFlush();
			let updated = null;
			let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
			let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
			if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
				scrollAnchorHeight = -1;
			this.viewState.scrollAnchorHeight = -1;
			try {
				for (let i = 0;; i++) {
					if (scrollAnchorHeight < 0) {
						if (isScrolledToBottom(sDOM)) {
							scrollAnchorPos = -1;
							scrollAnchorHeight = this.viewState.heightMap.height;
						}
						else {
							let block = this.viewState.scrollAnchorAt(scrollTop);
							scrollAnchorPos = block.from;
							scrollAnchorHeight = block.top;
						}
					}
					this.updateState = 1 /* UpdateState.Measuring */;
					let changed = this.viewState.measure(this);
					if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
						break;
					if (i > 5) {
						console.warn(this.measureRequests.length
							? "Measure loop restarted more than 5 times"
							: "Viewport failed to stabilize");
						break;
					}
					let measuring = [];
					// Only run measure requests in this cycle when the viewport didn't change
					if (!(changed & 4 /* UpdateFlag.Viewport */))
						[this.measureRequests, measuring] = [measuring, this.measureRequests];
					let measured = measuring.map(m => {
						try {
							return m.read(this);
						}
						catch (e) {
							logException(this.state, e);
							return BadMeasure;
						}
					});
					let update = ViewUpdate.create(this, this.state, []), redrawn = false;
					update.flags |= changed;
					if (!updated)
						updated = update;
					else
						updated.flags |= changed;
					this.updateState = 2 /* UpdateState.Updating */;
					if (!update.empty) {
						this.updatePlugins(update);
						this.inputState.update(update);
						this.updateAttrs();
						redrawn = this.docView.update(update);
					}
					for (let i = 0; i < measuring.length; i++)
						if (measured[i] != BadMeasure) {
							try {
								let m = measuring[i];
								if (m.write)
									m.write(measured[i], this);
							}
							catch (e) {
								logException(this.state, e);
							}
						}
					if (redrawn)
						this.docView.updateSelection(true);
					if (!update.viewportChanged && this.measureRequests.length == 0) {
						if (this.viewState.editorHeight) {
							if (this.viewState.scrollTarget) {
								this.docView.scrollIntoView(this.viewState.scrollTarget);
								this.viewState.scrollTarget = null;
								scrollAnchorHeight = -1;
								continue;
							}
							else {
								let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
									this.viewState.lineBlockAt(scrollAnchorPos).top;
								let diff = newAnchorHeight - scrollAnchorHeight;
								if (diff > 1 || diff < -1) {
									scrollTop = scrollTop + diff;
									sDOM.scrollTop = scrollTop / this.scaleY;
									scrollAnchorHeight = -1;
									continue;
								}
							}
						}
						break;
					}
				}
			}
			finally {
				this.updateState = 0 /* UpdateState.Idle */;
				this.measureScheduled = -1;
			}
			if (updated && !updated.empty)
				for (let listener of this.state.facet(updateListener))
					listener(updated);
		}
		/**
		Get the CSS classes for the currently active editor themes.
		*/
		get themeClasses() {
			return baseThemeID + " " +
				(this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
				this.state.facet(theme);
		}
		updateAttrs() {
			let editorAttrs = attrsFromFacet(this, editorAttributes, {
				class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
			});
			let contentAttrs = {
				spellcheck: "false",
				autocorrect: "off",
				autocapitalize: "off",
				translate: "no",
				contenteditable: !this.state.facet(editable) ? "false" : "true",
				class: "cm-content",
				style: `${browser.tabSize}: ${this.state.tabSize}`,
				role: "textbox",
				"aria-multiline": "true"
			};
			if (this.state.readOnly)
				contentAttrs["aria-readonly"] = "true";
			attrsFromFacet(this, contentAttributes, contentAttrs);
			let changed = this.observer.ignore(() => {
				let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
				let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
				return changedContent || changedEditor;
			});
			this.editorAttrs = editorAttrs;
			this.contentAttrs = contentAttrs;
			return changed;
		}
		showAnnouncements(trs) {
			let first = true;
			for (let tr of trs)
				for (let effect of tr.effects)
					if (effect.is(EditorView.announce)) {
						if (first)
							this.announceDOM.textContent = "";
						first = false;
						let div = this.announceDOM.appendChild(document.createElement("div"));
						div.textContent = effect.value;
					}
		}
		mountStyles() {
			this.styleModules = this.state.facet(styleModule);
			let nonce = this.state.facet(EditorView.cspNonce);
			styleMod.StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : undefined);
		}
		readMeasured() {
			if (this.updateState == 2 /* UpdateState.Updating */)
				throw new Error("Reading the editor layout isn't allowed during an update");
			if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
				this.measure(false);
		}
		/**
		Schedule a layout measurement, optionally providing callbacks to
		do custom DOM measuring followed by a DOM write phase. Using
		this is preferable reading DOM layout directly from, for
		example, an event handler, because it'll make sure measuring and
		drawing done by other components is synchronized, avoiding
		unnecessary DOM layout computations.
		*/
		requestMeasure(request) {
			if (this.measureScheduled < 0)
				this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
			if (request) {
				if (this.measureRequests.indexOf(request) > -1)
					return;
				if (request.key != null)
					for (let i = 0; i < this.measureRequests.length; i++) {
						if (this.measureRequests[i].key === request.key) {
							this.measureRequests[i] = request;
							return;
						}
					}
				this.measureRequests.push(request);
			}
		}
		/**
		Get the value of a specific plugin, if present. Note that
		plugins that crash can be dropped from a view, so even when you
		know you registered a given plugin, it is recommended to check
		the return value of this method.
		*/
		plugin(plugin) {
			let known = this.pluginMap.get(plugin);
			if (known === undefined || known && known.spec != plugin)
				this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
			return known && known.update(this).value;
		}
		/**
		The top position of the document, in screen coordinates. This
		may be negative when the editor is scrolled down. Points
		directly to the top of the first line, not above the padding.
		*/
		get documentTop() {
			return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
		}
		/**
		Reports the padding above and below the document.
		*/
		get documentPadding() {
			return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
		}
		/**
		If the editor is transformed with CSS, this provides the scale
		along the X axis. Otherwise, it will just be 1. Note that
		transforms other than translation and scaling are not supported.
		*/
		get scaleX() { return this.viewState.scaleX; }
		/**
		Provide the CSS transformed scale along the Y axis.
		*/
		get scaleY() { return this.viewState.scaleY; }
		/**
		Find the text line or block widget at the given vertical
		position (which is interpreted as relative to the [top of the
		document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
		*/
		elementAtHeight(height) {
			this.readMeasured();
			return this.viewState.elementAtHeight(height);
		}
		/**
		Find the line block (see
		[`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
		height, again interpreted relative to the [top of the
		document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
		*/
		lineBlockAtHeight(height) {
			this.readMeasured();
			return this.viewState.lineBlockAtHeight(height);
		}
		/**
		Get the extent and vertical position of all [line
		blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
		are relative to the [top of the
		document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
		*/
		get viewportLineBlocks() {
			return this.viewState.viewportLines;
		}
		/**
		Find the line block around the given document position. A line
		block is a range delimited on both sides by either a
		non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
		start/end of the document. It will usually just hold a line of
		text, but may be broken into multiple textblocks by block
		widgets.
		*/
		lineBlockAt(pos) {
			return this.viewState.lineBlockAt(pos);
		}
		/**
		The editor's total content height.
		*/
		get contentHeight() {
			return this.viewState.contentHeight;
		}
		/**
		Move a cursor position by [grapheme
		cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
		the motion is away from the line start, or towards it. In
		bidirectional text, the line is traversed in visual order, using
		the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
		When the start position was the last one on the line, the
		returned position will be across the line break. If there is no
		further line, the original position is returned.
		
		By default, this method moves over a single cluster. The
		optional `by` argument can be used to move across more. It will
		be called with the first cluster as argument, and should return
		a predicate that determines, for each subsequent cluster,
		whether it should also be moved over.
		*/
		moveByChar(start, forward, by) {
			return skipAtoms(this, start, moveByChar(this, start, forward, by));
		}
		/**
		Move a cursor position across the next group of either
		[letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
		non-whitespace characters.
		*/
		moveByGroup(start, forward) {
			return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
		}
		/**
		Move to the next line boundary in the given direction. If
		`includeWrap` is true, line wrapping is on, and there is a
		further wrap point on the current line, the wrap point will be
		returned. Otherwise this function will return the start or end
		of the line.
		*/
		moveToLineBoundary(start, forward, includeWrap = true) {
			return moveToLineBoundary(this, start, forward, includeWrap);
		}
		/**
		Move a cursor position vertically. When `distance` isn't given,
		it defaults to moving to the next line (including wrapped
		lines). Otherwise, `distance` should provide a positive distance
		in pixels.
		
		When `start` has a
		[`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
		motion will use that as a target horizontal position. Otherwise,
		the cursor's own horizontal position is used. The returned
		cursor will have its goal column set to whichever column was
		used.
		*/
		moveVertically(start, forward, distance) {
			return skipAtoms(this, start, moveVertically(this, start, forward, distance));
		}
		/**
		Find the DOM parent node and offset (child offset if `node` is
		an element, character offset when it is a text node) at the
		given document position.
		
		Note that for positions that aren't currently in
		`visibleRanges`, the resulting DOM position isn't necessarily
		meaningful (it may just point before or after a placeholder
		element).
		*/
		domAtPos(pos) {
			return this.docView.domAtPos(pos);
		}
		/**
		Find the document position at the given DOM node. Can be useful
		for associating positions with DOM events. Will raise an error
		when `node` isn't part of the editor content.
		*/
		posAtDOM(node, offset = 0) {
			return this.docView.posFromDOM(node, offset);
		}
		posAtCoords(coords, precise = true) {
			this.readMeasured();
			return posAtCoords(this, coords, precise);
		}
		/**
		Get the screen coordinates at the given document position.
		`side` determines whether the coordinates are based on the
		element before (-1) or after (1) the position (if no element is
		available on the given side, the method will transparently use
		another strategy to get reasonable coordinates).
		*/
		coordsAtPos(pos, side = 1) {
			this.readMeasured();
			let rect = this.docView.coordsAt(pos, side);
			if (!rect || rect.left == rect.right)
				return rect;
			let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
			let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
			return flattenRect(rect, (span.dir == exports.Direction.LTR) == (side > 0));
		}
		/**
		Return the rectangle around a given character. If `pos` does not
		point in front of a character that is in the viewport and
		rendered (i.e. not replaced, not a line break), this will return
		null. For space characters that are a line wrap point, this will
		return the position before the line break.
		*/
		coordsForChar(pos) {
			this.readMeasured();
			return this.docView.coordsForChar(pos);
		}
		/**
		The default width of a character in the editor. May not
		accurately reflect the width of all characters (given variable
		width fonts or styling of invididual ranges).
		*/
		get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
		/**
		The default height of a line in the editor. May not be accurate
		for all lines.
		*/
		get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
		/**
		The text direction
		([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
		CSS property) of the editor's content element.
		*/
		get textDirection() { return this.viewState.defaultTextDirection; }
		/**
		Find the text direction of the block at the given position, as
		assigned by CSS. If
		[`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
		isn't enabled, or the given position is outside of the viewport,
		this will always return the same as
		[`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
		this may trigger a DOM layout.
		*/
		textDirectionAt(pos) {
			let perLine = this.state.facet(perLineTextDirection);
			if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
				return this.textDirection;
			this.readMeasured();
			return this.docView.textDirectionAt(pos);
		}
		/**
		Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
		(as determined by the
		[`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
		CSS property of its content element).
		*/
		get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
		/**
		Returns the bidirectional text structure of the given line
		(which should be in the current document) as an array of span
		objects. The order of these spans matches the [text
		direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
		left-to-right, the leftmost spans come first, otherwise the
		rightmost spans come first.
		*/
		bidiSpans(line) {
			if (line.length > MaxBidiLine)
				return trivialOrder(line.length);
			let dir = this.textDirectionAt(line.from), isolates;
			for (let entry of this.bidiCache) {
				if (entry.from == line.from && entry.dir == dir &&
					(entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line.from, line.to))))
					return entry.order;
			}
			if (!isolates)
				isolates = getIsolatedRanges(this, line.from, line.to);
			let order = computeOrder(line.text, dir, isolates);
			this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
			return order;
		}
		/**
		Check whether the editor has focus.
		*/
		get hasFocus() {
			var _a;
			// Safari return false for hasFocus when the context menu is open
			// or closing, which leads us to ignore selection changes from the
			// context menu because it looks like the editor isn't focused.
			// This kludges around that.
			return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
				this.root.activeElement == this.contentDOM;
		}
		/**
		Put focus on the editor.
		*/
		focus() {
			this.observer.ignore(() => {
				focusPreventScroll(this.contentDOM);
				this.docView.updateSelection();
			});
		}
		/**
		Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
		necessary when moving the editor's existing DOM to a new window or shadow root.
		*/
		setRoot(root) {
			if (this._root != root) {
				this._root = root;
				this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
				this.mountStyles();
			}
		}
		/**
		Clean up this editor view, removing its element from the
		document, unregistering event handlers, and notifying
		plugins. The view instance can no longer be used after
		calling this.
		*/
		destroy() {
			for (let plugin of this.plugins)
				plugin.destroy(this);
			this.plugins = [];
			this.inputState.destroy();
			this.docView.destroy();
			this.dom.remove();
			this.observer.destroy();
			if (this.measureScheduled > -1)
				this.win.cancelAnimationFrame(this.measureScheduled);
			this.destroyed = true;
		}
		/**
		Returns an effect that can be
		[added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
		cause it to scroll the given position or range into view.
		*/
		static scrollIntoView(pos, options = {}) {
			return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? state.EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
		}
		/**
		Return an effect that resets the editor to its current (at the
		time this method was called) scroll position. Note that this
		only affects the editor's own scrollable element, not parents.
		See also
		[`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
		
		The effect should be used with a document identical to the one
		it was created for. Failing to do so is not an error, but may
		not scroll to the expected position. You can
		[map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
		*/
		scrollSnapshot() {
			let { scrollTop, scrollLeft } = this.scrollDOM;
			let ref = this.viewState.scrollAnchorAt(scrollTop);
			return scrollIntoView.of(new ScrollTarget(state.EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
		}
		/**
		Returns an extension that can be used to add DOM event handlers.
		The value should be an object mapping event names to handler
		functions. For any given event, such functions are ordered by
		extension precedence, and the first handler to return true will
		be assumed to have handled that event, and no other handlers or
		built-in behavior will be activated for it. These are registered
		on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
		for `scroll` handlers, which will be called any time the
		editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
		its parent nodes is scrolled.
		*/
		static domEventHandlers(handlers) {
			return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
		}
		/**
		Create an extension that registers DOM event observers. Contrary
		to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
		observers can't be prevented from running by a higher-precedence
		handler returning true. They also don't prevent other handlers
		and observers from running when they return true, and should not
		call `preventDefault`.
		*/
		static domEventObservers(observers) {
			return ViewPlugin.define(() => ({}), { eventObservers: observers });
		}
		/**
		Create a theme extension. The first argument can be a
		[`style-mod`](https://github.com/marijnh/style-mod#documentation)
		style spec providing the styles for the theme. These will be
		prefixed with a generated class for the style.
		
		Because the selectors will be prefixed with a scope class, rule
		that directly match the editor's [wrapper
		element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
		added—need to be explicitly differentiated by adding an `&` to
		the selector for that element—for example
		`&.cm-focused`.
		
		When `dark` is set to true, the theme will be marked as dark,
		which will cause the `&dark` rules from [base
		themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
		`&light` when a light theme is active).
		*/
		static theme(spec, options) {
			let prefix = styleMod.StyleModule.newName();
			let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
			if (options && options.dark)
				result.push(darkTheme.of(true));
			return result;
		}
		/**
		Create an extension that adds styles to the base theme. Like
		with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
		place of the editor wrapper element when directly targeting
		that. You can also use `&dark` or `&light` instead to only
		target editors with a dark or light theme.
		*/
		static baseTheme(spec) {
			return state.Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
		}
		/**
		Retrieve an editor view instance from the view's DOM
		representation.
		*/
		static findFromDOM(dom) {
			var _a;
			let content = dom.querySelector(".cm-content");
			let cView = content && ContentView.get(content) || ContentView.get(dom);
			return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
		}
	}
	/**
	Facet to add a [style
	module](https://github.com/marijnh/style-mod#documentation) to
	an editor view. The view will ensure that the module is
	mounted in its [document
	root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
	*/
	EditorView.styleModule = styleModule;
	/**
	An input handler can override the way changes to the editable
	DOM content are handled. Handlers are passed the document
	positions between which the change was found, and the new
	content. When one returns true, no further input handlers are
	called and the default behavior is prevented.
	
	The `insert` argument can be used to get the default transaction
	that would be applied for this input. This can be useful when
	dispatching the custom behavior as a separate transaction.
	*/
	EditorView.inputHandler = inputHandler;
	/**
	This facet can be used to provide functions that create effects
	to be dispatched when the editor's focus state changes.
	*/
	EditorView.focusChangeEffect = focusChangeEffect;
	/**
	By default, the editor assumes all its content has the same
	[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
	value to make it read the text direction of every (rendered)
	line separately.
	*/
	EditorView.perLineTextDirection = perLineTextDirection;
	/**
	Allows you to provide a function that should be called when the
	library catches an exception from an extension (mostly from view
	plugins, but may be used by other extensions to route exceptions
	from user-code-provided callbacks). This is mostly useful for
	debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
	*/
	EditorView.exceptionSink = exceptionSink;
	/**
	A facet that can be used to register a function to be called
	every time the view updates.
	*/
	EditorView.updateListener = updateListener;
	/**
	Facet that controls whether the editor content DOM is editable.
	When its highest-precedence value is `false`, the element will
	not have its `contenteditable` attribute set. (Note that this
	doesn't affect API calls that change the editor content, even
	when those are bound to keys or buttons. See the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
	*/
	EditorView.editable = editable;
	/**
	Allows you to influence the way mouse selection happens. The
	functions in this facet will be called for a `mousedown` event
	on the editor, and can return an object that overrides the way a
	selection is computed from that mouse click or drag.
	*/
	EditorView.mouseSelectionStyle = mouseSelectionStyle;
	/**
	Facet used to configure whether a given selection drag event
	should move or copy the selection. The given predicate will be
	called with the `mousedown` event, and can return `true` when
	the drag should move the content.
	*/
	EditorView.dragMovesSelection = dragMovesSelection$1;
	/**
	Facet used to configure whether a given selecting click adds a
	new range to the existing selection or replaces it entirely. The
	default behavior is to check `event.metaKey` on macOS, and
	`event.ctrlKey` elsewhere.
	*/
	EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
	/**
	A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
	are shown in the view. Decorations can be provided in two
	ways—directly, or via a function that takes an editor view.
	
	Only decoration sets provided directly are allowed to influence
	the editor's vertical layout structure. The ones provided as
	functions are called _after_ the new viewport has been computed,
	and thus **must not** introduce block widgets or replacing
	decorations that cover line breaks.
	
	If you want decorated ranges to behave like atomic units for
	cursor motion and deletion purposes, also provide the range set
	containing the decorations to
	[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
	*/
	EditorView.decorations = decorations;
	/**
	Used to provide ranges that should be treated as atoms as far as
	cursor motion is concerned. This causes methods like
	[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
	[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
	commands built on top of them) to skip across such regions when
	a selection endpoint would enter them. This does _not_ prevent
	direct programmatic [selection
	updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
	regions.
	*/
	EditorView.atomicRanges = atomicRanges;
	/**
	When range decorations add a `unicode-bidi: isolate` style, they
	should also include a
	[`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
	in their decoration spec, and be exposed through this facet, so
	that the editor can compute the proper text order. (Other values
	for `unicode-bidi`, except of course `normal`, are not
	supported.)
	*/
	EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
	/**
	Facet that allows extensions to provide additional scroll
	margins (space around the sides of the scrolling element that
	should be considered invisible). This can be useful when the
	plugin introduces elements that cover part of that element (for
	example a horizontally fixed gutter).
	*/
	EditorView.scrollMargins = scrollMargins;
	/**
	This facet records whether a dark theme is active. The extension
	returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
	includes an instance of this when the `dark` option is set to
	true.
	*/
	EditorView.darkTheme = darkTheme;
	/**
	Provides a Content Security Policy nonce to use when creating
	the style sheets for the editor. Holds the empty string when no
	nonce has been provided.
	*/
	EditorView.cspNonce = state.Facet.define({ combine: values => values.length ? values[0] : "" });
	/**
	Facet that provides additional DOM attributes for the editor's
	editable DOM element.
	*/
	EditorView.contentAttributes = contentAttributes;
	/**
	Facet that provides DOM attributes for the editor's outer
	element.
	*/
	EditorView.editorAttributes = editorAttributes;
	/**
	An extension that enables line wrapping in the editor (by
	setting CSS `white-space` to `pre-wrap` in the content).
	*/
	EditorView.lineWrapping = EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
	/**
	State effect used to include screen reader announcements in a
	transaction. These will be added to the DOM in a visually hidden
	element with `aria-live="polite"` set, and should be used to
	describe effects that are visually obvious but may not be
	noticed by screen reader users (such as moving to the next
	search match).
	*/
	EditorView.announce = state.StateEffect.define();
	// Maximum line length for which we compute accurate bidi info
	const MaxBidiLine = 4096;
	const BadMeasure = {};
	class CachedOrder {
		constructor(from, to, dir, isolates, fresh, order) {
			this.from = from;
			this.to = to;
			this.dir = dir;
			this.isolates = isolates;
			this.fresh = fresh;
			this.order = order;
		}
		static update(cache, changes) {
			if (changes.empty && !cache.some(c => c.fresh))
				return cache;
			let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : exports.Direction.LTR;
			for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
				let entry = cache[i];
				if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
					result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
			}
			return result;
		}
	}
	function attrsFromFacet(view, facet, base) {
		for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
			let source = sources[i], value = typeof source == "function" ? source(view) : source;
			if (value)
				combineAttrs(value, base);
		}
		return base;
	}
	
	const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
	function normalizeKeyName(name, platform) {
		const parts = name.split(/-(?!$)/);
		let result = parts[parts.length - 1];
		if (result == "Space")
			result = " ";
		let alt, ctrl, shift, meta;
		for (let i = 0; i < parts.length - 1; ++i) {
			const mod = parts[i];
			if (/^(cmd|meta|m)$/i.test(mod))
				meta = true;
			else if (/^a(lt)?$/i.test(mod))
				alt = true;
			else if (/^(c|ctrl|control)$/i.test(mod))
				ctrl = true;
			else if (/^s(hift)?$/i.test(mod))
				shift = true;
			else if (/^mod$/i.test(mod)) {
				if (platform == "mac")
					meta = true;
				else
					ctrl = true;
			}
			else
				throw new Error("Unrecognized modifier name: " + mod);
		}
		if (alt)
			result = "Alt-" + result;
		if (ctrl)
			result = "Ctrl-" + result;
		if (meta)
			result = "Meta-" + result;
		if (shift)
			result = "Shift-" + result;
		return result;
	}
	function modifiers(name, event, shift) {
		if (event.altKey)
			name = "Alt-" + name;
		if (event.ctrlKey)
			name = "Ctrl-" + name;
		if (event.metaKey)
			name = "Meta-" + name;
		if (shift !== false && event.shiftKey)
			name = "Shift-" + name;
		return name;
	}
	const handleKeyEvents = state.Prec.default(EditorView.domEventHandlers({
		keydown(event, view) {
			return runHandlers(getKeymap(view.state), event, view, "editor");
		}
	}));
	/**
	Facet used for registering keymaps.
	
	You can add multiple keymaps to an editor. Their priorities
	determine their precedence (the ones specified early or with high
	priority get checked first). When a handler has returned `true`
	for a given key, no further handlers are called.
	*/
	const keymap = state.Facet.define({ enables: handleKeyEvents });
	const Keymaps = new WeakMap();
	// This is hidden behind an indirection, rather than directly computed
	// by the facet, to keep internal types out of the facet's type.
	function getKeymap(state) {
		let bindings = state.facet(keymap);
		let map = Keymaps.get(bindings);
		if (!map)
			Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
		return map;
	}
	/**
	Run the key handlers registered for a given scope. The event
	object should be a `"keydown"` event. Returns true if any of the
	handlers handled it.
	*/
	function runScopeHandlers(view, event, scope) {
		return runHandlers(getKeymap(view.state), event, view, scope);
	}
	let storedPrefix = null;
	const PrefixTimeout = 4000;
	function buildKeymap(bindings, platform = currentPlatform) {
		let bound = Object.create(null);
		let isPrefix = Object.create(null);
		let checkPrefix = (name, is) => {
			let current = isPrefix[name];
			if (current == null)
				isPrefix[name] = is;
			else if (current != is)
				throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
		};
		let add = (scope, key, command, preventDefault, stopPropagation) => {
			var _a, _b;
			let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
			let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
			for (let i = 1; i < parts.length; i++) {
				let prefix = parts.slice(0, i).join(" ");
				checkPrefix(prefix, true);
				if (!scopeObj[prefix])
					scopeObj[prefix] = {
						preventDefault: true,
						stopPropagation: false,
						run: [(view) => {
								let ourObj = storedPrefix = { view, prefix, scope };
								setTimeout(() => { if (storedPrefix == ourObj)
									storedPrefix = null; }, PrefixTimeout);
								return true;
							}]
					};
			}
			let full = parts.join(" ");
			checkPrefix(full, false);
			let binding = scopeObj[full] || (scopeObj[full] = {
				preventDefault: false,
				stopPropagation: false,
				run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
			});
			if (command)
				binding.run.push(command);
			if (preventDefault)
				binding.preventDefault = true;
			if (stopPropagation)
				binding.stopPropagation = true;
		};
		for (let b of bindings) {
			let scopes = b.scope ? b.scope.split(" ") : ["editor"];
			if (b.any)
				for (let scope of scopes) {
					let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
					if (!scopeObj._any)
						scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
					for (let key in scopeObj)
						scopeObj[key].run.push(b.any);
				}
			let name = b[platform] || b.key;
			if (!name)
				continue;
			for (let scope of scopes) {
				add(scope, name, b.run, b.preventDefault, b.stopPropagation);
				if (b.shift)
					add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
			}
		}
		return bound;
	}
	function runHandlers(map, event, view, scope) {
		let name = w3cKeyname.keyName(event);
		let charCode = state.codePointAt(name, 0), isChar = state.codePointSize(charCode) == name.length && name != " ";
		let prefix = "", handled = false, prevented = false, stopPropagation = false;
		if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
			prefix = storedPrefix.prefix + " ";
			if (modifierCodes.indexOf(event.keyCode) < 0) {
				prevented = true;
				storedPrefix = null;
			}
		}
		let ran = new Set;
		let runFor = (binding) => {
			if (binding) {
				for (let cmd of binding.run)
					if (!ran.has(cmd)) {
						ran.add(cmd);
						if (cmd(view, event)) {
							if (binding.stopPropagation)
								stopPropagation = true;
							return true;
						}
					}
				if (binding.preventDefault) {
					if (binding.stopPropagation)
						stopPropagation = true;
					prevented = true;
				}
			}
			return false;
		};
		let scopeObj = map[scope], baseName, shiftName;
		if (scopeObj) {
			if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
				handled = true;
			}
			else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
				// Ctrl-Alt may be used for AltGr on Windows
				!(browser.windows && event.ctrlKey && event.altKey) &&
				(baseName = w3cKeyname.base[event.keyCode]) && baseName != name) {
				if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
					handled = true;
				}
				else if (event.shiftKey && (shiftName = w3cKeyname.shift[event.keyCode]) != name && shiftName != baseName &&
					runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
					handled = true;
				}
			}
			else if (isChar && event.shiftKey &&
				runFor(scopeObj[prefix + modifiers(name, event, true)])) {
				handled = true;
			}
			if (!handled && runFor(scopeObj._any))
				handled = true;
		}
		if (prevented)
			handled = true;
		if (handled && stopPropagation)
			event.stopPropagation();
		return handled;
	}
	
	/**
	Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
	a rectangle at a given set of coordinates.
	*/
	class RectangleMarker {
		/**
		Create a marker with the given class and dimensions. If `width`
		is null, the DOM element will get no width style.
		*/
		constructor(className, 
		/**
		The left position of the marker (in pixels, document-relative).
		*/
		left, 
		/**
		The top position of the marker.
		*/
		top, 
		/**
		The width of the marker, or null if it shouldn't get a width assigned.
		*/
		width, 
		/**
		The height of the marker.
		*/
		height) {
			this.className = className;
			this.left = left;
			this.top = top;
			this.width = width;
			this.height = height;
		}
		draw() {
			let elt = document.createElement("div");
			elt.className = this.className;
			this.adjust(elt);
			return elt;
		}
		update(elt, prev) {
			if (prev.className != this.className)
				return false;
			this.adjust(elt);
			return true;
		}
		adjust(elt) {
			elt.style.left = this.left + "px";
			elt.style.top = this.top + "px";
			if (this.width != null)
				elt.style.width = this.width + "px";
			elt.style.height = this.height + "px";
		}
		eq(p) {
			return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
				this.className == p.className;
		}
		/**
		Create a set of rectangles for the given selection range,
		assigning them theclass`className`. Will create a single
		rectangle for empty ranges, and a set of selection-style
		rectangles covering the range's content (in a bidi-aware
		way) for non-empty ones.
		*/
		static forRange(view, className, range) {
			if (range.empty) {
				let pos = view.coordsAtPos(range.head, range.assoc || 1);
				if (!pos)
					return [];
				let base = getBase(view);
				return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
			}
			else {
				return rectanglesForRange(view, className, range);
			}
		}
	}
	function getBase(view) {
		let rect = view.scrollDOM.getBoundingClientRect();
		let left = view.textDirection == exports.Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
		return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
	}
	function wrappedLine(view, pos, inside) {
		let range = state.EditorSelection.cursor(pos);
		return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
			to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
			type: exports.BlockType.Text };
	}
	function rectanglesForRange(view, className, range) {
		if (range.to <= view.viewport.from || range.from >= view.viewport.to)
			return [];
		let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
		let ltr = view.textDirection == exports.Direction.LTR;
		let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
		let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
		let leftSide = contentRect.left +
			(lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
		let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
		let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
		let visualStart = startBlock.type == exports.BlockType.Text ? startBlock : null;
		let visualEnd = endBlock.type == exports.BlockType.Text ? endBlock : null;
		if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
			visualStart = wrappedLine(view, from, visualStart);
		if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
			visualEnd = wrappedLine(view, to, visualEnd);
		if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
			return pieces(drawForLine(range.from, range.to, visualStart));
		}
		else {
			let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
			let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
			let between = [];
			if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
				startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
				between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
			else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == exports.BlockType.Text)
				top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
			return pieces(top).concat(between).concat(pieces(bottom));
		}
		function piece(left, top, right, bottom) {
			return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);
		}
		function pieces({ top, bottom, horizontal }) {
			let pieces = [];
			for (let i = 0; i < horizontal.length; i += 2)
				pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
			return pieces;
		}
		// Gets passed from/to in line-local positions
		function drawForLine(from, to, line) {
			let top = 1e9, bottom = -1e9, horizontal = [];
			function addSpan(from, fromOpen, to, toOpen, dir) {
				// Passing 2/-2 is a kludge to force the view to return
				// coordinates on the proper side of block widgets, since
				// normalizing the side there, though appropriate for most
				// coordsAtPos queries, would break selection drawing.
				let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
				let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
				if (!fromCoords || !toCoords)
					return;
				top = Math.min(fromCoords.top, toCoords.top, top);
				bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
				if (dir == exports.Direction.LTR)
					horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
				else
					horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
			}
			let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
			// Split the range by visible range and document line
			for (let r of view.visibleRanges)
				if (r.to > start && r.from < end) {
					for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
						let docLine = view.state.doc.lineAt(pos);
						for (let span of view.bidiSpans(docLine)) {
							let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
							if (spanFrom >= endPos)
								break;
							if (spanTo > pos)
								addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
						}
						pos = docLine.to + 1;
						if (pos >= endPos)
							break;
					}
				}
			if (horizontal.length == 0)
				addSpan(start, from == null, end, to == null, view.textDirection);
			return { top, bottom, horizontal };
		}
		function drawForWidget(block, top) {
			let y = contentRect.top + (top ? block.top : block.bottom);
			return { top: y, bottom: y, horizontal: [] };
		}
	}
	function sameMarker(a, b) {
		return a.constructor == b.constructor && a.eq(b);
	}
	class LayerView {
		constructor(view, layer) {
			this.view = view;
			this.layer = layer;
			this.drawn = [];
			this.scaleX = 1;
			this.scaleY = 1;
			this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
			this.dom = view.scrollDOM.appendChild(document.createElement("div"));
			this.dom.classList.add("cm-layer");
			if (layer.above)
				this.dom.classList.add("cm-layer-above");
			if (layer.class)
				this.dom.classList.add(layer.class);
			this.scale();
			this.dom.setAttribute("aria-hidden", "true");
			this.setOrder(view.state);
			view.requestMeasure(this.measureReq);
			if (layer.mount)
				layer.mount(this.dom, view);
		}
		update(update) {
			if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
				this.setOrder(update.state);
			if (this.layer.update(update, this.dom) || update.geometryChanged) {
				this.scale();
				update.view.requestMeasure(this.measureReq);
			}
		}
		setOrder(state) {
			let pos = 0, order = state.facet(layerOrder);
			while (pos < order.length && order[pos] != this.layer)
				pos++;
			this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
		}
		measure() {
			return this.layer.markers(this.view);
		}
		scale() {
			let { scaleX, scaleY } = this.view;
			if (scaleX != this.scaleX || scaleY != this.scaleY) {
				this.scaleX = scaleX;
				this.scaleY = scaleY;
				this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
			}
		}
		draw(markers) {
			if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
				let old = this.dom.firstChild, oldI = 0;
				for (let marker of markers) {
					if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
						marker.update(old, this.drawn[oldI])) {
						old = old.nextSibling;
						oldI++;
					}
					else {
						this.dom.insertBefore(marker.draw(), old);
					}
				}
				while (old) {
					let next = old.nextSibling;
					old.remove();
					old = next;
				}
				this.drawn = markers;
			}
		}
		destroy() {
			if (this.layer.destroy)
				this.layer.destroy(this.dom, this.view);
			this.dom.remove();
		}
	}
	const layerOrder = state.Facet.define();
	/**
	Define a layer.
	*/
	function layer(config) {
		return [
			ViewPlugin.define(v => new LayerView(v, config)),
			layerOrder.of(config)
		];
	}
	
	const CanHidePrimary = !browser.ios; // FIXME test IE
	const selectionConfig = state.Facet.define({
		combine(configs) {
			return state.combineConfig(configs, {
				cursorBlinkRate: 1200,
				drawRangeCursor: true
			}, {
				cursorBlinkRate: (a, b) => Math.min(a, b),
				drawRangeCursor: (a, b) => a || b
			});
		}
	});
	/**
	Returns an extension that hides the browser's native selection and
	cursor, replacing the selection with a background behind the text
	(with the `cm-selectionBackground` class), and the
	cursors with elements overlaid over the code (using
	`cm-cursor-primary` and `cm-cursor-secondary`).
	
	This allows the editor to display secondary selection ranges, and
	tends to produce a type of selection more in line with that users
	expect in a text editor (the native selection styling will often
	leave gaps between lines and won't fill the horizontal space after
	a line when the selection continues past it).
	
	It does have a performance cost, in that it requires an extra DOM
	layout cycle for many updates (the selection is drawn based on DOM
	layout information that's only available after laying out the
	content).
	*/
	function drawSelection(config = {}) {
		return [
			selectionConfig.of(config),
			cursorLayer,
			selectionLayer,
			hideNativeSelection,
			nativeSelectionHidden.of(true)
		];
	}
	/**
	Retrieve the [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) configuration
	for this state. (Note that this will return a set of defaults even
	if `drawSelection` isn't enabled.)
	*/
	function getDrawSelectionConfig(state) {
		return state.facet(selectionConfig);
	}
	function configChanged(update) {
		return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
	}
	const cursorLayer = layer({
		above: true,
		markers(view) {
			let { state: state$1 } = view, conf = state$1.facet(selectionConfig);
			let cursors = [];
			for (let r of state$1.selection.ranges) {
				let prim = r == state$1.selection.main;
				if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
					let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
					let cursor = r.empty ? r : state.EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
					for (let piece of RectangleMarker.forRange(view, className, cursor))
						cursors.push(piece);
				}
			}
			return cursors;
		},
		update(update, dom) {
			if (update.transactions.some(tr => tr.selection))
				dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
			let confChange = configChanged(update);
			if (confChange)
				setBlinkRate(update.state, dom);
			return update.docChanged || update.selectionSet || confChange;
		},
		mount(dom, view) {
			setBlinkRate(view.state, dom);
		},
		class: "cm-cursorLayer"
	});
	function setBlinkRate(state, dom) {
		dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
	}
	const selectionLayer = layer({
		above: false,
		markers(view) {
			return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
				.reduce((a, b) => a.concat(b));
		},
		update(update, dom) {
			return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
		},
		class: "cm-selectionLayer"
	});
	const themeSpec = {
		".cm-line": {
			"& ::selection": { backgroundColor: "transparent !important" },
			"&::selection": { backgroundColor: "transparent !important" }
		}
	};
	if (CanHidePrimary) {
		themeSpec[".cm-line"].caretColor = "transparent !important";
		themeSpec[".cm-content"] = { caretColor: "transparent !important" };
	}
	const hideNativeSelection = state.Prec.highest(EditorView.theme(themeSpec));
	
	const setDropCursorPos = state.StateEffect.define({
		map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
	});
	const dropCursorPos = state.StateField.define({
		create() { return null; },
		update(pos, tr) {
			if (pos != null)
				pos = tr.changes.mapPos(pos);
			return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
		}
	});
	const drawDropCursor = ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.cursor = null;
			this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
		}
		update(update) {
			var _a;
			let cursorPos = update.state.field(dropCursorPos);
			if (cursorPos == null) {
				if (this.cursor != null) {
					(_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
					this.cursor = null;
				}
			}
			else {
				if (!this.cursor) {
					this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
					this.cursor.className = "cm-dropCursor";
				}
				if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
					this.view.requestMeasure(this.measureReq);
			}
		}
		readPos() {
			let { view } = this;
			let pos = view.state.field(dropCursorPos);
			let rect = pos != null && view.coordsAtPos(pos);
			if (!rect)
				return null;
			let outer = view.scrollDOM.getBoundingClientRect();
			return {
				left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
				top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
				height: rect.bottom - rect.top
			};
		}
		drawCursor(pos) {
			if (this.cursor) {
				let { scaleX, scaleY } = this.view;
				if (pos) {
					this.cursor.style.left = pos.left / scaleX + "px";
					this.cursor.style.top = pos.top / scaleY + "px";
					this.cursor.style.height = pos.height / scaleY + "px";
				}
				else {
					this.cursor.style.left = "-100000px";
				}
			}
		}
		destroy() {
			if (this.cursor)
				this.cursor.remove();
		}
		setDropPos(pos) {
			if (this.view.state.field(dropCursorPos) != pos)
				this.view.dispatch({ effects: setDropCursorPos.of(pos) });
		}
	}, {
		eventObservers: {
			dragover(event) {
				this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
			},
			dragleave(event) {
				if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
					this.setDropPos(null);
			},
			dragend() {
				this.setDropPos(null);
			},
			drop() {
				this.setDropPos(null);
			}
		}
	});
	/**
	Draws a cursor at the current drop position when something is
	dragged over the editor.
	*/
	function dropCursor() {
		return [dropCursorPos, drawDropCursor];
	}
	
	function iterMatches(doc, re, from, to, f) {
		re.lastIndex = 0;
		for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
			if (!cursor.lineBreak)
				while (m = re.exec(cursor.value))
					f(pos + m.index, m);
		}
	}
	function matchRanges(view, maxLength) {
		let visible = view.visibleRanges;
		if (visible.length == 1 && visible[0].from == view.viewport.from &&
			visible[0].to == view.viewport.to)
			return visible;
		let result = [];
		for (let { from, to } of visible) {
			from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
			to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
			if (result.length && result[result.length - 1].to >= from)
				result[result.length - 1].to = to;
			else
				result.push({ from, to });
		}
		return result;
	}
	/**
	Helper class used to make it easier to maintain decorations on
	visible code that matches a given regular expression. To be used
	in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
	represent a matching configuration.
	*/
	class MatchDecorator {
		/**
		Create a decorator.
		*/
		constructor(config) {
			const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
			if (!regexp.global)
				throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
			this.regexp = regexp;
			if (decorate) {
				this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
			}
			else if (typeof decoration == "function") {
				this.addMatch = (match, view, from, add) => {
					let deco = decoration(match, view, from);
					if (deco)
						add(from, from + match[0].length, deco);
				};
			}
			else if (decoration) {
				this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
			}
			else {
				throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
			}
			this.boundary = boundary;
			this.maxLength = maxLength;
		}
		/**
		Compute the full set of decorations for matches in the given
		view's viewport. You'll want to call this when initializing your
		plugin.
		*/
		createDeco(view) {
			let build = new state.RangeSetBuilder(), add = build.add.bind(build);
			for (let { from, to } of matchRanges(view, this.maxLength))
				iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
			return build.finish();
		}
		/**
		Update a set of decorations for a view update. `deco` _must_ be
		the set of decorations produced by _this_ `MatchDecorator` for
		the view state before the update.
		*/
		updateDeco(update, deco) {
			let changeFrom = 1e9, changeTo = -1;
			if (update.docChanged)
				update.changes.iterChanges((_f, _t, from, to) => {
					if (to > update.view.viewport.from && from < update.view.viewport.to) {
						changeFrom = Math.min(from, changeFrom);
						changeTo = Math.max(to, changeTo);
					}
				});
			if (update.viewportChanged || changeTo - changeFrom > 1000)
				return this.createDeco(update.view);
			if (changeTo > -1)
				return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
			return deco;
		}
		updateRange(view, deco, updateFrom, updateTo) {
			for (let r of view.visibleRanges) {
				let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
				if (to > from) {
					let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
					let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
					if (this.boundary) {
						for (; from > fromLine.from; from--)
							if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
								start = from;
								break;
							}
						for (; to < toLine.to; to++)
							if (this.boundary.test(toLine.text[to - toLine.from])) {
								end = to;
								break;
							}
					}
					let ranges = [], m;
					let add = (from, to, deco) => ranges.push(deco.range(from, to));
					if (fromLine == toLine) {
						this.regexp.lastIndex = start - fromLine.from;
						while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
							this.addMatch(m, view, m.index + fromLine.from, add);
					}
					else {
						iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
					}
					deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
				}
			}
			return deco;
		}
	}
	
	const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
	const Specials = new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
	const Names = {
		0: "null",
		7: "bell",
		8: "backspace",
		10: "newline",
		11: "vertical tab",
		13: "carriage return",
		27: "escape",
		8203: "zero width space",
		8204: "zero width non-joiner",
		8205: "zero width joiner",
		8206: "left-to-right mark",
		8207: "right-to-left mark",
		8232: "line separator",
		8237: "left-to-right override",
		8238: "right-to-left override",
		8294: "left-to-right isolate",
		8295: "right-to-left isolate",
		8297: "pop directional isolate",
		8233: "paragraph separator",
		65279: "zero width no-break space",
		65532: "object replacement"
	};
	let _supportsTabSize = null;
	function supportsTabSize() {
		var _a;
		if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
			let styles = document.body.style;
			_supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
		}
		return _supportsTabSize || false;
	}
	const specialCharConfig = state.Facet.define({
		combine(configs) {
			let config = state.combineConfig(configs, {
				render: null,
				specialChars: Specials,
				addSpecialChars: null
			});
			if (config.replaceTabs = !supportsTabSize())
				config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
			if (config.addSpecialChars)
				config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
			return config;
		}
	});
	/**
	Returns an extension that installs highlighting of special
	characters.
	*/
	function highlightSpecialChars(
	/**
	Configuration options.
	*/
	config = {}) {
		return [specialCharConfig.of(config), specialCharPlugin()];
	}
	let _plugin = null;
	function specialCharPlugin() {
		return _plugin || (_plugin = ViewPlugin.fromClass(class {
			constructor(view) {
				this.view = view;
				this.decorations = Decoration.none;
				this.decorationCache = Object.create(null);
				this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
				this.decorations = this.decorator.createDeco(view);
			}
			makeDecorator(conf) {
				return new MatchDecorator({
					regexp: conf.specialChars,
					decoration: (m, view, pos) => {
						let { doc } = view.state;
						let code = state.codePointAt(m[0], 0);
						if (code == 9) {
							let line = doc.lineAt(pos);
							let size = view.state.tabSize, col = state.countColumn(line.text, size, pos - line.from);
							return Decoration.replace({
								widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)
							});
						}
						return this.decorationCache[code] ||
							(this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
					},
					boundary: conf.replaceTabs ? undefined : /[^]/
				});
			}
			update(update) {
				let conf = update.state.facet(specialCharConfig);
				if (update.startState.facet(specialCharConfig) != conf) {
					this.decorator = this.makeDecorator(conf);
					this.decorations = this.decorator.createDeco(update.view);
				}
				else {
					this.decorations = this.decorator.updateDeco(update, this.decorations);
				}
			}
		}, {
			decorations: v => v.decorations
		}));
	}
	const DefaultPlaceholder = "\u2022";
	// Assigns placeholder characters from the Control Pictures block to
	// ASCII control characters
	function placeholder$1(code) {
		if (code >= 32)
			return DefaultPlaceholder;
		if (code == 10)
			return "\u2424";
		return String.fromCharCode(9216 + code);
	}
	class SpecialCharWidget extends WidgetType {
		constructor(options, code) {
			super();
			this.options = options;
			this.code = code;
		}
		eq(other) { return other.code == this.code; }
		toDOM(view) {
			let ph = placeholder$1(this.code);
			let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
			let custom = this.options.render && this.options.render(this.code, desc, ph);
			if (custom)
				return custom;
			let span = document.createElement("span");
			span.textContent = ph;
			span.title = desc;
			span.setAttribute("aria-label", desc);
			span.className = "cm-specialChar";
			return span;
		}
		ignoreEvent() { return false; }
	}
	class TabWidget extends WidgetType {
		constructor(width) {
			super();
			this.width = width;
		}
		eq(other) { return other.width == this.width; }
		toDOM() {
			let span = document.createElement("span");
			span.textContent = "\t";
			span.className = "cm-tab";
			span.style.width = this.width + "px";
			return span;
		}
		ignoreEvent() { return false; }
	}
	
	const plugin = ViewPlugin.fromClass(class {
		constructor() {
			this.height = 1000;
			this.attrs = { style: "padding-bottom: 1000px" };
		}
		update(update) {
			let { view } = update;
			let height = view.viewState.editorHeight * view.scaleY -
				view.defaultLineHeight - view.documentPadding.top - 0.5;
			if (height >= 0 && height != this.height) {
				this.height = height;
				this.attrs = { style: `padding-bottom: ${height}px` };
			}
		}
	});
	/**
	Returns an extension that makes sure the content has a bottom
	margin equivalent to the height of the editor, minus one line
	height, so that every line in the document can be scrolled to the
	top of the editor.
	
	This is only meaningful when the editor is scrollable, and should
	not be enabled in editors that take the size of their content.
	*/
	function scrollPastEnd() {
		return [plugin, contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null; })];
	}
	
	/**
	Mark lines that have a cursor on them with the `"cm-activeLine"`
	DOM class.
	*/
	function highlightActiveLine() {
		return activeLineHighlighter;
	}
	const lineDeco = Decoration.line({ class: "cm-activeLine" });
	const activeLineHighlighter = ViewPlugin.fromClass(class {
		constructor(view) {
			this.decorations = this.getDeco(view);
		}
		update(update) {
			if (update.docChanged || update.selectionSet)
				this.decorations = this.getDeco(update.view);
		}
		getDeco(view) {
			let lastLineStart = -1, deco = [];
			for (let r of view.state.selection.ranges) {
				let line = view.lineBlockAt(r.head);
				if (line.from > lastLineStart) {
					deco.push(lineDeco.range(line.from));
					lastLineStart = line.from;
				}
			}
			return Decoration.set(deco);
		}
	}, {
		decorations: v => v.decorations
	});
	
	class Placeholder extends WidgetType {
		constructor(content) {
			super();
			this.content = content;
		}
		toDOM() {
			let wrap = document.createElement("span");
			wrap.className = "cm-placeholder";
			wrap.style.pointerEvents = "none";
			wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
			if (typeof this.content == "string")
				wrap.setAttribute("aria-label", "placeholder " + this.content);
			else
				wrap.setAttribute("aria-hidden", "true");
			return wrap;
		}
		coordsAt(dom) {
			let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
			if (!rects.length)
				return null;
			let style = window.getComputedStyle(dom.parentNode);
			let rect = flattenRect(rects[0], style.direction != "rtl");
			let lineHeight = parseInt(style.lineHeight);
			if (rect.bottom - rect.top > lineHeight * 1.5)
				return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };
			return rect;
		}
		ignoreEvent() { return false; }
	}
	/**
	Extension that enables a placeholder—a piece of example content
	to show when the editor is empty.
	*/
	function placeholder(content) {
		return ViewPlugin.fromClass(class {
			constructor(view) {
				this.view = view;
				this.placeholder = content
					? Decoration.set([Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)])
					: Decoration.none;
			}
			get decorations() { return this.view.state.doc.length ? Decoration.none : this.placeholder; }
		}, { decorations: v => v.decorations });
	}
	
	// Don't compute precise column positions for line offsets above this
	// (since it could get expensive). Assume offset==column for them.
	const MaxOff = 2000;
	function rectangleFor(state$1, a, b) {
		let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
		let ranges = [];
		if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
			let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
			for (let i = startLine; i <= endLine; i++) {
				let line = state$1.doc.line(i);
				if (line.length <= endOff)
					ranges.push(state.EditorSelection.range(line.from + startOff, line.to + endOff));
			}
		}
		else {
			let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
			for (let i = startLine; i <= endLine; i++) {
				let line = state$1.doc.line(i);
				let start = state.findColumn(line.text, startCol, state$1.tabSize, true);
				if (start < 0) {
					ranges.push(state.EditorSelection.cursor(line.to));
				}
				else {
					let end = state.findColumn(line.text, endCol, state$1.tabSize);
					ranges.push(state.EditorSelection.range(line.from + start, line.from + end));
				}
			}
		}
		return ranges;
	}
	function absoluteColumn(view, x) {
		let ref = view.coordsAtPos(view.viewport.from);
		return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
	}
	function getPos(view, event) {
		let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
		let line = view.state.doc.lineAt(offset), off = offset - line.from;
		let col = off > MaxOff ? -1
			: off == line.length ? absoluteColumn(view, event.clientX)
				: state.countColumn(line.text, view.state.tabSize, offset - line.from);
		return { line: line.number, col, off };
	}
	function rectangleSelectionStyle(view, event) {
		let start = getPos(view, event), startSel = view.state.selection;
		if (!start)
			return null;
		return {
			update(update) {
				if (update.docChanged) {
					let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
					let newLine = update.state.doc.lineAt(newStart);
					start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
					startSel = startSel.map(update.changes);
				}
			},
			get(event, _extend, multiple) {
				let cur = getPos(view, event);
				if (!cur)
					return startSel;
				let ranges = rectangleFor(view.state, start, cur);
				if (!ranges.length)
					return startSel;
				if (multiple)
					return state.EditorSelection.create(ranges.concat(startSel.ranges));
				else
					return state.EditorSelection.create(ranges);
			}
		};
	}
	/**
	Create an extension that enables rectangular selections. By
	default, it will react to left mouse drag with the Alt key held
	down. When such a selection occurs, the text within the rectangle
	that was dragged over will be selected, as one selection
	[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
	*/
	function rectangularSelection(options) {
		let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
		return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
	}
	const keys = {
		Alt: [18, e => !!e.altKey],
		Control: [17, e => !!e.ctrlKey],
		Shift: [16, e => !!e.shiftKey],
		Meta: [91, e => !!e.metaKey]
	};
	const showCrosshair = { style: "cursor: crosshair" };
	/**
	Returns an extension that turns the pointer cursor into a
	crosshair when a given modifier key, defaulting to Alt, is held
	down. Can serve as a visual hint that rectangular selection is
	going to happen when paired with
	[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
	*/
	function crosshairCursor(options = {}) {
		let [code, getter] = keys[options.key || "Alt"];
		let plugin = ViewPlugin.fromClass(class {
			constructor(view) {
				this.view = view;
				this.isDown = false;
			}
			set(isDown) {
				if (this.isDown != isDown) {
					this.isDown = isDown;
					this.view.update([]);
				}
			}
		}, {
			eventObservers: {
				keydown(e) {
					this.set(e.keyCode == code || getter(e));
				},
				keyup(e) {
					if (e.keyCode == code || !getter(e))
						this.set(false);
				},
				mousemove(e) {
					this.set(getter(e));
				}
			}
		});
		return [
			plugin,
			EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
		];
	}
	
	const Outside = "-10000px";
	class TooltipViewManager {
		constructor(view, facet, createTooltipView) {
			this.facet = facet;
			this.createTooltipView = createTooltipView;
			this.input = view.state.facet(facet);
			this.tooltips = this.input.filter(t => t);
			this.tooltipViews = this.tooltips.map(createTooltipView);
		}
		update(update, above) {
			var _a;
			let input = update.state.facet(this.facet);
			let tooltips = input.filter(x => x);
			if (input === this.input) {
				for (let t of this.tooltipViews)
					if (t.update)
						t.update(update);
				return false;
			}
			let tooltipViews = [], newAbove = above ? [] : null;
			for (let i = 0; i < tooltips.length; i++) {
				let tip = tooltips[i], known = -1;
				if (!tip)
					continue;
				for (let i = 0; i < this.tooltips.length; i++) {
					let other = this.tooltips[i];
					if (other && other.create == tip.create)
						known = i;
				}
				if (known < 0) {
					tooltipViews[i] = this.createTooltipView(tip);
					if (newAbove)
						newAbove[i] = !!tip.above;
				}
				else {
					let tooltipView = tooltipViews[i] = this.tooltipViews[known];
					if (newAbove)
						newAbove[i] = above[known];
					if (tooltipView.update)
						tooltipView.update(update);
				}
			}
			for (let t of this.tooltipViews)
				if (tooltipViews.indexOf(t) < 0) {
					t.dom.remove();
					(_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
				}
			if (above) {
				newAbove.forEach((val, i) => above[i] = val);
				above.length = newAbove.length;
			}
			this.input = input;
			this.tooltips = tooltips;
			this.tooltipViews = tooltipViews;
			return true;
		}
	}
	/**
	Creates an extension that configures tooltip behavior.
	*/
	function tooltips(config = {}) {
		return tooltipConfig.of(config);
	}
	function windowSpace(view) {
		let { win } = view;
		return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
	}
	const tooltipConfig = state.Facet.define({
		combine: values => {
			var _a, _b, _c;
			return ({
				position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
				parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
				tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
			});
		}
	});
	const knownHeight = new WeakMap();
	const tooltipPlugin = ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.above = [];
			this.inView = true;
			this.madeAbsolute = false;
			this.lastTransaction = 0;
			this.measureTimeout = -1;
			let config = view.state.facet(tooltipConfig);
			this.position = config.position;
			this.parent = config.parent;
			this.classes = view.themeClasses;
			this.createContainer();
			this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
			this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
			this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
				if (Date.now() > this.lastTransaction - 50 &&
					entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
					this.measureSoon();
			}, { threshold: [1] }) : null;
			this.observeIntersection();
			view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
			this.maybeMeasure();
		}
		createContainer() {
			if (this.parent) {
				this.container = document.createElement("div");
				this.container.style.position = "relative";
				this.container.className = this.view.themeClasses;
				this.parent.appendChild(this.container);
			}
			else {
				this.container = this.view.dom;
			}
		}
		observeIntersection() {
			if (this.intersectionObserver) {
				this.intersectionObserver.disconnect();
				for (let tooltip of this.manager.tooltipViews)
					this.intersectionObserver.observe(tooltip.dom);
			}
		}
		measureSoon() {
			if (this.measureTimeout < 0)
				this.measureTimeout = setTimeout(() => {
					this.measureTimeout = -1;
					this.maybeMeasure();
				}, 50);
		}
		update(update) {
			if (update.transactions.length)
				this.lastTransaction = Date.now();
			let updated = this.manager.update(update, this.above);
			if (updated)
				this.observeIntersection();
			let shouldMeasure = updated || update.geometryChanged;
			let newConfig = update.state.facet(tooltipConfig);
			if (newConfig.position != this.position && !this.madeAbsolute) {
				this.position = newConfig.position;
				for (let t of this.manager.tooltipViews)
					t.dom.style.position = this.position;
				shouldMeasure = true;
			}
			if (newConfig.parent != this.parent) {
				if (this.parent)
					this.container.remove();
				this.parent = newConfig.parent;
				this.createContainer();
				for (let t of this.manager.tooltipViews)
					this.container.appendChild(t.dom);
				shouldMeasure = true;
			}
			else if (this.parent && this.view.themeClasses != this.classes) {
				this.classes = this.container.className = this.view.themeClasses;
			}
			if (shouldMeasure)
				this.maybeMeasure();
		}
		createTooltip(tooltip) {
			let tooltipView = tooltip.create(this.view);
			tooltipView.dom.classList.add("cm-tooltip");
			if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
				let arrow = document.createElement("div");
				arrow.className = "cm-tooltip-arrow";
				tooltipView.dom.appendChild(arrow);
			}
			tooltipView.dom.style.position = this.position;
			tooltipView.dom.style.top = Outside;
			tooltipView.dom.style.left = "0px";
			this.container.appendChild(tooltipView.dom);
			if (tooltipView.mount)
				tooltipView.mount(this.view);
			return tooltipView;
		}
		destroy() {
			var _a, _b;
			this.view.win.removeEventListener("resize", this.measureSoon);
			for (let tooltipView of this.manager.tooltipViews) {
				tooltipView.dom.remove();
				(_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
			}
			if (this.parent)
				this.container.remove();
			(_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
			clearTimeout(this.measureTimeout);
		}
		readMeasure() {
			let editor = this.view.dom.getBoundingClientRect();
			let scaleX = 1, scaleY = 1, makeAbsolute = false;
			if (this.position == "fixed" && this.manager.tooltipViews.length) {
				let { dom } = this.manager.tooltipViews[0];
				if (browser.gecko) {
					// Firefox sets the element's `offsetParent` to the
					// transformed element when a transform interferes with fixed
					// positioning.
					makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
				}
				else if (dom.style.top == Outside && dom.style.left == "0px") {
					// On other browsers, we have to awkwardly try and use other
					// information to detect a transform.
					let rect = dom.getBoundingClientRect();
					makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
				}
			}
			if (makeAbsolute || this.position == "absolute") {
				if (this.parent) {
					let rect = this.parent.getBoundingClientRect();
					if (rect.width && rect.height) {
						scaleX = rect.width / this.parent.offsetWidth;
						scaleY = rect.height / this.parent.offsetHeight;
					}
				}
				else {
					({ scaleX, scaleY } = this.view.viewState);
				}
			}
			return {
				editor,
				parent: this.parent ? this.container.getBoundingClientRect() : editor,
				pos: this.manager.tooltips.map((t, i) => {
					let tv = this.manager.tooltipViews[i];
					return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
				}),
				size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
				space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
				scaleX, scaleY, makeAbsolute
			};
		}
		writeMeasure(measured) {
			var _a;
			if (measured.makeAbsolute) {
				this.madeAbsolute = true;
				this.position = "absolute";
				for (let t of this.manager.tooltipViews)
					t.dom.style.position = "absolute";
			}
			let { editor, space, scaleX, scaleY } = measured;
			let others = [];
			for (let i = 0; i < this.manager.tooltips.length; i++) {
				let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
				let pos = measured.pos[i], size = measured.size[i];
				// Hide tooltips that are outside of the editor.
				if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
					pos.top >= Math.min(editor.bottom, space.bottom) ||
					pos.right < Math.max(editor.left, space.left) - .1 ||
					pos.left > Math.min(editor.right, space.right) + .1) {
					dom.style.top = Outside;
					continue;
				}
				let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
				let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
				let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
				let offset = tView.offset || noOffset, ltr = this.view.textDirection == exports.Direction.LTR;
				let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
					: ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)
						: Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
				let above = this.above[i];
				if (!tooltip.strictSide && (above
					? pos.top - (size.bottom - size.top) - offset.y < space.top
					: pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
					above == (space.bottom - pos.bottom > pos.top - space.top))
					above = this.above[i] = !above;
				let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
				if (spaceVert < height && tView.resize !== false) {
					if (spaceVert < this.view.defaultLineHeight) {
						dom.style.top = Outside;
						continue;
					}
					knownHeight.set(tView, height);
					dom.style.height = (height = spaceVert) / scaleY + "px";
				}
				else if (dom.style.height) {
					dom.style.height = "";
				}
				let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
				let right = left + width;
				if (tView.overlap !== true)
					for (let r of others)
						if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
							top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
				if (this.position == "absolute") {
					dom.style.top = (top - measured.parent.top) / scaleY + "px";
					dom.style.left = (left - measured.parent.left) / scaleX + "px";
				}
				else {
					dom.style.top = top / scaleY + "px";
					dom.style.left = left / scaleX + "px";
				}
				if (arrow) {
					let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
					arrow.style.left = arrowLeft / scaleX + "px";
				}
				if (tView.overlap !== true)
					others.push({ left, top, right, bottom: top + height });
				dom.classList.toggle("cm-tooltip-above", above);
				dom.classList.toggle("cm-tooltip-below", !above);
				if (tView.positioned)
					tView.positioned(measured.space);
			}
		}
		maybeMeasure() {
			if (this.manager.tooltips.length) {
				if (this.view.inView)
					this.view.requestMeasure(this.measureReq);
				if (this.inView != this.view.inView) {
					this.inView = this.view.inView;
					if (!this.inView)
						for (let tv of this.manager.tooltipViews)
							tv.dom.style.top = Outside;
				}
			}
		}
	}, {
		eventObservers: {
			scroll() { this.maybeMeasure(); }
		}
	});
	const baseTheme = EditorView.baseTheme({
		".cm-tooltip": {
			zIndex: 100,
			boxSizing: "border-box"
		},
		"&light .cm-tooltip": {
			border: "1px solid #bbb",
			backgroundColor: "#f5f5f5"
		},
		"&light .cm-tooltip-section:not(:first-child)": {
			borderTop: "1px solid #bbb",
		},
		"&dark .cm-tooltip": {
			backgroundColor: "#333338",
			color: "white"
		},
		".cm-tooltip-arrow": {
			height: `${7 /* Arrow.Size */}px`,
			width: `${7 /* Arrow.Size */ * 2}px`,
			position: "absolute",
			zIndex: -1,
			overflow: "hidden",
			"&:before, &:after": {
				content: "''",
				position: "absolute",
				width: 0,
				height: 0,
				borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
				borderRight: `${7 /* Arrow.Size */}px solid transparent`,
			},
			".cm-tooltip-above &": {
				bottom: `-${7 /* Arrow.Size */}px`,
				"&:before": {
					borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
				},
				"&:after": {
					borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
					bottom: "1px"
				}
			},
			".cm-tooltip-below &": {
				top: `-${7 /* Arrow.Size */}px`,
				"&:before": {
					borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
				},
				"&:after": {
					borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
					top: "1px"
				}
			},
		},
		"&dark .cm-tooltip .cm-tooltip-arrow": {
			"&:before": {
				borderTopColor: "#333338",
				borderBottomColor: "#333338"
			},
			"&:after": {
				borderTopColor: "transparent",
				borderBottomColor: "transparent"
			}
		}
	});
	const noOffset = { x: 0, y: 0 };
	/**
	Facet to which an extension can add a value to show a tooltip.
	*/
	const showTooltip = state.Facet.define({
		enables: [tooltipPlugin, baseTheme]
	});
	const showHoverTooltip = state.Facet.define();
	class HoverTooltipHost {
		// Needs to be static so that host tooltip instances always match
		static create(view) {
			return new HoverTooltipHost(view);
		}
		constructor(view) {
			this.view = view;
			this.mounted = false;
			this.dom = document.createElement("div");
			this.dom.classList.add("cm-tooltip-hover");
			this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
		}
		createHostedView(tooltip) {
			let hostedView = tooltip.create(this.view);
			hostedView.dom.classList.add("cm-tooltip-section");
			this.dom.appendChild(hostedView.dom);
			if (this.mounted && hostedView.mount)
				hostedView.mount(this.view);
			return hostedView;
		}
		mount(view) {
			for (let hostedView of this.manager.tooltipViews) {
				if (hostedView.mount)
					hostedView.mount(view);
			}
			this.mounted = true;
		}
		positioned(space) {
			for (let hostedView of this.manager.tooltipViews) {
				if (hostedView.positioned)
					hostedView.positioned(space);
			}
		}
		update(update) {
			this.manager.update(update);
		}
		destroy() {
			var _a;
			for (let t of this.manager.tooltipViews)
				(_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
		}
		passProp(name) {
			let value = undefined;
			for (let view of this.manager.tooltipViews) {
				let given = view[name];
				if (given !== undefined) {
					if (value === undefined)
						value = given;
					else if (value !== given)
						return undefined;
				}
			}
			return value;
		}
		get offset() { return this.passProp("offset"); }
		get getCoords() { return this.passProp("getCoords"); }
		get overlap() { return this.passProp("overlap"); }
		get resize() { return this.passProp("resize"); }
	}
	const showHoverTooltipHost = showTooltip.compute([showHoverTooltip], state => {
		let tooltips = state.facet(showHoverTooltip).filter(t => t);
		if (tooltips.length === 0)
			return null;
		return {
			pos: Math.min(...tooltips.map(t => t.pos)),
			end: Math.max(...tooltips.map(t => { var _a; return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos; })),
			create: HoverTooltipHost.create,
			above: tooltips[0].above,
			arrow: tooltips.some(t => t.arrow),
		};
	});
	class HoverPlugin {
		constructor(view, source, field, setHover, hoverTime) {
			this.view = view;
			this.source = source;
			this.field = field;
			this.setHover = setHover;
			this.hoverTime = hoverTime;
			this.hoverTimeout = -1;
			this.restartTimeout = -1;
			this.pending = null;
			this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
			this.checkHover = this.checkHover.bind(this);
			view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
			view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
		}
		update() {
			if (this.pending) {
				this.pending = null;
				clearTimeout(this.restartTimeout);
				this.restartTimeout = setTimeout(() => this.startHover(), 20);
			}
		}
		get active() {
			return this.view.state.field(this.field);
		}
		checkHover() {
			this.hoverTimeout = -1;
			if (this.active)
				return;
			let hovered = Date.now() - this.lastMove.time;
			if (hovered < this.hoverTime)
				this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
			else
				this.startHover();
		}
		startHover() {
			clearTimeout(this.restartTimeout);
			let { view, lastMove } = this;
			let desc = view.docView.nearest(lastMove.target);
			if (!desc)
				return;
			let pos, side = 1;
			if (desc instanceof WidgetView) {
				pos = desc.posAtStart;
			}
			else {
				pos = view.posAtCoords(lastMove);
				if (pos == null)
					return;
				let posCoords = view.coordsAtPos(pos);
				if (!posCoords ||
					lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
					lastMove.x < posCoords.left - view.defaultCharacterWidth ||
					lastMove.x > posCoords.right + view.defaultCharacterWidth)
					return;
				let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
				let rtl = bidi && bidi.dir == exports.Direction.RTL ? -1 : 1;
				side = (lastMove.x < posCoords.left ? -rtl : rtl);
			}
			let open = this.source(view, pos, side);
			if (open === null || open === void 0 ? void 0 : open.then) {
				let pending = this.pending = { pos };
				open.then(result => {
					if (this.pending == pending) {
						this.pending = null;
						if (result)
							view.dispatch({ effects: this.setHover.of(result) });
					}
				}, e => logException(view.state, e, "hover tooltip"));
			}
			else if (open) {
				view.dispatch({ effects: this.setHover.of(open) });
			}
		}
		get tooltip() {
			let plugin = this.view.plugin(tooltipPlugin);
			let index = plugin ? plugin.manager.tooltips.findIndex(t => t.create == HoverTooltipHost.create) : -1;
			return index > -1 ? plugin.manager.tooltipViews[index] : null;
		}
		mousemove(event) {
			var _a;
			this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
			if (this.hoverTimeout < 0)
				this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
			let { active, tooltip } = this;
			if (active && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
				let { pos } = active || this.pending, end = (_a = active === null || active === void 0 ? void 0 : active.end) !== null && _a !== void 0 ? _a : pos;
				if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
					: !isOverRange(this.view, pos, end, event.clientX, event.clientY))) {
					this.view.dispatch({ effects: this.setHover.of(null) });
					this.pending = null;
				}
			}
		}
		mouseleave(event) {
			clearTimeout(this.hoverTimeout);
			this.hoverTimeout = -1;
			let { active } = this;
			if (active) {
				let { tooltip } = this;
				let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
				if (!inTooltip)
					this.view.dispatch({ effects: this.setHover.of(null) });
				else
					this.watchTooltipLeave(tooltip.dom);
			}
		}
		watchTooltipLeave(tooltip) {
			let watch = (event) => {
				tooltip.removeEventListener("mouseleave", watch);
				if (this.active && !this.view.dom.contains(event.relatedTarget))
					this.view.dispatch({ effects: this.setHover.of(null) });
			};
			tooltip.addEventListener("mouseleave", watch);
		}
		destroy() {
			clearTimeout(this.hoverTimeout);
			this.view.dom.removeEventListener("mouseleave", this.mouseleave);
			this.view.dom.removeEventListener("mousemove", this.mousemove);
		}
	}
	const tooltipMargin = 4;
	function isInTooltip(tooltip, event) {
		let rect = tooltip.getBoundingClientRect();
		return event.clientX >= rect.left - tooltipMargin && event.clientX <= rect.right + tooltipMargin &&
			event.clientY >= rect.top - tooltipMargin && event.clientY <= rect.bottom + tooltipMargin;
	}
	function isOverRange(view, from, to, x, y, margin) {
		let rect = view.scrollDOM.getBoundingClientRect();
		let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
		if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
			return false;
		let pos = view.posAtCoords({ x, y }, false);
		return pos >= from && pos <= to;
	}
	/**
	Set up a hover tooltip, which shows up when the pointer hovers
	over ranges of text. The callback is called when the mouse hovers
	over the document text. It should, if there is a tooltip
	associated with position `pos`, return the tooltip description
	(either directly or in a promise). The `side` argument indicates
	on which side of the position the pointer is—it will be -1 if the
	pointer is before the position, 1 if after the position.
	
	Note that all hover tooltips are hosted within a single tooltip
	container element. This allows multiple tooltips over the same
	range to be "merged" together without overlapping.
	*/
	function hoverTooltip(source, options = {}) {
		let setHover = state.StateEffect.define();
		let hoverState = state.StateField.define({
			create() { return null; },
			update(value, tr) {
				if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||
					options.hideOn && options.hideOn(tr, value)))
					return null;
				if (value && tr.docChanged) {
					let newPos = tr.changes.mapPos(value.pos, -1, state.MapMode.TrackDel);
					if (newPos == null)
						return null;
					let copy = Object.assign(Object.create(null), value);
					copy.pos = newPos;
					if (value.end != null)
						copy.end = tr.changes.mapPos(value.end);
					value = copy;
				}
				for (let effect of tr.effects) {
					if (effect.is(setHover))
						value = effect.value;
					if (effect.is(closeHoverTooltipEffect))
						value = null;
				}
				return value;
			},
			provide: f => showHoverTooltip.from(f)
		});
		return [
			hoverState,
			ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
			showHoverTooltipHost
		];
	}
	/**
	Get the active tooltip view for a given tooltip, if available.
	*/
	function getTooltip(view, tooltip) {
		let plugin = view.plugin(tooltipPlugin);
		if (!plugin)
			return null;
		let found = plugin.manager.tooltips.indexOf(tooltip);
		return found < 0 ? null : plugin.manager.tooltipViews[found];
	}
	/**
	Returns true if any hover tooltips are currently active.
	*/
	function hasHoverTooltips(state) {
		return state.facet(showHoverTooltip).some(x => x);
	}
	const closeHoverTooltipEffect = state.StateEffect.define();
	/**
	Transaction effect that closes all hover tooltips.
	*/
	const closeHoverTooltips = closeHoverTooltipEffect.of(null);
	/**
	Tell the tooltip extension to recompute the position of the active
	tooltips. This can be useful when something happens (such as a
	re-positioning or CSS change affecting the editor) that could
	invalidate the existing tooltip positions.
	*/
	function repositionTooltips(view) {
		let plugin = view.plugin(tooltipPlugin);
		if (plugin)
			plugin.maybeMeasure();
	}
	
	const panelConfig = state.Facet.define({
		combine(configs) {
			let topContainer, bottomContainer;
			for (let c of configs) {
				topContainer = topContainer || c.topContainer;
				bottomContainer = bottomContainer || c.bottomContainer;
			}
			return { topContainer, bottomContainer };
		}
	});
	/**
	Configures the panel-managing extension.
	*/
	function panels(config) {
		return config ? [panelConfig.of(config)] : [];
	}
	/**
	Get the active panel created by the given constructor, if any.
	This can be useful when you need access to your panels' DOM
	structure.
	*/
	function getPanel(view, panel) {
		let plugin = view.plugin(panelPlugin);
		let index = plugin ? plugin.specs.indexOf(panel) : -1;
		return index > -1 ? plugin.panels[index] : null;
	}
	const panelPlugin = ViewPlugin.fromClass(class {
		constructor(view) {
			this.input = view.state.facet(showPanel);
			this.specs = this.input.filter(s => s);
			this.panels = this.specs.map(spec => spec(view));
			let conf = view.state.facet(panelConfig);
			this.top = new PanelGroup(view, true, conf.topContainer);
			this.bottom = new PanelGroup(view, false, conf.bottomContainer);
			this.top.sync(this.panels.filter(p => p.top));
			this.bottom.sync(this.panels.filter(p => !p.top));
			for (let p of this.panels) {
				p.dom.classList.add("cm-panel");
				if (p.mount)
					p.mount();
			}
		}
		update(update) {
			let conf = update.state.facet(panelConfig);
			if (this.top.container != conf.topContainer) {
				this.top.sync([]);
				this.top = new PanelGroup(update.view, true, conf.topContainer);
			}
			if (this.bottom.container != conf.bottomContainer) {
				this.bottom.sync([]);
				this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
			}
			this.top.syncClasses();
			this.bottom.syncClasses();
			let input = update.state.facet(showPanel);
			if (input != this.input) {
				let specs = input.filter(x => x);
				let panels = [], top = [], bottom = [], mount = [];
				for (let spec of specs) {
					let known = this.specs.indexOf(spec), panel;
					if (known < 0) {
						panel = spec(update.view);
						mount.push(panel);
					}
					else {
						panel = this.panels[known];
						if (panel.update)
							panel.update(update);
					}
					panels.push(panel);
					(panel.top ? top : bottom).push(panel);
				}
				this.specs = specs;
				this.panels = panels;
				this.top.sync(top);
				this.bottom.sync(bottom);
				for (let p of mount) {
					p.dom.classList.add("cm-panel");
					if (p.mount)
						p.mount();
				}
			}
			else {
				for (let p of this.panels)
					if (p.update)
						p.update(update);
			}
		}
		destroy() {
			this.top.sync([]);
			this.bottom.sync([]);
		}
	}, {
		provide: plugin => EditorView.scrollMargins.of(view => {
			let value = view.plugin(plugin);
			return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
		})
	});
	class PanelGroup {
		constructor(view, top, container) {
			this.view = view;
			this.top = top;
			this.container = container;
			this.dom = undefined;
			this.classes = "";
			this.panels = [];
			this.syncClasses();
		}
		sync(panels) {
			for (let p of this.panels)
				if (p.destroy && panels.indexOf(p) < 0)
					p.destroy();
			this.panels = panels;
			this.syncDOM();
		}
		syncDOM() {
			if (this.panels.length == 0) {
				if (this.dom) {
					this.dom.remove();
					this.dom = undefined;
				}
				return;
			}
			if (!this.dom) {
				this.dom = document.createElement("div");
				this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
				this.dom.style[this.top ? "top" : "bottom"] = "0";
				let parent = this.container || this.view.dom;
				parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
			}
			let curDOM = this.dom.firstChild;
			for (let panel of this.panels) {
				if (panel.dom.parentNode == this.dom) {
					while (curDOM != panel.dom)
						curDOM = rm(curDOM);
					curDOM = curDOM.nextSibling;
				}
				else {
					this.dom.insertBefore(panel.dom, curDOM);
				}
			}
			while (curDOM)
				curDOM = rm(curDOM);
		}
		scrollMargin() {
			return !this.dom || this.container ? 0
				: Math.max(0, this.top ?
					this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
					Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
		}
		syncClasses() {
			if (!this.container || this.classes == this.view.themeClasses)
				return;
			for (let cls of this.classes.split(" "))
				if (cls)
					this.container.classList.remove(cls);
			for (let cls of (this.classes = this.view.themeClasses).split(" "))
				if (cls)
					this.container.classList.add(cls);
		}
	}
	function rm(node) {
		let next = node.nextSibling;
		node.remove();
		return next;
	}
	/**
	Opening a panel is done by providing a constructor function for
	the panel through this facet. (The panel is closed again when its
	constructor is no longer provided.) Values of `null` are ignored.
	*/
	const showPanel = state.Facet.define({
		enables: panelPlugin
	});
	
	/**
	A gutter marker represents a bit of information attached to a line
	in a specific gutter. Your own custom markers have to extend this
	class.
	*/
	class GutterMarker extends state.RangeValue {
		/**
		@internal
		*/
		compare(other) {
			return this == other || this.constructor == other.constructor && this.eq(other);
		}
		/**
		Compare this marker to another marker of the same type.
		*/
		eq(other) { return false; }
		/**
		Called if the marker has a `toDOM` method and its representation
		was removed from a gutter.
		*/
		destroy(dom) { }
	}
	GutterMarker.prototype.elementClass = "";
	GutterMarker.prototype.toDOM = undefined;
	GutterMarker.prototype.mapMode = state.MapMode.TrackBefore;
	GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
	GutterMarker.prototype.point = true;
	/**
	Facet used to add a class to all gutter elements for a given line.
	Markers given to this facet should _only_ define an
	[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
	[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
	in all gutters for the line).
	*/
	const gutterLineClass = state.Facet.define();
	const defaults = {
		class: "",
		renderEmptyElements: false,
		elementStyle: "",
		markers: () => state.RangeSet.empty,
		lineMarker: () => null,
		widgetMarker: () => null,
		lineMarkerChange: null,
		initialSpacer: null,
		updateSpacer: null,
		domEventHandlers: {}
	};
	const activeGutters = state.Facet.define();
	/**
	Define an editor gutter. The order in which the gutters appear is
	determined by their extension priority.
	*/
	function gutter(config) {
		return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
	}
	const unfixGutters = state.Facet.define({
		combine: values => values.some(x => x)
	});
	/**
	The gutter-drawing plugin is automatically enabled when you add a
	gutter, but you can use this function to explicitly configure it.
	
	Unless `fixed` is explicitly set to `false`, the gutters are
	fixed, meaning they don't scroll along with the content
	horizontally (except on Internet Explorer, which doesn't support
	CSS [`position:
	sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
	*/
	function gutters(config) {
		let result = [
			gutterView,
		];
		if (config && config.fixed === false)
			result.push(unfixGutters.of(true));
		return result;
	}
	const gutterView = ViewPlugin.fromClass(class {
		constructor(view) {
			this.view = view;
			this.prevViewport = view.viewport;
			this.dom = document.createElement("div");
			this.dom.className = "cm-gutters";
			this.dom.setAttribute("aria-hidden", "true");
			this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
			this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
			for (let gutter of this.gutters)
				this.dom.appendChild(gutter.dom);
			this.fixed = !view.state.facet(unfixGutters);
			if (this.fixed) {
				// FIXME IE11 fallback, which doesn't support position: sticky,
				// by using position: relative + event handlers that realign the
				// gutter (or just force fixed=false on IE11?)
				this.dom.style.position = "sticky";
			}
			this.syncGutters(false);
			view.scrollDOM.insertBefore(this.dom, view.contentDOM);
		}
		update(update) {
			if (this.updateGutters(update)) {
				// Detach during sync when the viewport changed significantly
				// (such as during scrolling), since for large updates that is
				// faster.
				let vpA = this.prevViewport, vpB = update.view.viewport;
				let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
				this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
			}
			if (update.geometryChanged)
				this.dom.style.minHeight = this.view.contentHeight + "px";
			if (this.view.state.facet(unfixGutters) != !this.fixed) {
				this.fixed = !this.fixed;
				this.dom.style.position = this.fixed ? "sticky" : "";
			}
			this.prevViewport = update.view.viewport;
		}
		syncGutters(detach) {
			let after = this.dom.nextSibling;
			if (detach)
				this.dom.remove();
			let lineClasses = state.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
			let classSet = [];
			let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
			for (let line of this.view.viewportLineBlocks) {
				if (classSet.length)
					classSet = [];
				if (Array.isArray(line.type)) {
					let first = true;
					for (let b of line.type) {
						if (b.type == exports.BlockType.Text && first) {
							advanceCursor(lineClasses, classSet, b.from);
							for (let cx of contexts)
								cx.line(this.view, b, classSet);
							first = false;
						}
						else if (b.widget) {
							for (let cx of contexts)
								cx.widget(this.view, b);
						}
					}
				}
				else if (line.type == exports.BlockType.Text) {
					advanceCursor(lineClasses, classSet, line.from);
					for (let cx of contexts)
						cx.line(this.view, line, classSet);
				}
				else if (line.widget) {
					for (let cx of contexts)
						cx.widget(this.view, line);
				}
			}
			for (let cx of contexts)
				cx.finish();
			if (detach)
				this.view.scrollDOM.insertBefore(this.dom, after);
		}
		updateGutters(update) {
			let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
			let change = update.docChanged || update.heightChanged || update.viewportChanged ||
				!state.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
			if (prev == cur) {
				for (let gutter of this.gutters)
					if (gutter.update(update))
						change = true;
			}
			else {
				change = true;
				let gutters = [];
				for (let conf of cur) {
					let known = prev.indexOf(conf);
					if (known < 0) {
						gutters.push(new SingleGutterView(this.view, conf));
					}
					else {
						this.gutters[known].update(update);
						gutters.push(this.gutters[known]);
					}
				}
				for (let g of this.gutters) {
					g.dom.remove();
					if (gutters.indexOf(g) < 0)
						g.destroy();
				}
				for (let g of gutters)
					this.dom.appendChild(g.dom);
				this.gutters = gutters;
			}
			return change;
		}
		destroy() {
			for (let view of this.gutters)
				view.destroy();
			this.dom.remove();
		}
	}, {
		provide: plugin => EditorView.scrollMargins.of(view => {
			let value = view.plugin(plugin);
			if (!value || value.gutters.length == 0 || !value.fixed)
				return null;
			return view.textDirection == exports.Direction.LTR
				? { left: value.dom.offsetWidth * view.scaleX }
				: { right: value.dom.offsetWidth * view.scaleX };
		})
	});
	function asArray(val) { return (Array.isArray(val) ? val : [val]); }
	function advanceCursor(cursor, collect, pos) {
		while (cursor.value && cursor.from <= pos) {
			if (cursor.from == pos)
				collect.push(cursor.value);
			cursor.next();
		}
	}
	class UpdateContext {
		constructor(gutter, viewport, height) {
			this.gutter = gutter;
			this.height = height;
			this.i = 0;
			this.cursor = state.RangeSet.iter(gutter.markers, viewport.from);
		}
		addElement(view, block, markers) {
			let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
			if (this.i == gutter.elements.length) {
				let newElt = new GutterElement(view, height, above, markers);
				gutter.elements.push(newElt);
				gutter.dom.appendChild(newElt.dom);
			}
			else {
				gutter.elements[this.i].update(view, height, above, markers);
			}
			this.height = block.bottom;
			this.i++;
		}
		line(view, line, extraMarkers) {
			let localMarkers = [];
			advanceCursor(this.cursor, localMarkers, line.from);
			if (extraMarkers.length)
				localMarkers = localMarkers.concat(extraMarkers);
			let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
			if (forLine)
				localMarkers.unshift(forLine);
			let gutter = this.gutter;
			if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
				return;
			this.addElement(view, line, localMarkers);
		}
		widget(view, block) {
			let marker = this.gutter.config.widgetMarker(view, block.widget, block);
			if (marker)
				this.addElement(view, block, [marker]);
		}
		finish() {
			let gutter = this.gutter;
			while (gutter.elements.length > this.i) {
				let last = gutter.elements.pop();
				gutter.dom.removeChild(last.dom);
				last.destroy();
			}
		}
	}
	class SingleGutterView {
		constructor(view, config) {
			this.view = view;
			this.config = config;
			this.elements = [];
			this.spacer = null;
			this.dom = document.createElement("div");
			this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
			for (let prop in config.domEventHandlers) {
				this.dom.addEventListener(prop, (event) => {
					let target = event.target, y;
					if (target != this.dom && this.dom.contains(target)) {
						while (target.parentNode != this.dom)
							target = target.parentNode;
						let rect = target.getBoundingClientRect();
						y = (rect.top + rect.bottom) / 2;
					}
					else {
						y = event.clientY;
					}
					let line = view.lineBlockAtHeight(y - view.documentTop);
					if (config.domEventHandlers[prop](view, line, event))
						event.preventDefault();
				});
			}
			this.markers = asArray(config.markers(view));
			if (config.initialSpacer) {
				this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
				this.dom.appendChild(this.spacer.dom);
				this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
			}
		}
		update(update) {
			let prevMarkers = this.markers;
			this.markers = asArray(this.config.markers(update.view));
			if (this.spacer && this.config.updateSpacer) {
				let updated = this.config.updateSpacer(this.spacer.markers[0], update);
				if (updated != this.spacer.markers[0])
					this.spacer.update(update.view, 0, 0, [updated]);
			}
			let vp = update.view.viewport;
			return !state.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
				(this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
		}
		destroy() {
			for (let elt of this.elements)
				elt.destroy();
		}
	}
	class GutterElement {
		constructor(view, height, above, markers) {
			this.height = -1;
			this.above = 0;
			this.markers = [];
			this.dom = document.createElement("div");
			this.dom.className = "cm-gutterElement";
			this.update(view, height, above, markers);
		}
		update(view, height, above, markers) {
			if (this.height != height) {
				this.height = height;
				this.dom.style.height = height + "px";
			}
			if (this.above != above)
				this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
			if (!sameMarkers(this.markers, markers))
				this.setMarkers(view, markers);
		}
		setMarkers(view, markers) {
			let cls = "cm-gutterElement", domPos = this.dom.firstChild;
			for (let iNew = 0, iOld = 0;;) {
				let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
				if (marker) {
					let c = marker.elementClass;
					if (c)
						cls += " " + c;
					for (let i = iOld; i < this.markers.length; i++)
						if (this.markers[i].compare(marker)) {
							skipTo = i;
							matched = true;
							break;
						}
				}
				else {
					skipTo = this.markers.length;
				}
				while (iOld < skipTo) {
					let next = this.markers[iOld++];
					if (next.toDOM) {
						next.destroy(domPos);
						let after = domPos.nextSibling;
						domPos.remove();
						domPos = after;
					}
				}
				if (!marker)
					break;
				if (marker.toDOM) {
					if (matched)
						domPos = domPos.nextSibling;
					else
						this.dom.insertBefore(marker.toDOM(view), domPos);
				}
				if (matched)
					iOld++;
			}
			this.dom.className = cls;
			this.markers = markers;
		}
		destroy() {
			this.setMarkers(null, []); // First argument not used unless creating markers
		}
	}
	function sameMarkers(a, b) {
		if (a.length != b.length)
			return false;
		for (let i = 0; i < a.length; i++)
			if (!a[i].compare(b[i]))
				return false;
		return true;
	}
	/**
	Facet used to provide markers to the line number gutter.
	*/
	const lineNumberMarkers = state.Facet.define();
	const lineNumberConfig = state.Facet.define({
		combine(values) {
			return state.combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
				domEventHandlers(a, b) {
					let result = Object.assign({}, a);
					for (let event in b) {
						let exists = result[event], add = b[event];
						result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
					}
					return result;
				}
			});
		}
	});
	class NumberMarker extends GutterMarker {
		constructor(number) {
			super();
			this.number = number;
		}
		eq(other) { return this.number == other.number; }
		toDOM() { return document.createTextNode(this.number); }
	}
	function formatNumber(view, number) {
		return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
	}
	const lineNumberGutter = activeGutters.compute([lineNumberConfig], state => ({
		class: "cm-lineNumbers",
		renderEmptyElements: false,
		markers(view) { return view.state.facet(lineNumberMarkers); },
		lineMarker(view, line, others) {
			if (others.some(m => m.toDOM))
				return null;
			return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
		},
		widgetMarker: () => null,
		lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
		initialSpacer(view) {
			return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
		},
		updateSpacer(spacer, update) {
			let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
			return max == spacer.number ? spacer : new NumberMarker(max);
		},
		domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
	}));
	/**
	Create a line number gutter extension.
	*/
	function lineNumbers(config = {}) {
		return [
			lineNumberConfig.of(config),
			gutters(),
			lineNumberGutter
		];
	}
	function maxLineNumber(lines) {
		let last = 9;
		while (last < lines)
			last = last * 10 + 9;
		return last;
	}
	const activeLineGutterMarker = new class extends GutterMarker {
		constructor() {
			super(...arguments);
			this.elementClass = "cm-activeLineGutter";
		}
	};
	const activeLineGutterHighlighter = gutterLineClass.compute(["selection"], state$1 => {
		let marks = [], last = -1;
		for (let range of state$1.selection.ranges) {
			let linePos = state$1.doc.lineAt(range.head).from;
			if (linePos > last) {
				last = linePos;
				marks.push(activeLineGutterMarker.range(linePos));
			}
		}
		return state.RangeSet.of(marks);
	});
	/**
	Returns an extension that adds a `cm-activeLineGutter` class to
	all gutter elements on the [active
	line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
	*/
	function highlightActiveLineGutter() {
		return activeLineGutterHighlighter;
	}
	
	const WhitespaceDeco = new Map();
	function getWhitespaceDeco(space) {
		let deco = WhitespaceDeco.get(space);
		if (!deco)
			WhitespaceDeco.set(space, deco = Decoration.mark({
				attributes: space === "\t" ? {
					class: "cm-highlightTab",
				} : {
					class: "cm-highlightSpace",
					"data-display": space.replace(/ /g, "·")
				}
			}));
		return deco;
	}
	function matcher(decorator) {
		return ViewPlugin.define(view => ({
			decorations: decorator.createDeco(view),
			update(u) {
				this.decorations = decorator.updateDeco(u, this.decorations);
			},
		}), {
			decorations: v => v.decorations
		});
	}
	const whitespaceHighlighter = matcher(new MatchDecorator({
		regexp: /\t| +/g,
		decoration: match => getWhitespaceDeco(match[0]),
		boundary: /\S/,
	}));
	/**
	Returns an extension that highlights whitespace, adding a
	`cm-highlightSpace` class to stretches of spaces, and a
	`cm-highlightTab` class to individual tab characters. By default,
	the former are shown as faint dots, and the latter as arrows.
	*/
	function highlightWhitespace() {
		return whitespaceHighlighter;
	}
	const trailingHighlighter = matcher(new MatchDecorator({
		regexp: /\s+$/g,
		decoration: Decoration.mark({ class: "cm-trailingSpace" }),
		boundary: /\S/,
	}));
	/**
	Returns an extension that adds a `cm-trailingSpace` class to all
	trailing whitespace.
	*/
	function highlightTrailingWhitespace() {
		return trailingHighlighter;
	}
	
	/**
	@internal
	*/
	const __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };
	
	exports.BidiSpan = BidiSpan;
	exports.BlockInfo = BlockInfo;
	exports.Decoration = Decoration;
	exports.EditorView = EditorView;
	exports.GutterMarker = GutterMarker;
	exports.MatchDecorator = MatchDecorator;
	exports.RectangleMarker = RectangleMarker;
	exports.ViewPlugin = ViewPlugin;
	exports.ViewUpdate = ViewUpdate;
	exports.WidgetType = WidgetType;
	exports.__test = __test;
	exports.closeHoverTooltips = closeHoverTooltips;
	exports.crosshairCursor = crosshairCursor;
	exports.drawSelection = drawSelection;
	exports.dropCursor = dropCursor;
	exports.getDrawSelectionConfig = getDrawSelectionConfig;
	exports.getPanel = getPanel;
	exports.getTooltip = getTooltip;
	exports.gutter = gutter;
	exports.gutterLineClass = gutterLineClass;
	exports.gutters = gutters;
	exports.hasHoverTooltips = hasHoverTooltips;
	exports.highlightActiveLine = highlightActiveLine;
	exports.highlightActiveLineGutter = highlightActiveLineGutter;
	exports.highlightSpecialChars = highlightSpecialChars;
	exports.highlightTrailingWhitespace = highlightTrailingWhitespace;
	exports.highlightWhitespace = highlightWhitespace;
	exports.hoverTooltip = hoverTooltip;
	exports.keymap = keymap;
	exports.layer = layer;
	exports.lineNumberMarkers = lineNumberMarkers;
	exports.lineNumbers = lineNumbers;
	exports.logException = logException;
	exports.panels = panels;
	exports.placeholder = placeholder;
	exports.rectangularSelection = rectangularSelection;
	exports.repositionTooltips = repositionTooltips;
	exports.runScopeHandlers = runScopeHandlers;
	exports.scrollPastEnd = scrollPastEnd;
	exports.showPanel = showPanel;
	exports.showTooltip = showTooltip;
	exports.tooltips = tooltips;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/common/dist/index.cjs":
	/*!***********************************************************!*\
	  !*** ../editor/node_modules/@lezer/common/dist/index.cjs ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	/**
	The default maximum length of a `TreeBuffer` node.
	*/
	const DefaultBufferLength = 1024;
	let nextPropID = 0;
	class Range {
		constructor(from, to) {
			this.from = from;
			this.to = to;
		}
	}
	/**
	Each [node type](#common.NodeType) or [individual tree](#common.Tree)
	can have metadata associated with it in props. Instances of this
	class represent prop names.
	*/
	class NodeProp {
		/**
		Create a new node prop type.
		*/
		constructor(config = {}) {
			this.id = nextPropID++;
			this.perNode = !!config.perNode;
			this.deserialize = config.deserialize || (() => {
				throw new Error("This node type doesn't define a deserialize function");
			});
		}
		/**
		This is meant to be used with
		[`NodeSet.extend`](#common.NodeSet.extend) or
		[`LRParser.configure`](#lr.ParserConfig.props) to compute
		prop values for each node type in the set. Takes a [match
		object](#common.NodeType^match) or function that returns undefined
		if the node type doesn't get this prop, and the prop's value if
		it does.
		*/
		add(match) {
			if (this.perNode)
				throw new RangeError("Can't add per-node props to node types");
			if (typeof match != "function")
				match = NodeType.match(match);
			return (type) => {
				let result = match(type);
				return result === undefined ? null : [this, result];
			};
		}
	}
	/**
	Prop that is used to describe matching delimiters. For opening
	delimiters, this holds an array of node names (written as a
	space-separated string when declaring this prop in a grammar)
	for the node types of closing delimiters that match it.
	*/
	NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
	attached to closing delimiters, holding an array of node names
	of types of matching opening delimiters.
	*/
	NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	Used to assign node types to groups (for example, all node
	types that represent an expression could be tagged with an
	`"Expression"` group).
	*/
	NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	The hash of the [context](#lr.ContextTracker.constructor)
	that the node was parsed in, if any. Used to limit reuse of
	contextual nodes.
	*/
	NodeProp.contextHash = new NodeProp({ perNode: true });
	/**
	The distance beyond the end of the node that the tokenizer
	looked ahead for any of the tokens inside the node. (The LR
	parser only stores this when it is larger than 25, for
	efficiency reasons.)
	*/
	NodeProp.lookAhead = new NodeProp({ perNode: true });
	/**
	This per-node prop is used to replace a given node, or part of a
	node, with another tree. This is useful to include trees from
	different languages in mixed-language parsers.
	*/
	NodeProp.mounted = new NodeProp({ perNode: true });
	/**
	A mounted tree, which can be [stored](#common.NodeProp^mounted) on
	a tree node to indicate that parts of its content are
	represented by another tree.
	*/
	class MountedTree {
		constructor(
		/**
		The inner tree.
		*/
		tree, 
		/**
		If this is null, this tree replaces the entire node (it will
		be included in the regular iteration instead of its host
		node). If not, only the given ranges are considered to be
		covered by this tree. This is used for trees that are mixed in
		a way that isn't strictly hierarchical. Such mounted trees are
		only entered by [`resolveInner`](#common.Tree.resolveInner)
		and [`enter`](#common.SyntaxNode.enter).
		*/
		overlay, 
		/**
		The parser used to create this subtree.
		*/
		parser) {
			this.tree = tree;
			this.overlay = overlay;
			this.parser = parser;
		}
		/**
		@internal
		*/
		static get(tree) {
			return tree && tree.props && tree.props[NodeProp.mounted.id];
		}
	}
	const noProps = Object.create(null);
	/**
	Each node in a syntax tree has a node type associated with it.
	*/
	class NodeType {
		/**
		@internal
		*/
		constructor(
		/**
		The name of the node type. Not necessarily unique, but if the
		grammar was written properly, different node types with the
		same name within a node set should play the same semantic
		role.
		*/
		name, 
		/**
		@internal
		*/
		props, 
		/**
		The id of this node in its set. Corresponds to the term ids
		used in the parser.
		*/
		id, 
		/**
		@internal
		*/
		flags = 0) {
			this.name = name;
			this.props = props;
			this.id = id;
			this.flags = flags;
		}
		/**
		Define a node type.
		*/
		static define(spec) {
			let props = spec.props && spec.props.length ? Object.create(null) : noProps;
			let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
				(spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
			let type = new NodeType(spec.name || "", props, spec.id, flags);
			if (spec.props)
				for (let src of spec.props) {
					if (!Array.isArray(src))
						src = src(type);
					if (src) {
						if (src[0].perNode)
							throw new RangeError("Can't store a per-node prop on a node type");
						props[src[0].id] = src[1];
					}
				}
			return type;
		}
		/**
		Retrieves a node prop for this type. Will return `undefined` if
		the prop isn't present on this node.
		*/
		prop(prop) { return this.props[prop.id]; }
		/**
		True when this is the top node of a grammar.
		*/
		get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
		/**
		True when this node is produced by a skip rule.
		*/
		get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
		/**
		Indicates whether this is an error node.
		*/
		get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
		/**
		When true, this node type doesn't correspond to a user-declared
		named node, for example because it is used to cache repetition.
		*/
		get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
		/**
		Returns true when this node's name or one of its
		[groups](#common.NodeProp^group) matches the given string.
		*/
		is(name) {
			if (typeof name == 'string') {
				if (this.name == name)
					return true;
				let group = this.prop(NodeProp.group);
				return group ? group.indexOf(name) > -1 : false;
			}
			return this.id == name;
		}
		/**
		Create a function from node types to arbitrary values by
		specifying an object whose property names are node or
		[group](#common.NodeProp^group) names. Often useful with
		[`NodeProp.add`](#common.NodeProp.add). You can put multiple
		names, separated by spaces, in a single property name to map
		multiple node names to a single value.
		*/
		static match(map) {
			let direct = Object.create(null);
			for (let prop in map)
				for (let name of prop.split(" "))
					direct[name] = map[prop];
			return (node) => {
				for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
					let found = direct[i < 0 ? node.name : groups[i]];
					if (found)
						return found;
				}
			};
		}
	}
	/**
	An empty dummy node type to use when no actual type is available.
	*/
	NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
	/**
	A node set holds a collection of node types. It is used to
	compactly represent trees by storing their type ids, rather than a
	full pointer to the type object, in a numeric array. Each parser
	[has](#lr.LRParser.nodeSet) a node set, and [tree
	buffers](#common.TreeBuffer) can only store collections of nodes
	from the same set. A set can have a maximum of 2**16 (65536) node
	types in it, so that the ids fit into 16-bit typed array slots.
	*/
	class NodeSet {
		/**
		Create a set with the given types. The `id` property of each
		type should correspond to its position within the array.
		*/
		constructor(
		/**
		The node types in this set, by id.
		*/
		types) {
			this.types = types;
			for (let i = 0; i < types.length; i++)
				if (types[i].id != i)
					throw new RangeError("Node type ids should correspond to array positions when creating a node set");
		}
		/**
		Create a copy of this set with some node properties added. The
		arguments to this method can be created with
		[`NodeProp.add`](#common.NodeProp.add).
		*/
		extend(...props) {
			let newTypes = [];
			for (let type of this.types) {
				let newProps = null;
				for (let source of props) {
					let add = source(type);
					if (add) {
						if (!newProps)
							newProps = Object.assign({}, type.props);
						newProps[add[0].id] = add[1];
					}
				}
				newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
			}
			return new NodeSet(newTypes);
		}
	}
	const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
	/**
	Options that control iteration. Can be combined with the `|`
	operator to enable multiple ones.
	*/
	exports.IterMode = void 0;
	(function (IterMode) {
		/**
		When enabled, iteration will only visit [`Tree`](#common.Tree)
		objects, not nodes packed into
		[`TreeBuffer`](#common.TreeBuffer)s.
		*/
		IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
		/**
		Enable this to make iteration include anonymous nodes (such as
		the nodes that wrap repeated grammar constructs into a balanced
		tree).
		*/
		IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
		/**
		By default, regular [mounted](#common.NodeProp^mounted) nodes
		replace their base node in iteration. Enable this to ignore them
		instead.
		*/
		IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
		/**
		This option only applies in
		[`enter`](#common.SyntaxNode.enter)-style methods. It tells the
		library to not enter mounted overlays if one covers the given
		position.
		*/
		IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
	})(exports.IterMode || (exports.IterMode = {}));
	/**
	A piece of syntax tree. There are two ways to approach these
	trees: the way they are actually stored in memory, and the
	convenient way.
	
	Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
	objects. By packing detail information into `TreeBuffer` leaf
	nodes, the representation is made a lot more memory-efficient.
	
	However, when you want to actually work with tree nodes, this
	representation is very awkward, so most client code will want to
	use the [`TreeCursor`](#common.TreeCursor) or
	[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
	a view on some part of this data structure, and can be used to
	move around to adjacent nodes.
	*/
	class Tree {
		/**
		Construct a new tree. See also [`Tree.build`](#common.Tree^build).
		*/
		constructor(
		/**
		The type of the top node.
		*/
		type, 
		/**
		This node's child nodes.
		*/
		children, 
		/**
		The positions (offsets relative to the start of this tree) of
		the children.
		*/
		positions, 
		/**
		The total length of this tree
		*/
		length, 
		/**
		Per-node [node props](#common.NodeProp) to associate with this node.
		*/
		props) {
			this.type = type;
			this.children = children;
			this.positions = positions;
			this.length = length;
			/**
			@internal
			*/
			this.props = null;
			if (props && props.length) {
				this.props = Object.create(null);
				for (let [prop, value] of props)
					this.props[typeof prop == "number" ? prop : prop.id] = value;
			}
		}
		/**
		@internal
		*/
		toString() {
			let mounted = MountedTree.get(this);
			if (mounted && !mounted.overlay)
				return mounted.tree.toString();
			let children = "";
			for (let ch of this.children) {
				let str = ch.toString();
				if (str) {
					if (children)
						children += ",";
					children += str;
				}
			}
			return !this.type.name ? children :
				(/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
					(children.length ? "(" + children + ")" : "");
		}
		/**
		Get a [tree cursor](#common.TreeCursor) positioned at the top of
		the tree. Mode can be used to [control](#common.IterMode) which
		nodes the cursor visits.
		*/
		cursor(mode = 0) {
			return new TreeCursor(this.topNode, mode);
		}
		/**
		Get a [tree cursor](#common.TreeCursor) pointing into this tree
		at the given position and side (see
		[`moveTo`](#common.TreeCursor.moveTo).
		*/
		cursorAt(pos, side = 0, mode = 0) {
			let scope = CachedNode.get(this) || this.topNode;
			let cursor = new TreeCursor(scope);
			cursor.moveTo(pos, side);
			CachedNode.set(this, cursor._tree);
			return cursor;
		}
		/**
		Get a [syntax node](#common.SyntaxNode) object for the top of the
		tree.
		*/
		get topNode() {
			return new TreeNode(this, 0, 0, null);
		}
		/**
		Get the [syntax node](#common.SyntaxNode) at the given position.
		If `side` is -1, this will move into nodes that end at the
		position. If 1, it'll move into nodes that start at the
		position. With 0, it'll only enter nodes that cover the position
		from both sides.
		
		Note that this will not enter
		[overlays](#common.MountedTree.overlay), and you often want
		[`resolveInner`](#common.Tree.resolveInner) instead.
		*/
		resolve(pos, side = 0) {
			let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
			CachedNode.set(this, node);
			return node;
		}
		/**
		Like [`resolve`](#common.Tree.resolve), but will enter
		[overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
		pointing into the innermost overlaid tree at the given position
		(with parent links going through all parent structure, including
		the host trees).
		*/
		resolveInner(pos, side = 0) {
			let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
			CachedInnerNode.set(this, node);
			return node;
		}
		/**
		In some situations, it can be useful to iterate through all
		nodes around a position, including those in overlays that don't
		directly cover the position. This method gives you an iterator
		that will produce all nodes, from small to big, around the given
		position.
		*/
		resolveStack(pos, side = 0) {
			return stackIterator(this, pos, side);
		}
		/**
		Iterate over the tree and its children, calling `enter` for any
		node that touches the `from`/`to` region (if given) before
		running over such a node's children, and `leave` (if given) when
		leaving the node. When `enter` returns `false`, that node will
		not have its children iterated over (or `leave` called).
		*/
		iterate(spec) {
			let { enter, leave, from = 0, to = this.length } = spec;
			let mode = spec.mode || 0, anon = (mode & exports.IterMode.IncludeAnonymous) > 0;
			for (let c = this.cursor(mode | exports.IterMode.IncludeAnonymous);;) {
				let entered = false;
				if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
					if (c.firstChild())
						continue;
					entered = true;
				}
				for (;;) {
					if (entered && leave && (anon || !c.type.isAnonymous))
						leave(c);
					if (c.nextSibling())
						break;
					if (!c.parent())
						return;
					entered = true;
				}
			}
		}
		/**
		Get the value of the given [node prop](#common.NodeProp) for this
		node. Works with both per-node and per-type props.
		*/
		prop(prop) {
			return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
		}
		/**
		Returns the node's [per-node props](#common.NodeProp.perNode) in a
		format that can be passed to the [`Tree`](#common.Tree)
		constructor.
		*/
		get propValues() {
			let result = [];
			if (this.props)
				for (let id in this.props)
					result.push([+id, this.props[id]]);
			return result;
		}
		/**
		Balance the direct children of this tree, producing a copy of
		which may have children grouped into subtrees with type
		[`NodeType.none`](#common.NodeType^none).
		*/
		balance(config = {}) {
			return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
				balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
		}
		/**
		Build a tree from a postfix-ordered buffer of node information,
		or a cursor over such a buffer.
		*/
		static build(data) { return buildTree(data); }
	}
	/**
	The empty tree
	*/
	Tree.empty = new Tree(NodeType.none, [], [], 0);
	class FlatBufferCursor {
		constructor(buffer, index) {
			this.buffer = buffer;
			this.index = index;
		}
		get id() { return this.buffer[this.index - 4]; }
		get start() { return this.buffer[this.index - 3]; }
		get end() { return this.buffer[this.index - 2]; }
		get size() { return this.buffer[this.index - 1]; }
		get pos() { return this.index; }
		next() { this.index -= 4; }
		fork() { return new FlatBufferCursor(this.buffer, this.index); }
	}
	/**
	Tree buffers contain (type, start, end, endIndex) quads for each
	node. In such a buffer, nodes are stored in prefix order (parents
	before children, with the endIndex of the parent indicating which
	children belong to it).
	*/
	class TreeBuffer {
		/**
		Create a tree buffer.
		*/
		constructor(
		/**
		The buffer's content.
		*/
		buffer, 
		/**
		The total length of the group of nodes in the buffer.
		*/
		length, 
		/**
		The node set used in this buffer.
		*/
		set) {
			this.buffer = buffer;
			this.length = length;
			this.set = set;
		}
		/**
		@internal
		*/
		get type() { return NodeType.none; }
		/**
		@internal
		*/
		toString() {
			let result = [];
			for (let index = 0; index < this.buffer.length;) {
				result.push(this.childString(index));
				index = this.buffer[index + 3];
			}
			return result.join(",");
		}
		/**
		@internal
		*/
		childString(index) {
			let id = this.buffer[index], endIndex = this.buffer[index + 3];
			let type = this.set.types[id], result = type.name;
			if (/\W/.test(result) && !type.isError)
				result = JSON.stringify(result);
			index += 4;
			if (endIndex == index)
				return result;
			let children = [];
			while (index < endIndex) {
				children.push(this.childString(index));
				index = this.buffer[index + 3];
			}
			return result + "(" + children.join(",") + ")";
		}
		/**
		@internal
		*/
		findChild(startIndex, endIndex, dir, pos, side) {
			let { buffer } = this, pick = -1;
			for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
				if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
					pick = i;
					if (dir > 0)
						break;
				}
			}
			return pick;
		}
		/**
		@internal
		*/
		slice(startI, endI, from) {
			let b = this.buffer;
			let copy = new Uint16Array(endI - startI), len = 0;
			for (let i = startI, j = 0; i < endI;) {
				copy[j++] = b[i++];
				copy[j++] = b[i++] - from;
				let to = copy[j++] = b[i++] - from;
				copy[j++] = b[i++] - startI;
				len = Math.max(len, to);
			}
			return new TreeBuffer(copy, len, this.set);
		}
	}
	function checkSide(side, pos, from, to) {
		switch (side) {
			case -2 /* Side.Before */: return from < pos;
			case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
			case 0 /* Side.Around */: return from < pos && to > pos;
			case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
			case 2 /* Side.After */: return to > pos;
			case 4 /* Side.DontCare */: return true;
		}
	}
	function resolveNode(node, pos, side, overlays) {
		var _a;
		// Move up to a node that actually holds the position, if possible
		while (node.from == node.to ||
			(side < 1 ? node.from >= pos : node.from > pos) ||
			(side > -1 ? node.to <= pos : node.to < pos)) {
			let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
			if (!parent)
				return node;
			node = parent;
		}
		let mode = overlays ? 0 : exports.IterMode.IgnoreOverlays;
		// Must go up out of overlays when those do not overlap with pos
		if (overlays)
			for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
				if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
					node = parent;
			}
		for (;;) {
			let inner = node.enter(pos, side, mode);
			if (!inner)
				return node;
			node = inner;
		}
	}
	class BaseNode {
		cursor(mode = 0) { return new TreeCursor(this, mode); }
		getChild(type, before = null, after = null) {
			let r = getChildren(this, type, before, after);
			return r.length ? r[0] : null;
		}
		getChildren(type, before = null, after = null) {
			return getChildren(this, type, before, after);
		}
		resolve(pos, side = 0) {
			return resolveNode(this, pos, side, false);
		}
		resolveInner(pos, side = 0) {
			return resolveNode(this, pos, side, true);
		}
		matchContext(context) {
			return matchNodeContext(this, context);
		}
		enterUnfinishedNodesBefore(pos) {
			let scan = this.childBefore(pos), node = this;
			while (scan) {
				let last = scan.lastChild;
				if (!last || last.to != scan.to)
					break;
				if (last.type.isError && last.from == last.to) {
					node = scan;
					scan = last.prevSibling;
				}
				else {
					scan = last;
				}
			}
			return node;
		}
		get node() { return this; }
		get next() { return this.parent; }
	}
	class TreeNode extends BaseNode {
		constructor(_tree, from, 
		// Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
		index, _parent) {
			super();
			this._tree = _tree;
			this.from = from;
			this.index = index;
			this._parent = _parent;
		}
		get type() { return this._tree.type; }
		get name() { return this._tree.type.name; }
		get to() { return this.from + this._tree.length; }
		nextChild(i, dir, pos, side, mode = 0) {
			for (let parent = this;;) {
				for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
					let next = children[i], start = positions[i] + parent.from;
					if (!checkSide(side, pos, start, start + next.length))
						continue;
					if (next instanceof TreeBuffer) {
						if (mode & exports.IterMode.ExcludeBuffers)
							continue;
						let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
						if (index > -1)
							return new BufferNode(new BufferContext(parent, next, i, start), null, index);
					}
					else if ((mode & exports.IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
						let mounted;
						if (!(mode & exports.IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
							return new TreeNode(mounted.tree, start, i, parent);
						let inner = new TreeNode(next, start, i, parent);
						return (mode & exports.IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
							: inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
					}
				}
				if ((mode & exports.IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
					return null;
				if (parent.index >= 0)
					i = parent.index + dir;
				else
					i = dir < 0 ? -1 : parent._parent._tree.children.length;
				parent = parent._parent;
				if (!parent)
					return null;
			}
		}
		get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
		get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
		childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
		childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
		enter(pos, side, mode = 0) {
			let mounted;
			if (!(mode & exports.IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
				let rPos = pos - this.from;
				for (let { from, to } of mounted.overlay) {
					if ((side > 0 ? from <= rPos : from < rPos) &&
						(side < 0 ? to >= rPos : to > rPos))
						return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
				}
			}
			return this.nextChild(0, 1, pos, side, mode);
		}
		nextSignificantParent() {
			let val = this;
			while (val.type.isAnonymous && val._parent)
				val = val._parent;
			return val;
		}
		get parent() {
			return this._parent ? this._parent.nextSignificantParent() : null;
		}
		get nextSibling() {
			return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
		}
		get prevSibling() {
			return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
		}
		get tree() { return this._tree; }
		toTree() { return this._tree; }
		/**
		@internal
		*/
		toString() { return this._tree.toString(); }
	}
	function getChildren(node, type, before, after) {
		let cur = node.cursor(), result = [];
		if (!cur.firstChild())
			return result;
		if (before != null)
			while (!cur.type.is(before))
				if (!cur.nextSibling())
					return result;
		for (;;) {
			if (after != null && cur.type.is(after))
				return result;
			if (cur.type.is(type))
				result.push(cur.node);
			if (!cur.nextSibling())
				return after == null ? result : [];
		}
	}
	function matchNodeContext(node, context, i = context.length - 1) {
		for (let p = node.parent; i >= 0; p = p.parent) {
			if (!p)
				return false;
			if (!p.type.isAnonymous) {
				if (context[i] && context[i] != p.name)
					return false;
				i--;
			}
		}
		return true;
	}
	class BufferContext {
		constructor(parent, buffer, index, start) {
			this.parent = parent;
			this.buffer = buffer;
			this.index = index;
			this.start = start;
		}
	}
	class BufferNode extends BaseNode {
		get name() { return this.type.name; }
		get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
		get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
		constructor(context, _parent, index) {
			super();
			this.context = context;
			this._parent = _parent;
			this.index = index;
			this.type = context.buffer.set.types[context.buffer.buffer[index]];
		}
		child(dir, pos, side) {
			let { buffer } = this.context;
			let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
			return index < 0 ? null : new BufferNode(this.context, this, index);
		}
		get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
		get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
		childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
		childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
		enter(pos, side, mode = 0) {
			if (mode & exports.IterMode.ExcludeBuffers)
				return null;
			let { buffer } = this.context;
			let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
			return index < 0 ? null : new BufferNode(this.context, this, index);
		}
		get parent() {
			return this._parent || this.context.parent.nextSignificantParent();
		}
		externalSibling(dir) {
			return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
		}
		get nextSibling() {
			let { buffer } = this.context;
			let after = buffer.buffer[this.index + 3];
			if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
				return new BufferNode(this.context, this._parent, after);
			return this.externalSibling(1);
		}
		get prevSibling() {
			let { buffer } = this.context;
			let parentStart = this._parent ? this._parent.index + 4 : 0;
			if (this.index == parentStart)
				return this.externalSibling(-1);
			return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
		}
		get tree() { return null; }
		toTree() {
			let children = [], positions = [];
			let { buffer } = this.context;
			let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
			if (endI > startI) {
				let from = buffer.buffer[this.index + 1];
				children.push(buffer.slice(startI, endI, from));
				positions.push(0);
			}
			return new Tree(this.type, children, positions, this.to - this.from);
		}
		/**
		@internal
		*/
		toString() { return this.context.buffer.childString(this.index); }
	}
	function iterStack(heads) {
		if (!heads.length)
			return null;
		let pick = 0, picked = heads[0];
		for (let i = 1; i < heads.length; i++) {
			let node = heads[i];
			if (node.from > picked.from || node.to < picked.to) {
				picked = node;
				pick = i;
			}
		}
		let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
		let newHeads = heads.slice();
		if (next)
			newHeads[pick] = next;
		else
			newHeads.splice(pick, 1);
		return new StackIterator(newHeads, picked);
	}
	class StackIterator {
		constructor(heads, node) {
			this.heads = heads;
			this.node = node;
		}
		get next() { return iterStack(this.heads); }
	}
	function stackIterator(tree, pos, side) {
		let inner = tree.resolveInner(pos, side), layers = null;
		for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
			if (scan.index < 0) { // This is an overlay root
				let parent = scan.parent;
				(layers || (layers = [inner])).push(parent.resolve(pos, side));
				scan = parent;
			}
			else {
				let mount = MountedTree.get(scan.tree);
				// Relevant overlay branching off
				if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
					let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
					(layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
				}
			}
		}
		return layers ? iterStack(layers) : inner;
	}
	/**
	A tree cursor object focuses on a given node in a syntax tree, and
	allows you to move to adjacent nodes.
	*/
	class TreeCursor {
		/**
		Shorthand for `.type.name`.
		*/
		get name() { return this.type.name; }
		/**
		@internal
		*/
		constructor(node, 
		/**
		@internal
		*/
		mode = 0) {
			this.mode = mode;
			/**
			@internal
			*/
			this.buffer = null;
			this.stack = [];
			/**
			@internal
			*/
			this.index = 0;
			this.bufferNode = null;
			if (node instanceof TreeNode) {
				this.yieldNode(node);
			}
			else {
				this._tree = node.context.parent;
				this.buffer = node.context;
				for (let n = node._parent; n; n = n._parent)
					this.stack.unshift(n.index);
				this.bufferNode = node;
				this.yieldBuf(node.index);
			}
		}
		yieldNode(node) {
			if (!node)
				return false;
			this._tree = node;
			this.type = node.type;
			this.from = node.from;
			this.to = node.to;
			return true;
		}
		yieldBuf(index, type) {
			this.index = index;
			let { start, buffer } = this.buffer;
			this.type = type || buffer.set.types[buffer.buffer[index]];
			this.from = start + buffer.buffer[index + 1];
			this.to = start + buffer.buffer[index + 2];
			return true;
		}
		/**
		@internal
		*/
		yield(node) {
			if (!node)
				return false;
			if (node instanceof TreeNode) {
				this.buffer = null;
				return this.yieldNode(node);
			}
			this.buffer = node.context;
			return this.yieldBuf(node.index, node.type);
		}
		/**
		@internal
		*/
		toString() {
			return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
		}
		/**
		@internal
		*/
		enterChild(dir, pos, side) {
			if (!this.buffer)
				return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
			let { buffer } = this.buffer;
			let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
			if (index < 0)
				return false;
			this.stack.push(this.index);
			return this.yieldBuf(index);
		}
		/**
		Move the cursor to this node's first child. When this returns
		false, the node has no child, and the cursor has not been moved.
		*/
		firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
		/**
		Move the cursor to this node's last child.
		*/
		lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
		/**
		Move the cursor to the first child that ends after `pos`.
		*/
		childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
		/**
		Move to the last child that starts before `pos`.
		*/
		childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
		/**
		Move the cursor to the child around `pos`. If side is -1 the
		child may end at that position, when 1 it may start there. This
		will also enter [overlaid](#common.MountedTree.overlay)
		[mounted](#common.NodeProp^mounted) trees unless `overlays` is
		set to false.
		*/
		enter(pos, side, mode = this.mode) {
			if (!this.buffer)
				return this.yield(this._tree.enter(pos, side, mode));
			return mode & exports.IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
		}
		/**
		Move to the node's parent node, if this isn't the top node.
		*/
		parent() {
			if (!this.buffer)
				return this.yieldNode((this.mode & exports.IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
			if (this.stack.length)
				return this.yieldBuf(this.stack.pop());
			let parent = (this.mode & exports.IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
			this.buffer = null;
			return this.yieldNode(parent);
		}
		/**
		@internal
		*/
		sibling(dir) {
			if (!this.buffer)
				return !this._tree._parent ? false
					: this.yield(this._tree.index < 0 ? null
						: this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
			let { buffer } = this.buffer, d = this.stack.length - 1;
			if (dir < 0) {
				let parentStart = d < 0 ? 0 : this.stack[d] + 4;
				if (this.index != parentStart)
					return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
			}
			else {
				let after = buffer.buffer[this.index + 3];
				if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
					return this.yieldBuf(after);
			}
			return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
		}
		/**
		Move to this node's next sibling, if any.
		*/
		nextSibling() { return this.sibling(1); }
		/**
		Move to this node's previous sibling, if any.
		*/
		prevSibling() { return this.sibling(-1); }
		atLastNode(dir) {
			let index, parent, { buffer } = this;
			if (buffer) {
				if (dir > 0) {
					if (this.index < buffer.buffer.buffer.length)
						return false;
				}
				else {
					for (let i = 0; i < this.index; i++)
						if (buffer.buffer.buffer[i + 3] < this.index)
							return false;
				}
				({ index, parent } = buffer);
			}
			else {
				({ index, _parent: parent } = this._tree);
			}
			for (; parent; { index, _parent: parent } = parent) {
				if (index > -1)
					for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
						let child = parent._tree.children[i];
						if ((this.mode & exports.IterMode.IncludeAnonymous) ||
							child instanceof TreeBuffer ||
							!child.type.isAnonymous ||
							hasChild(child))
							return false;
					}
			}
			return true;
		}
		move(dir, enter) {
			if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
				return true;
			for (;;) {
				if (this.sibling(dir))
					return true;
				if (this.atLastNode(dir) || !this.parent())
					return false;
			}
		}
		/**
		Move to the next node in a
		[pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
		traversal, going from a node to its first child or, if the
		current node is empty or `enter` is false, its next sibling or
		the next sibling of the first parent node that has one.
		*/
		next(enter = true) { return this.move(1, enter); }
		/**
		Move to the next node in a last-to-first pre-order traveral. A
		node is followed by its last child or, if it has none, its
		previous sibling or the previous sibling of the first parent
		node that has one.
		*/
		prev(enter = true) { return this.move(-1, enter); }
		/**
		Move the cursor to the innermost node that covers `pos`. If
		`side` is -1, it will enter nodes that end at `pos`. If it is 1,
		it will enter nodes that start at `pos`.
		*/
		moveTo(pos, side = 0) {
			// Move up to a node that actually holds the position, if possible
			while (this.from == this.to ||
				(side < 1 ? this.from >= pos : this.from > pos) ||
				(side > -1 ? this.to <= pos : this.to < pos))
				if (!this.parent())
					break;
			// Then scan down into child nodes as far as possible
			while (this.enterChild(1, pos, side)) { }
			return this;
		}
		/**
		Get a [syntax node](#common.SyntaxNode) at the cursor's current
		position.
		*/
		get node() {
			if (!this.buffer)
				return this._tree;
			let cache = this.bufferNode, result = null, depth = 0;
			if (cache && cache.context == this.buffer) {
				scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
					for (let c = cache; c; c = c._parent)
						if (c.index == index) {
							if (index == this.index)
								return c;
							result = c;
							depth = d + 1;
							break scan;
						}
					index = this.stack[--d];
				}
			}
			for (let i = depth; i < this.stack.length; i++)
				result = new BufferNode(this.buffer, result, this.stack[i]);
			return this.bufferNode = new BufferNode(this.buffer, result, this.index);
		}
		/**
		Get the [tree](#common.Tree) that represents the current node, if
		any. Will return null when the node is in a [tree
		buffer](#common.TreeBuffer).
		*/
		get tree() {
			return this.buffer ? null : this._tree._tree;
		}
		/**
		Iterate over the current node and all its descendants, calling
		`enter` when entering a node and `leave`, if given, when leaving
		one. When `enter` returns `false`, any children of that node are
		skipped, and `leave` isn't called for it.
		*/
		iterate(enter, leave) {
			for (let depth = 0;;) {
				let mustLeave = false;
				if (this.type.isAnonymous || enter(this) !== false) {
					if (this.firstChild()) {
						depth++;
						continue;
					}
					if (!this.type.isAnonymous)
						mustLeave = true;
				}
				for (;;) {
					if (mustLeave && leave)
						leave(this);
					mustLeave = this.type.isAnonymous;
					if (this.nextSibling())
						break;
					if (!depth)
						return;
					this.parent();
					depth--;
					mustLeave = true;
				}
			}
		}
		/**
		Test whether the current node matches a given context—a sequence
		of direct parent node names. Empty strings in the context array
		are treated as wildcards.
		*/
		matchContext(context) {
			if (!this.buffer)
				return matchNodeContext(this.node, context);
			let { buffer } = this.buffer, { types } = buffer.set;
			for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
				if (d < 0)
					return matchNodeContext(this.node, context, i);
				let type = types[buffer.buffer[this.stack[d]]];
				if (!type.isAnonymous) {
					if (context[i] && context[i] != type.name)
						return false;
					i--;
				}
			}
			return true;
		}
	}
	function hasChild(tree) {
		return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
	}
	function buildTree(data) {
		var _a;
		let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
		let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
		let types = nodeSet.types;
		let contextHash = 0, lookAhead = 0;
		function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
			let { id, start, end, size } = cursor;
			let lookAheadAtStart = lookAhead;
			while (size < 0) {
				cursor.next();
				if (size == -1 /* SpecialRecord.Reuse */) {
					let node = reused[id];
					children.push(node);
					positions.push(start - parentStart);
					return;
				}
				else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
					contextHash = id;
					return;
				}
				else if (size == -4 /* SpecialRecord.LookAhead */) {
					lookAhead = id;
					return;
				}
				else {
					throw new RangeError(`Unrecognized record size: ${size}`);
				}
			}
			let type = types[id], node, buffer;
			let startPos = start - parentStart;
			if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
				// Small enough for a buffer, and no reused nodes inside
				let data = new Uint16Array(buffer.size - buffer.skip);
				let endPos = cursor.pos - buffer.size, index = data.length;
				while (cursor.pos > endPos)
					index = copyToBuffer(buffer.start, data, index);
				node = new TreeBuffer(data, end - buffer.start, nodeSet);
				startPos = buffer.start - parentStart;
			}
			else { // Make it a node
				let endPos = cursor.pos - size;
				cursor.next();
				let localChildren = [], localPositions = [];
				let localInRepeat = id >= minRepeatType ? id : -1;
				let lastGroup = 0, lastEnd = end;
				while (cursor.pos > endPos) {
					if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
						if (cursor.end <= lastEnd - maxBufferLength) {
							makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
							lastGroup = localChildren.length;
							lastEnd = cursor.end;
						}
						cursor.next();
					}
					else if (depth > 2500 /* CutOff.Depth */) {
						takeFlatNode(start, endPos, localChildren, localPositions);
					}
					else {
						takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
					}
				}
				if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
					makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
				localChildren.reverse();
				localPositions.reverse();
				if (localInRepeat > -1 && lastGroup > 0) {
					let make = makeBalanced(type);
					node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
				}
				else {
					node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
				}
			}
			children.push(node);
			positions.push(startPos);
		}
		function takeFlatNode(parentStart, minPos, children, positions) {
			let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
			let nodeCount = 0, stopAt = -1;
			while (cursor.pos > minPos) {
				let { id, start, end, size } = cursor;
				if (size > 4) { // Not a leaf
					cursor.next();
				}
				else if (stopAt > -1 && start < stopAt) {
					break;
				}
				else {
					if (stopAt < 0)
						stopAt = end - maxBufferLength;
					nodes.push(id, start, end);
					nodeCount++;
					cursor.next();
				}
			}
			if (nodeCount) {
				let buffer = new Uint16Array(nodeCount * 4);
				let start = nodes[nodes.length - 2];
				for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
					buffer[j++] = nodes[i];
					buffer[j++] = nodes[i + 1] - start;
					buffer[j++] = nodes[i + 2] - start;
					buffer[j++] = j;
				}
				children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
				positions.push(start - parentStart);
			}
		}
		function makeBalanced(type) {
			return (children, positions, length) => {
				let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
				if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
					if (!lastI && last.type == type && last.length == length)
						return last;
					if (lookAheadProp = last.prop(NodeProp.lookAhead))
						lookAhead = positions[lastI] + last.length + lookAheadProp;
				}
				return makeTree(type, children, positions, length, lookAhead);
			};
		}
		function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
			let localChildren = [], localPositions = [];
			while (children.length > i) {
				localChildren.push(children.pop());
				localPositions.push(positions.pop() + base - from);
			}
			children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
			positions.push(from - base);
		}
		function makeTree(type, children, positions, length, lookAhead = 0, props) {
			if (contextHash) {
				let pair = [NodeProp.contextHash, contextHash];
				props = props ? [pair].concat(props) : [pair];
			}
			if (lookAhead > 25) {
				let pair = [NodeProp.lookAhead, lookAhead];
				props = props ? [pair].concat(props) : [pair];
			}
			return new Tree(type, children, positions, length, props);
		}
		function findBufferSize(maxSize, inRepeat) {
			// Scan through the buffer to find previous siblings that fit
			// together in a TreeBuffer, and don't contain any reused nodes
			// (which can't be stored in a buffer).
			// If `inRepeat` is > -1, ignore node boundaries of that type for
			// nesting, but make sure the end falls either at the start
			// (`maxSize`) or before such a node.
			let fork = cursor.fork();
			let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
			let result = { size: 0, start: 0, skip: 0 };
			scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
				let nodeSize = fork.size;
				// Pretend nested repeat nodes of the same type don't exist
				if (fork.id == inRepeat && nodeSize >= 0) {
					// Except that we store the current state as a valid return
					// value.
					result.size = size;
					result.start = start;
					result.skip = skip;
					skip += 4;
					size += 4;
					fork.next();
					continue;
				}
				let startPos = fork.pos - nodeSize;
				if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
					break;
				let localSkipped = fork.id >= minRepeatType ? 4 : 0;
				let nodeStart = fork.start;
				fork.next();
				while (fork.pos > startPos) {
					if (fork.size < 0) {
						if (fork.size == -3 /* SpecialRecord.ContextChange */)
							localSkipped += 4;
						else
							break scan;
					}
					else if (fork.id >= minRepeatType) {
						localSkipped += 4;
					}
					fork.next();
				}
				start = nodeStart;
				size += nodeSize;
				skip += localSkipped;
			}
			if (inRepeat < 0 || size == maxSize) {
				result.size = size;
				result.start = start;
				result.skip = skip;
			}
			return result.size > 4 ? result : undefined;
		}
		function copyToBuffer(bufferStart, buffer, index) {
			let { id, start, end, size } = cursor;
			cursor.next();
			if (size >= 0 && id < minRepeatType) {
				let startIndex = index;
				if (size > 4) {
					let endPos = cursor.pos - (size - 4);
					while (cursor.pos > endPos)
						index = copyToBuffer(bufferStart, buffer, index);
				}
				buffer[--index] = startIndex;
				buffer[--index] = end - bufferStart;
				buffer[--index] = start - bufferStart;
				buffer[--index] = id;
			}
			else if (size == -3 /* SpecialRecord.ContextChange */) {
				contextHash = id;
			}
			else if (size == -4 /* SpecialRecord.LookAhead */) {
				lookAhead = id;
			}
			return index;
		}
		let children = [], positions = [];
		while (cursor.pos > 0)
			takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
		let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
		return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
	}
	const nodeSizeCache = new WeakMap;
	function nodeSize(balanceType, node) {
		if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
			return 1;
		let size = nodeSizeCache.get(node);
		if (size == null) {
			size = 1;
			for (let child of node.children) {
				if (child.type != balanceType || !(child instanceof Tree)) {
					size = 1;
					break;
				}
				size += nodeSize(balanceType, child);
			}
			nodeSizeCache.set(node, size);
		}
		return size;
	}
	function balanceRange(
	// The type the balanced tree's inner nodes.
	balanceType, 
	// The direct children and their positions
	children, positions, 
	// The index range in children/positions to use
	from, to, 
	// The start position of the nodes, relative to their parent.
	start, 
	// Length of the outer node
	length, 
	// Function to build the top node of the balanced tree
	mkTop, 
	// Function to build internal nodes for the balanced tree
	mkTree) {
		let total = 0;
		for (let i = from; i < to; i++)
			total += nodeSize(balanceType, children[i]);
		let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
		let localChildren = [], localPositions = [];
		function divide(children, positions, from, to, offset) {
			for (let i = from; i < to;) {
				let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
				i++;
				for (; i < to; i++) {
					let nextSize = nodeSize(balanceType, children[i]);
					if (groupSize + nextSize >= maxChild)
						break;
					groupSize += nextSize;
				}
				if (i == groupFrom + 1) {
					if (groupSize > maxChild) {
						let only = children[groupFrom]; // Only trees can have a size > 1
						divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
						continue;
					}
					localChildren.push(children[groupFrom]);
				}
				else {
					let length = positions[i - 1] + children[i - 1].length - groupStart;
					localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
				}
				localPositions.push(groupStart + offset - start);
			}
		}
		divide(children, positions, from, to, 0);
		return (mkTop || mkTree)(localChildren, localPositions, length);
	}
	/**
	Provides a way to associate values with pieces of trees. As long
	as that part of the tree is reused, the associated values can be
	retrieved from an updated tree.
	*/
	class NodeWeakMap {
		constructor() {
			this.map = new WeakMap();
		}
		setBuffer(buffer, index, value) {
			let inner = this.map.get(buffer);
			if (!inner)
				this.map.set(buffer, inner = new Map);
			inner.set(index, value);
		}
		getBuffer(buffer, index) {
			let inner = this.map.get(buffer);
			return inner && inner.get(index);
		}
		/**
		Set the value for this syntax node.
		*/
		set(node, value) {
			if (node instanceof BufferNode)
				this.setBuffer(node.context.buffer, node.index, value);
			else if (node instanceof TreeNode)
				this.map.set(node.tree, value);
		}
		/**
		Retrieve value for this syntax node, if it exists in the map.
		*/
		get(node) {
			return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
				: node instanceof TreeNode ? this.map.get(node.tree) : undefined;
		}
		/**
		Set the value for the node that a cursor currently points to.
		*/
		cursorSet(cursor, value) {
			if (cursor.buffer)
				this.setBuffer(cursor.buffer.buffer, cursor.index, value);
			else
				this.map.set(cursor.tree, value);
		}
		/**
		Retrieve the value for the node that a cursor currently points
		to.
		*/
		cursorGet(cursor) {
			return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
		}
	}
	
	/**
	Tree fragments are used during [incremental
	parsing](#common.Parser.startParse) to track parts of old trees
	that can be reused in a new parse. An array of fragments is used
	to track regions of an old tree whose nodes might be reused in new
	parses. Use the static
	[`applyChanges`](#common.TreeFragment^applyChanges) method to
	update fragments for document changes.
	*/
	class TreeFragment {
		/**
		Construct a tree fragment. You'll usually want to use
		[`addTree`](#common.TreeFragment^addTree) and
		[`applyChanges`](#common.TreeFragment^applyChanges) instead of
		calling this directly.
		*/
		constructor(
		/**
		The start of the unchanged range pointed to by this fragment.
		This refers to an offset in the _updated_ document (as opposed
		to the original tree).
		*/
		from, 
		/**
		The end of the unchanged range.
		*/
		to, 
		/**
		The tree that this fragment is based on.
		*/
		tree, 
		/**
		The offset between the fragment's tree and the document that
		this fragment can be used against. Add this when going from
		document to tree positions, subtract it to go from tree to
		document positions.
		*/
		offset, openStart = false, openEnd = false) {
			this.from = from;
			this.to = to;
			this.tree = tree;
			this.offset = offset;
			this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
		}
		/**
		Whether the start of the fragment represents the start of a
		parse, or the end of a change. (In the second case, it may not
		be safe to reuse some nodes at the start, depending on the
		parsing algorithm.)
		*/
		get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
		/**
		Whether the end of the fragment represents the end of a
		full-document parse, or the start of a change.
		*/
		get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
		/**
		Create a set of fragments from a freshly parsed tree, or update
		an existing set of fragments by replacing the ones that overlap
		with a tree with content from the new tree. When `partial` is
		true, the parse is treated as incomplete, and the resulting
		fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
		true.
		*/
		static addTree(tree, fragments = [], partial = false) {
			let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
			for (let f of fragments)
				if (f.to > tree.length)
					result.push(f);
			return result;
		}
		/**
		Apply a set of edits to an array of fragments, removing or
		splitting fragments as necessary to remove edited ranges, and
		adjusting offsets for fragments that moved.
		*/
		static applyChanges(fragments, changes, minGap = 128) {
			if (!changes.length)
				return fragments;
			let result = [];
			let fI = 1, nextF = fragments.length ? fragments[0] : null;
			for (let cI = 0, pos = 0, off = 0;; cI++) {
				let nextC = cI < changes.length ? changes[cI] : null;
				let nextPos = nextC ? nextC.fromA : 1e9;
				if (nextPos - pos >= minGap)
					while (nextF && nextF.from < nextPos) {
						let cut = nextF;
						if (pos >= cut.from || nextPos <= cut.to || off) {
							let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
							cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
						}
						if (cut)
							result.push(cut);
						if (nextF.to > nextPos)
							break;
						nextF = fI < fragments.length ? fragments[fI++] : null;
					}
				if (!nextC)
					break;
				pos = nextC.toA;
				off = nextC.toA - nextC.toB;
			}
			return result;
		}
	}
	/**
	A superclass that parsers should extend.
	*/
	class Parser {
		/**
		Start a parse, returning a [partial parse](#common.PartialParse)
		object. [`fragments`](#common.TreeFragment) can be passed in to
		make the parse incremental.
		
		By default, the entire input is parsed. You can pass `ranges`,
		which should be a sorted array of non-empty, non-overlapping
		ranges, to parse only those ranges. The tree returned in that
		case will start at `ranges[0].from`.
		*/
		startParse(input, fragments, ranges) {
			if (typeof input == "string")
				input = new StringInput(input);
			ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
			return this.createParse(input, fragments || [], ranges);
		}
		/**
		Run a full parse, returning the resulting tree.
		*/
		parse(input, fragments, ranges) {
			let parse = this.startParse(input, fragments, ranges);
			for (;;) {
				let done = parse.advance();
				if (done)
					return done;
			}
		}
	}
	class StringInput {
		constructor(string) {
			this.string = string;
		}
		get length() { return this.string.length; }
		chunk(from) { return this.string.slice(from); }
		get lineChunks() { return false; }
		read(from, to) { return this.string.slice(from, to); }
	}
	
	/**
	Create a parse wrapper that, after the inner parse completes,
	scans its tree for mixed language regions with the `nest`
	function, runs the resulting [inner parses](#common.NestedParse),
	and then [mounts](#common.NodeProp^mounted) their results onto the
	tree.
	*/
	function parseMixed(nest) {
		return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
	}
	class InnerParse {
		constructor(parser, parse, overlay, target, from) {
			this.parser = parser;
			this.parse = parse;
			this.overlay = overlay;
			this.target = target;
			this.from = from;
		}
	}
	function checkRanges(ranges) {
		if (!ranges.length || ranges.some(r => r.from >= r.to))
			throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
	}
	class ActiveOverlay {
		constructor(parser, predicate, mounts, index, start, target, prev) {
			this.parser = parser;
			this.predicate = predicate;
			this.mounts = mounts;
			this.index = index;
			this.start = start;
			this.target = target;
			this.prev = prev;
			this.depth = 0;
			this.ranges = [];
		}
	}
	const stoppedInner = new NodeProp({ perNode: true });
	class MixedParse {
		constructor(base, nest, input, fragments, ranges) {
			this.nest = nest;
			this.input = input;
			this.fragments = fragments;
			this.ranges = ranges;
			this.inner = [];
			this.innerDone = 0;
			this.baseTree = null;
			this.stoppedAt = null;
			this.baseParse = base;
		}
		advance() {
			if (this.baseParse) {
				let done = this.baseParse.advance();
				if (!done)
					return null;
				this.baseParse = null;
				this.baseTree = done;
				this.startInner();
				if (this.stoppedAt != null)
					for (let inner of this.inner)
						inner.parse.stopAt(this.stoppedAt);
			}
			if (this.innerDone == this.inner.length) {
				let result = this.baseTree;
				if (this.stoppedAt != null)
					result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
				return result;
			}
			let inner = this.inner[this.innerDone], done = inner.parse.advance();
			if (done) {
				this.innerDone++;
				// This is a somewhat dodgy but super helpful hack where we
				// patch up nodes created by the inner parse (and thus
				// presumably not aliased anywhere else) to hold the information
				// about the inner parse.
				let props = Object.assign(Object.create(null), inner.target.props);
				props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
				inner.target.props = props;
			}
			return null;
		}
		get parsedPos() {
			if (this.baseParse)
				return 0;
			let pos = this.input.length;
			for (let i = this.innerDone; i < this.inner.length; i++) {
				if (this.inner[i].from < pos)
					pos = Math.min(pos, this.inner[i].parse.parsedPos);
			}
			return pos;
		}
		stopAt(pos) {
			this.stoppedAt = pos;
			if (this.baseParse)
				this.baseParse.stopAt(pos);
			else
				for (let i = this.innerDone; i < this.inner.length; i++)
					this.inner[i].parse.stopAt(pos);
		}
		startInner() {
			let fragmentCursor = new FragmentCursor(this.fragments);
			let overlay = null;
			let covered = null;
			let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), exports.IterMode.IncludeAnonymous | exports.IterMode.IgnoreMounts);
			scan: for (let nest, isCovered;;) {
				let enter = true, range;
				if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {
					enter = false;
				}
				else if (fragmentCursor.hasNode(cursor)) {
					if (overlay) {
						let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
						if (match)
							for (let r of match.mount.overlay) {
								let from = r.from + match.pos, to = r.to + match.pos;
								if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
									overlay.ranges.push({ from, to });
							}
					}
					enter = false;
				}
				else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
					enter = isCovered != 2 /* Cover.Full */;
				}
				else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&
					(cursor.from < cursor.to || !nest.overlay)) {
					if (!cursor.tree)
						materialize(cursor);
					let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
					if (typeof nest.overlay == "function") {
						overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
					}
					else {
						let ranges = punchRanges(this.ranges, nest.overlay ||
							(cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));
						if (ranges.length)
							checkRanges(ranges);
						if (ranges.length || !nest.overlay)
							this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)
								: nest.parser.startParse(""), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));
						if (!nest.overlay)
							enter = false;
						else if (ranges.length)
							covered = { ranges, depth: 0, prev: covered };
					}
				}
				else if (overlay && (range = overlay.predicate(cursor))) {
					if (range === true)
						range = new Range(cursor.from, cursor.to);
					if (range.from < range.to)
						overlay.ranges.push(range);
				}
				if (enter && cursor.firstChild()) {
					if (overlay)
						overlay.depth++;
					if (covered)
						covered.depth++;
				}
				else {
					for (;;) {
						if (cursor.nextSibling())
							break;
						if (!cursor.parent())
							break scan;
						if (overlay && !--overlay.depth) {
							let ranges = punchRanges(this.ranges, overlay.ranges);
							if (ranges.length) {
								checkRanges(ranges);
								this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));
							}
							overlay = overlay.prev;
						}
						if (covered && !--covered.depth)
							covered = covered.prev;
					}
				}
			}
		}
	}
	function checkCover(covered, from, to) {
		for (let range of covered) {
			if (range.from >= to)
				break;
			if (range.to > from)
				return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
		}
		return 0 /* Cover.None */;
	}
	// Take a piece of buffer and convert it into a stand-alone
	// TreeBuffer.
	function sliceBuf(buf, startI, endI, nodes, positions, off) {
		if (startI < endI) {
			let from = buf.buffer[startI + 1];
			nodes.push(buf.slice(startI, endI, from));
			positions.push(from - off);
		}
	}
	// This function takes a node that's in a buffer, and converts it, and
	// its parent buffer nodes, into a Tree. This is again acting on the
	// assumption that the trees and buffers have been constructed by the
	// parse that was ran via the mix parser, and thus aren't shared with
	// any other code, making violations of the immutability safe.
	function materialize(cursor) {
		let { node } = cursor, stack = [];
		let buffer = node.context.buffer;
		// Scan up to the nearest tree
		do {
			stack.push(cursor.index);
			cursor.parent();
		} while (!cursor.tree);
		// Find the index of the buffer in that tree
		let base = cursor.tree, i = base.children.indexOf(buffer);
		let buf = base.children[i], b = buf.buffer, newStack = [i];
		// Split a level in the buffer, putting the nodes before and after
		// the child that contains `node` into new buffers.
		function split(startI, endI, type, innerOffset, length, stackPos) {
			let targetI = stack[stackPos];
			let children = [], positions = [];
			sliceBuf(buf, startI, targetI, children, positions, innerOffset);
			let from = b[targetI + 1], to = b[targetI + 2];
			newStack.push(children.length);
			let child = stackPos
				? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)
				: node.toTree();
			children.push(child);
			positions.push(from - innerOffset);
			sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);
			return new Tree(type, children, positions, length);
		}
		base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);
		// Move the cursor back to the target node
		for (let index of newStack) {
			let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];
			cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));
		}
	}
	class StructureCursor {
		constructor(root, offset) {
			this.offset = offset;
			this.done = false;
			this.cursor = root.cursor(exports.IterMode.IncludeAnonymous | exports.IterMode.IgnoreMounts);
		}
		// Move to the first node (in pre-order) that starts at or after `pos`.
		moveTo(pos) {
			let { cursor } = this, p = pos - this.offset;
			while (!this.done && cursor.from < p) {
				if (cursor.to >= pos && cursor.enter(p, 1, exports.IterMode.IgnoreOverlays | exports.IterMode.ExcludeBuffers)) ;
				else if (!cursor.next(false))
					this.done = true;
			}
		}
		hasNode(cursor) {
			this.moveTo(cursor.from);
			if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
				for (let tree = this.cursor.tree;;) {
					if (tree == cursor.tree)
						return true;
					if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
						tree = tree.children[0];
					else
						break;
				}
			}
			return false;
		}
	}
	class FragmentCursor {
		constructor(fragments) {
			var _a;
			this.fragments = fragments;
			this.curTo = 0;
			this.fragI = 0;
			if (fragments.length) {
				let first = this.curFrag = fragments[0];
				this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
				this.inner = new StructureCursor(first.tree, -first.offset);
			}
			else {
				this.curFrag = this.inner = null;
			}
		}
		hasNode(node) {
			while (this.curFrag && node.from >= this.curTo)
				this.nextFrag();
			return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
		}
		nextFrag() {
			var _a;
			this.fragI++;
			if (this.fragI == this.fragments.length) {
				this.curFrag = this.inner = null;
			}
			else {
				let frag = this.curFrag = this.fragments[this.fragI];
				this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
				this.inner = new StructureCursor(frag.tree, -frag.offset);
			}
		}
		findMounts(pos, parser) {
			var _a;
			let result = [];
			if (this.inner) {
				this.inner.cursor.moveTo(pos, 1);
				for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
					let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
					if (mount && mount.parser == parser) {
						for (let i = this.fragI; i < this.fragments.length; i++) {
							let frag = this.fragments[i];
							if (frag.from >= pos.to)
								break;
							if (frag.tree == this.curFrag.tree)
								result.push({
									frag,
									pos: pos.from - frag.offset,
									mount
								});
						}
					}
				}
			}
			return result;
		}
	}
	function punchRanges(outer, ranges) {
		let copy = null, current = ranges;
		for (let i = 1, j = 0; i < outer.length; i++) {
			let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
			for (; j < current.length; j++) {
				let r = current[j];
				if (r.from >= gapTo)
					break;
				if (r.to <= gapFrom)
					continue;
				if (!copy)
					current = copy = ranges.slice();
				if (r.from < gapFrom) {
					copy[j] = new Range(r.from, gapFrom);
					if (r.to > gapTo)
						copy.splice(j + 1, 0, new Range(gapTo, r.to));
				}
				else if (r.to > gapTo) {
					copy[j--] = new Range(gapTo, r.to);
				}
				else {
					copy.splice(j--, 1);
				}
			}
		}
		return current;
	}
	function findCoverChanges(a, b, from, to) {
		let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
		let result = [];
		for (;;) {
			let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
			let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
			if (inA != inB) {
				let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
				if (start < end)
					result.push(new Range(start, end));
			}
			pos = Math.min(nextA, nextB);
			if (pos == 1e9)
				break;
			if (nextA == pos) {
				if (!inA)
					inA = true;
				else {
					inA = false;
					iA++;
				}
			}
			if (nextB == pos) {
				if (!inB)
					inB = true;
				else {
					inB = false;
					iB++;
				}
			}
		}
		return result;
	}
	// Given a number of fragments for the outer tree, and a set of ranges
	// to parse, find fragments for inner trees mounted around those
	// ranges, if any.
	function enterFragments(mounts, ranges) {
		let result = [];
		for (let { pos, mount, frag } of mounts) {
			let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
			let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
			if (mount.overlay) {
				let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
				let changes = findCoverChanges(ranges, overlay, from, to);
				for (let i = 0, pos = from;; i++) {
					let last = i == changes.length, end = last ? to : changes[i].from;
					if (end > pos)
						result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));
					if (last)
						break;
					pos = changes[i].to;
				}
			}
			else {
				result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
			}
		}
		return result;
	}
	
	exports.DefaultBufferLength = DefaultBufferLength;
	exports.MountedTree = MountedTree;
	exports.NodeProp = NodeProp;
	exports.NodeSet = NodeSet;
	exports.NodeType = NodeType;
	exports.NodeWeakMap = NodeWeakMap;
	exports.Parser = Parser;
	exports.Tree = Tree;
	exports.TreeBuffer = TreeBuffer;
	exports.TreeCursor = TreeCursor;
	exports.TreeFragment = TreeFragment;
	exports.parseMixed = parseMixed;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/cpp/dist/index.cjs":
	/*!********************************************************!*\
	  !*** ../editor/node_modules/@lezer/cpp/dist/index.cjs ***!
	  \********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const RawString = 1,
	  templateArgsEndFallback = 2,
	  MacroName = 3;
	
	const R = 82, L = 76, u = 117, U = 85,
		  a = 97, z = 122, A = 65, Z = 90, Underscore = 95,
		  Zero = 48,
		  Quote = 34,
		  ParenL = 40, ParenR = 41,
		  Space = 32, GreaterThan = 62;
	
	const rawString = new lr.ExternalTokenizer(input => {
	  // Raw string literals can start with: R, LR, uR, UR, u8R
	  if (input.next == L || input.next == U) {
		input.advance();
	  } else if (input.next == u) {
		input.advance();
		if (input.next == Zero + 8) input.advance();
	  }
	  if (input.next != R) return
	  input.advance();
	  if (input.next != Quote) return
	  input.advance();
	
	  let marker = "";
	  while (input.next != ParenL) {
		if (input.next == Space || input.next <= 13 || input.next == ParenR) return
		marker += String.fromCharCode(input.next);
		input.advance();
	  }
	  input.advance();
	
	  for (;;) {
		if (input.next < 0)
		  return input.acceptToken(RawString)
		if (input.next == ParenR) {
		  let match = true;
		  for (let i = 0; match && i < marker.length; i++)
			if (input.peek(i + 1) != marker.charCodeAt(i)) match = false;
		  if (match && input.peek(marker.length + 1) == Quote)
			return input.acceptToken(RawString, 2 + marker.length)
		}
		input.advance();
	  }
	});
	
	const fallback = new lr.ExternalTokenizer(input => {
	  if (input.next == GreaterThan) {
		// Provide a template-args-closing token when the next characters
		// are ">>", in which case the regular tokenizer will only see a
		// bit shift op.
		if (input.peek(1) == GreaterThan)
		  input.acceptToken(templateArgsEndFallback, 1);
	  } else {
		// Notice all-uppercase identifiers
		let sawLetter = false, i = 0;
		for (;; i++) {
		  if (input.next >= A && input.next <= Z) sawLetter = true;
		  else if (input.next >= a && input.next <= z) return
		  else if (input.next != Underscore && !(input.next >= Zero && input.next <= Zero + 9)) break
		  input.advance();
		}
		if (sawLetter && i > 1) input.acceptToken(MacroName);
	  }
	}, {extend: true});
	
	const cppHighlighting = highlight.styleTags({
	  "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": highlight.tags.definitionKeyword,
	  "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": highlight.tags.modifier,
	  "if else switch for while do case default return break continue goto throw try catch": highlight.tags.controlKeyword,
	  "co_return co_yield co_await": highlight.tags.controlKeyword,
	  "new sizeof delete static_assert": highlight.tags.operatorKeyword,
	  "NULL nullptr": highlight.tags.null,
	  this: highlight.tags.self,
	  "True False": highlight.tags.bool,
	  "TypeSize PrimitiveType": highlight.tags.standard(highlight.tags.typeName),
	  TypeIdentifier: highlight.tags.typeName,
	  FieldIdentifier: highlight.tags.propertyName,
	  "CallExpression/FieldExpression/FieldIdentifier": highlight.tags.function(highlight.tags.propertyName),
	  "ModuleName/Identifier": highlight.tags.namespace,
	  "PartitionName": highlight.tags.labelName,
	  StatementIdentifier: highlight.tags.labelName,
	  "Identifier DestructorName": highlight.tags.variableName,
	  "CallExpression/Identifier": highlight.tags.function(highlight.tags.variableName),
	  "CallExpression/ScopedIdentifier/Identifier": highlight.tags.function(highlight.tags.variableName),
	  "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  NamespaceIdentifier: highlight.tags.namespace,
	  OperatorName: highlight.tags.operator,
	  ArithOp: highlight.tags.arithmeticOperator,
	  LogicOp: highlight.tags.logicOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  AssignOp: highlight.tags.definitionOperator,
	  UpdateOp: highlight.tags.updateOperator,
	  LineComment: highlight.tags.lineComment,
	  BlockComment: highlight.tags.blockComment,
	  Number: highlight.tags.number,
	  String: highlight.tags.string,
	  "RawString SystemLibString": highlight.tags.special(highlight.tags.string),
	  CharLiteral: highlight.tags.character,
	  EscapeSequence: highlight.tags.escape,
	  "UserDefinedLiteral/Identifier": highlight.tags.literal,
	  PreProcArg: highlight.tags.meta,
	  "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": highlight.tags.processingInstruction,
	  MacroName: highlight.tags.special(highlight.tags.name),
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace,
	  "< >": highlight.tags.angleBracket,
	  ". ->": highlight.tags.derefOperator,
	  ", ;": highlight.tags.separator
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,bool:34, char:34, int:34, float:34, double:34, void:34, size_t:34, ssize_t:34, intptr_t:34, uintptr_t:34, charptr_t:34, int8_t:34, int16_t:34, int32_t:34, int64_t:34, uint8_t:34, uint16_t:34, uint32_t:34, uint64_t:34, char8_t:34, char16_t:34, char32_t:34, char64_t:34, const:68, volatile:70, restrict:72, _Atomic:74, mutable:76, constexpr:78, constinit:80, consteval:82, struct:86, __declspec:90, final:148, override:148, public:152, private:152, protected:152, virtual:154, extern:160, static:162, register:164, inline:166, thread_local:168, __attribute__:172, __based:178, __restrict:180, __uptr:180, __sptr:180, _unaligned:180, __unaligned:180, noexcept:194, requires:198, TRUE:784, true:784, FALSE:786, false:786, typename:218, class:220, template:234, throw:248, __cdecl:256, __clrcall:256, __stdcall:256, __fastcall:256, __thiscall:256, __vectorcall:256, try:260, catch:264, export:282, import:286, case:296, default:298, if:308, else:314, switch:318, do:322, while:324, for:330, return:334, break:338, continue:342, goto:346, co_return:350, co_yield:354, using:362, typedef:366, namespace:380, new:398, delete:400, co_await:402, concept:406, enum:410, static_assert:414, friend:422, union:424, explicit:430, operator:444, module:456, signed:518, unsigned:518, long:518, short:518, decltype:528, auto:530, sizeof:566, NULL:572, nullptr:586, this:588};
	const spec_ = {__proto__:null,"<":131};
	const spec_templateArgsEnd = {__proto__:null,">":135};
	const spec_scopedIdentifier = {__proto__:null,operator:388, new:576, delete:582};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "$:|Q!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FjO-sQbO'#CwO.UQUO'#CwO0TQUO'#KZO0[QUO'#CvO0gOpO'#DvO0oQ!dO'#D]OOQR'#JO'#JOO5XQVO'#GUO5fQUO'#JVOOQQ'#JV'#JVO8zQUO'#KmO<eQUO'#KmO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FhOOQR'#Fj'#FjOB{QUO'#FjOOQR'#LQ'#LQOOQR'#LP'#LPOETQVO'#KQOFxQUO'#LVOGVQUO'#KqOGkQUO'#LVOH]QUO'#LXOOQR'#HU'#HUOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#K|'#K|OOQR'#J_'#J_Q!QQVOOOHkQVO'#FOOIWQUO'#EhOI_QUOOOKZQVO'#HgOKkQUO'#HgONVQUO'#KqONaQUO'#KqOOQQ'#Kq'#KqO!!_QUO'#KqOOQQ'#Jq'#JqO!!lQUO'#HxOOQQ'#KZ'#KZO!&^QUO'#KZO!&zQUO'#KQO!(zQVO'#I]O!(zQVO'#I`OCQQUO'#KQOOQQ'#Ip'#IpOOQQ'#KQ'#KQO!,}QUO'#KZOOQR'#KY'#KYO!-UQUO'#DYO!/mQUO'#KnOOQQ'#Kn'#KnO!/tQUO'#KnO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F^O!0[Q#vO'#F`O!0gQUO'#FkO!0oQUO'#FpO!0tQVO'#FrO!0oQUO'#FuO!3sQUO'#FvO!3xQVO'#FxO!4SQUO'#FzO!4XQUO'#F|O!4^QUO'#GOO!4cQVO'#GQO!(zQVO'#GSO!4jQUO'#GpO!4xQUO'#GYO!(zQVO'#FeO!6VQUO'#FeO!6[QVO'#G`O!6cQUO'#GaO!6nQUO'#GnO!6sQUO'#GrO!6xQUO'#GzO!7jQ&lO'#HiO!:mQUO'#GuO!:}QUO'#HXO!;YQUO'#HZO!;bQUO'#DWO!;bQUO'#HuO!;bQUO'#HvO!;yQUO'#HwO!<[QUO'#H|O!=PQUO'#H}O!>uQVO'#IbO!(zQVO'#IdO!?PQUO'#IgO!?WQVO'#IjP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#IzPOOO)CEn)CEnOOOO'#I|'#I|O!AtOWO,59OOOQR,59O,59OO!(zQVO,59UOOQQ,59W,59WO!(zQVO,5;ROOQR,5<U,5<UO!BPQUO,59YO!(zQVO,5>qOOQR'#IX'#IXOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[O!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!DOQVO,5>zOOQQ,5?W,5?WO!EqQVO'#ChO!IjQUO'#CyOOQQ,59c,59cOOQQ,59b,59bOOQQ,5<},5<}O!IwQ&lO,5=mO!?PQUO,5?RO!LkQVO,5?UO!LrQbO,59cO!L}QVO'#FYOOQQ,5?P,5?PO!M_QVO,59VO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K^O!N[QbO,59wO!NdQbO'#CwO!NuQUO'#CwO!NzQUO'#KZO# UQUO'#CvOOQR-E<|-E<|O# aQUO,5AoO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<p,5<pO#$aQUO'#KQO#$hQUO'#KQO!(zQVO'#IUO8zQUO,5;kO#${Q&lO'#HiO#(SQUO'#CsO#*wQbO'#CwO#*|QUO'#CvO#.jQUO'#KZOOQQ-E=T-E=TO#0}QUO,5AXO#1XQUO'#KZO#1cQUO,5AXOOQR,5Ao,5AoOOQQ,5>l,5>lO#3gQUO'#CgO#4]QUO,5>pO#6OQUO'#IeOOQR'#I}'#I}O#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CtO!0QQUO'#ClOOQQ'#JW'#JWO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#C}O#9kQUO,5;QO#9pQUO,5>QO#:|QUO'#C}O#;dQUO,5>{O#;iQUO'#KwO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L[O#?UQUO,5>UO#?ZQbO'#CwO#?fQUO'#GcO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#K}O#@{QUO,5;rOKkQUO'#HfOBUQUO'#HgO#AQQUO'#KqO!6nQUO'#HjO#AxQUO'#CtO!0tQVO,5<SOOQQ'#Cg'#CgOOQR'#Jh'#JhO#A}QVO,5=`OOQQ,5?Z,5?ZO#DWQbO'#CwO#DcQUO'#GcOOQQ'#Ji'#JiOOQQ-E=g-E=gOGVQUO,5AqOGkQUO,5AqO#DhQUO,5AsO#DsQUO'#G|OOQR,5Aq,5AqO#DhQUO,5AqO#EOQUO'#HOO#EWQUO,5AsOOQR,5As,5AsOOQR,5At,5AtO#EfQVO,5AtOOQR-E=]-E=]O#G`QVO,5;jOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#Kz'#KzO$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>PO$(WQUO'#E[O$(eQUO,5>ROOQQ,5>S,5>SO$,RQVO'#C{OOQQ-E=o-E=oOOQQ,5>d,5>dOOQQ,59`,59`O$,]QUO,5>wO$.]QUO,5>zO!6nQUO,59tO$.pQUO,5;qO$.}QUO,5<{O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KmOBUQUO,5;kOOQR,5;x,5;xO$0OQUO'#FbO$0^QUO'#FbO$0cQUO,5;zO$3|QVO'#FmO!0tQVO,5<VO!0oQUO,5<VO!0VQUO,5<[O$4TQVO'#GUO$7PQUO,5<^O!0tQVO,5<aO$:gQVO,5<bO$:tQUO,5<dOOQR,5<d,5<dO$;}QUO,5<dOOQR,5<f,5<fOOQR,5<h,5<hOOQQ'#Fi'#FiO$<SQUO,5<jO$<XQUO,5<lOOQR,5<l,5<lO$=_QUO,5<nO$>eQUO,5<rO$>pQUO,5=[O$>uQUO,5=[O!4xQUO,5<tO$>}QUO,5<tO$?cQUO,5<PO$@iQVO,5<PO$BzQUO,5<zOOQR,5<z,5<zOOQR,5<{,5<{O$>uQUO,5<{O$DQQUO,5<{O$D]QUO,5=YO!(zQVO,5=^O!(zQVO,5=fO#NeQUO,5=mOOQQ,5>T,5>TO$FbQUO,5>TO$FlQUO,5>TO$FqQUO,5>TO$FvQUO,5>TO!6nQUO,5>TO$HtQUO'#KZO$H{QUO,5=oO$IWQUO,5=aOKkQUO,5=oO$JQQUO,5=sOOQR,5=s,5=sO$JYQUO,5=sO$LeQVO'#H[OOQQ,5=u,5=uO!;]QUO,5=uO%#`QUO'#KjO%#gQUO'#K[O%#{QUO'#KjO%$VQUO'#DyO%$hQUO'#D|O%'eQUO'#K[OOQQ'#K['#K[O%)WQUO'#K[O%#gQUO'#K[O%)]QUO'#K[OOQQ,59r,59rOOQQ,5>a,5>aOOQQ,5>b,5>bO%)eQUO'#HzO%)mQUO,5>cOOQQ,5>c,5>cO%-XQUO,5>cO%-dQUO,5>hO%1OQVO,5>iO%1VQUO,5>|O# hQVO'#EfO%4]QUO,5>|OOQQ,5>|,5>|O%4|QUO,5?OO%7QQUO,5?RO!<[QUO,5?RO%8|QUO,5?UO%<iQVO,5?UP!A_{,UO,58|P%<p{,UO,58|P%=O{7[O,58|P%=U{,UO,58|PO{O'#Ju'#JuP%=Z{,UO'#LcPOOO'#Lc'#LcP%=a{,UO'#LcPOOO,58|,58|POOO,5?f,5?fP%=fOSO,5?fOOOO-E<z-E<zOOQR1G.j1G.jO%=mQUO1G.pO%>sQUO1G0mOOQQ1G0m1G0mO%@PQUO'#CoO%B`QbO'#CwO%BkQUO'#CrO%BpQUO'#CrO%BuQUO1G.tO#AxQUO'#CqOOQQ1G.t1G.tO%DxQUO1G4]O%FOQUO1G4^O%GqQUO1G4^O%IdQUO1G4^O%KVQUO1G4^O%LxQUO1G4^O%NkQUO1G4^O&!^QUO1G4^O&$PQUO1G4^O&%rQUO1G4^O&'eQUO1G4^O&)WQUO1G4^O&*yQUO'#KPO&,SQUO'#KPO&,[QUO,59SOOQQ,5=P,5=PO&.dQUO,5=PO&.nQUO,5=PO&.sQUO,5=PO&.xQUO,5=PO!6nQUO,5=PO#NeQUO1G3XO&/SQUO1G4mO!<[QUO1G4mO&1OQUO1G4pO&2qQVO1G4pOOQQ1G.}1G.}OOQQ1G.|1G.|OOQQ1G2i1G2iO!IwQ&lO1G3XO&2xQUO'#LOO@XQVO'#EiO&4RQUO'#F]OOQQ'#Ja'#JaO&4WQUO'#FZO&4cQUO'#LOO&4kQUO,5;tO&4pQUO1G.qOOQQ1G.q1G.qOOQR1G/|1G/|O&6cQ!dO'#JPO&6hQbO,59xO&8yQ!eO'#D`O&9QQ!dO'#JRO&9VQbO,5@xO&9VQbO,5@xOOQR1G/c1G/cO&9bQbO1G/cO&9gQ&lO'#GeO&:eQbO,59cOOQR1G7Z1G7ZO#@[QUO1G1VO&:pQUO1G1^OBUQUO1G1VO&=RQUO'#CyO#*wQbO,59cO&@tQUO1G6sOOQR-E<{-E<{O&BWQUO1G0dO#6WQUO1G0dOOQQ-E=U-E=UO#6tQUO1G0dOOQQ1G0l1G0lO&B{QUO,59iOOQQ1G3l1G3lO&CcQUO,59iO&CyQUO,59iO!M_QVO1G4gO!(zQVO'#JYO&DeQUO,5AcOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JnO&DmQUO,5AvOOQQ1G3p1G3pOOQR1G1V1G1VO&HjQVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JcO&JfQUO,5AiO&JnQVO'#E[OOQR1G1^1G1^O&M]QUO'#L[OOQR1G1n1G1nOOQR-E=f-E=fOOQR1G7]1G7]O#DhQUO1G7]OGVQUO1G7]O#DhQUO1G7_OOQR1G7_1G7_O&MeQUO'#G}O&MmQUO'#LWOOQQ,5=h,5=hO&M{QUO,5=jO&NQQUO,5=kOOQR1G7`1G7`O#EfQVO1G7`O&NVQUO1G7`O' ]QVO,5=kOOQR1G1U1G1UO$.vQUO'#E]O'!RQUO'#E]OOQQ'#Ky'#KyO'!lQUO'#KxO'!wQUO,5;UO'#PQUO'#ElO'#dQUO'#ElO'#wQUO'#EtOOQQ'#J['#J[O'#|QUO,5;cO'$sQUO,5;cO'%nQUO,5;dO'&tQVO,5;dOOQQ,5;d,5;dO''OQVO,5;dO'&tQVO,5;dO''VQUO,5;bO'(SQUO,5;eO'(_QUO'#KpO'(gQUO,5:vO'(lQUO,5;fOOQQ1G0n1G0nOOQQ'#J]'#J]O''VQUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')gQUO'#E`O'+aQUO'#E{OHrQUO1G0nO'+fQUO'#EbOOQQ'#JX'#JXO'-OQUO'#KrOOQQ'#Kr'#KrO'-xQUO1G0eO'.pQUO1G3kO'/vQVO1G3kOOQQ1G3k1G3kO'0QQVO1G3kO'0XQUO'#L_O'1eQUO'#KXO'1sQUO'#KWO'2OQUO,59gO'2WQUO1G/`O'2]QUO'#FPOOQR1G1]1G1]OOQR1G2g1G2gO$>uQUO1G2gO'2gQUO1G2gO'2rQUO1G0ZOOQR'#J`'#J`O'2wQVO1G1XO'8pQUO'#FTO'8uQUO1G1VO!6nQUO'#JdO'9TQUO,5;|O$0^QUO,5;|OOQQ'#Fc'#FcOOQQ,5;|,5;|O'9cQUO1G1fOOQR1G1f1G1fO'9kQUO,5<XO$.vQUO'#FWOBUQUO'#FWO'9rQUO,5<XO!(zQVO,5<XO'9zQUO,5<XO':PQVO1G1qO!0tQVO1G1qOOQR1G1v1G1vO'?oQUO1G1xOOQR1G1{1G1{O'?tQUO1G1|OBUQUO1G2]O'@}QVO1G1|O'CcQUO1G1|O'ChQUO'#GWO8zQUO1G2]OOQR1G2O1G2OOOQR1G2U1G2UOOQR1G2W1G2WOOQR1G2Y1G2YO'CmQUO1G2^O!4xQUO1G2^OOQR1G2v1G2vO'CuQUO1G2vO$>}QUO1G2`OOQQ'#Cu'#CuO'CzQUO'#G[O'DuQUO'#G[O'DzQUO'#LRO'EYQUO'#G_OOQQ'#LS'#LSO'EhQUO1G2`O'EmQVO1G1kO'HOQVO'#GUOBUQUO'#FWOOQR'#Je'#JeO'EmQVO1G1kO'HYQUO'#FvOOQR1G2f1G2fO'H_QUO1G2gO'HdQUO'#JgO'2gQUO1G2gO!(zQVO1G2tO'HlQUO1G2xO'IuQUO1G3QO'J{QUO1G3XOOQQ1G3o1G3oO'KaQUO1G3oOOQR1G3Z1G3ZO'KfQUO'#KZO'2]QUO'#LTOGkQUO'#LVOOQR'#Gy'#GyO#DhQUO'#LXOOQR'#HQ'#HQO'KpQUO'#GvO'#wQUO'#GuOOQR1G2{1G2{O'LmQUO1G2{O'MdQUO1G3ZO'MoQUO1G3_O'MtQUO1G3_OOQR1G3_1G3_O'M|QUO'#H]OOQR'#H]'#H]O( VQUO'#H]O!(zQVO'#H`O!(zQVO'#H_OOQR'#LZ'#LZO( [QUO'#LZOOQR'#Jk'#JkO( aQVO,5=vOOQQ,5=v,5=vO( hQUO'#H^O( pQUO'#HZOOQQ1G3a1G3aO( zQUO,5@vOOQQ,5@v,5@vO%)WQUO,5@vO%)]QUO,5@vO%$VQUO,5:eO(%iQUO'#KkO(%wQUO'#KkOOQQ,5:e,5:eOOQQ'#JS'#JSO(&SQUO'#D}O(&^QUO'#KqOGkQUO'#LVO('YQUO'#D}OOQQ'#Hp'#HpOOQQ'#Hr'#HrOOQQ'#Hs'#HsOOQQ'#Kl'#KlOOQQ'#JU'#JUO('dQUO,5:hOOQQ,5:h,5:hO((aQUO'#LVO((nQUO'#HtO()UQUO,5@vO()]QUO'#H{O()hQUO'#L^O()pQUO,5>fO()uQUO'#L]OOQQ1G3}1G3}O(-lQUO1G3}O(-sQUO1G3}O(-zQUO1G4TO(/QQUO1G4TO(/VQUO,5A|O!6nQUO1G4hO!(zQVO'#IiOOQQ1G4m1G4mO(/[QUO1G4mO(1_QVO1G4pPOOO1G.h1G.hP!A_{,UO1G.hP(3_QUO'#LeP(3j{,UO1G.hP(3o{7[O1G.hPO{O-E=s-E=sPOOO,5A},5A}P(3w{,UO,5A}POOO1G5Q1G5QO!(zQVO7+$[O(3|QUO'#CyOOQQ,59^,59^O(4XQbO,59cO(4dQbO,59^OOQQ,59],59]OOQQ7+)w7+)wO!M_QVO'#JtO(4oQUO,5@kOOQQ1G.n1G.nOOQQ1G2k1G2kO(4wQUO1G2kO(4|QUO7+(sOOQQ7+*X7+*XO(7bQUO7+*XO(7iQUO7+*XO(1_QVO7+*[O#NeQUO7+(sO(7vQVO'#JbO(8ZQUO,5AjO(8cQUO,5;vOOQQ'#Co'#CoOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=_-E=_O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?k,5?kOOQQ-E<}-E<}OOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9lQ!eO'#K_O(9sQMkO'#K_O(9zQ!eO'#K_OOQR'#K_'#K_OOQR'#JQ'#JQO(:RQ!eO,59zOOQQ,59z,59zO(:YQbO,5?mOOQQ-E=P-E=PO(:hQbO1G6dOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8uQUO7+&qO(:sQUO7+&OO#6WQUO7+&OO(;hQUO1G/TO(<OQUO1G/TO(<jQUO7+*ROOQQ7+*V7+*VO(>]QUO,5?tOOQQ-E=W-E=WO(?fQUO7+&ZOOQQ,5@Y,5@YOOQQ-E=l-E=lO(?kQUO'#LOO@XQVO'#EiO(@wQUO1G1_OOQQ1G1_1G1_O(BQQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aO(BfQUO'#KpOOQR7+,w7+,wO#DhQUO7+,wOOQR7+,y7+,yO(BsQUO,5=iO#DsQUO'#JjO(CUQUO,5ArOOQR1G3U1G3UOOQR1G3V1G3VO(CdQUO7+,zOOQR7+,z7+,zO(E[QUO,5:wO(FyQUO'#EwO!(zQVO,5;VO(GlQUO,5:wO(GvQUO'#EpO(HXQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(HoQUO,5:wO(HvQUO'#EyO#GgQUO'#JZO(J`QUO,5AdOOQQ1G0p1G0pO(JkQUO,5;WO!<[QUO,5;^O(KUQUO,5;_O(KdQUO,5;WO(MvQUO,5;`OOQQ-E=Y-E=YO(NOQUO1G0}OOQQ1G1O1G1OO(NyQUO1G1OO)!PQVO1G1OO)!WQVO1G1OO)!bQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#_QUO'#JoO)#iQUO,5A[OOQQ1G0b1G0bOOQQ-E=Z-E=ZO)#qQUO,5;iO!<[QUO,5;iO)$nQVO,5:zO)$uQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)$|QUO,5:|OOQQ'#Ks'#KsOOQQ-E=V-E=VOOQQ,5A^,5A^OOQQ'#Jl'#JlO)(qQUO7+&PPOQQ7+&P7+&POOQQ7+)V7+)VO))iQUO7+)VO)*oQVO7+)VOOQQ,5>m,5>mO$)YQVO'#JsO)*vQUO,5@rOOQQ1G/R1G/ROOQQ7+$z7+$zO)+RQUO7+(RO)+WQUO7+(ROOQR7+(R7+(RO$>uQUO7+(ROOQQ7+%u7+%uOOQR-E=^-E=^O!0VQUO,5;oOOQQ,5@O,5@OOOQQ-E=b-E=bO$0^QUO1G1hOOQQ1G1h1G1hOOQR7+'Q7+'QOOQR1G1s1G1sOBUQUO,5;rO)+tQUO,5<YO)+{QUO1G1sO)-UQUO1G1sO!0tQVO7+']O)-ZQVO7+']O)2yQUO7+'dO)3OQVO7+'hO)5dQUO7+'wO)5nQUO7+'hO)6tQVO7+'hOKkQUO7+'wO$>hQUO,5<rO!4xQUO7+'xO)6{QUO7+'xOOQR7+(b7+(bO)7QQUO7+'zO)7VQUO,5<vO'CzQUO,5<vO)7}QUO,5<vO'CzQUO,5<vOOQQ,5<w,5<wO)8`QVO,5<xO'EYQUO'#JfO)8jQUO,5AmO)8rQUO,5<yOOQR7+'z7+'zO)8}QVO7+'VO)5gQUO'#K}OOQR-E=c-E=cO);`QVO,5<bOOQQ,5@R,5@RO!6nQUO,5@ROOQQ-E=e-E=eO)=wQUO7+(`O)>}QUO7+(dO)?SQVO7+(dOOQQ7+(l7+(lOOQQ7+)Z7+)ZO)?[QUO'#KjO)?fQUO'#KjOOQR,5=b,5=bO)?sQUO,5=bO!;bQUO,5=bO!;bQUO,5=bO!;bQUO,5=bOOQR7+(g7+(gOOQR7+(u7+(uOOQR7+(y7+(yOOQR,5=w,5=wO)?xQUO,5=zO)AOQUO,5=yOOQR,5Au,5AuOOQR-E=i-E=iOOQQ1G3b1G3bO)BUQUO,5=xO)BZQVO'#EfOOQQ1G6b1G6bO%)WQUO1G6bO%)]QUO1G6bOOQQ1G0P1G0POOQQ-E=Q-E=QO)DrQUO,5AVO(%iQUO'#JTO)D}QUO,5AVO)D}QUO,5AVO)EVQUO,5:iO8zQUO,5:iOOQQ,5>],5>]O)EaQUO,5AqO)EhQUO'#EVO)FrQUO'#EVO)G]QUO,5:iO)GgQUO'#HlO)GgQUO'#HmOOQQ'#Ko'#KoO)HUQUO'#KoO!(zQVO'#HnOOQQ,5:i,5:iO)HvQUO,5:iO!M_QVO,5:iOOQQ-E=S-E=SOOQQ1G0S1G0SOOQQ,5>`,5>`O)H{QUO1G6bO!(zQVO,5>gO)LjQUO'#JrO)LuQUO,5AxOOQQ1G4Q1G4QO)L}QUO,5AwOOQQ,5Aw,5AwOOQQ7+)i7+)iO*!lQUO7+)iOOQQ7+)o7+)oO*'kQVO1G7hO*)mQUO7+*SO*)rQUO,5?TO**xQUO7+*[POOO7+$S7+$SP*,kQUO'#LfP*,sQUO,5BPP*,x{,UO7+$SPOOO1G7i1G7iO*,}QUO<<GvOOQQ1G.x1G.xOOQQ'#IT'#ITO*.pQUO,5@`OOQQ,5@`,5@`OOQQ-E=r-E=rOOQQ7+(V7+(VOOQQ<<Ms<<MsO*/yQUO<<MsO*1|QUO<<MvO*3oQUO<<L_O*4TQUO,5?|OOQQ,5?|,5?|OOQQ-E=`-E=`OOQQ1G1b1G1bO*5^QUO,5;vO*6dQUO1G1aOOQQ1G1a1G1aOOQR,5@y,5@yO*7mQ!eO,5@yO*7tQMkO,5@yO*7{Q!eO,5@yOOQR-E=O-E=OOOQQ1G/f1G/fO*8SQ!eO'#DwOOQQ1G5X1G5XOOQR<<J]<<J]O*8ZQUO<<IjO*9OQUO7+$oOOQQ<<Iu<<IuO(7vQVO,5;ROOQR<=!c<=!cOOQQ1G3T1G3TOOQQ,5@U,5@UOOQQ-E=h-E=hOOQR<=!f<=!fO*9{QUO1G0cO*:SQUO'#EzO*:dQUO1G0cO*:kQUO'#I}O*<RQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?u,5?uOOQQ-E=X-E=XO!<[QUO1G0xO*=bQUO1G0xOOQQ1G0y1G0yO*=sQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>XQUO7+&jO*?_QVO7+&jOOQQ7+&h7+&hOOQQ,5@Z,5@ZOOQQ-E=m-E=mO*@ZQUO1G1TO*@eQUO1G1TO*AOQUO1G0fOOQQ1G0f1G0fO*BUQUO'#K{O*B^QUO1G1ROOQQ<<It<<ItOOQQ'#Hb'#HbO'+fQUO,5={OOQQ'#Hd'#HdO'+fQUO,5=}OOQQ-E=j-E=jPOQQ<<Ik<<IkPOQQ-E=k-E=kOOQQ<<Lq<<LqO*BcQUO'#LaO*CoQUO'#L`OOQQ,5@_,5@_OOQQ-E=q-E=qOOQR<<Km<<KmO$>uQUO<<KmO*C}QUO<<KmOOQR1G1Z1G1ZOOQQ7+'S7+'SO!M_QVO1G1tO*DSQUO1G1tOOQR7+'_7+'_OOQR<<Jw<<JwO!0tQVO<<JwOOQR<<KO<<KOO*D_QUO<<KSO*EeQVO<<KSOKkQUO<<KcO!M_QVO<<KcO*ElQUO<<KSO!0tQVO<<KSO*FuQUO<<KSO*FzQUO<<KcO*GVQUO<<KdOOQR<<Kd<<KdOOQR<<Kf<<KfO*G[QUO1G2bO)7VQUO1G2bO'CzQUO1G2bO*GmQUO1G2dO*HsQVO1G2dOOQQ1G2d1G2dO*H}QVO1G2dO*IUQUO,5@QOOQQ-E=d-E=dOOQQ1G2e1G2eO*IdQUO1G1|O*JmQVO1G1|O*JtQUO1G1|OOQQ1G5m1G5mOOQR<<Kz<<KzOOQR<<LO<<LOO*JyQVO<<LOO*KUQUO<<LOOOQR1G2|1G2|O*KZQUO1G2|O*KbQUO1G3eOOQR1G3d1G3dOOQQ7++|7++|O%)WQUO7++|O*KmQUO1G6qO*KmQUO1G6qO(%iQUO,5?oO*KuQUO,5?oOOQQ-E=R-E=RO*LQQUO1G0TOOQQ1G0T1G0TO*L[QUO1G0TO!M_QVO1G0TO*LaQUO1G0TOOQQ1G3w1G3wO*LkQUO,5:qO)EhQUO,5:qO*MXQUO,5:qO)EhQUO,5:qO$#uQUO,5:uO*MvQVO,5>VO)GgQUO'#JpO*NQQUO1G0TO*NcQVO1G0TOOQQ1G3u1G3uO*NjQUO,5>WO*NuQUO,5>XO+ dQUO,5>YO+!jQUO1G0TO%)]QUO7++|O+#pQUO1G4ROOQQ,5@^,5@^OOQQ-E=p-E=pOOQQ<<MT<<MTOOQQ<<Mn<<MnO+$yQUO1G4oP+&|QUO'#JvP+'UQUO,5BQPO{O1G7k1G7kPOOO<<Gn<<GnOOQQANC_ANC_OOQR1G6e1G6eO+'^Q!eO,5:cOOQQ,5:c,5:cO+'eQUO1G0mO+(qQUO7+&]O+*QQUO7+&dO+*cQUO,5;WOOQQ<<JU<<JUO+*qQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J^O++lQUO,5AgOOQQ7+&m7+&mOOQQ1G3g1G3gO++tQUO1G3iOOQQ,5>n,5>nO+/iQUOANAXOOQRANAXANAXO+/nQUO7+'`OOQRAN@cAN@cO+0zQVOAN@nO+1RQUOAN@nO!0tQVOAN@nO+2[QUOAN@nO+2aQUOAN@}O+2lQUOAN@}O+3rQUOAN@}OOQRAN@nAN@nO!M_QVOAN@}OOQRANAOANAOO+3wQUO7+'|O)7VQUO7+'|OOQQ7+(O7+(OO+4YQUO7+(OO+5`QVO7+(OO+5gQVO7+'hO+5nQUOANAjOOQR7+(h7+(hOOQR7+)P7+)PO+5sQUO7+)PO+5xQUO7+)POOQQ<= h<= hO+6QQUO7+,]O+6YQUO1G5ZOOQQ1G5Z1G5ZO+6eQUO7+%oOOQQ7+%o7+%oO+6vQUO7+%oO*NcQVO7+%oOOQQ7+)a7+)aO+6{QUO7+%oO+8RQUO7+%oO!M_QVO7+%oO+8]QUO1G0]O*LkQUO1G0]O)EhQUO1G0]OOQQ1G0a1G0aO+8zQUO1G3qO+:QQVO1G3qOOQQ1G3q1G3qO+:[QVO1G3qO+:cQUO,5@[OOQQ-E=n-E=nOOQQ1G3r1G3rO%)WQUO<= hOOQQ7+*Z7+*ZPOQQ,5@b,5@bPOQQ-E=t-E=tOOQQ1G/}1G/}OOQQ,5?x,5?xOOQQ-E=[-E=[OOQRG26sG26sO+:zQUOG26YO!0tQVOG26YO+<TQUOG26YOOQRG26YG26YO!M_QVOG26iO!0tQVOG26iO+<YQUOG26iO+=`QUOG26iO+=eQUO<<KhOOQQ<<Kj<<KjOOQRG27UG27UOOQR<<Lk<<LkO+=vQUO<<LkOOQQ7+*u7+*uOOQQ<<IZ<<IZO+={QUO<<IZO!M_QVO<<IZO+>QQUO<<IZO+?WQUO<<IZO*NcQVO<<IZOOQQ<<L{<<L{O+?iQUO7+%wO*LkQUO7+%wOOQQ7+)]7+)]O+@WQUO7+)]O+A^QVO7+)]OOQQANESANESO!0tQVOLD+tOOQRLD+tLD+tO+AeQUOLD,TO+BkQUOLD,TOOQRLD,TLD,TO!0tQVOLD,TOOQRANBVANBVOOQQAN>uAN>uO+BpQUOAN>uO+CvQUOAN>uO!M_QVOAN>uO+C{QUO<<IcOOQQ<<Lw<<LwOOQR!$( `!$( `O!0tQVO!$( oOOQR!$( o!$( oOOQQG24aG24aO+DjQUOG24aO+EpQUOG24aOOQR!)9EZ!)9EZOOQQLD){LD){O+EuQUO'#CgO(dQUO'#CgO+IrQUO'#CyO+LcQUO'#CyO!E{QUO'#CyO+M[QUO'#CyO+MoQUO'#CyO,#bQUO'#CyO,#rQUO'#CyO,$PQUO'#CyO,$[QbO,59cO,$gQbO,59cO,$rQbO,59cO,$}QbO'#CwO,%`QbO'#CwO,%qQbO'#CwO,&SQUO'#CgO,(gQUO'#CgO,(tQUO'#CgO,+iQUO'#CgO,.lQUO'#CgO,.|QUO'#CgO,2uQUO'#CgO,2|QUO'#CgO,3|QUO'#CgO,6VQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L[O,6sQbO'#CwO,7OQbO'#CwO,7ZQbO'#CwO,7fQbO'#CwO#6tQUO'#E^O,7qQUO'#E^O,9OQUO'#HgO,9pQbO'#CwO,9{QbO'#CwO,:WQUO'#CvO,:]QUO'#CvO,:bQUO'#CoO,:pQbO,59cO,:{QbO,59cO,;WQbO,59cO,;cQbO,59cO,;nQbO,59cO,;yQbO,59cO,<UQbO,59cO,6VQUO1G0dO,<aQUO1G0dO#?kQUO1G0dO,7qQUO1G0dO,>nQUO'#KZO,?OQUO'#CyO,?^QbO,59cO,6VQUO7+&OO,<aQUO7+&OO,?iQUO'#EwO,@[QUO'#EzO,@{QUO'#E^O,AQQUO'#GcO,AVQUO'#CvO,A[QUO'#CwO,AaQUO'#CwO,AfQUO'#CvO,AkQUO'#GcO,ApQUO'#KZO,B^QUO'#KZO,BhQUO'#CvO,BsQUO'#CvO,COQUO'#CvO,<aQUO,5:xO,7qQUO,5:xO,7qQUO,5:xO,CZQUO'#KZO,CnQbO'#CwO,CyQUO'#CrO,DOQUO'#E^",
	  stateData: ",Dt~O(nOSSOSTOSRPQVPQ'ePQ'gPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ~O*ZOS~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$R!gO$T!hO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO${!tO$}!uO%U!yO%_#ZO%`#[O%a#YO%c!zO%e#UO%g!{O%l#SO%o!|O%v!}O%|#PO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(rRO)PYO)SaO)U|O)V{O)WiO)X!ZO)YXO)hcO)idO~OR#bOV#]O'e#^O'g#_O'h#`O'i#`O'j#aO'k#aO'l#_O'm#_O~OX#dO(p#dO(q#fO~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX(uZX(v$]X(wZX(xZX)SZX)SiX)TZX)UZX)UiX)VZX)ViX)WZX)XZX)jZX~O)WiX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO(w#kO(x#kO)S#mO)T#oO)U#nO)V#pO)W#jO)X#|O~Od$RO%Y$SO'[$TO'_$UO(y$OO~Ol$VO~O!T$WO](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X~Ol$VO~P.ZOl$VO!g$YO)j$YO~OX$ZO)Z$ZO~O!R$[O)X)QP)])QP~OPmO]$eOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~Ol$_O#t$lO(rRO~P0zO](]Xa'yXd(]Xl'yXl(]Xr'yXr(]Xs'yXs(]Xt'yXt(]Xu'yXu(]Xv'yXv(]Xw'yXw(]Xx'yXx(]Xy'yXy(]X{'yX}'yX!V(]X!o(]X!r'yX!r(]X!s'yX!s(]X!t'yX!t(]X!u'yX!u(]X!v'yX!v(]X!x'yX!x(]X!{(]X#a'yX#b'yX%e'yX%l'yX%o(]X%v(]X&m'yX&r'yX&s'yX(r'yX(r(]X)S(]X)U(]X)V(]X~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&r#WO&s$wO])aXd)aXl)aX!V)aX!{)aX%v)aX(r)aX)S)aX)U)aX)V)aX~O)W$vO~P:nOPmO]eOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)SaO)U|O)V{O)X!ZO)YXO)hcO)idO~Oa%QOl:zO!|%RO(r$xO~P<lO)S%SO~Oa!]Ol$_O{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r:}O~P<lOPmO]$eOa%QOl:zO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V%]O)X!ZO)YXO)hcO)idO)j%[O~O]%hOd!POl%bO!V%kO!{!dO%v$mO(r;OO)S%dO)U%iO)V%iO~O(v%mO~O)W#jO~O(r%nO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!g(tX)j(tX!O(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OP%oO(oQO~PCQO]%hOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%o!|O%v!}O)S;`O)U|O)V|O~Ol%rO!o%wO(r$xO~PE_O!TxO#v!eO(v%yO)j%|O])eX!V)eX~O]%hOd!POl%rO!V%kO!{!dO%v!}O(r$xO)S;`O)U|O)V|O~O!TxO#v!eO)W&PO)j&QO~O!U&TO~P!QO]&YO!TxO!V&WO)S&VO)U&ZO)V&ZO~Op&UO~PHrO]&cO!V&bO~OPmO]eOd!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)SaO)U|O)V{O)X!ZO)YXO)hcO)idO~Oa%QOl:zO%v$mO(r$xO~PIgO]%hOd!POl;[O!V%kO!{!dO%v$mO(r$xO)S;`O)U|O)V|O~Op&fO](tX])eX!V(tX!V)eX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!O(tX!O)eX!U(tX~O!g$YO)j$YO~PL]O!g(tX)j(tX~PL]O](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!g(tX)j(tX!O(tX!U(tX~O])eX!V)eX!O)eX~PNkOa&hO&m!RO]&lXd&lXl&lXr&lXs&lXt&lXu&lXv&lXw&lXx&lXy&lX}&lX!V&lX!r&lX!s&lX!t&lX!u&lX!v&lX!x&lX!{&lX%v&lX&r&lX&s&lX(r&lX)S&lX)U&lX)V&lX)W&lX!O&lX!T&lX!X&lX!Y&lX![&lX!^&lX!_&lX!a&lX!b&lX!c&lX!e&lX!f&lX!h&lX(u&lX(w&lX(x&lX)T&lX)X&lX!g&lX)j&lX!W&lXQ&lX!d&lX(v&lX!U&lX#v&lX~Op&fOl(}X!O(}XQ(}X!d(}X!h(}X)X(}X)j(}X~P.ZO!g$YO)j$YO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)W(tX)X(tX!O(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O](}Xd(}Xl(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X!O(}XQ(}X!d(}X!h(}X)X(}X)j(}X~O]#}O~P!*qO]&lO~O])bXa)bXd)bXl)bXr)bXs)bXt)bXu)bXv)bXw)bXx)bXy)bX{)bX})bX!V)bX!o)bX!r)bX!s)bX!t)bX!u)bX!v)bX!x)bX!{)bX#a)bX#b)bX%e)bX%l)bX%o)bX%v)bX&m)bX&r)bX&s)bX(r)bX)S)bX)U)bX)V)bX~O(oQO~P!-ZO%U&nO~P!-ZO]&oO~O]#}O~O!TxO~O$W&wO(r%nO(v&vO~O]&xOw&zO~O]&xO~OPmO]$eOa%QOl:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:mO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O]'PO~O!T$WO)W'RO~P!(zO)W'TO~O)W'UO~O(r'VO~O)W'YO~P!(zOl;^O%U'^O%e'^O(r;PO~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O(v'bO~O)W'dO~P!(zO!TxO(r%nO)j'fO~O(r%nO~O]'iO~O]'jOd%nXl%nX!V%nX!{%nX%v%nX(r%nX)S%nX)U%nX)V%nX~O]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~P8zO]%hOa!TOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO)S;`O)U|O)V|O~Ol;_Op&UO%v$mO(r;QO~P!8jO(r%nO(v'vO)W'wO~O]&cO!T'yO~Ol$oO}!_O!T(QO!l(VO(r$nO(v(PO)PYO~Ol$oO{(^O!T(ZO#b(^O(r$nO~Oa!TOl$oO{#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O](`O~OPmOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)YXO)hcO)idO~O](bO)X(cO~P!=UO]#}O~P!<[OPmO]$eOa%QOl:zO!V(iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~OY(jO(oQO(r%nO~O'f(mO~OS(qOT(nO*W(pO~O]#}O(n(tO~Q'nXX#dO(p#dO(q(vO~Od)QOl({O&r#WO(r(zO~O!Y'Sa!['Sa!^'Sa!_'Sa!a'Sa!b'Sa!c'Sa!e'Sa!f'Sa!h'Sa(u'Sa)S'Sa)T'Sa)U'Sa)V'Sa)W'Sa)X'Sa!g'Sa)j'Sa!O'Sa!W'Sa(v'Sa!U'SaQ'Sa!d'Sa~OPmOa%QOl:zO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)YXO)hcO)idO]'Sa!V'Sa!X'Sa(w'Sa(x'Sa~P!B_O!T$WO!O(sP~P!(zO]nX]%WXdnXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!TnX!VnX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gmX!h%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX(u%WX(w%WX(x%WX)SnX)S%WX)T%WX)UnX)U%WX)VnX)V%WX)W%WX)X%WX)jmX!O%WX~O)WnX!OnX!U%WX~P!E{O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~P8zOPmO]$eOa%QOl:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O!V)lO~P!JwOd)oO%Y)pO(y$OO~O!T$WO!V)rO(w)sO!U)rP~P!JwO!T$WO~P!(zO)[)zO~Ol){O]!QX!h!QX)X!QX)]!QX~O])}O!h*OO)X)QX)])QX~O)X*SO)]*RO~Od$RO%Y*TO'[$TO'_$UO(y$OO~Ol*UO~Ol*UO!O(}X~P.ZOl*UO!g$YO)j$YO~O)W*VO~P:nOPmO]$eOa!]Ol$_Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)X!ZO)YXO)hcO)idO~Op&fO~P!&zOp&fO!W(tX(v(tXQ(tX!d(tX~PNkO]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~O]iXdiXlgXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX!TiX!hiX)XiX)jiX!OiX~O!liX(viX)WiX!XiX!YiX![iX!^iX!_iX!aiX!biX!ciX!eiX!fiX(uiX(wiX(xiX)TiX!giX!WiXQiX!diX!UiX#viX#TiX#ViX#piXaiX{iX!oiX#aiX#biX#iiX#tiX${iX%ciX%eiX%kiX%liX%oiX&miX)PiX~P#%yO(y*ZO~Ol*[O~O](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)W(}X!T(}X!X(}X!Y(}X![(}X!^(}X!_(}X!a(}X!b(}X!c(}X!e(}X!f(}X!h(}X(u(}X(w(}X(x(}X)T(}X)X(}X!g(}X)j(}X!O(}X!W(}XQ(}X!d(}X(v(}X!U(}X#v(}X~Ol*[O~P#+ROr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])aad)aal)aa!V)aa!{)aa%v)aa(r)aa)S)aa)U)aa)V)aaQ)aa!d)aa!h)aa)X)aa)j)aa!O)aa!T)aa(v)aa)W)aa~O&r#WO&s$wO~P#.qOp&fOl(}X~P#+RO&r)aa~P#.qO]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(wZX(xZX)SZX)TZX)UZX)VZX)WZX)XZX)jZX!OZX~O!WZX(vZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(w#kO(x#kO~O!Y&xa![&xa!^&xa!_&xa!a&xa!b&xa!c&xa!e&xa!f&xa!g&xa!h&xa(u&xa)S&xa)T&xa)U&xa)V&xa)W&xa)X&xa)j&xa!O&xa!W&xa(v&xa!U&xaQ&xa!d&xa~P#3zOl;hO!T$WO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PKkOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PKkO]&cO!V&bO!O#Qa!T#Qa!h#Qa#v#Qa)W#Qa)j#QaQ#Qa!d#Qa(v#Qa~Op&fO!T$WO~O!O*cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O*cO~O]&cO!O*eO!V&bO~O]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO&r#WO&s$wO)S&VO)U&ZO)V&ZO~O!OqXQqX!dqX!hqX)XqX)WqX~P#9{O!O*hO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!W)kX~P#3zO!W*kO!h*lO~O!W*kO!h*lO~P!(zO!W*kO~Op&fO!g$YO!h*mO)j$YO](tX!V(tX!W(tX!W*OX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX(u(tX(w(tX(x(tX)S(tX)T(tX)U(tX)V(tX)X(tX~O!h(tX~P#=ZO!W*oO~Od$RO%Y*TO(y:rO~Ol;kO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PBUO]*vO!T*qO!V&bO!h*tO#v!eO)j*rO)W)qX~O!h*tO)W)qX~O)W*wO~Op&fO])eX!T)eX!V)eX!h)eX#v)eX)W)eX)j)eX!O)eXQ)eX!d)eX(v)eX~Op&fO~OP%oO(oQO]%ha!V%ha!X%ha!Y%ha![%ha!^%ha!_%ha!a%ha!b%ha!c%ha!e%ha!f%ha!h%ha(r%ha(u%ha(w%ha(x%ha)S%ha)T%ha)U%ha)V%ha)W%ha)X%ha!g%ha)j%ha!O%ha!W%ha(v%ha!U%haQ%ha!d%ha~Od$RO%Y$SO(y:oO~Ol:wO~O!TxO#v!eO)j%|O~Ol<[O&r#WO(r;gO~O$Z+TO%`+UO~O!TxO#v!eO)W+VO)j+WO~OPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO$Z+TO%_#ZO%`+YO%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O!U+ZO~P!QOa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+aO#b+bO#i+cO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO)PYO~OQ)lP!d)lP~P#GgO]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO)S&VO)U&ZO)V&ZO~O!O#kX!T#kX#v#kX)W#kX)j#kXQ#kX!d#kX!h#kX)X#kX!x#kX(v#kX~P#IkOPmO]$eOa%QOl:zOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!W+iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S+jO)V$kO)X!ZO)YXO)hcO)idO~O]&cO!V+kO~O]&YO!V&WO)PYO)S&VO)U&ZO)V&ZO)X+nO!O)dP~P8zO]&YO!V&WO)S&VO)U&ZO)V&ZO~O!O#nX!T#nX#v#nX)W#nX)j#nXQ#nX!d#nX!h#nX)X#nX!x#nX(v#nX~P#NeO!TxO])nX!V)nX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O#T+vO#p+wO(x+tO)U+rO)V+rO~O]#jX!T#jX!V#jX!O#jX#v#jX)W#jX)j#jXQ#jX!d#jX!h#jX)X#jX!x#jX(v#jX~P$ xO#V+yO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+zO#T+vO#V+yO#p+wO(x+tO)U+zO)V+zO])fP!T)fP!V)fP#v)fP(v)fP)j)fP!O)fP!h)fP)W)fP~O!x)fPQ)fP!d)fP~P$#uOPmO]$eOa%QOl:zOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)V$kO)X!ZO)YXO)hcO)idO~O!W,QO)S,RO~P$%pO)PYO)X+nO!O)dP~P8zO]&cO!V&bO!O&Za!T&Za!h&Za#v&Za)W&Za)j&ZaQ&Za!d&Za(v&Za~OPmO]$eOa!]Ol:|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;RO)S$kO)V$kO)X!ZO)YXO)hcO)idO~OQ(zP!d(zP~P$)YO]#}O!V#lO(w#kO(x#kO!X'Pa!Y'Pa!['Pa!^'Pa!_'Pa!a'Pa!b'Pa!c'Pa!e'Pa!f'Pa!h'Pa(u'Pa)S'Pa)T'Pa)U'Pa)V'Pa)W'Pa)X'Pa!g'Pa)j'Pa!O'Pa!W'Pa(v'Pa!U'PaQ'Pa!d'Pa~O]#}O!V#lO!X#{O(w#kO(x#kO~P!B_O!TxO#t!fO)PYO~P8zO!TxO(r%nO)j,[O~O#x,aO~OQ)aX!d)aX!h)aX)X)aX)j)aX!O)aX!T)aX(v)aX)W)aX~P:nO(v,eO(w,cO)P$UX)W$UX~O(r,fO~O)PYO)W,iO~OPmO]$eOa!]Ol:{Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O(r;SO~P$0kOPmO]$eOa%QOl:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:mO)PYO)S$kO)V$kO)WiO)X!ZO)YXO)hcO)idO~O$h,sO~OPmO]$eOa!]Ol:{Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO$}!uO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)S$kO)V$kO)X!ZO)YXO)hcO)idO~O${,yO(r:}O)W,wO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W,{O)X#|O~P#3zO)W,{O~O)W,|O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W,}O)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W-OO)X#|O~P#3zOp&fO)PYO)j-QO~O)W-RO~Ol;^O(r;PO~O]-YO!{!dO&r#WO&s$wO(r-UO)S-VO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v-]O)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xa!o$Xa!{$Xa#i$Xa#p$Xa#t$Xa#v$Xa$R$Xa$T$Xa$Y$Xa$Z$Xa${$Xa%U$Xa%c$Xa%g$Xa%o$Xa%|$Xa(k$Xa)U$Xa!U$Xa$c$Xa~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W-cO)X#|O~P#3zOl-eO!TxO)j,[O~O)j-gO~O]&]a!X&]a!Y&]a![&]a!^&]a!_&]a!a&]a!b&]a!c&]a!e&]a!f&]a!h&]a(u&]a(w&]a(x&]a)T&]a)U&]a)V&]a)W&]a)X&]a!g&]a)j&]a!O&]a!W&]a!T&]a#v&]a(v&]a!U&]aQ&]a!d&]a~O)S-kO!V&]a~P$DbO!O-kO~O!W-kO~O!V-lO)S&]a~P$DbO](}Xd(}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X~Ol;mO~P$GQO]&cO!V&bO)W-mO~Ol;cO!o-pO#V+yO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)PYO~P!8jO!n-yO(r,fO~O)PYO)W-{O~OPmO]$eOa%QOl:zO!T.QO!V$fO!X!XO!Y!WO!i!YO#V.XO#a.WO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO(x.PO)S$kO)V$kO)W-}O)X!ZO)YXO)hcO)idO~O!U.VO~P$JbO])^Xd)^Xr)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^X})^X!T)^X!V)^X!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)S)^X)U)^X)V)^X)W)^X!O)^X!h)^X)X)^X!X)^X!Y)^X![)^X!^)^X!_)^X!a)^X!b)^X!c)^X!e)^X!f)^X(u)^X(w)^X(x)^X)T)^X!g)^X)j)^X!W)^XQ)^X!d)^X#T)^X#V)^X#p)^X#v)^Xa)^X{)^X!o)^X#a)^X#b)^X#i)^X#t)^X${)^X%c)^X%e)^X%k)^X%l)^X%o)^X&m)^X)P)^X!U)^X~Ol*[O~P$LlOl$oO!T(QO!l.^O(r$nO(v(PO)PYO~Op&fOl)^X~P$LlOl$oO!n.cO!o.cO(r$nO)PYO~Ol;dO!U.nO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)PYO~P!8jO!T(QO!l.^O(v(PO])OXd)OXl)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%v)OX&r)OX&s)OX(r)OX)S)OX)U)OX)V)OX~O)W)OX!O)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(u)OX(w)OX(x)OX)T)OX)X)OX!g)OX)j)OX!W)OXQ)OX!d)OX!U)OX#v)OX~P%%eO!T(QO~O!T(QO(v(PO~O(r%nO!U*QP~O!T(ZO(v.uO]&kad&kal&kar&kas&kat&kau&kav&kaw&kax&kay&ka}&ka!V&ka!r&ka!s&ka!t&ka!u&ka!v&ka!x&ka!{&ka%v&ka&r&ka&s&ka(r&ka)S&ka)U&ka)V&ka)W&ka!O&ka!X&ka!Y&ka![&ka!^&ka!_&ka!a&ka!b&ka!c&ka!e&ka!f&ka!h&ka(u&ka(w&ka(x&ka)T&ka)X&ka!g&ka)j&ka!W&kaQ&ka!d&ka!U&ka#v&ka~Ol$oO!T(ZO(r$nO~O&r#WO&s$wO]&pad&pal&par&pas&pat&pau&pav&paw&pax&pay&pa}&pa!V&pa!r&pa!s&pa!t&pa!u&pa!v&pa!x&pa!{&pa%v&pa(r&pa)S&pa)U&pa)V&pa)W&pa!O&pa!T&pa!X&pa!Y&pa![&pa!^&pa!_&pa!a&pa!b&pa!c&pa!e&pa!f&pa!h&pa(u&pa(w&pa(x&pa)T&pa)X&pa!g&pa)j&pa!W&paQ&pa!d&pa(v&pa!U&pa#v&pa~O&s.zO~P!(zO!Y#qO![#rO!f#zO)S#mO!^'Ua!_'Ua!a'Ua!b'Ua!c'Ua!e'Ua!h'Ua(u'Ua)T'Ua)U'Ua)V'Ua)W'Ua)X'Ua!g'Ua)j'Ua!O'Ua!W'Ua(v'Ua!U'UaQ'Ua!d'Ua~P#3zO!V'dX!X'dX!Y'dX!['dX!^'dX!_'dX!a'dX!b'dX!c'dX!e'dX!f'dX!h'dX(u'dX(w'dX(x'dX)S'dX)T'dX)U'dX)V'dX)X'dX!O'dX~O].|O)W'dX!g'dX)j'dX!W'dX(v'dX!U'dXQ'dX!d'dX~P%2xO!Y#qO![#rO!f#zO)S#mO!^'Wa!_'Wa!a'Wa!b'Wa!c'Wa!e'Wa!h'Wa(u'Wa)T'Wa)U'Wa)V'Wa)W'Wa)X'Wa!g'Wa)j'Wa!O'Wa!W'Wa(v'Wa!U'WaQ'Wa!d'Wa~P#3zO]#}O!T$WO!V.}O&r#WO&s$wO~O!X'Za!Y'Za!['Za!^'Za!_'Za!a'Za!b'Za!c'Za!e'Za!f'Za!h'Za(u'Za(w'Za(x'Za)S'Za)T'Za)U'Za)V'Za)W'Za)X'Za!g'Za)j'Za!O'Za!W'Za(v'Za!U'ZaQ'Za!d'Za~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^a)W'^a!g'^a)j'^a!O'^a!W'^a(v'^a!U'^aQ'^a!d'^a~P#3zOPmO]$eOa%QOl:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)S$kO)V%]O)X!ZO)YXO)hcO)idO)j%[O~O!W/QO~P%:oOS(qOT(nO]#}O*W(pO~O]/TO'f/UO*W/RO~OS/YOT(nO*W/XO~O]#}O~Q'na!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v/[O)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W#Zi!O#Zi~P#3zO]cXlgXpcXpiX!VcX!XcX!YcX![cX!^cX!_cX!acX!bcX!ccX!ecX!fcX!gcX!hcX(ucX(wcX(xcX)ScX)TcX)UcX)VcX)WcX)XcX)jcX!OcX!WcX(vcX!TcX#vcX!UcXQcX!dcX~Od/^O%Y*TO(y/]O~Ol/_O~Ol/`O~Op&fO]bi!Vbi!Xbi!Ybi![bi!^bi!_bi!abi!bbi!cbi!ebi!fbi!gbi!hbi(ubi(wbi(xbi)Sbi)Tbi)Ubi)Vbi)Wbi)Xbi)jbi!Obi!Wbi(vbi!UbiQbi!dbi~O!W/bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO![#rO)S#mO!Y&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y&zi![&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)S&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)U#nO)V#pO!h&zi(u&zi)T&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!^&zi!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)V#pO!^&zi!_&zi!h&zi(u&zi)T&zi)U&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO!^&zi!_&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)S#mO!^&zi!_&zi!a&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!f#zO)S#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO)S#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)T#oO)U#nO)V#pO!h&zi(u&zi)W&zi)X&zi!g&zi)j&zi!O&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/cO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O(sX~P#3zO!h/cO!O(sX~O!O/eO~O]%Xap%Xa!X%Xa!Y%Xa![%Xa!^%Xa!_%Xa!a%Xa!b%Xa!c%Xa!e%Xa!f%Xa!h%Xa(u%Xa(w%Xa(x%Xa)T%Xa)U%Xa)V%Xa)W%Xa)X%Xa!g%Xa)j%Xa!O%Xa!W%Xa!T%Xa#v%Xa(v%Xa!U%XaQ%Xa!d%Xa~O)S/fO!V%Xa~P&,aO!O/fO~O!W/fO~O!V/gO)S%Xa~P&,aO!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)S'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi!g'Zi)j'Zi!O'Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^i)W'^i!g'^i)j'^i!O'^i!W'^i(v'^i!U'^iQ'^i!d'^i~P#3zO!W/lO~P%:oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/nO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U)rX~P#3zO(r/qO~O!V/sO(w)sO)j/uO~O!h/nO!U)rX~O!U/vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)S#mO)T#oO)U#nO)V#pO)X#|O!h_i(u_i)W_i!g_i)j_i!O_i!W_i(v_i!U_iQ_i!d_i~P#3zO!R/wO~Ol){O]!Qa!h!Qa)X!Qa)]!Qa~OP0PO]0OOl0PO!R0PO!T/|O!V/}O!X0PO!Y0PO![0PO!^0PO!_0PO!a0PO!b0PO!c0PO!e0PO!f0PO!g0PO!h0PO!i0PO(oQO(v0PO(w0PO(x0PO)S/yO)T/zO)U/zO)V/{O)W0PO)X0PO)YXO~O!O0SO~P&6yO!R$[O~O!h*OO)X)Qa)])Qa~O)]0WO~O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~Od)oO%Y*TO(y$OO~O)W0YO~O]nXdnXlmXpnXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX!TnX!hnX)XnX!OnXQnX!dnX~O!lnX(vnX)WnX!XnX!YnX![nX!^nX!_nX!anX!bnX!cnX!enX!fnX(unX(wnX(xnX)TnX!gnX)jnX!WnX!UnX#vnX#TnX#VnX#pnXanX{nX!onX#anX#bnX#inX#tnX${nX%cnX%enX%knX%lnX%onX&mnX)PnX~P&:uOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])aid)ail)ai!V)ai!{)ai%v)ai(r)ai)S)ai)U)ai)V)aiQ)ai!d)ai!h)ai)X)ai)j)ai!O)ai!T)ai&r)ai(v)ai)W)ai~P&?sO]&cO!V&bO!O#Qi!T#Qi!h#Qi#v#Qi)W#Qi)j#QiQ#Qi!d#Qi(v#Qi~O!OqaQqa!dqa!hqa)Xqa)Wqa~P#9{O!OqaQqa!dqa!hqa)Xqa)Wqa~P#IkO]&cO!V+kO!OqaQqa!dqa!hqa)Xqa)Wqa~O!h*iO!W)ka~O!h*mO!W*Oa~OPmOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!X!XO!Y!WO!i!YO!s!aO!t!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO)PYO)WiO)X!ZO)YXO)hcO)idO~O]eOd!POlTO!T*qO!U&TO!V0hO!opO!r!`O!u!bO!{!dO#i#OO#p!xO#t!fO$R!gO$T!hO${!tO$}!uO%U!yO%c!zO%g!{O%o!|O%v!}O%|#PO(rRO(w)sO)SaO)U|O)V{O~P&DuO!h*tO)W)qa~OPmO]$eOa!]Ol:|O{#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;UO)PYO)S$kO)V$kO)X0nO)YXO)hcO)idO!O(sP!O)dP~P&?sO!h*mO!W*OX~O]#}O!T$WO~O!h0sO!T)zX#v)zX)j)zX~O)W0uO~O)W0vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W0xO)X#|O~P#3zO)W0vO~P!?WO]1SOd!POl%bO!V1QO!{!dO%v$mO(r$xO)S0zO)X0}O~O)U1OO)V1OO)j0{OQ#PX!d#PX!h#PX!O#PX~P' dO!h1TOQ)lX!d)lX~OQ1VO!d1VO~O)X1YO)j1XOQ#`X!d#`X!h#`X~P!<[O)X1YO)j1XOQ#`X!d#`X!h#`X~P!;bOp&UO~O!O#ka!T#ka#v#ka)W#ka)j#kaQ#ka!d#ka!h#ka)X#ka!x#ka(v#ka~P#IkO]&cO!V+kO!O#ka!T#ka#v#ka)W#ka)j#kaQ#ka!d#ka!h#ka)X#ka!x#ka(v#ka~O!W1_O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W1_O)S1aO~P$%pO!W1_O~P!(zO]#ja!T#ja!V#ja!O#ja#v#ja)W#ja)j#jaQ#ja!d#ja!h#ja)X#ja!x#ja(v#ja~P$ xO]&cO!O1eO!V+kO~O!h1fO!O)dX~O!O1hO~O]&cO!V+kO!O#na!T#na#v#na)W#na)j#naQ#na!d#na!h#na)X#na!x#na(v#na~O]1lOr#SXs#SXt#SXu#SXv#SXw#SXx#SXy#SX!T#SX!V#SX#T#SX#p#SX(x#SX)U#SX)V#SX!l#SX!x#SX#V#SX#v#SX(v#SX)j#SX!O#SX!h#SX)W#SXQ#SX!d#SX)X#SX~O]1mO~O]1pOl$oO!V$fO#V#QO(r$nO)hcO)idO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+zO#T+vO#V+yO#p+wO(x+tO)U+zO)V+zO~O])fX!T)fX!V)fX!x)fX#v)fX(v)fX)j)fX!O)fX!h)fX)W)fXQ)fX!d)fX~P'+}O!x!cO]#Ri!T#Ri!V#Ri#v#Ri(v#Ri)j#Ri!O#Ri!h#Ri)W#RiQ#Ri!d#Ri~O!W1xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W1xO)S1zO~P$%pO!W1xO~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ*RX!d*RX!h*RX~P#3zO)X1{OQ({X!d({X!h({X~O!h1|OQ(zX!d(zX~OQ2OO!d2OO~O!O2PO~O#t$lO)PYO~P8zOl-eO!TxO)j2TO~O!O2UO~O#x,aOP#ui]#uia#uid#uil#uir#uis#uit#uiu#uiv#uiw#uix#uiy#ui{#ui}#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$R#ui$T#ui$Y#ui$Z#ui$`#ui$e#ui$g#ui$h#ui$k#ui$m#ui$o#ui$q#ui$s#ui$u#ui$w#ui${#ui$}#ui%U#ui%_#ui%`#ui%a#ui%c#ui%e#ui%g#ui%l#ui%o#ui%v#ui%|#ui&m#ui&r#ui&s#ui'Q#ui'R#ui'V#ui'Y#ui'a#ui'b#ui(k#ui(o#ui(r#ui)P#ui)S#ui)U#ui)V#ui)W#ui)X#ui)Y#ui)h#ui)i#ui!U#ui$c#ui!n#ui%k#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(v2ZO(w,cO)P$Ua)W$Ua~O)PYO)W2]O~O!O2^O~P,]O!O2^O)W#jO~O!O2^O~O$c2cOP$_i]$_ia$_id$_il$_ir$_is$_it$_iu$_iv$_iw$_ix$_iy$_i{$_i}$_i!T$_i!V$_i!X$_i!Y$_i!i$_i!o$_i!r$_i!s$_i!t$_i!u$_i!v$_i!x$_i!{$_i#V$_i#a$_i#b$_i#i$_i#p$_i#t$_i#v$_i$R$_i$T$_i$Y$_i$Z$_i$`$_i$e$_i$g$_i$h$_i$k$_i$m$_i$o$_i$q$_i$s$_i$u$_i$w$_i${$_i$}$_i%U$_i%_$_i%`$_i%a$_i%c$_i%e$_i%g$_i%l$_i%o$_i%v$_i%|$_i&m$_i&r$_i&s$_i'Q$_i'R$_i'V$_i'Y$_i'a$_i'b$_i(k$_i(o$_i(r$_i)P$_i)S$_i)U$_i)V$_i)W$_i)X$_i)Y$_i)h$_i)i$_i!U$_i~O]1pO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W2fO)X#|O~P#3zOPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)W2iO)X!ZO)YXO)hcO)idO~P&?sO)W2fO~O(r-UO~O)PYO)j2lO~O)W2nO~O]-YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO(r-UO)S-VO~O)S2sO~O]&cO!V2uO!h2vO)W)uX~O]-YO!{!dO(r-UO)S-VO~O)W2yO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xi!o$Xi!{$Xi#i$Xi#p$Xi#t$Xi#v$Xi$R$Xi$T$Xi$Y$Xi$Z$Xi${$Xi%U$Xi%c$Xi%g$Xi%o$Xi%|$Xi(k$Xi)U$Xi!U$Xi$c$Xi~P$0kOl:{O(r:nO~P0zO]2}O~O)W2SO~O!u3PO(r%nO~O!O3SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3TO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O3UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO]&cO!V+kO!T%ui#v%ui)W%ui)j%ui~O!W3VO~Ol:yO)W(}X~P$GQOa!TOl$oO{3]O#a#VO#b3[O#t!fO%e#UO%l3^O&m!RO&r#WO&s!TO(r$nO)PYO~P&?sOl;cO!o-pO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)PYO~P!8jO]&cO!V&bO)W3`O~O)W3aO~O)PYO)W3aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W3bO)X#|O~P#3zO)W3bO~O)W3eO~O!U3gO~P$JbOl$oO(r$nO~O]3iO!T'yO~P'+iO!T(QO!l3lO(v(PO])Oad)Oal)Oar)Oas)Oat)Oau)Oav)Oaw)Oax)Oay)Oa})Oa!V)Oa!r)Oa!s)Oa!t)Oa!u)Oa!v)Oa!x)Oa!{)Oa%v)Oa&r)Oa&s)Oa(r)Oa)S)Oa)U)Oa)V)Oa)W)Oa!O)Oa!X)Oa!Y)Oa![)Oa!^)Oa!_)Oa!a)Oa!b)Oa!c)Oa!e)Oa!f)Oa!h)Oa(u)Oa(w)Oa(x)Oa)T)Oa)X)Oa!g)Oa)j)Oa!W)OaQ)Oa!d)Oa!U)Oa#v)Oa~Ol$oO!n.cO!o.cO(r$nO~O!h3pO)X3rO!T)_X~O!o3tO)PYO~P8zO)W3uO~PGVO]3zOl({O!T$WO!{!dO%v$mO&r#WO(r(zO(v4OO)S3wO)U3{O)V3{O~O)W4PO)j4RO~P(&eOl;dO!U4TO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)PYO~P!8jOl;dO%v!}O(r;VO~P!8jO(v4UO~Ol$oO!T(QO(r$nO(v(PO)PYO~O!l3lO~P((sO)j4WO!U&oX!h&oX~O!h4XO!U*QX~O!U4ZO~Oa4]Ol$oO&m!RO(r$nO~O!T(ZO]&kid&kil&kir&kis&kit&kiu&kiv&kiw&kix&kiy&ki}&ki!V&ki!r&ki!s&ki!t&ki!u&ki!v&ki!x&ki!{&ki%v&ki&r&ki&s&ki(r&ki)S&ki)U&ki)V&ki)W&ki!O&ki!X&ki!Y&ki![&ki!^&ki!_&ki!a&ki!b&ki!c&ki!e&ki!f&ki!h&ki(u&ki(w&ki(x&ki)T&ki)X&ki!g&ki)j&ki!W&kiQ&ki!d&ki!U&ki#v&ki~O(v&ki~P(*TO(v.uO~P(*TO!O4`O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O4`O~O!O4aO~O]#}O!T$WO!V'Zi!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)S'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi!g'Zi)j'Zi!O'Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~OPmOa%QOl:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)X!ZO)YXO)hcO)idO]#]ap#]a!T#]a!V#]a)S#]a)U#]a)V#]a~O(r%nO)X4fO!O*YP~O*W4eO~O'f4hO*W4eO~O*W4iO~OlmXpnXp&wX~Od4kO%Y*TO(y/]O~Od4kO%Y*TO(y4lO~O!h/cO!O(sa~O!W4pO~O]&cO!V+kO!T%uq#v%uq)W%uq)j%uq~O]#}O!T$WO!X'Zq!Y'Zq!['Zq!^'Zq!_'Zq!a'Zq!b'Zq!c'Zq!e'Zq!f'Zq!h'Zq(u'Zq(w'Zq(x'Zq)S'Zq)T'Zq)U'Zq)V'Zq)W'Zq)X'Zq!g'Zq)j'Zq!O'Zq!W'Zq(v'Zq!U'ZqQ'Zq!d'Zq~O!V'Zq~P(5bO!V.}O&r#WO&s$wO~P(5bO!T$WO!V)rO(w)sO!U(UX!h(UX~P!JwO!h/nO!U)ra~O!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!U4|O~P&6yO!W4|O~P&6yO!O4|O~P&6yO!O5RO~P&6yO]5SO!h'ua)X'ua)]'ua~O!h*OO)X)Qi)])Qi~O]&cO!V&bO!O#Qq!T#Qq!h#Qq#v#Qq)W#Qq)j#QqQ#Qq!d#Qq(v#Qq~O!OqiQqi!dqi!hqi)Xqi)Wqi~P#IkO]&cO!V+kO!OqiQqi!dqi!hqi)Xqi)Wqi~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'Tq)W'Tq!g'Tq)j'Tq!O'Tq!W'Tq(v'Tq!U'TqQ'Tq!d'Tq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!W'|a!h'|a~P#3zO!W5XO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5YO(u#gO)S#mO)T#oO)U#nO)V#pO)W#jO)X#|O!U)rX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h#{i)W#{i~P#3zO]*vO!T$WO!V&bO)j*rO!h(Va)W(Va~O!h1fO]'dX!O)dX~P%2xO)X5[O!T%qa!h%qa#v%qa)j%qa~O!h0sO!T)za#v)za)j)za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W5_O)X#|O~P#3zO]1SOd!POl;[O!V1QO!{!dO%v$mO(r$xO)S;xO)U5aO)V5aO~OQ#Pa!d#Pa!h#Pa!O#Pa~P(DjO]1SOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V1QO!{!dO!|%RO%v$mO(r$xOQ#kX!d#kX!h#kX!O#kX~Ol%bO)S0zO)U;yO)V;yO~P(ElO]&cOQ#Pa!d#Pa!h#Pa!O#Pa~O!V&bO)j5eO~P(GZO(r%nOQ#dX!d#dX!h#dX!O#dX~O)U;yO)V;yOQ#nX!d#nX!h#nX!O#nX~P' dO!V+kO~P(GZO]1SOa!TOd!POl;]O{#RO!V1QO!{!dO#a#VO#b#TO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO(r;QO)PYO)S;xO)U5aO)V5aO)X+nO!O)dP~P&?sO!h1TOQ)la!d)la~Op&fO)j5jOQ#`al(}X!d#`a!h#`a)X(}X~P$GQO(r-UOQ#ga!d#ga!h#ga~Op&fO)j5jOQ#`a])^Xd)^Xl)^Xr)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^X})^X!T)^X!V)^X!d#`a!h#`a!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)S)^X)U)^X)V)^X)X)^X~O#a5mO#b5mO~O]&cO!V+kO!O#ki!T#ki#v#ki)W#ki)j#kiQ#ki!d#ki!h#ki)X#ki!x#ki(v#ki~O!W5oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W5oO~P!(zO!W5oO)S5qO~P$%pO]#ji!T#ji!V#ji!O#ji#v#ji)W#ji)j#jiQ#ji!d#ji!h#ji)X#ji!x#ji(v#ji~P$ xO)PYO)X5sO~P8zO!h1fO!O)da~O&r#WO&s$wO!T#qa!x#qa#v#qa(v#qa)j#qa!O#qa!h#qa)W#qaQ#qa!d#qa)X#qa~P#NeO!O5xO~P!(zO!O)oP~P!4xO)T6OO)U5|O]#Ua!T#Ua!V#Ua)S#Ua)V#Uar#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(v#Ua(x#Ua)j#Uaa#Uad#Ual#Ua{#Ua}#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua${#Ua%c#Ua%e#Ua%k#Ua%l#Ua%o#Ua%v#Ua&m#Ua&r#Ua&s#Ua(r#Ua)P#Ua)W#Ua!O#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(v#Rq)j#Rq!O#Rq!h#Rq)W#RqQ#Rq!d#Rq~O!W6TO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W6TO~P!(zO!h1|OQ(za!d(za~O)W6YO~Ol-eO!TxO)j6ZO~O]*vO!T$WO!V&bO!h*tO)W)qX~O)j6_O~P)+cO!O6aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O6aO~O$c6cOP$_q]$_qa$_qd$_ql$_qr$_qs$_qt$_qu$_qv$_qw$_qx$_qy$_q{$_q}$_q!T$_q!V$_q!X$_q!Y$_q!i$_q!o$_q!r$_q!s$_q!t$_q!u$_q!v$_q!x$_q!{$_q#V$_q#a$_q#b$_q#i$_q#p$_q#t$_q#v$_q$R$_q$T$_q$Y$_q$Z$_q$`$_q$e$_q$g$_q$h$_q$k$_q$m$_q$o$_q$q$_q$s$_q$u$_q$w$_q${$_q$}$_q%U$_q%_$_q%`$_q%a$_q%c$_q%e$_q%g$_q%l$_q%o$_q%v$_q%|$_q&m$_q&r$_q&s$_q'Q$_q'R$_q'V$_q'Y$_q'a$_q'b$_q(k$_q(o$_q(r$_q)P$_q)S$_q)U$_q)V$_q)W$_q)X$_q)Y$_q)h$_q)i$_q!U$_q~O)W6dO~OPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)S$kO)V$kO)W6fO)X!ZO)YXO)hcO)idO~P&?sO(v6hO)j*rO~P)+cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W6fO)X#|O~P#3zO!O6jO~P!(zO)W6nO~O)W6oO~O]-YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO(r-UO)S-VO~O]&cO!V2uO!h%Oa)W%Oa!O%Oa~O!W6uO)S6vO~P$%pO!h2vO)W)ua~O]&cO!O6yO!V2uO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOd$Xq!o$Xq!{$Xq#i$Xq#p$Xq#t$Xq#v$Xq$R$Xq$T$Xq$Y$Xq$Z$Xq${$Xq%U$Xq%c$Xq%g$Xq%o$Xq%|$Xq(k$Xq)U$Xq!U$Xq$c$Xq~P$0kOPmO]$eOa!]Ol:{O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r:}O)PYO)S$kO)V$kO)W6{O)X!ZO)YXO)hcO)idO~P&?sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W7OO)X#|O~P#3zO)W7PO~OP7QO(oQO~Ol*[O)W)^X~P$GQOp&fOl(}X)W)^X~P$GQO)W7SO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W&Sa~P#3zO!U7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO)W7VO~OPmO]$eOa!]Ol:|O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r;UO)PYO)S$kO)V$kO)X0nO)YXO)hcO)idO!O)dP~P&?sO!h3pO)X7ZO!T)_a~O!h3pO!T)_a~O)W7`O)j7bO~P(&eO)W7dO~PGVO]3zOl({Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO%v$mO&r#WO(r(zO)S3wO)U3{O)V3{O~O)S7hO~O]&cO!T*qO!V7jO!h7kO#v!eO(v4OO~O)W7`O)j7mO~P)FwO]3zOl({O!{!dO%v$mO&r#WO(r(zO)S3wO)U3{O)V3{O~Op&fO])cX!T)cX!V)cX!h)cX#v)cX(v)cX)W)cX)j)cX!O)cX~O)W7`O~O!T(QO!l7sO(v(PO])Oid)Oil)Oir)Ois)Oit)Oiu)Oiv)Oiw)Oix)Oiy)Oi})Oi!V)Oi!r)Oi!s)Oi!t)Oi!u)Oi!v)Oi!x)Oi!{)Oi%v)Oi&r)Oi&s)Oi(r)Oi)S)Oi)U)Oi)V)Oi)W)Oi!O)Oi!X)Oi!Y)Oi![)Oi!^)Oi!_)Oi!a)Oi!b)Oi!c)Oi!e)Oi!f)Oi!h)Oi(u)Oi(w)Oi(x)Oi)T)Oi)X)Oi!g)Oi)j)Oi!W)OiQ)Oi!d)Oi!U)Oi#v)Oi~O(r%nO!U(fX!h(fX~O!h4XO!U*Qa~Op&fO]*Pad*Pal*Par*Pas*Pat*Pau*Pav*Paw*Pax*Pay*Pa}*Pa!T*Pa!V*Pa!r*Pa!s*Pa!t*Pa!u*Pa!v*Pa!x*Pa!{*Pa%v*Pa&r*Pa&s*Pa(r*Pa)S*Pa)U*Pa)V*Pa)W*Pa!O*Pa!X*Pa!Y*Pa![*Pa!^*Pa!_*Pa!a*Pa!b*Pa!c*Pa!e*Pa!f*Pa!h*Pa(u*Pa(w*Pa(x*Pa)T*Pa)X*Pa!g*Pa)j*Pa!W*PaQ*Pa!d*Pa(v*Pa!U*Pa#v*Pa~O!T(ZO]&kqd&kql&kqr&kqs&kqt&kqu&kqv&kqw&kqx&kqy&kq}&kq!V&kq!r&kq!s&kq!t&kq!u&kq!v&kq!x&kq!{&kq%v&kq&r&kq&s&kq(r&kq)S&kq)U&kq)V&kq)W&kq!O&kq!X&kq!Y&kq![&kq!^&kq!_&kq!a&kq!b&kq!c&kq!e&kq!f&kq!h&kq(u&kq(w&kq(x&kq)T&kq)X&kq!g&kq)j&kq!W&kqQ&kq!d&kq(v&kq!U&kq#v&kq~OPmOa%QOl:zO!T$WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(oQO(r$xO)YXO)hcO)idO~O]*Ui!V*Ui!X*Ui!Y*Ui![*Ui!^*Ui!_*Ui!a*Ui!b*Ui!c*Ui!e*Ui!f*Ui!h*Ui(u*Ui(w*Ui(x*Ui)S*Ui)T*Ui)U*Ui)V*Ui)W*Ui)X*Ui!g*Ui)j*Ui!O*Ui!W*Ui(v*Ui!U*UiQ*Ui!d*Ui~P*&WO!O7xO~O!W7yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^q)W'^q!g'^q)j'^q!O'^q!W'^q(v'^q!U'^qQ'^q!d'^q~P#3zO!h7zO!O*YX~O!O7|O~O*W7}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h^y)W^y!g^y)j^y!O^y!W^y(v^y!U^yQ^y!d^y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O(ha!h(ha~P#3zO]#}O!T$WO!V'Zy!X'Zy!Y'Zy!['Zy!^'Zy!_'Zy!a'Zy!b'Zy!c'Zy!e'Zy!f'Zy!h'Zy(u'Zy(w'Zy(x'Zy)S'Zy)T'Zy)U'Zy)V'Zy)W'Zy)X'Zy!g'Zy)j'Zy!O'Zy!W'Zy(v'Zy!U'ZyQ'Zy!d'Zy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!h'^y)W'^y!g'^y)j'^y!O'^y!W'^y(v'^y!U'^yQ'^y!d'^y~P#3zO]&cO!V+kO!T%uy#v%uy)W%uy)j%uy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U(Ua!h(Ua~P#3zO!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U#}i!h#}i~P#3zO!U8PO~P&6yO!W8PO~P&6yO!O8PO~P&6yO!O8RO~P&6yO]&cO!V&bO!O#Qy!T#Qy!h#Qy#v#Qy)W#Qy)j#QyQ#Qy!d#Qy(v#Qy~O]&cO!V+kO!OqqQqq!dqq!hqq)Xqq)Wqq~O]&cOQ#Pi!d#Pi!h#Pi!O#Pi~O!V+kO~P*9jOQ#nX!d#nX!h#nX!O#nX~P(DjO!V&bO~P*9jOQ(OX](OXd'qXl'qXr(OXs(OXt(OXu(OXv(OXw(OXx(OXy(OX!V(OX!d(OX!h(OX!{'qX%v'qX(r'qX)S(OX)U(OX)V(OX!O(OX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ#_i!d#_i!h#_i!O#_i~P#3zO&r#WO&s$wOQ#fi!d#fi!h#fi~O(r-UO)X1YO)j1XOQ#`X!d#`X!h#`X~O!W8WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W8WO~P!(zO!T#qi!x#qi#v#qi(v#qi)j#qi!O#qi!h#qi)W#qiQ#qi!d#qi)X#qi~O]&cO!V+kO~P*?fO]&YO!V&WO&r#WO&s$wO)S&VO)U&ZO)V&ZO~P*?fO!O8YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!h8ZO!O)oX~O!O8]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ*TX!d*TX!h*TX~P#3zO)X8`OQ*SX!d*SX!h*SX~O)W8bO~O!O$bi!h#{a)W#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W8eO)X#|O~P#3zO!O8gO~P!(zO!O8gO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O8gO~O]&cO!V&bO(v8mO~O)W8nO~O]&cO!V2uO!h%Oi)W%Oi!O%Oi~O!W8qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W8qO)S8sO~P$%pO!W8qO~P!(zO]&cO!V2uO!h(Ya)W(Ya~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)W8tO)X#|O~P#3zO)W2iO~P!(zO)W8tO~OP%oO!O8uO(oQO~O!O8uO~O)W8vO~P%%eO#T8yO(x.PO)W8wO~O!h3pO!T)_i~O)X8}O!T'wa!h'wa~O)W9PO)j9RO~P)FwO)W9PO~O)W9PO)j9VO~P(&eOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P)GgO]&cO!V7jO!T!ya!h!ya#v!ya(v!ya)W!ya)j!ya!O!ya~O!W9^O)S9_O~P$%pO!T$WO!h7kO(v4OO)W9PO)j9VO~O!T$WO~P#EfO]&cO!O9bO!V7jO~O]&cO!V7jO!T&aa!h&aa#v&aa(v&aa)W&aa)j&aa!O&aa~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O)W&ba~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W9PO)X#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U&oi!h&oi~P#3zO!V.}O]']i!T']i!X']i!Y']i![']i!^']i!_']i!a']i!b']i!c']i!e']i!f']i!h']i(u']i(w']i(x']i)S']i)T']i)U']i)V']i)W']i)X']i!g']i)j']i!O']i!W']i(v']i!U']iQ']i!d']i~O(r%nO)X9eO~O!h7zO!O*Ya~O!O9gO~P&6yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!U(Ua)W#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|OQ#_q!d#_q!h#_q!O#_q~P#3zO&r#WO&s$wOQ#fq!d#fq!h#fq~O)j5jOQ#`a!d#`a!h#`a~O]&cO!V+kO!T#qq!x#qq#v#qq(v#qq)j#qq!O#qq!h#qq)W#qqQ#qq!d#qq)X#qq~O!h8ZO!O)oa~O)U5|O]&Vi!T&Vi!V&Vi)S&Vi)T&Vi)V&Vir&Vis&Vit&Viu&Viv&Viw&Vix&Viy&Vi!l&Vi!x&Vi#T&Vi#V&Vi#p&Vi#v&Vi(v&Vi(x&Vi)j&Via&Vid&Vil&Vi{&Vi}&Vi!o&Vi!r&Vi!s&Vi!t&Vi!u&Vi!v&Vi!{&Vi#a&Vi#b&Vi#i&Vi#t&Vi${&Vi%c&Vi%e&Vi%k&Vi%l&Vi%o&Vi%v&Vi&m&Vi&r&Vi&s&Vi(r&Vi)P&Vi)W&Vi!O&Vi!h&ViQ&Vi!d&Vi~O)W9jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O!O$bq!h#{i)W#{i~P#3zO!O9lO~P!(zO!O9lO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O9lO~O]&cO!V&bO(v9oO~O!O9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O9pO~O]&cO!V2uO!h%Oq)W%Oq!O%Oq~O!W9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W9tO~P!(zO)W6fO~P!(zO)W9uO~O)W9vO~O(x.PO)W9vO~O!h3pO!T)_q~O)X9xO!T'wi!h'wi~O!T$WO!h7kO(v4OO)W9yO)j9{O~O)W9yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W9yO)X#|O~P#3zO)W9yO)j:OO~P)FwO]&cO!V7jO!T!yi!h!yi#v!yi(v!yi)W!yi)j!yi!O!yi~O!W:SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W:SO)S:UO~P$%pO!W:SO~P!(zO]&cO!V7jO!T(da!h(da(v(da)W(da)j(da~O!O:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:WO~O!O:]O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:]O~O]&cO!V2uO!h%Oy)W%Oy!O%Oy~O)W:^O~O)W:_O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:_O)X#|O~P#3zO!T$WO!h7kO(v4OO)W:_O)j:bO~O]&cO!V7jO!T!yq!h!yq#v!yq(v!yq)W!yq)j!yq!O!yq~O!W:dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!W:dO~P!(zO!O:fO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)X#|O~P#3zO!O:fO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:hO)X#|O~P#3zO)W:hO~O]&cO!V7jO!T!yy!h!yy#v!yy(v!yy)W!yy)j!yy!O!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)S#mO)T#oO)U#nO)V#pO)W:lO)X#|O~P#3zO)W:lO~O]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(v$]X(wZX(xZX)SZX)TZX)UZX)VZX)WZX)XZX)jZX~O]%WXlmXpnXp%WX!TnX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gmX!h%WX(u%WX(w%WX(x%WX)S%WX)T%WX)U%WX)V%WX)X%WX)jmX!O%WXQ%WX!d%WX~O)W%WX!W%WX(v%WX!U%WX~P+GrO]nX]%WXdnXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!V%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX!OnX!O%WX!hnX)XnX~O)WnX)jnX~P+JSO]%WXlmXpnXp%WX!V%WX!h%WXQ%WX!d%WX!O%WX~O!T%WX#v%WX)W%WX)j%WX(v%WX~P+LmOQnXQ%WX!TnX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!dnX!d%WX!e%WX!f%WX!gmX!h%WX(u%WX(w%WX(x%WX)S%WX)T%WX)U%WX)V%WX)X%WX)jmX~P+JSO]nX]%WXlmXpnXp%WXrnXsnXtnXunXvnXwnXxnXynX}nX!V%WX!rnX!snX!tnX!unX!vnX!xnX!{nX%vnX&rnX&snX(rnX)SnX)UnX)VnX~O!TnX(vnX)WnX)jnX~P, eOdnX!VnX)W%WX~P, eOlmXpnX)W%WX~Od)oO%Y)pO(y:oO~Od)oO%Y)pO(y:tO~Od)oO%Y)pO(y:pO~Od$RO%Y*TO'[$TO'_$UO(y:oO~Od$RO%Y*TO'[$TO'_$UO(y:qO~Od$RO%Y*TO'[$TO'_$UO(y:sO~O]iXriXsiXtiXuiXviXwiXxiXyiX!OiX!ViX&riX&siX)SiX)UiX)ViXdiX}iX!riX!siX!tiX!uiX!viX!xiX!{iX%viX(riX~P#1jO]ZXlgXpZXpiX!VZX!hZX)WZX)jZX~O!TZX#vZX(vZX~P,'{OlgXpiX)PiX)WZX)jiX~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX!OZX!OiX!hiX)XiX)jiX~O)WZX~P,)VO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hiX&riX&siX(uZX(wZX(xZX)SZX)SiX)TZX)UZX)UiX)VZX)ViX)XZX)XiX)jZX~OQZXQiX!dZX!diX~P,+pO]iXdiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX~P#1jO]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX)SiX)UiX)ViX~O)WiX~P,0rOdiX}iX!OZX!OiX!riX!siX!tiX!uiX!viX!xiX!{iX%viX(riX)jiX~P,+pO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!riX!siX!tiX!uiX!viX!xiX!{iX%viX&riX&siX(riX(viX)SiX)UiX)ViX)WiX)jiX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PBUOd$RO%Y*TO(y:oO~Od$RO%Y*TO(y:pO~Od$RO%Y*TO(y:vO~Od$RO%Y*TO(y:uO~O]%hOd!POl%bOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!{!dO!|%RO%v$mO(r$xO)S;aO)U;bO)V;bO~O]%hOd!POl%bO!V%kO!{!dO%v$mO(r$xO)S;aO)U;bO)V;bO~Od$RO%Y$SO(y:pO~Od$RO%Y$SO(y:tO~Ol:yO~Ol:xO~O]cXlgXpiX!TcX~Od)oO%Y*TO(y:oO~Od)oO%Y*TO(y:pO~Od)oO%Y*TO(y:qO~Od)oO%Y*TO(y:rO~Od)oO%Y*TO(y:sO~Od)oO%Y*TO(y:uO~Od)oO%Y*TO(y:vO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P,9OO](}Xr(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}X}(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)S(}X)U(}X)V(}X)j(}X~Ol:xO!T(}X(v(}X)W(}X~P,<}O]&wXlmXpnX!T&wX~Od4kO%Y*TO(y;tO~Ol;[O)S;xO)U5aO)V5aO~P(ElOd!POl%bO!{!dO%v$mO(r$xO~O]1SO!V1QO)S0zO)U;yO)V;yOQ#nX!d#nX!h#nX!O#nX~P,?yO)S;YO~Ol;hO~Ol;iO~Ol;jO~Ol;lO~Ol;mO~Ol;nO~Ol;lO!T$WOQ(}X!d(}X!h(}X)X(}X!O(}X)j(}X~P$GQOl;jO!T$WO~P$GQOl;hO!g$YO)j$YO~Ol;jO!g$YO)j$YO~Ol;lO!g$YO)j$YO~Ol;iO!O(}X!h(}X)X(}X)j(}X~P$GQOd/^O%Y*TO(y;tO~Ol;uO~O)S<YO~OV'e'h'i'g(o)Y!R(rST%Z!Y!['jd%[!i'R!f]'f*Z'k(w!^!_'l'm'l~",
	  goto: "%5]*ZPPPPPP*[P*_PP.T4iP7j7j:tP:t>OP>i>{?aFXMX!&]!,sP!3m!4b!5VP!5qPPPPPPPP!6[P!7tPP!9V!:oP!:uPPPPPP!:xP!:xPP!:xPPPPPPPPP!;U!>lP!>oPP!?]!@QPPPPP!@UP>l!AgPP>l!Cn!Eo!E}!Gd!ITP!I`P!Io!Io!MP#!`##v#'S#*^!Eo#*hPP!Eo#*o#*u#*h#*h#*xP#*|#+k#+k#+k#+k!ITP#,U#,g#.|P#/bP#0}P#1R#1Z#2O#2Z#4i#4q#4q#1RP#1RP#4x#5OP#5YPP#5u#6d#7U#5uP#7v#8SP#5uP#5uPP#5u#5uP#5uP#5uP#5uP#5uP#5uP#5uP#8V#5Y#8sP#9YP#9o#9o#9o#9o#9|#1RP#:d#?`#?}PPPPPPPP#@uP#ATP#ATP#Aa#Dn#9OPP#@}#EQP#Ee#Ep#Ev#Ev#@}#FlP#1R#1R#1R#1R#1RP!Io#GW#G_#G_#G_#Gc!Ly#Gm!Ly#Gq!E}!E}!E}#Gt#L^!E}>l>l>l$#V!@Q!@Q!@Q!@Q!@Q!@Q!6[!6[!6[$#jP$%V$%e!6[$%kPP!6[$'y$'|#@l$(P:t7j$+V$-Q$.q$0a7jPP7j$2T7jP7j7jP7jP$5Z7jP7jPP7j$5gPPPPPPPPP*[P$8o$8u$;^$=d$=j$>Q$>[$>g$>v$>|$@[$AZ$Ab$Ai$Ao$Aw$BR$BX$Bd$Bj$Bs$B{$CW$C^$Ch$Cn$Cx$DP$D`$Df$DlP$Dr$Dz$ER$Ea$F}$GT$GZ$Gb$GkPPPPPPPP$Gq$GuPPPPP$Nw$'y$Nz%$S%&[P%&i%&lPPPPPPPPPP%&x%'{%(R%(V%)|%+Z%+|%,T%.d%.jPPP%.t%/P%/S%/Y%0a%0d%0n%0x%0|%2Q%2s%2y#@uP%3d%3t%3w%4X%4e%4i%4o%4u$'y$'|$'|%4x%4{P%5V%5YR#cP'`mO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fU%om%p7QQ&m!`Q(j#]d0P)}/|/}0O0R4}5O5P5S8QR7Q3Tb}Oaewx{!g&S*q&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0{1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fS%`f0h#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YS%qm!YS&u!h#PQ']!tQ'g!yQ'h!zQ(j#`Q(k#]Q(l#^Q*x%kQ,W&lQ,]&nQ-S'^Q-d'fQ-k'qS.r(Z4XQ/f)gQ0e*mQ2Q,[Q2X,cQ3O-eQ4b.|Q4f/TQ5f0}Q6[2TQ6}3PQ8a6ZQ9e7zR;Z1Q$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(a(e(h(w(x)R)S)T)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:iQ&p!dQ(g#ZQ(s#bQ)j$T[*s%e*W0k2`2g2{Q,^&oQ/O(fQ/S(kQ/Z(tS/i)i/PQ0r+QS4q/j/kR8O4r'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f'a!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ)O#kS+Q%y0sQ/r)sk3}.g3s3w3z3{7c7e7f7h7k9X9Y:RQ)Q#kk3|.g3s3w3z3{7c7e7f7h7k9X9Y:Rl)P#k.g3s3w3z3{7c7e7f7h7k9X9Y:RT+Q%y0s[UOwx!g&S*qW$`[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.o&|;{af{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'i'j'u'y(`(i)l)r*`*b*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0]0h0y0{1Q1a1b1l1p1z2c2i2j2u4O4R4W4a5Y5a5e5q6_6c6f6g6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f;`;xQ;|1Sd;}&x'P'b,w-]-^-a2f2z2}W<O&f*v1|3iQ<P#O[<Q!t'^'f,[2T6ZT<]%y0s[VOwx!g&S*qW$a[e$e(bQ$p.u!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(g)j)p+[+a+t,X,k,z-Q-o.d1T1X1f1k1m2l3t5j8Z&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fQ'r#O|'|#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[l(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS-n't-wQ3W-tU;s(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;x[<Q!t'^'f,[2T6ZW<R&f*v1|3id<S&x'P'b,w-]-^-a2f2z2}Q<Z1ST<]%y0s!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ'[!tz(O#R#S#T#U'}(P(U(^+y.W.X._.`.q3[3]3^3p5}6P7[f-Z'`-T-V-Y2p2q2s2v6q6r8pQ1W+aQ1Z+bQ2k,yQ3X-tQ4[.uQ5l1YR8V5m!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+a+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y|(O#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[Q3X-tR4[.u[WOwx!g&S*qW$b[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;xQ;|1SQ<P#O[<Q!t'^'f,[2T6Z&^<Taf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fd<U&x'P'b,w-]-^-a2f2z2}W<V&f*v1|3iT<]%y0sp$PT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)m$V*U*[/_:w:x:y;h;i;j;k;l;m;n;up$QT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)n$V*U*[/_:w:x:y;h;i;j;k;l;m;n;u^&e}!O$i$j%`%j;Zd&i!U$t%P%l'[(O1W1Z3X4[V/a)O)P3}S%Ye$eQ,T&fQ.{(bQ2m-QQ5y1mQ6V1|Q6m2lR9h8Z#}!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Z#[^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b't(Q)p*]*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3t_(U#R#S#T+b3[3]3^#}ZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b't'x'}(P(Q(U*q*v+[+b,X,h,k,q-P-]-^-a-o-t-w-z._.d.m.q1S1T1f2c2k2z2}3[3]3^3i6c6j8g9l9p:W:]:fQ$]YR0T*OR*Q$]e0P)}/|/}0O0R4}5O5P5S8Q'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fe0P)}/|/}0O0R4}5O5P5S8QR5T0T^(T#R#S#T+b3[3]3^Y.]'}(R(U(V7TU3k.Z.^.qS7X3l4VR9c7s^(S#R#S#T+b3[3]3^[.['}(R(T(U(V7TW3j.Z.].^.qU7W3k3l4VS8z7X7sR:V9cT.k(Q.md]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tQ%tnT1u+}1v!jbOaenpwx{|!g#O$|$}%S%h%w&S't'u(Q*`*b*q-p-w.f.m.o0]0y1S2j5a6g;`;xf-W'`-T-V-Y2p2q2s2v6q6r8pj3x.g3s3w3z3{7c7e7f7h7k9X9Y:Rr;zg$g%d%i&s*Y*t,l,v-_2_;W;X;Y;o;q;vi<^+]0z1O;a;b;p;r;w;y<W<X<Y!O&^y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yz&az%O%W%e&d's*W*_,b-x0Z0[0k0|2`2g2{5V5b6l8iS'{#Q.Xn+l&X*g+f+m+p-j/h0_1R1^4t5W5`5u8XQ2W,a^2t-X2r2x6p6w8o9se7i3y7_7g7o7p9U9W9`:Q:cS+^&U1TY+n&Y&c*v1S3iR5s1f#w!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s't'u(Q*Y*`*b*q*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y`oOwx!g&S't*q-w#U!Paeg{|#O$g$|$}%S%d%h%i&s'u*Y*`*b*t+],l,v-_0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YU%vnp-pQ*}%wS.e(Q.mT3v.f.oW+r&^+l+s1cV+z&a+{7iQ+x&`U+z&a+{7iQ-w'tT.S'y.U'`![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'W!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fW1r+y.X5}6PR2e,s!WjO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fY%Ve$e(b1p3iQ'S!nS(y#i5YQ,m&xQ,x'PS.O'y.UQ2b,nQ6k2iQ6|2}Q8h6fR9m8e'W![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'ayO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k+y,P,R,n,q,w-]-^-a-g.P.Q.U.X.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q5}6P6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ&`yS't#O-uR1[+cS+^&U1TR5n1[Q1P+]R5g1OR1P+]T+^&U1Tz&[%X&V&Y&Z'k)h*d*f+]+e/m0^0y0z1O1S1j5a5v;x;yQ&]yR1n+x!P&[y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yQ+u&^S+|&a7iS1d+l+sQ1t+{R5r1c!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fS%zo.eS&Oq-rQ&_yQ&q!eQ'e!yQ*p%eU*{%v%{3vS+P%x%}Q+q&]Q,Y&mS,Z&n'gQ,r&{S0X*W,bS0o*|*}Q0q+OQ1o+xS2S,]-fQ5U0ZQ5Z0pQ5{1nQ6Y2RQ6]2WQ7n3yQ9S7_R:P9U[uOwx!g&S*qQ,Y&mQ-v'tQ3Y-tR3_-wxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^S%zo.eS&Oq-rQ*p%eU*{%v%{3vS+P%x%}S0X*W,bS0o*|*}Q0q+OQ5U0ZQ5Z0pQ7n3yQ9S7_R:P9UT,_&q,`]uOwx!g&S*q[uOwx!g&S*qQ,Y&mQ,n&xQ,w'PW-`'b-]-a2zQ-v'tQ3Y-tQ3_-wR6{2}[%fg$g,l,v-_2_R0l*t^$XV!U$a$z%P<R<SQ'S!nS)`#}*vS)v$W*qQ)y$YY*s%e*W0k2g2{Q/O(fS/i)i/PS0a*h4aS0j*r6_Q0r+QQ4Q.gQ4n/cS4q/j/kS4v/n5YQ4{/uQ6`2`U7a3s3y4RQ8O4rQ8k6hY9Q7_7b7c7l7mQ9r8mW9z9O9R9U9VQ:Z9oU:a9{9}:OR:j:bS)v$W*qT4v/n5YZ)t$W)u*q/n5YQ&w!hR'x#PS,g&v'vQ2[,eR6^2ZxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fV$h[&|-^!XkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:f!WhO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR'W!q!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR,n&xQ&y!iQ&{!jQ'O!lR,q&zR,o&xxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fX-`'b-]-a2z[uOwx!g&S*qQ,z'PQ-v'tS.k(Q.mR3_-w[uOwx!g&S*qQ,z'PW-`'b-]-a2zT.k(Q.mg-Z'`-T-V-Y2p2q2s2v6q6r8pylOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fb!OOaewx{!g&S*q&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ']!tQ-S'^Q-d'fQ2Q,[Q6[2TR8a6Zj$RT$_%b%r:z:{:|;[;];^;_;c;di)o$V*U:w:x:y;h;i;j;k;l;m;nj$RT$_%b%r:z:{:|;[;];^;_;c;dh)o$V*U:w:x:y;h;i;j;k;l;m;nS/^({<[V4k/_/`;u[uOwx!g&S*qQ-v'tR3_-w[uOwx!g&S*qT.k(Q.m'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fR7R3T[uOwx!g&S*qQ-v'tS.k(Q.mR3_-w[pOwx!g&S*qQ%wnS-p't-wT.f(Q.mS%{o.eS*|%v3vR0p*}Q+R%yR5]0sS%zo.eS&Oq-rU*{%v%{3vS+P%x%}S0o*|*}Q0q+OQ5Z0pQ7n3yQ9S7_R:P9U`qOwx!g&S(Q*q.mS%xn-pU%}p.f.oQ+O%wT-r't-wS'z#Q.XR.Y'{T.R'y.US.S'y.UQ8x7UR9w8yT5}1q8_R6P1q#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fk3|.g3s3w3z3{7c7e7f7h7k9X9Y:RQ4Q.gS7a3s3yU9Q7_7c7lS9z9O9UR:a9}#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR4].uQ(]#US.v([(^S4^.w.xR7w4_Q.s(ZR7u4X#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Zp$w`$d$s%X&r'`(_(f)i*d-T/k1j5k5v8Uq(}#k%y.g0s3s3w3z3{7c7e7f7h7k9X9Y:RR,U&fR6W1|'X!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$q#rS%T%Z'Q'X'Z'a'c(a(e(h(w(x)R)S)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$]#sS%T%Z'Q'X'Z'a'c(h(w(x)R)V)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$Z#tS%T%Z'Q'X'Z'a'c(h(w(x)R)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$c#wS%T%Z'Q'X'Z'a'c(h(w(x)R)U)V)W)X)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i'X![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ/P(fQ/j)iQ4r/kR9d7y']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ#eQR(u#eU$|a;`;xb%Ue$e&f(b-Q1m1|2l8ZQ'_!u!Q*^$|%U'_*`*f+h,P0]0^1b2p6q6t7e8p9X9]:R;W;o;p;v;w<WS*`$}%SQ*f%XS+h&W1QQ,P&bQ0]*bQ0^*dQ1b+kQ2p-VS6q2q2sQ6t2uQ7e3wQ8p6rS9X7f7hQ9]7jQ:R9YQ;W%dS;o;X;YS;p<X<YQ;v;qQ;w;rT<W0z;a[[Owx!g&S*ql$c[&|'}+[,X,h,k-P-^-o-z._.d.ql&|!k%m&y'O,q2c6c6j8g9l9p:W:]:f^'}#R#S#T+b3[3]3^`+[&U&Y&c*v1S1T1f3iS,X&m-tQ,h&wU,k&x'P2}S-P'[2kW-^'b-]-a2zS-o't-wQ-z'xQ._(PS.d(Q.mR.q(UQ)|$[R/x)|Q0R)}Q4}/|Q5O/}Q5P0OY5Q0R4}5O5P8QR8Q5SQ*P$]S0U*P0VR0V*QS.`(P._S3n.`7[R7[3pQ3q.aS7Y3o3rU7^3q7Y8{R8{7ZQ.m(QR4S.m!|_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b't(Q)p*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3tU$r_$u*]U$u`$d&rR*]$sU$}a;`;xd*a$}*b2q6r7f9Y;X;q;r<XQ*b%SQ2q-VQ6r2sQ7f3wQ9Y7hQ;X%dQ;q;YQ;r<YT<X0z;aS+{&a7iR1s+{S*j%Z/pR0c*jQ1U+_R5i1UU+e&V0z;xR1]+eQ+s&^Q1c+lT1i+s1cQ8[5yR9i8[QwOS&Rw&ST&Sx*qQ,`&qR2V,`W)u$W*q/n5YR/t)uU/o)q)v0gR4w/o[*u%e%f*W2`2g2{R0m*uQ,d&uR2Y,dQ-a'bQ2z-]T2|-a2zQ2w-XR6x2wQ-f'gQ2R,]T3Q-f2RS%pm7QR*z%pdnOwx!g&S't(Q*q-w.mR%unQ0t+RR5^0tQ.U'yR3f.UQ1v+}R6Q1vU*n%`*x;ZR0f*nS1g+n0nR5t1gQ7l3yQ9O7_U9a7l9O9}R9}9U$O!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o.u1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR&g!SQ4Y.sR7v4YQ1},UR6X1}S/d)_)`R4o/dW(o#a(j(k/SR/W(oQ7{4fR9f7{T)a#}*v!USO[wx!g!k%m&S&y&|'O'b,q-]-^-a2c2z6c6j8g9l9p:W:]:fj$ya{$k%]+j,R1a1z5q6v8s9_:UY%Te$e(b1p3iY%Zf$f(i)l*lQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(a#XQ(e#YS(h#[+YQ(w#gQ(x#iQ)R#lQ)S#qQ)T#rQ)U#sQ)V#tQ)W#uQ)X#vQ)Y#wQ)Z#xQ)[#yQ)]#zQ)^#{S)_#}*vQ)k$UQ)q$WQ)x$YQ+X&QS+g&W1QQ,O&bQ,S&fQ,j&xQ,u'PQ-h'iQ-i'jS-|'y.UQ.y(`S/p)r0hS0`*h4aQ0b*iQ0g*qQ0i*rQ0w+WS1`+h+kQ1y,PQ2a,nS2h,w6{Q3R-gQ3c.PQ3d.QQ4c.}Q4d/QQ4j/[Q4m/cQ4s/lQ4u/nQ4y/sQ4z/uQ5d0{Q5p1bQ5w1lQ6U1|S6e2f8tQ6i2iQ6s2uQ6z2}Q7q4OQ7r4RQ7t4WQ8S5YQ8T5eQ8c6_Q8f6fQ8j6hQ8r6tS9T7b7mQ9[7jQ9k8eQ9q8mS9|9R9VQ:T9]Q:Y9oS:`9{:OR:i:bR,V&fd]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3t#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(b*`*b*d*f+h+k,P-Q-V0]0^1Q1b1m1|2l2p2q2s2u3w6q6r6t7e7f7h7j8Z8p9X9Y9]:R;W;X;Y;`;a;o;p;q;r;v;w<W<X<YQ%tnS+d&V+eW+r&^+l+s1cU+z&a+{7iQ1k+tT5c0z;x``Owx!g&S't*q-wS$d[-oQ$s_b%Xe$e&f(b-Q1m1|2l8Z!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(Q)p*v+[,X,k,w,z-]-^-a-t.d.m.o1S1T1f2f2z2}3i3tQ'`!uS(_#V+aQ(f#ZS)i$T(gQ*d%UQ-T'_Q/k)jQ1j+tQ5k1XQ5v1kR8U5jS(W#R3]S(X#S3^V(Y#T+b3[R$^Ye0Q)}/|/}0O0R4}5O5P5S8QW(R#R#S#T+bQ([#US.Z'}(US.a(P._Q.x(^W1r+y.X5}6PQ3Z-tQ3h.WQ3o.`Q4V.qU7T3[3]3^Q7]3pR8|7[Q.b(PR3m._T.l(Q.mdgOwx!g&S&m't*q-t-wU$g[,X-oQ&s!fQ'k!}Q'u#OQ)h$SQ*Y$l`+]&U&Y&c*v1S1T1f3iQ,l&xQ,v'PY-_'b-]-a2z2}S.g(Q.mQ/m)pQ0y+[S2_,k-^S2j,w,zS3s.d.oQ6g2fR7c3td]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tR%tnQ3y.gQ7_3sQ7g3wQ7o3zQ7p3{Q9U7cU9W7e7f7hQ9`7kS:Q9X9YR:c:RZ+o&Y&c*v1S3ipzOnpwx!g%w&S't(Q*q-p-w.f.m.o[%Oa%d0z;`;a;xU%We%h1SQ%eg^&d{|%i1O5a;b;yQ's#OQ*W$gb*_$|$}%S;W;X;Y<W<X<YQ,b&sQ-x'uQ0Z*Y[0[*`*b;o;p;q;rQ0k*tQ0|+]Q2`,lQ2g,vS2{-_2_U5V0];v;wQ5b0yQ6l2jR8i6gQ+}&aR9Z7iS1q+y.XQ8^5}R8_6P[%^f$f(i)l)r0hR0d*lR+`&UQ+_&UR5h1TS&Xy+xQ*g%XU+f&V0z;xS+m&Y1SW+p&Z1O5a;yQ-j'kQ/h)hS0_*d*fQ1R+]Q1^+eQ4t/mQ5W0^Q5`0yQ5u1jR8X5vR5z1mYvOwx&S*qR&t!gW%gg,l,v-_T*X$g2_T)w$W*q[uOwx!g&S*qQ&}!kQ*y%mQ,p&yQ,t'OQ2d,qQ6b2cQ8d6cQ8l6jQ9n8gQ:X9lQ:[9pQ:e:WQ:g:]R:k:fxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^X-`'b-]-a2zQ-['`R2o-TS-X'`-TQ2r-VQ2x-YU6p2p2q2sQ6w2vS8o6q6rR9s8p[rOwx!g&S*qS-q't-wT.h(Q.mR+S%y[sOwx!g&S*qS-s't-wT.i(Q.m[tOwx!g&S*qT.j(Q.mT.T'y.UX%af%k0h1QQ.w([R4_.xR.t(ZR(d#XQ(r#aS/R(j(kR4e/SR/V(lR4g/T",
	  nodeNames: "⚠ RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec ) Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
	  maxTerm: 425,
	  nodeProps: [
		["group", -35,1,8,11,14,15,16,18,71,72,100,101,102,104,191,208,229,242,243,270,271,272,277,280,281,282,284,285,286,287,290,292,293,294,295,296,"Expression",-13,17,24,25,26,42,255,256,257,258,262,263,265,266,"Type",-19,126,129,147,150,152,153,158,160,163,164,166,168,170,172,174,176,178,179,188,"Statement"]
	  ],
	  propSources: [cppHighlighting],
	  skippedNodes: [0,3,4,5,6,7,10,297,298,299,300,301,302,303,304,305,306,347,348],
	  repeatNodeCount: 41,
	  tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'f&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(pQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)ZW(pQ(n.o'f&j*Z)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(n.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)ZW(pQ(n.o'f&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'f&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*W)`(n.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%^!b'QP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%]!b!a,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)ZW(qQ(o/]'f&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)x!b)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)ZW(pQ'f&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)ZW(pQ'e.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)ZW(pQ'f&j'l.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)ZW(pQ'j.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)ZW(pQ'f&j'k.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)ZW(pQ'g.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)ZW(pQ'h.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)ZW(pQ'i.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)ZW(pQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)ZW(pQV.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)ZW(pQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])V,g)ZW(pQ%[!b'f&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)U,g%^!b)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)[S(pQ)Y,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)ZW(pQ]6_'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y!Oa)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)S,g)ZW(pQ%Z!b'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)ZW(pQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)ZW!X-y(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)ZW(pQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(x-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)ZW(pQ'f&j(w,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)X,k)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(pQ!i,g'f&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(pQ!i,g'f&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)ZW(pQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])ZW(pQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)ZW'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'f&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'f&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'f&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'f&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])ZW'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)ZWT1e'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(pQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](pQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(pQT1e'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)ZW(pQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)ZW(pQT1e'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)ZW(pQS1e'f&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)ZWS1e'f&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'f&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'f&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'f&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(pQS1e'f&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(pQ!i,g'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(pQ'f&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(pQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)ZW(pQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(v-X)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYl-})ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)W,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_p,g%]!b)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Wpp$GWP;=`<%l$Fl*Y$GbZ)ZW'f&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'f&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$WpY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['f&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'f&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'f&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Wp'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'f&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'f&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Wp'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'f&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'f&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'f&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'f&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$WpY#t)ZW'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(pQ'f&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$WpY#t(pQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$WpY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)ZW(pQ%[!b!f,g'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%]!b!b,g)ZW(pQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%]!b!b,g$WpY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)j!c)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%]!b)ZW(pQ!d,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%]!b!b,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)ZW(pQ%[!b!f,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(uP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)ZW(o/]'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(pQ)Y,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)PP)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'f&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'f&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'f&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['f&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['f&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['f&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['f&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['f&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['f&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['f&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['f&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['f&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)]d)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)ZW(pQ%[!b'f&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)ZW(yS(pQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)ZW(pQ%[!b'f&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)T,g%^!b)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)ZW(pQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)ZW(pQ%[!b'RP'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)ZW(pQ'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)ZW(pQdT'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
	  tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	  topRules: {"Program":[0,307]},
	  dynamicPrecedences: {"87":1,"94":1,"119":1,"184":1,"187":-10,"240":-10,"241":1,"244":-1,"246":-10,"247":1,"262":-1,"267":2,"268":2,"306":-10,"365":3,"417":1,"418":3,"419":1,"420":1},
	  specialized: [{term: 356, get: value => spec_identifier[value] || -1},{term: 32, get: value => spec_[value] || -1},{term: 66, get: value => spec_templateArgsEnd[value] || -1},{term: 363, get: value => spec_scopedIdentifier[value] || -1}],
	  tokenPrec: 24891
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/css/dist/index.cjs":
	/*!********************************************************!*\
	  !*** ../editor/node_modules/@lezer/css/dist/index.cjs ***!
	  \********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const descendantOp = 96,
	  Unit = 1,
	  callee = 97,
	  identifier = 98,
	  VariableName = 2;
	
	/* Hand-written tokenizers for CSS tokens that can't be
	   expressed by Lezer's built-in tokenizer. */
	
	const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
				   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
	const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
		  hash = 35, percent = 37, ampersand = 38, backslash = 92, newline = 10;
	
	function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }
	
	function isDigit(ch) { return ch >= 48 && ch <= 57 }
	
	const identifiers = new lr.ExternalTokenizer((input, stack) => {
	  for (let inside = false, dashes = 0, i = 0;; i++) {
		let {next} = input;
		if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
		  if (!inside && (next != dash || i > 0)) inside = true;
		  if (dashes === i && next == dash) dashes++;
		  input.advance();
		} else if (next == backslash && input.peek(1) != newline) {
		  input.advance();
		  if (input.next > -1) input.advance();
		  inside = true;
		} else {
		  if (inside)
			input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
		  break
		}
	  }
	});
	
	const descendant = new lr.ExternalTokenizer(input => {
	  if (space.includes(input.peek(-1))) {
		let {next} = input;
		if (isAlpha(next) || next == underscore || next == hash || next == period ||
			next == bracketL || next == colon || next == dash || next == ampersand)
		  input.acceptToken(descendantOp);
	  }
	});
	
	const unitToken = new lr.ExternalTokenizer(input => {
	  if (!space.includes(input.peek(-1))) {
		let {next} = input;
		if (next == percent) { input.advance(); input.acceptToken(Unit); }
		if (isAlpha(next)) {
		  do { input.advance(); } while (isAlpha(input.next))
		  input.acceptToken(Unit);
		}
	  }
	});
	
	const cssHighlighting = highlight.styleTags({
	  "AtKeyword import charset namespace keyframes media supports": highlight.tags.definitionKeyword,
	  "from to selector": highlight.tags.keyword,
	  NamespaceName: highlight.tags.namespace,
	  KeyframeName: highlight.tags.labelName,
	  KeyframeRangeName: highlight.tags.operatorKeyword,
	  TagName: highlight.tags.tagName,
	  ClassName: highlight.tags.className,
	  PseudoClassName: highlight.tags.constant(highlight.tags.className),
	  IdName: highlight.tags.labelName,
	  "FeatureName PropertyName": highlight.tags.propertyName,
	  AttributeName: highlight.tags.attributeName,
	  NumberLiteral: highlight.tags.number,
	  KeywordQuery: highlight.tags.keyword,
	  UnaryQueryOp: highlight.tags.operatorKeyword,
	  "CallTag ValueName": highlight.tags.atom,
	  VariableName: highlight.tags.variableName,
	  Callee: highlight.tags.operatorKeyword,
	  Unit: highlight.tags.unit,
	  "UniversalSelector NestingSelector": highlight.tags.definitionOperator,
	  MatchOp: highlight.tags.compareOperator,
	  "ChildOp SiblingOp, LogicOp": highlight.tags.logicOperator,
	  BinOp: highlight.tags.arithmeticOperator,
	  Important: highlight.tags.modifier,
	  Comment: highlight.tags.blockComment,
	  ColorLiteral: highlight.tags.color,
	  "ParenthesizedContent StringLiteral": highlight.tags.string,
	  ":": highlight.tags.punctuation,
	  "PseudoOp #": highlight.tags.derefOperator,
	  "; ,": highlight.tags.separator,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_callee = {__proto__:null,lang:32, "nth-child":32, "nth-last-child":32, "nth-of-type":32, "nth-last-of-type":32, dir:32, "host-context":32, url:60, "url-prefix":60, domain:60, regexp:60, selector:134};
	const spec_AtKeyword = {__proto__:null,"@import":114, "@media":138, "@charset":142, "@namespace":146, "@keyframes":152, "@supports":164};
	const spec_identifier = {__proto__:null,not:128, only:128};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "9bQYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DPO$vQ[O'#DTOOQP'#Ej'#EjO${QdO'#DeO%gQ[O'#DrO${QdO'#DtO%xQ[O'#DvO&TQ[O'#DyO&]Q[O'#EPO&kQ[O'#EROOQS'#Ei'#EiOOQS'#EU'#EUQYQ[OOO&rQXO'#CdO'gQWO'#DaO'lQWO'#EpO'wQ[O'#EpQOQWOOP(RO#tO'#C_POOO)C@X)C@XOOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(^Q[O'#EXO(xQWO,58{O)QQ[O,59SO$qQ[O,59kO$vQ[O,59oO(^Q[O,59sO(^Q[O,59uO(^Q[O,59vO)]Q[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO)dQWO,59SO)iQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO)nQ`O,59oOOQS'#Cp'#CpO${QdO'#CqO)vQvO'#CsO+TQtO,5:POOQO'#Cx'#CxO)iQWO'#CwO+iQWO'#CyOOQS'#Em'#EmOOQO'#Dh'#DhO+nQ[O'#DoO+|QWO'#EqO&]Q[O'#DmO,[QWO'#DpOOQO'#Er'#ErO({QWO,5:^O,aQpO,5:`OOQS'#Dx'#DxO,iQWO,5:bO,nQ[O,5:bOOQO'#D{'#D{O,vQWO,5:eO,{QWO,5:kO-TQWO,5:mOOQS-E8S-E8SO${QdO,59{O-]Q[O'#EZO-jQWO,5;[O-jQWO,5;[POOO'#ET'#ETP-uO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.lQXO,5:sOOQO-E8V-E8VOOQS1G.g1G.gOOQP1G.n1G.nO)dQWO1G.nO)iQWO1G.nOOQP1G/V1G/VO.yQ`O1G/ZO/dQXO1G/_O/zQXO1G/aO0bQXO1G/bO0xQWO,59zO0}Q[O'#DOO1UQdO'#CoOOQP1G/Z1G/ZO${QdO1G/ZO1]QpO,59]OOQS,59_,59_O${QdO,59aO1eQWO1G/kOOQS,59c,59cO1jQ!bO,59eO1rQWO'#DhO1}QWO,5:TO2SQWO,5:ZO&]Q[O,5:VO&]Q[O'#E[O2[QWO,5;]O2gQWO,5:XO(^Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O2xQWO1G/|O2}QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XO3YQtO1G/gOOQO,5:u,5:uO3pQ[O,5:uOOQO-E8X-E8XO3}QWO1G0vPOOO-E8R-E8RPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$u7+$uO${QdO7+$uOOQS1G/f1G/fO4YQXO'#EoO4aQWO,59jO4fQtO'#EVO5ZQdO'#ElO5eQWO,59ZO5jQpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO5rQWO1G/PO${QdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO5wQWO,5:vOOQO-E8Y-E8YO6VQXO1G/vOOQS7+%h7+%hO6^QYO'#CsOOQO'#EO'#EOO6iQ`O'#D}OOQO'#D}'#D}O6tQWO'#E]O6|QdO,5:hOOQS,5:h,5:hO7XQtO'#EYO${QdO'#EYO8VQdO7+%ROOQO7+%R7+%ROOQO1G0a1G0aO8jQpO<<HaO8rQWO,5;ZOOQP1G/U1G/UOOQS-E8T-E8TO${QdO'#EWO8zQWO,5;WOOQT1G.u1G.uOOQP<<Ha<<HaOOQS7+$k7+$kO9SQdO7+%ZOOQO7+%b7+%bOOQO,5:i,5:iO3QQdO'#E^O6tQWO,5:wOOQS,5:w,5:wOOQS-E8Z-E8ZOOQS1G0S1G0SO9ZQtO,5:tOOQS-E8W-E8WOOQO<<Hm<<HmOOQPAN={AN={O:XQdO,5:rOOQO-E8U-E8UOOQO<<Hu<<HuOOQO,5:x,5:xOOQO-E8[-E8[OOQS1G0c1G0c",
	  stateData: ":k~O#WOS#XQQ~OUYOXYO]VO^VOtWOxXO!YaO!ZZO!g[O!i]O!k^O!n_O!t`O#URO#_TO~OQfOUYOXYO]VO^VOtWOxXO!YaO!ZZO!g[O!i]O!k^O!n_O!t`O#UeO#_TO~O#R#dP~P!ZO#XjO~O#UlO~O]qO^qOpoOtrOxsO|tO!PvO#SuO#_nO~O!RwO~P#pO`}O#TzO#UyO~O#U!OO~O#U!QO~OQ!ZOb!TOf!ZOh!ZOn!YO#T!WO#U!SO#b!UO~Ob!]O!b!_O!e!`O#U![O!R#eP~Oh!eOn!YO#U!dO~Oh!gO#U!gO~Ob!]O!b!_O!e!`O#U![O~O!W#eP~P%gO]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#SWX#_WX~O]!lO~O!W!mO#R#dX!Q#dX~O#R#dX!Q#dX~P!ZO#Y!pO#Z!pO#[!rO~OUYOXYO]VO^VOtWOxXO#URO#_TO~OpoO!RwO~O`!yO#TzO#UyO~O!Q#dP~P!ZOb#QO~Ob#RO~Ov#SOz#TO~OP#VObgXjgX!WgX!bgX!egX#UgXagXQgXfgXhgXngXpgX!VgX#RgX#TgX#bgXvgX!QgX~Ob!]Oj#WO!b!_O!e!`O#U![O!W#eP~Ob#ZO~Ob!]O!b!_O!e!`O#U#[O~Op#`O!`#_O!R#eX!W#eX~Ob#cO~Oj#WO!W#eO~O!W#fO~Oh#gOn!YO~O!R#hO~O!RwO!`#_O~O!RwO!W#kO~O!W!}X#R!}X!Q!}X~P!ZO!W!mO#R#da!Q#da~O#Y!pO#Z!pO#[#rO~O]qO^qOtrOxsO|tO!PvO#SuO#_nO~Op!{a!R!{aa!{a~P.QOv#tOz#uO~O]qO^qOtrOxsO#_nO~Op{i|{i!P{i!R{i#S{ia{i~P/ROp}i|}i!P}i!R}i#S}ia}i~P/ROp!Oi|!Oi!P!Oi!R!Oi#S!Oia!Oi~P/RO!Q#vO~Oa#cP~P(^Oa#`P~P${Oa#}Oj#WO~O!W$PO~Oh$QOo$QO~O]!^Xa![X!`![X~O]$RO~Oa$SO!`#_O~Op#`O!R#ea!W#ea~O!`#_Op!aa!R!aa!W!aaa!aa~O!W$XO~O!Q$`O#U$ZO#b$YO~Oj#WOp$bO!V$dO!W!Ti#R!Ti!Q!Ti~P${O!W!}a#R!}a!Q!}a~P!ZO!W!mO#R#di!Q#di~Oa#cX~P#pOa$hO~Oj#WOQ!yXa!yXb!yXf!yXh!yXn!yXp!yX#T!yX#U!yX#b!yX~Op$jOa#`X~P${Oa$lO~Oj#WOv$mO~Oa$nO~O!`#_Op#Oa!R#Oa!W#Oa~Oa$pO~P.QOP#VOpgX!RgX~O#b$YOp!qX!R!qX~Op$rO!RwO~O!Q$vO#U$ZO#b$YO~Oj#WOQ!|Xb!|Xf!|Xh!|Xn!|Xp!|X!V!|X!W!|X#R!|X#T!|X#U!|X#b!|X!Q!|X~Op$bO!V$yO!W!Tq#R!Tq!Q!Tq~P${Oj#WOv$zO~OpoOa#ca~Op$jOa#`a~Oa$}O~P${Oj#WOQ!|ab!|af!|ah!|an!|ap!|a!V!|a!W!|a#R!|a#T!|a#U!|a#b!|a!Q!|a~Oa!zap!za~P${O#Wo#X#bj!P#b~",
	  goto: "-Y#gPPP#hP#kP#t$TP#t$d#tPP$jPPP$p$y$yP%]P$yP$y%w&ZPPP&s&y#tP'PP#tP'VP#tP#t#tPPP']'r(PPP#kPP(W(W(b(WP(WP(W(WP#kP#kP#kP(e#kP(h(k(n(u#kP#kP(z)Q)a)o)u*P*V*a*g*mPPPPPPPPPP*s*|P+i+lP,b,e,k,tRkQ_bOPdhw!m#nkYOPdhotuvw!m#Q#c#nkSOPdhotuvw!m#Q#c#nQmTR!snQ{VR!wqQ!w}Q#Y!XR#s!yq!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${p!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${U$]#h$_$rR$q$[q!XZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${p!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${Q!e^R#g!fQ|VR!xqQ!w|R#s!xQ!PWR!zrQ!RXR!{sQxUQ!vpQ#d!bQ#j!iQ#k!jQ$t$^R%Q$sSgPwQ!ohQ#m!mR$e#nZfPhw!m#na!a[`a!V!]!_#_#`R#]!]R!f^R!h_R#i!hS$^#h$_R%O$rV$[#h$_$rQ!qjR#q!qQdOShPwU!kdh#nR#n!mQ#z#RU$i#z$o${Q$o$RR${$jQ$k#zR$|$kQpUS!up$gR$g#wQ$c#lR$x$cQ!ngS#o!n#pR#p!oQ#a!^R$V#aQ$_#hR$u$_Q$s$^R%P$s_cOPdhw!m#n^UOPdhw!m#nQ!toQ!|tQ!}uQ#OvQ#w#QR$W#cR#{#RQ!VZQ!c]Q#U!TQ#l!l[#y#R#z$R$j$o${Q#|#TQ$O#WS$a#l$cQ$f#uR$w$bR#x#QQiPR#PwQ!b[Q!jaR#X!VU!^[a!VQ!i`Q#^!]Q#b!_Q$T#_R$U#`",
	  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
	  maxTerm: 114,
	  nodeProps: [
		["openedBy", 17,"(",48,"{"],
		["closedBy", 18,")",49,"}"]
	  ],
	  propSources: [cssHighlighting],
	  skippedNodes: [0,3,85],
	  repeatNodeCount: 10,
	  tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#W~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#W~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!V[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYtQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QSzSo`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!PQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#b[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#b[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#b[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSp^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#_QOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#X~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#b[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!W^Oy%^z;'S%^;'S;=`%o<%lO%^dCoSzSOy%^z;'S%^;'S;=`%o<%lO%^bDQU|QOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS|Qo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[!YQo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bFfSxQOy%^z;'S%^;'S;=`%o<%lO%^lFwSv[Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!`Qo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!RUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!Q^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!PQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
	  tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new lr.LocalTokenGroup("m~RRYZ[z{a~~g~aO#Z~~dP!P!Qg~lO#[~~", 28, 102)],
	  topRules: {"StyleSheet":[0,4],"Styles":[1,84]},
	  specialized: [{term: 97, get: (value) => spec_callee[value] || -1},{term: 56, get: (value) => spec_AtKeyword[value] || -1},{term: 98, get: (value) => spec_identifier[value] || -1}],
	  tokenPrec: 1169
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/highlight/dist/index.cjs":
	/*!**************************************************************!*\
	  !*** ../editor/node_modules/@lezer/highlight/dist/index.cjs ***!
	  \**************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	let nextTagID = 0;
	/**
	Highlighting tags are markers that denote a highlighting category.
	They are [associated](#highlight.styleTags) with parts of a syntax
	tree by a language mode, and then mapped to an actual CSS style by
	a [highlighter](#highlight.Highlighter).
	
	Because syntax tree node types and highlight styles have to be
	able to talk the same language, CodeMirror uses a mostly _closed_
	[vocabulary](#highlight.tags) of syntax tags (as opposed to
	traditional open string-based systems, which make it hard for
	highlighting themes to cover all the tokens produced by the
	various languages).
	
	It _is_ possible to [define](#highlight.Tag^define) your own
	highlighting tags for system-internal use (where you control both
	the language package and the highlighter), but such tags will not
	be picked up by regular highlighters (though you can derive them
	from standard tags to allow highlighters to fall back to those).
	*/
	class Tag {
		/**
		@internal
		*/
		constructor(
		/**
		The set of this tag and all its parent tags, starting with
		this one itself and sorted in order of decreasing specificity.
		*/
		set, 
		/**
		The base unmodified tag that this one is based on, if it's
		modified @internal
		*/
		base, 
		/**
		The modifiers applied to this.base @internal
		*/
		modified) {
			this.set = set;
			this.base = base;
			this.modified = modified;
			/**
			@internal
			*/
			this.id = nextTagID++;
		}
		/**
		Define a new tag. If `parent` is given, the tag is treated as a
		sub-tag of that parent, and
		[highlighters](#highlight.tagHighlighter) that don't mention
		this tag will try to fall back to the parent tag (or grandparent
		tag, etc).
		*/
		static define(parent) {
			if (parent === null || parent === void 0 ? void 0 : parent.base)
				throw new Error("Can not derive from a modified tag");
			let tag = new Tag([], null, []);
			tag.set.push(tag);
			if (parent)
				for (let t of parent.set)
					tag.set.push(t);
			return tag;
		}
		/**
		Define a tag _modifier_, which is a function that, given a tag,
		will return a tag that is a subtag of the original. Applying the
		same modifier to a twice tag will return the same value (`m1(t1)
		== m1(t1)`) and applying multiple modifiers will, regardless or
		order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
		
		When multiple modifiers are applied to a given base tag, each
		smaller set of modifiers is registered as a parent, so that for
		example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
		`m1(m3(t1)`, and so on.
		*/
		static defineModifier() {
			let mod = new Modifier;
			return (tag) => {
				if (tag.modified.indexOf(mod) > -1)
					return tag;
				return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
			};
		}
	}
	let nextModifierID = 0;
	class Modifier {
		constructor() {
			this.instances = [];
			this.id = nextModifierID++;
		}
		static get(base, mods) {
			if (!mods.length)
				return base;
			let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
			if (exists)
				return exists;
			let set = [], tag = new Tag(set, base, mods);
			for (let m of mods)
				m.instances.push(tag);
			let configs = powerSet(mods);
			for (let parent of base.set)
				if (!parent.modified.length)
					for (let config of configs)
						set.push(Modifier.get(parent, config));
			return tag;
		}
	}
	function sameArray(a, b) {
		return a.length == b.length && a.every((x, i) => x == b[i]);
	}
	function powerSet(array) {
		let sets = [[]];
		for (let i = 0; i < array.length; i++) {
			for (let j = 0, e = sets.length; j < e; j++) {
				sets.push(sets[j].concat(array[i]));
			}
		}
		return sets.sort((a, b) => b.length - a.length);
	}
	/**
	This function is used to add a set of tags to a language syntax
	via [`NodeSet.extend`](#common.NodeSet.extend) or
	[`LRParser.configure`](#lr.LRParser.configure).
	
	The argument object maps node selectors to [highlighting
	tags](#highlight.Tag) or arrays of tags.
	
	Node selectors may hold one or more (space-separated) node paths.
	Such a path can be a [node name](#common.NodeType.name), or
	multiple node names (or `*` wildcards) separated by slash
	characters, as in `"Block/Declaration/VariableName"`. Such a path
	matches the final node but only if its direct parent nodes are the
	other nodes mentioned. A `*` in such a path matches any parent,
	but only a single level—wildcards that match multiple parents
	aren't supported, both for efficiency reasons and because Lezer
	trees make it rather hard to reason about what they would match.)
	
	A path can be ended with `/...` to indicate that the tag assigned
	to the node should also apply to all child nodes, even if they
	match their own style (by default, only the innermost style is
	used).
	
	When a path ends in `!`, as in `Attribute!`, no further matching
	happens for the node's child nodes, and the entire node gets the
	given style.
	
	In this notation, node names that contain `/`, `!`, `*`, or `...`
	must be quoted as JSON strings.
	
	For example:
	
	```javascript
	parser.withProps(
	  styleTags({
		// Style Number and BigNumber nodes
		"Number BigNumber": tags.number,
		// Style Escape nodes whose parent is String
		"String/Escape": tags.escape,
		// Style anything inside Attributes nodes
		"Attributes!": tags.meta,
		// Add a style to all content inside Italic nodes
		"Italic/...": tags.emphasis,
		// Style InvalidString nodes as both `string` and `invalid`
		"InvalidString": [tags.string, tags.invalid],
		// Style the node named "/" as punctuation
		'"/"': tags.punctuation
	  })
	)
	```
	*/
	function styleTags(spec) {
		let byName = Object.create(null);
		for (let prop in spec) {
			let tags = spec[prop];
			if (!Array.isArray(tags))
				tags = [tags];
			for (let part of prop.split(" "))
				if (part) {
					let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
					for (let pos = 0;;) {
						if (rest == "..." && pos > 0 && pos + 3 == part.length) {
							mode = 1 /* Mode.Inherit */;
							break;
						}
						let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
						if (!m)
							throw new RangeError("Invalid path: " + part);
						pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
						pos += m[0].length;
						if (pos == part.length)
							break;
						let next = part[pos++];
						if (pos == part.length && next == "!") {
							mode = 0 /* Mode.Opaque */;
							break;
						}
						if (next != "/")
							throw new RangeError("Invalid path: " + part);
						rest = part.slice(pos);
					}
					let last = pieces.length - 1, inner = pieces[last];
					if (!inner)
						throw new RangeError("Invalid path: " + part);
					let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
					byName[inner] = rule.sort(byName[inner]);
				}
		}
		return ruleNodeProp.add(byName);
	}
	const ruleNodeProp = new common.NodeProp();
	class Rule {
		constructor(tags, mode, context, next) {
			this.tags = tags;
			this.mode = mode;
			this.context = context;
			this.next = next;
		}
		get opaque() { return this.mode == 0 /* Mode.Opaque */; }
		get inherit() { return this.mode == 1 /* Mode.Inherit */; }
		sort(other) {
			if (!other || other.depth < this.depth) {
				this.next = other;
				return this;
			}
			other.next = this.sort(other.next);
			return other;
		}
		get depth() { return this.context ? this.context.length : 0; }
	}
	Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
	/**
	Define a [highlighter](#highlight.Highlighter) from an array of
	tag/class pairs. Classes associated with more specific tags will
	take precedence.
	*/
	function tagHighlighter(tags, options) {
		let map = Object.create(null);
		for (let style of tags) {
			if (!Array.isArray(style.tag))
				map[style.tag.id] = style.class;
			else
				for (let tag of style.tag)
					map[tag.id] = style.class;
		}
		let { scope, all = null } = options || {};
		return {
			style: (tags) => {
				let cls = all;
				for (let tag of tags) {
					for (let sub of tag.set) {
						let tagClass = map[sub.id];
						if (tagClass) {
							cls = cls ? cls + " " + tagClass : tagClass;
							break;
						}
					}
				}
				return cls;
			},
			scope
		};
	}
	function highlightTags(highlighters, tags) {
		let result = null;
		for (let highlighter of highlighters) {
			let value = highlighter.style(tags);
			if (value)
				result = result ? result + " " + value : value;
		}
		return result;
	}
	/**
	Highlight the given [tree](#common.Tree) with the given
	[highlighter](#highlight.Highlighter). Often, the higher-level
	[`highlightCode`](#highlight.highlightCode) function is easier to
	use.
	*/
	function highlightTree(tree, highlighter, 
	/**
	Assign styling to a region of the text. Will be called, in order
	of position, for any ranges where more than zero classes apply.
	`classes` is a space separated string of CSS classes.
	*/
	putStyle, 
	/**
	The start of the range to highlight.
	*/
	from = 0, 
	/**
	The end of the range.
	*/
	to = tree.length) {
		let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
		builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
		builder.flush(to);
	}
	/**
	Highlight the given tree with the given highlighter, calling
	`putText` for every piece of text, either with a set of classes or
	with the empty string when unstyled, and `putBreak` for every line
	break.
	*/
	function highlightCode(code, tree, highlighter, putText, putBreak, from = 0, to = code.length) {
		let pos = from;
		function writeTo(p, classes) {
			if (p <= pos)
				return;
			for (let text = code.slice(pos, p), i = 0;;) {
				let nextBreak = text.indexOf("\n", i);
				let upto = nextBreak < 0 ? text.length : nextBreak;
				if (upto > i)
					putText(text.slice(i, upto), classes);
				if (nextBreak < 0)
					break;
				putBreak();
				i = nextBreak + 1;
			}
			pos = p;
		}
		highlightTree(tree, highlighter, (from, to, classes) => {
			writeTo(from, "");
			writeTo(to, classes);
		}, from, to);
		writeTo(to, "");
	}
	class HighlightBuilder {
		constructor(at, highlighters, span) {
			this.at = at;
			this.highlighters = highlighters;
			this.span = span;
			this.class = "";
		}
		startSpan(at, cls) {
			if (cls != this.class) {
				this.flush(at);
				if (at > this.at)
					this.at = at;
				this.class = cls;
			}
		}
		flush(to) {
			if (to > this.at && this.class)
				this.span(this.at, to, this.class);
		}
		highlightRange(cursor, from, to, inheritedClass, highlighters) {
			let { type, from: start, to: end } = cursor;
			if (start >= to || end <= from)
				return;
			if (type.isTop)
				highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
			let cls = inheritedClass;
			let rule = getStyleTags(cursor) || Rule.empty;
			let tagCls = highlightTags(highlighters, rule.tags);
			if (tagCls) {
				if (cls)
					cls += " ";
				cls += tagCls;
				if (rule.mode == 1 /* Mode.Inherit */)
					inheritedClass += (inheritedClass ? " " : "") + tagCls;
			}
			this.startSpan(Math.max(from, start), cls);
			if (rule.opaque)
				return;
			let mounted = cursor.tree && cursor.tree.prop(common.NodeProp.mounted);
			if (mounted && mounted.overlay) {
				let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
				let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
				let hasChild = cursor.firstChild();
				for (let i = 0, pos = start;; i++) {
					let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
					let nextPos = next ? next.from + start : end;
					let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
					if (rangeFrom < rangeTo && hasChild) {
						while (cursor.from < rangeTo) {
							this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
							this.startSpan(Math.min(rangeTo, cursor.to), cls);
							if (cursor.to >= nextPos || !cursor.nextSibling())
								break;
						}
					}
					if (!next || nextPos > to)
						break;
					pos = next.to + start;
					if (pos > from) {
						this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
						this.startSpan(Math.min(to, pos), cls);
					}
				}
				if (hasChild)
					cursor.parent();
			}
			else if (cursor.firstChild()) {
				if (mounted)
					inheritedClass = "";
				do {
					if (cursor.to <= from)
						continue;
					if (cursor.from >= to)
						break;
					this.highlightRange(cursor, from, to, inheritedClass, highlighters);
					this.startSpan(Math.min(to, cursor.to), cls);
				} while (cursor.nextSibling());
				cursor.parent();
			}
		}
	}
	/**
	Match a syntax node's [highlight rules](#highlight.styleTags). If
	there's a match, return its set of tags, and whether it is
	opaque (uses a `!`) or applies to all child nodes (`/...`).
	*/
	function getStyleTags(node) {
		let rule = node.type.prop(ruleNodeProp);
		while (rule && rule.context && !node.matchContext(rule.context))
			rule = rule.next;
		return rule || null;
	}
	const t = Tag.define;
	const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
	/**
	The default set of highlighting [tags](#highlight.Tag).
	
	This collection is heavily biased towards programming languages,
	and necessarily incomplete. A full ontology of syntactic
	constructs would fill a stack of books, and be impractical to
	write themes for. So try to make do with this set. If all else
	fails, [open an
	issue](https://github.com/codemirror/codemirror.next) to propose a
	new tag, or [define](#highlight.Tag^define) a local custom tag for
	your use case.
	
	Note that it is not obligatory to always attach the most specific
	tag possible to an element—if your grammar can't easily
	distinguish a certain type of element (such as a local variable),
	it is okay to style it as its more general variant (a variable).
	
	For tags that extend some parent tag, the documentation links to
	the parent.
	*/
	const tags = {
		/**
		A comment.
		*/
		comment,
		/**
		A line [comment](#highlight.tags.comment).
		*/
		lineComment: t(comment),
		/**
		A block [comment](#highlight.tags.comment).
		*/
		blockComment: t(comment),
		/**
		A documentation [comment](#highlight.tags.comment).
		*/
		docComment: t(comment),
		/**
		Any kind of identifier.
		*/
		name,
		/**
		The [name](#highlight.tags.name) of a variable.
		*/
		variableName: t(name),
		/**
		A type [name](#highlight.tags.name).
		*/
		typeName: typeName,
		/**
		A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
		*/
		tagName: t(typeName),
		/**
		A property or field [name](#highlight.tags.name).
		*/
		propertyName: propertyName,
		/**
		An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
		*/
		attributeName: t(propertyName),
		/**
		The [name](#highlight.tags.name) of a class.
		*/
		className: t(name),
		/**
		A label [name](#highlight.tags.name).
		*/
		labelName: t(name),
		/**
		A namespace [name](#highlight.tags.name).
		*/
		namespace: t(name),
		/**
		The [name](#highlight.tags.name) of a macro.
		*/
		macroName: t(name),
		/**
		A literal value.
		*/
		literal,
		/**
		A string [literal](#highlight.tags.literal).
		*/
		string,
		/**
		A documentation [string](#highlight.tags.string).
		*/
		docString: t(string),
		/**
		A character literal (subtag of [string](#highlight.tags.string)).
		*/
		character: t(string),
		/**
		An attribute value (subtag of [string](#highlight.tags.string)).
		*/
		attributeValue: t(string),
		/**
		A number [literal](#highlight.tags.literal).
		*/
		number,
		/**
		An integer [number](#highlight.tags.number) literal.
		*/
		integer: t(number),
		/**
		A floating-point [number](#highlight.tags.number) literal.
		*/
		float: t(number),
		/**
		A boolean [literal](#highlight.tags.literal).
		*/
		bool: t(literal),
		/**
		Regular expression [literal](#highlight.tags.literal).
		*/
		regexp: t(literal),
		/**
		An escape [literal](#highlight.tags.literal), for example a
		backslash escape in a string.
		*/
		escape: t(literal),
		/**
		A color [literal](#highlight.tags.literal).
		*/
		color: t(literal),
		/**
		A URL [literal](#highlight.tags.literal).
		*/
		url: t(literal),
		/**
		A language keyword.
		*/
		keyword,
		/**
		The [keyword](#highlight.tags.keyword) for the self or this
		object.
		*/
		self: t(keyword),
		/**
		The [keyword](#highlight.tags.keyword) for null.
		*/
		null: t(keyword),
		/**
		A [keyword](#highlight.tags.keyword) denoting some atomic value.
		*/
		atom: t(keyword),
		/**
		A [keyword](#highlight.tags.keyword) that represents a unit.
		*/
		unit: t(keyword),
		/**
		A modifier [keyword](#highlight.tags.keyword).
		*/
		modifier: t(keyword),
		/**
		A [keyword](#highlight.tags.keyword) that acts as an operator.
		*/
		operatorKeyword: t(keyword),
		/**
		A control-flow related [keyword](#highlight.tags.keyword).
		*/
		controlKeyword: t(keyword),
		/**
		A [keyword](#highlight.tags.keyword) that defines something.
		*/
		definitionKeyword: t(keyword),
		/**
		A [keyword](#highlight.tags.keyword) related to defining or
		interfacing with modules.
		*/
		moduleKeyword: t(keyword),
		/**
		An operator.
		*/
		operator,
		/**
		An [operator](#highlight.tags.operator) that dereferences something.
		*/
		derefOperator: t(operator),
		/**
		Arithmetic-related [operator](#highlight.tags.operator).
		*/
		arithmeticOperator: t(operator),
		/**
		Logical [operator](#highlight.tags.operator).
		*/
		logicOperator: t(operator),
		/**
		Bit [operator](#highlight.tags.operator).
		*/
		bitwiseOperator: t(operator),
		/**
		Comparison [operator](#highlight.tags.operator).
		*/
		compareOperator: t(operator),
		/**
		[Operator](#highlight.tags.operator) that updates its operand.
		*/
		updateOperator: t(operator),
		/**
		[Operator](#highlight.tags.operator) that defines something.
		*/
		definitionOperator: t(operator),
		/**
		Type-related [operator](#highlight.tags.operator).
		*/
		typeOperator: t(operator),
		/**
		Control-flow [operator](#highlight.tags.operator).
		*/
		controlOperator: t(operator),
		/**
		Program or markup punctuation.
		*/
		punctuation,
		/**
		[Punctuation](#highlight.tags.punctuation) that separates
		things.
		*/
		separator: t(punctuation),
		/**
		Bracket-style [punctuation](#highlight.tags.punctuation).
		*/
		bracket,
		/**
		Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
		tokens).
		*/
		angleBracket: t(bracket),
		/**
		Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
		tokens).
		*/
		squareBracket: t(bracket),
		/**
		Parentheses (usually `(` and `)` tokens). Subtag of
		[bracket](#highlight.tags.bracket).
		*/
		paren: t(bracket),
		/**
		Braces (usually `{` and `}` tokens). Subtag of
		[bracket](#highlight.tags.bracket).
		*/
		brace: t(bracket),
		/**
		Content, for example plain text in XML or markup documents.
		*/
		content,
		/**
		[Content](#highlight.tags.content) that represents a heading.
		*/
		heading,
		/**
		A level 1 [heading](#highlight.tags.heading).
		*/
		heading1: t(heading),
		/**
		A level 2 [heading](#highlight.tags.heading).
		*/
		heading2: t(heading),
		/**
		A level 3 [heading](#highlight.tags.heading).
		*/
		heading3: t(heading),
		/**
		A level 4 [heading](#highlight.tags.heading).
		*/
		heading4: t(heading),
		/**
		A level 5 [heading](#highlight.tags.heading).
		*/
		heading5: t(heading),
		/**
		A level 6 [heading](#highlight.tags.heading).
		*/
		heading6: t(heading),
		/**
		A prose separator (such as a horizontal rule).
		*/
		contentSeparator: t(content),
		/**
		[Content](#highlight.tags.content) that represents a list.
		*/
		list: t(content),
		/**
		[Content](#highlight.tags.content) that represents a quote.
		*/
		quote: t(content),
		/**
		[Content](#highlight.tags.content) that is emphasized.
		*/
		emphasis: t(content),
		/**
		[Content](#highlight.tags.content) that is styled strong.
		*/
		strong: t(content),
		/**
		[Content](#highlight.tags.content) that is part of a link.
		*/
		link: t(content),
		/**
		[Content](#highlight.tags.content) that is styled as code or
		monospace.
		*/
		monospace: t(content),
		/**
		[Content](#highlight.tags.content) that has a strike-through
		style.
		*/
		strikethrough: t(content),
		/**
		Inserted text in a change-tracking format.
		*/
		inserted: t(),
		/**
		Deleted text.
		*/
		deleted: t(),
		/**
		Changed text.
		*/
		changed: t(),
		/**
		An invalid or unsyntactic element.
		*/
		invalid: t(),
		/**
		Metadata or meta-instruction.
		*/
		meta,
		/**
		[Metadata](#highlight.tags.meta) that applies to the entire
		document.
		*/
		documentMeta: t(meta),
		/**
		[Metadata](#highlight.tags.meta) that annotates or adds
		attributes to a given syntactic element.
		*/
		annotation: t(meta),
		/**
		Processing instruction or preprocessor directive. Subtag of
		[meta](#highlight.tags.meta).
		*/
		processingInstruction: t(meta),
		/**
		[Modifier](#highlight.Tag^defineModifier) that indicates that a
		given element is being defined. Expected to be used with the
		various [name](#highlight.tags.name) tags.
		*/
		definition: Tag.defineModifier(),
		/**
		[Modifier](#highlight.Tag^defineModifier) that indicates that
		something is constant. Mostly expected to be used with
		[variable names](#highlight.tags.variableName).
		*/
		constant: Tag.defineModifier(),
		/**
		[Modifier](#highlight.Tag^defineModifier) used to indicate that
		a [variable](#highlight.tags.variableName) or [property
		name](#highlight.tags.propertyName) is being called or defined
		as a function.
		*/
		function: Tag.defineModifier(),
		/**
		[Modifier](#highlight.Tag^defineModifier) that can be applied to
		[names](#highlight.tags.name) to indicate that they belong to
		the language's standard environment.
		*/
		standard: Tag.defineModifier(),
		/**
		[Modifier](#highlight.Tag^defineModifier) that indicates a given
		[names](#highlight.tags.name) is local to some scope.
		*/
		local: Tag.defineModifier(),
		/**
		A generic variant [modifier](#highlight.Tag^defineModifier) that
		can be used to tag language-specific alternative variants of
		some common tag. It is recommended for themes to define special
		forms of at least the [string](#highlight.tags.string) and
		[variable name](#highlight.tags.variableName) tags, since those
		come up a lot.
		*/
		special: Tag.defineModifier()
	};
	/**
	This is a highlighter that adds stable, predictable classes to
	tokens, for styling with external CSS.
	
	The following tags are mapped to their name prefixed with `"tok-"`
	(for example `"tok-comment"`):
	
	* [`link`](#highlight.tags.link)
	* [`heading`](#highlight.tags.heading)
	* [`emphasis`](#highlight.tags.emphasis)
	* [`strong`](#highlight.tags.strong)
	* [`keyword`](#highlight.tags.keyword)
	* [`atom`](#highlight.tags.atom)
	* [`bool`](#highlight.tags.bool)
	* [`url`](#highlight.tags.url)
	* [`labelName`](#highlight.tags.labelName)
	* [`inserted`](#highlight.tags.inserted)
	* [`deleted`](#highlight.tags.deleted)
	* [`literal`](#highlight.tags.literal)
	* [`string`](#highlight.tags.string)
	* [`number`](#highlight.tags.number)
	* [`variableName`](#highlight.tags.variableName)
	* [`typeName`](#highlight.tags.typeName)
	* [`namespace`](#highlight.tags.namespace)
	* [`className`](#highlight.tags.className)
	* [`macroName`](#highlight.tags.macroName)
	* [`propertyName`](#highlight.tags.propertyName)
	* [`operator`](#highlight.tags.operator)
	* [`comment`](#highlight.tags.comment)
	* [`meta`](#highlight.tags.meta)
	* [`punctuation`](#highlight.tags.punctuation)
	* [`invalid`](#highlight.tags.invalid)
	
	In addition, these mappings are provided:
	
	* [`regexp`](#highlight.tags.regexp),
	  [`escape`](#highlight.tags.escape), and
	  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
	  are mapped to `"tok-string2"`
	* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName2"`
	* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName tok-local"`
	* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName tok-definition"`
	* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
	  to `"tok-propertyName tok-definition"`
	*/
	const classHighlighter = tagHighlighter([
		{ tag: tags.link, class: "tok-link" },
		{ tag: tags.heading, class: "tok-heading" },
		{ tag: tags.emphasis, class: "tok-emphasis" },
		{ tag: tags.strong, class: "tok-strong" },
		{ tag: tags.keyword, class: "tok-keyword" },
		{ tag: tags.atom, class: "tok-atom" },
		{ tag: tags.bool, class: "tok-bool" },
		{ tag: tags.url, class: "tok-url" },
		{ tag: tags.labelName, class: "tok-labelName" },
		{ tag: tags.inserted, class: "tok-inserted" },
		{ tag: tags.deleted, class: "tok-deleted" },
		{ tag: tags.literal, class: "tok-literal" },
		{ tag: tags.string, class: "tok-string" },
		{ tag: tags.number, class: "tok-number" },
		{ tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
		{ tag: tags.variableName, class: "tok-variableName" },
		{ tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
		{ tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
		{ tag: tags.special(tags.variableName), class: "tok-variableName2" },
		{ tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
		{ tag: tags.typeName, class: "tok-typeName" },
		{ tag: tags.namespace, class: "tok-namespace" },
		{ tag: tags.className, class: "tok-className" },
		{ tag: tags.macroName, class: "tok-macroName" },
		{ tag: tags.propertyName, class: "tok-propertyName" },
		{ tag: tags.operator, class: "tok-operator" },
		{ tag: tags.comment, class: "tok-comment" },
		{ tag: tags.meta, class: "tok-meta" },
		{ tag: tags.invalid, class: "tok-invalid" },
		{ tag: tags.punctuation, class: "tok-punctuation" }
	]);
	
	exports.Tag = Tag;
	exports.classHighlighter = classHighlighter;
	exports.getStyleTags = getStyleTags;
	exports.highlightCode = highlightCode;
	exports.highlightTree = highlightTree;
	exports.styleTags = styleTags;
	exports.tagHighlighter = tagHighlighter;
	exports.tags = tags;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/html/dist/index.cjs":
	/*!*********************************************************!*\
	  !*** ../editor/node_modules/@lezer/html/dist/index.cjs ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const scriptText = 54,
	  StartCloseScriptTag = 1,
	  styleText = 55,
	  StartCloseStyleTag = 2,
	  textareaText = 56,
	  StartCloseTextareaTag = 3,
	  EndTag = 4,
	  SelfClosingEndTag = 5,
	  StartTag = 6,
	  StartScriptTag = 7,
	  StartStyleTag = 8,
	  StartTextareaTag = 9,
	  StartSelfClosingTag = 10,
	  StartCloseTag = 11,
	  NoMatchStartCloseTag = 12,
	  MismatchedStartCloseTag = 13,
	  missingCloseTag = 57,
	  IncompleteCloseTag = 14,
	  commentContent$1 = 58,
	  Element = 20,
	  TagName = 22,
	  Attribute = 23,
	  AttributeName = 24,
	  AttributeValue = 26,
	  UnquotedAttributeValue = 27,
	  ScriptText = 28,
	  StyleText = 31,
	  TextareaText = 34,
	  OpenTag = 36,
	  CloseTag = 37,
	  Dialect_noMatch = 0,
	  Dialect_selfClosing = 1;
	
	/* Hand-written tokenizers for HTML. */
	
	const selfClosers = {
	  area: true, base: true, br: true, col: true, command: true,
	  embed: true, frame: true, hr: true, img: true, input: true,
	  keygen: true, link: true, meta: true, param: true, source: true,
	  track: true, wbr: true, menuitem: true
	};
	
	const implicitlyClosed = {
	  dd: true, li: true, optgroup: true, option: true, p: true,
	  rp: true, rt: true, tbody: true, td: true, tfoot: true,
	  th: true, tr: true
	};
	
	const closeOnOpen = {
	  dd: {dd: true, dt: true},
	  dt: {dd: true, dt: true},
	  li: {li: true},
	  option: {option: true, optgroup: true},
	  optgroup: {optgroup: true},
	  p: {
		address: true, article: true, aside: true, blockquote: true, dir: true,
		div: true, dl: true, fieldset: true, footer: true, form: true,
		h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
		header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
		p: true, pre: true, section: true, table: true, ul: true
	  },
	  rp: {rp: true, rt: true},
	  rt: {rp: true, rt: true},
	  tbody: {tbody: true, tfoot: true},
	  td: {td: true, th: true},
	  tfoot: {tbody: true},
	  th: {td: true, th: true},
	  thead: {tbody: true, tfoot: true},
	  tr: {tr: true}
	};
	
	function nameChar(ch) {
	  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
	}
	
	function isSpace(ch) {
	  return ch == 9 || ch == 10 || ch == 13 || ch == 32
	}
	
	let cachedName = null, cachedInput = null, cachedPos = 0;
	function tagNameAfter(input, offset) {
	  let pos = input.pos + offset;
	  if (cachedPos == pos && cachedInput == input) return cachedName
	  let next = input.peek(offset);
	  while (isSpace(next)) next = input.peek(++offset);
	  let name = "";
	  for (;;) {
		if (!nameChar(next)) break
		name += String.fromCharCode(next);
		next = input.peek(++offset);
	  }
	  // Undefined to signal there's a <? or <!, null for just missing
	  cachedInput = input; cachedPos = pos;
	  return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null
	}
	
	const lessThan = 60, greaterThan = 62, slash = 47, question = 63, bang = 33, dash = 45;
	
	function ElementContext(name, parent) {
	  this.name = name;
	  this.parent = parent;
	  this.hash = parent ? parent.hash : 0;
	  for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
	}
	
	const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];
	
	const elementContext = new lr.ContextTracker({
	  start: null,
	  shift(context, term, stack, input) {
		return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
	  },
	  reduce(context, term) {
		return term == Element && context ? context.parent : context
	  },
	  reuse(context, node, stack, input) {
		let type = node.type.id;
		return type == StartTag || type == OpenTag
		  ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
	  },
	  hash(context) { return context ? context.hash : 0 },
	  strict: false
	});
	
	const tagStart = new lr.ExternalTokenizer((input, stack) => {
	  if (input.next != lessThan) {
		// End of file, close any open tags
		if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
		return
	  }
	  input.advance();
	  let close = input.next == slash;
	  if (close) input.advance();
	  let name = tagNameAfter(input, 0);
	  if (name === undefined) return
	  if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)
	
	  let parent = stack.context ? stack.context.name : null;
	  if (close) {
		if (name == parent) return input.acceptToken(StartCloseTag)
		if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
		if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
		for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
		input.acceptToken(MismatchedStartCloseTag);
	  } else {
		if (name == "script") return input.acceptToken(StartScriptTag)
		if (name == "style") return input.acceptToken(StartStyleTag)
		if (name == "textarea") return input.acceptToken(StartTextareaTag)
		if (selfClosers.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
		if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
		else input.acceptToken(StartTag);
	  }
	}, {contextual: true});
	
	const commentContent = new lr.ExternalTokenizer(input => {
	  for (let dashes = 0, i = 0;; i++) {
		if (input.next < 0) {
		  if (i) input.acceptToken(commentContent$1);
		  break
		}
		if (input.next == dash) {
		  dashes++;
		} else if (input.next == greaterThan && dashes >= 2) {
		  if (i >= 3) input.acceptToken(commentContent$1, -2);
		  break
		} else {
		  dashes = 0;
		}
		input.advance();
	  }
	});
	
	function inForeignElement(context) {
	  for (; context; context = context.parent)
		if (context.name == "svg" || context.name == "math") return true
	  return false
	}
	
	const endTag = new lr.ExternalTokenizer((input, stack) => {
	  if (input.next == slash && input.peek(1) == greaterThan) {
		let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
		input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
	  } else if (input.next == greaterThan) {
		input.acceptToken(EndTag, 1);
	  }
	});
	
	function contentTokenizer(tag, textToken, endToken) {
	  let lastState = 2 + tag.length;
	  return new lr.ExternalTokenizer(input => {
		// state means:
		// - 0 nothing matched
		// - 1 '<' matched
		// - 2 '</' + possibly whitespace matched
		// - 3-(1+tag.length) part of the tag matched
		// - lastState whole tag + possibly whitespace matched
		for (let state = 0, matchedLen = 0, i = 0;; i++) {
		  if (input.next < 0) {
			if (i) input.acceptToken(textToken);
			break
		  }
		  if (state == 0 && input.next == lessThan ||
			  state == 1 && input.next == slash ||
			  state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
			state++;
			matchedLen++;
		  } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
			matchedLen++;
		  } else if (state == lastState && input.next == greaterThan) {
			if (i > matchedLen)
			  input.acceptToken(textToken, -matchedLen);
			else
			  input.acceptToken(endToken, -(matchedLen - 2));
			break
		  } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
			input.acceptToken(textToken, 1);
			break
		  } else {
			state = matchedLen = 0;
		  }
		  input.advance();
		}
	  })
	}
	
	const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
	
	const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);
	
	const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
	
	const htmlHighlighting = highlight.styleTags({
	  "Text RawText": highlight.tags.content,
	  "StartTag StartCloseTag SelfClosingEndTag EndTag": highlight.tags.angleBracket,
	  TagName: highlight.tags.tagName,
	  "MismatchedCloseTag/TagName": [highlight.tags.tagName,  highlight.tags.invalid],
	  AttributeName: highlight.tags.attributeName,
	  "AttributeValue UnquotedAttributeValue": highlight.tags.attributeValue,
	  Is: highlight.tags.definitionOperator,
	  "EntityReference CharacterReference": highlight.tags.character,
	  Comment: highlight.tags.blockComment,
	  ProcessingInst: highlight.tags.processingInstruction,
	  DoctypeDecl: highlight.tags.documentMeta
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%WQ&rO,59fO%`Q&rO,59iO%hQ&rO,59lO%sQ&rO,59nOOOa'#D^'#D^O%{OaO'#CxO&WOaO,59[OOOb'#D_'#D_O&`ObO'#C{O&kObO,59[OOOd'#D`'#D`O&sOdO'#DOO'OOdO,59[OOO`'#Da'#DaO'WO!rO,59[O'_Q#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'dO$fO,59oOOO`,59o,59oO'lQ#|O,59qO'qQ#|O,59rOOO`-E7W-E7WO'vQ&rO'#CsOOQW'#DZ'#DZO(UQ&rO1G.wOOOa1G.w1G.wO(^Q&rO1G/QOOOb1G/Q1G/QO(fQ&rO1G/TOOOd1G/T1G/TO(nQ&rO1G/WOOO`1G/W1G/WOOO`1G/Y1G/YO(yQ&rO1G/YOOOa-E7[-E7[O)RQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)WQ#tO'#C|OOOd-E7^-E7^O)]Q#tO'#DPOOO`-E7_-E7_O)bQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O)gQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rOOO`7+$t7+$tO)rQ#|O,59eO)wQ#|O,59hO)|Q#|O,59kOOO`1G/X1G/XO*RO7[O'#CvO*dOMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O*uO7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+WOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
	  stateData: "+s~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OhyO~OS!OOhyO~OS!QOhyO~OS!SOT!TOhyO~OS!TOhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXhgXTgX~OS!fOhyO~OS!gOhyO~OS!hOhyO~OS!iOT!jOhyO~OS!jOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
	  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{}!P!R!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!UeZ!e{}!P!R!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
	  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
	  maxTerm: 67,
	  context: elementContext,
	  nodeProps: [
		["closedBy", -10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],
		["openedBy", 4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],
		["group", -9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"]
	  ],
	  propSources: [htmlHighlighting],
	  skippedNodes: [0],
	  repeatNodeCount: 9,
	  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
	  tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
	  topRules: {"Document":[0,15]},
	  dialects: {noMatch: 0, selfClosing: 485},
	  tokenPrec: 487
	});
	
	function getAttrs(openTag, input) {
	  let attrs = Object.create(null);
	  for (let att of openTag.getChildren(Attribute)) {
		let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
		if (name) attrs[input.read(name.from, name.to)] =
		  !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
	  }
	  return attrs
	}
	
	function findTagName(openTag, input) {
	  let tagNameNode = openTag.getChild(TagName);
	  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " "
	}
	
	function maybeNest(node, input, tags) {
	  let attrs;
	  for (let tag of tags) {
		if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
		  return {parser: tag.parser}
	  }
	  return null
	}
	
	// tags?: {
	//   tag: string,
	//   attrs?: ({[attr: string]: string}) => boolean,
	//   parser: Parser
	// }[]
	// attributes?: {
	//   name: string,
	//   tagName?: string,
	//   parser: Parser
	// }[]
	 
	function configureNesting(tags = [], attributes = []) {
	  let script = [], style = [], textarea = [], other = [];
	  for (let tag of tags) {
		let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
		array.push(tag);
	  }
	  let attrs = attributes.length ? Object.create(null) : null;
	  for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);
	
	  return common.parseMixed((node, input) => {
		let id = node.type.id;
		if (id == ScriptText) return maybeNest(node, input, script)
		if (id == StyleText) return maybeNest(node, input, style)
		if (id == TextareaText) return maybeNest(node, input, textarea)
	
		if (id == Element && other.length) {
		  let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;
		  if (tagName) for (let tag of other) {
			if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(n, input))))) {
			  let close = n.lastChild;
			  let to = close.type.id == CloseTag ? close.from : n.to;
			  if (to > open.to)
				return {parser: tag.parser, overlay: [{from: open.to, to}]}
			}
		  }
		}
	
		if (attrs && id == Attribute) {
		  let n = node.node, nameNode;
		  if (nameNode = n.firstChild) {
			let matches = attrs[input.read(nameNode.from, nameNode.to)];
			if (matches) for (let attr of matches) {
			  if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue
			  let value = n.lastChild;
			  if (value.type.id == AttributeValue) {
				let from = value.from + 1;
				let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
				if (to > from) return {parser: attr.parser, overlay: [{from, to}]}
			  } else if (value.type.id == UnquotedAttributeValue) {
				return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}
			  }
			}
		  }
		}
		return null
	  })
	}
	
	exports.configureNesting = configureNesting;
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/java/dist/index.cjs":
	/*!*********************************************************!*\
	  !*** ../editor/node_modules/@lezer/java/dist/index.cjs ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	const javaHighlighting = highlight.styleTags({
	  null: highlight.tags.null,
		instanceof: highlight.tags.operatorKeyword,
	  this: highlight.tags.self,
	  "new super assert open to with void": highlight.tags.keyword,
	  "class interface extends implements enum var": highlight.tags.definitionKeyword,
	  "module package import": highlight.tags.moduleKeyword,
	  "switch while for if else case default do break continue return try catch finally throw": highlight.tags.controlKeyword,
	  ["requires exports opens uses provides public private protected static transitive abstract final " +
	   "strictfp synchronized native transient volatile throws"]: highlight.tags.modifier,
	  IntegerLiteral: highlight.tags.integer,
	  FloatingPointLiteral: highlight.tags.float,
	  "StringLiteral TextBlock": highlight.tags.string,
	  CharacterLiteral: highlight.tags.character,
	  LineComment: highlight.tags.lineComment,
	  BlockComment: highlight.tags.blockComment,
	  BooleanLiteral: highlight.tags.bool,
	  PrimitiveType: highlight.tags.standard(highlight.tags.typeName),
	  TypeName: highlight.tags.typeName,
	  Identifier: highlight.tags.variableName,
	  "MethodName/Identifier": highlight.tags.function(highlight.tags.variableName),
	  Definition: highlight.tags.definition(highlight.tags.variableName),
	  ArithOp: highlight.tags.arithmeticOperator,
	  LogicOp: highlight.tags.logicOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  AssignOp: highlight.tags.definitionOperator,
	  UpdateOp: highlight.tags.updateOperator,
	  Asterisk: highlight.tags.punctuation,
	  Label: highlight.tags.labelName,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace,
	  ".": highlight.tags.derefOperator,
	  ", ;": highlight.tags.separator
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,true:34, false:34, null:42, void:46, byte:48, short:48, int:48, long:48, char:48, float:48, double:48, boolean:48, extends:62, super:64, class:76, this:78, new:84, public:100, protected:102, private:104, abstract:106, static:108, final:110, strictfp:112, default:114, synchronized:116, native:118, transient:120, volatile:122, throws:150, implements:160, interface:166, enum:176, instanceof:236, open:265, module:267, requires:272, transitive:274, exports:276, to:278, opens:280, uses:282, provides:284, with:286, package:290, import:294, if:306, else:308, while:312, for:316, var:323, assert:330, switch:334, case:340, do:344, break:348, continue:352, return:356, throw:362, try:366, catch:370, finally:378};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "#!tQ]QPOOQ$wQPOOO(_QQO'#H]O*cQQO'#CbOOQO'#Cb'#CbO*jQPO'#CaO*rOSO'#CpOOQO'#Hb'#HbOOQO'#Cu'#CuO,_QPO'#D_O,xQQO'#HlOOQO'#Hl'#HlO/^QQO'#HgO/eQQO'#HgOOQO'#Hg'#HgOOQO'#Hf'#HfO1iQPO'#DUO1vQPO'#GmO4nQPO'#D_O4uQPO'#DzO*jQPO'#E[O5hQPO'#E[OOQO'#DV'#DVO6vQQO'#H`O8}QQO'#EeO9UQPO'#EdO9ZQPO'#EfOOQO'#Ha'#HaO7^QQO'#HaO:^QQO'#FgO:eQPO'#EwO:jQPO'#E|O:jQPO'#FOOOQO'#H`'#H`OOQO'#HX'#HXOOQO'#Gg'#GgOOQO'#HW'#HWO;zQPO'#FhOOQO'#HV'#HVOOQO'#Gf'#GfQ]QPOOOOQO'#Hr'#HrO<PQPO'#HrO<UQPO'#D{O<UQPO'#EVO<UQPO'#EQO<^QPO'#HoO<oQQO'#EfO*jQPO'#C`O<wQPO'#C`O*jQPO'#FbO<|QPO'#FdO=XQPO'#FjO=XQPO'#FmO<UQPO'#FrO=^QPO'#FoO:jQPO'#FvO=XQPO'#FxO]QPO'#F}O=cQPO'#GPO=nQPO'#GRO=yQPO'#GTO=XQPO'#GVO:jQPO'#GWO>QQPO'#GYO>nQQO'#HhO?ZQQO'#CuO?bQPO'#HwO?pQPO'#D_O@`QPO'#DpO?eQPO'#DqO@jQPO'#HwO@{QPO'#DpOATQPO'#IQOAYQPO'#E`OOQO'#Hq'#HqOOQO'#Gl'#GlQ$wQPOOOAbQPO'#HrOOQO'#H]'#H]OCaQQO,58{OOQO'#HZ'#HZOOOO'#Gh'#GhOESOSO,59[OOQO,59[,59[OOQO'#Hh'#HhOEsQPO,59eOFuQPO,59yOOQO-E:e-E:eO*jQPO,58zOGiQPO,58zO*jQPO,5;|OGnQPO'#DQOGsQPO'#DQOOQO'#Gj'#GjOHsQQO,59jOOQO'#Dm'#DmOJ[QPO'#HtOJfQPO'#DlOJtQPO'#HsOJ|QPO,5<^OKRQPO,59^OKlQPO'#CxOOQO,59c,59cOKsQPO,59bOLOQQO'#H]OM}QQO'#CbO! |QPO'#D_O!#RQQO'#HlO!#cQQO,59pO!#jQPO'#DvO!#xQPO'#H{O!$QQPO,5:`O!$VQPO,5:`O!$mQPO,5;mO!$xQPO'#ISO!%TQPO,5;dO!%YQPO,5=XOOQO-E:k-E:kOOQO,5:f,5:fO!&pQPO,5:fO!&wQPO,5:vO?bQPO,5<^O*jQPO,5:vO<UQPO,5:gO<UQPO,5:qO<UQPO,5:lO<UQPO,5<^O!'_QPO,59qO:jQPO,5:}O!'fQPO,5;QO:jQPO,59TO!'tQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#En'#EnO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;eOOQO,5;h,5;hOOQO,5<R,5<RO!'{QPO,5;aO!(^QPO,5;cO!'{QPO'#CyO!(eQQO'#HlO!(sQQO,5;jO]QPO,5<SOOQO-E:d-E:dOOQO,5>^,5>^O!*TQPO,5:gO!*cQPO,5:qO!*kQPO,5:lO!*vQPO,5>ZO!#jQPO,5>ZO!&|QPO,59UO!+RQQO,58zO!+ZQQO,5;|O!+cQQO,5<OO*jQPO,5<OO:jQPO'#DUO]QPO,5<UO]QPO,5<XO!+kQPO'#FqO]QPO,5<ZO]QPO,5<`O!+{QQO,5<bO!,VQPO,5<dO!,[QPO,5<iOOQO'#Fi'#FiOOQO,5<k,5<kO!,aQPO,5<kOOQO,5<m,5<mO!,fQPO,5<mO!,kQQO,5<oOOQO,5<o,5<oO>TQPO,5<qO!,rQQO,5<rO!,yQPO'#GcO!.PQPO,5<tO>TQPO,5<|O!1}QPO,59jO!2[QPO'#HtO!2cQPO,59xO!2hQPO,5>cO?bQPO,59xO!2sQPO,5:[OAYQPO,5:zO!2{QPO'#DrO?eQPO'#DrO!3WQPO'#HxO!3`QPO,5:]O?bQPO,5>cO!'{QPO,5>cOATQPO,5>lOOQO,5:[,5:[O!$VQPO'#DtOOQO,5>l,5>lO!3eQPO'#EaOOQO,5:z,5:zO!6fQPO,5:zO!'{QPO'#DxOOQO-E:j-E:jOOQO,5:y,5:yO*jQPO,58}O!6kQPO'#ChOOQO1G.k1G.kOOOO-E:f-E:fOOQO1G.v1G.vO!+RQQO1G.fO*jQPO1G.fO!6uQQO1G1hOOQO,59l,59lO!6}QPO,59lOOQO-E:h-E:hO!7SQPO,5>`O!7kQPO,5:WO<UQPO'#GoO!7rQPO,5>_OOQO1G1x1G1xOOQO1G.x1G.xO!8]QPO'#CyO!8{QPO'#HlO!9VQPO'#CzO!9eQPO'#HkO!9mQPO,59dOOQO1G.|1G.|OKsQPO1G.|O!:TQPO,59eO!:bQQO'#H]O!:sQQO'#CbOOQO,5:b,5:bO<UQPO,5:cOOQO,5:a,5:aO!;UQQO,5:aOOQO1G/[1G/[O!;ZQPO,5:bO!;lQPO'#GrO!<PQPO,5>gOOQO1G/z1G/zO!<XQPO'#DvO!<jQPO1G/zO!'{QPO'#GpO!<oQPO1G1XO:jQPO1G1XO<UQPO'#GxO!<wQPO,5>nOOQO1G1O1G1OOOQO1G0Q1G0QO!=PQPO'#E]OOQO1G0b1G0bO!=pQPO1G1xO!&wQPO1G0bO!*TQPO1G0RO!*cQPO1G0]O!*kQPO1G0WOOQO1G/]1G/]O!=uQQO1G.pO9UQPO1G0jO*jQPO1G0jO<^QPO'#HoO!?iQQO1G.pOOQO1G.p1G.pO!?nQQO1G0iOOQO1G0l1G0lO!?uQPO1G0lO!@QQQO1G.oO!@hQQO'#HpO!@uQPO,59sO!BUQQO1G0pO!CmQQO1G0pO!D{QQO1G0pO!EYQQO1G0pO!F_QQO1G0pO!FuQQO1G0pO!GPQQO1G1PO!GWQQO'#HlOOQO1G0{1G0{O!HZQQO1G0}OOQO1G0}1G0}OOQO1G1n1G1nO!HqQPO'#D[O!'{QPO'#D|O!'{QPO'#D}OOQO1G0R1G0RO!HxQPO1G0RO!H}QPO1G0RO!IVQPO1G0RO!IbQPO'#EXOOQO1G0]1G0]O!IuQPO1G0]O!IzQPO'#ETO!'{QPO'#ESOOQO1G0W1G0WO!JtQPO1G0WO!JyQPO1G0WO!KRQPO'#EhO!KYQPO'#EhOOQO'#Gw'#GwO!KbQQO1G0mO!MRQQO1G3uO9UQPO1G3uO# QQPO'#FWOOQO1G.f1G.fOOQO1G1h1G1hO# XQPO1G1jOOQO1G1j1G1jO# dQQO1G1jO# lQPO1G1pOOQO1G1s1G1sO*zQPO'#D_O,xQQO,5<aO#%dQPO,5<aO#%uQPO,5<]O#%|QPO,5<]OOQO1G1u1G1uOOQO1G1z1G1zOOQO1G1|1G1|O:jQPO1G1|O#)pQPO'#FzOOQO1G2O1G2OO=XQPO1G2TOOQO1G2V1G2VOOQO1G2X1G2XOOQO1G2Z1G2ZOOQO1G2]1G2]OOQO1G2^1G2^O#)wQQO'#H]O#*bQQO'#CbO,xQQO'#HlO#*{QQOOO#+iQQO'#EeO#+WQQO'#HaO!#jQPO'#GdO#+pQPO,5<}OOQO'#HP'#HPO#+xQPO1G2`O#/vQPO'#G[O>TQPO'#G`OOQO1G2`1G2`O#/{QPO1G2hO#3yQPO,5>fOOQO1G/d1G/dOOQO1G3}1G3}O#4[QPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO!6fQPO1G0fOOQO,5:^,5:^O!'{QPO'#DsO#4aQPO,5:^O?eQPO'#GqO#4lQPO,5>dOOQO1G/w1G/wOATQPO'#HzO#4tQPO1G3}O?bQPO1G3}OOQO1G4W1G4WO!!mQPO'#DvO! |QPO'#D_OOQO,5:{,5:{O#5PQPO,5:{O#5PQPO,5:{O#5WQQO'#H`O#6fQQO'#HaO#6pQQO'#EbO#6{QPO'#EbO#7TQPO'#H}OOQO,5:d,5:dOOQO1G.i1G.iO#7`QQO'#EeO#7pQQO'#H_O#8QQPO'#FSOOQO'#H_'#H_O#8[QPO'#H_O#8yQPO'#IVO#9RQPO,59SOOQO7+$Q7+$QO!+RQQO7+$QOOQO7+'S7+'SOOQO1G/W1G/WO#9WQPO'#DoO#9bQQO'#HuOOQO'#Hu'#HuOOQO1G/r1G/rOOQO,5=Z,5=ZOOQO-E:m-E:mO#9rQWO,58{O#9yQPO,59fOOQO,59f,59fO!'{QPO'#HnOKWQPO'#GiO#:XQPO,5>VOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#:aQQO1G/{OOQO1G/}1G/}O#:fQPO1G/{OOQO1G/|1G/|O<UQPO1G/}OOQO,5=^,5=^OOQO-E:p-E:pOOQO7+%f7+%fOOQO,5=[,5=[OOQO-E:n-E:nO:jQPO7+&sOOQO7+&s7+&sOOQO,5=d,5=dOOQO-E:v-E:vO#:kQPO'#EUO#:yQPO'#EUOOQO'#Gv'#GvO#;bQPO,5:wOOQO,5:w,5:wOOQO7+'d7+'dOOQO7+%|7+%|OOQO7+%m7+%mO!HxQPO7+%mO!H}QPO7+%mO!IVQPO7+%mOOQO7+%w7+%wO!IuQPO7+%wOOQO7+%r7+%rO!JtQPO7+%rO!JyQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO9UQPO7+&UO9UQPO,5>ZO#<RQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO:jQPO'#GkO#<aQPO,5>[OOQO1G/_1G/_O:jQPO7+&kO#<lQQO,59eO#=oQPO,59vOOQO,59v,59vOOQO,5:h,5:hOOQO'#EP'#EPOOQO,5:i,5:iO#=vQPO'#EYO<UQPO'#EYO#>XQPO'#IOO#>dQPO,5:sO?bQPO'#HwO!'{QPO'#HwO#>lQPO'#DpOOQO'#Gt'#GtO#>sQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#?mQQO,5;SO#?tQPO,5;SOOQO-E:u-E:uOOQO7+&X7+&XOOQO7+)a7+)aO#?{QQO7+)aOOQO'#G{'#G{O#AiQPO,5;rOOQO,5;r,5;rO#ApQPO'#FXO*jQPO'#FXO*jQPO'#FXO*jQPO'#FXO#BOQPO7+'UO#BTQPO7+'UOOQO7+'U7+'UO]QPO7+'[O#B`QPO1G1{O?bQPO1G1{O#BnQQO1G1wO!'tQPO1G1wO#BuQPO1G1wO#B|QQO7+'hOOQO'#HO'#HOO#CTQPO,5<fOOQO,5<f,5<fO#C[QPO'#HrO:jQPO'#F{O#CdQPO7+'oO#CiQPO,5=OO?bQPO,5=OO#CnQPO1G2iO#DwQPO1G2iOOQO1G2i1G2iOOQO-E:}-E:}OOQO7+'z7+'zO!;lQPO'#G^O>TQPO,5<vOOQO,5<z,5<zO#EPQPO7+(SOOQO7+(S7+(SO#H}QPO1G4QOOQO7+%O7+%OOOQO7+&Q7+&QO#I`QPO,5:_OOQO1G/x1G/xOOQO,5=],5=]OOQO-E:o-E:oOOQO7+)i7+)iO#IkQPO7+)iO!9rQPO,5:aOOQO1G0g1G0gO#IvQPO1G0gO#I}QPO,59qO#JcQPO,5:|O9UQPO,5:|O!'{QPO'#GsO#JhQPO,5>iO#JsQPO,59TO#JzQPO'#IUO#KSQPO,5;nO*jQPO'#GzO#KXQPO,5>qOOQO1G.n1G.nOOQO<<Gl<<GlO#KaQPO'#HvO#KiQPO,5:ZOOQO1G/Q1G/QOOQO,5>Y,5>YOOQO,5=T,5=TOOQO-E:g-E:gO#KnQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J_<<J_O#LUQPO'#H]O#L]QPO'#CbO#LdQPO,5:pO#LiQPO,5:xO#:kQPO,5:pOOQO-E:t-E:tOOQO1G0c1G0cOOQO<<IX<<IXO!HxQPO<<IXO!H}QPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!JtQPO<<I^OOQO<<Ip<<IpO#LnQQO<<GvO9UQPO<<IpO*jQPO<<IpOOQO<<Gv<<GvO#NbQQO,5=VOOQO-E:i-E:iO#NoQQO<<JVOOQO1G/b1G/bOOQO,5:t,5:tO$ VQPO,5:tO$ eQPO,5:tO$ vQPO'#GuO$!^QPO,5>jO$!iQPO'#EZOOQO1G0_1G0_O$!pQPO1G0_O?bQPO,5:pOOQO-E:r-E:rOOQO1G0Z1G0ZOOQO1G0n1G0nO$!uQQO1G0nOOQO<<L{<<L{OOQO-E:y-E:yOOQO1G1^1G1^O$!|QQO,5;sOOQO'#G|'#G|O#ApQPO,5;sOOQO'#IW'#IWO$#UQQO,5;sO$#gQQO,5;sOOQO<<Jp<<JpO$#oQPO<<JpOOQO<<Jv<<JvO:jQPO7+'gO$#tQPO7+'gO!'tQPO7+'cO$$SQPO7+'cO$$XQQO7+'cOOQO<<KS<<KSOOQO-E:|-E:|OOQO1G2Q1G2QOOQO,5<g,5<gO$$`QQO,5<gOOQO<<KZ<<KZO:jQPO1G2jO$$gQPO1G2jOOQO,5=m,5=mOOQO7+(T7+(TO$$lQPO7+(TOOQO-E;P-E;PO$&ZQWO'#HgO$%uQWO'#HgO$&bQPO'#G_O<UQPO,5<xO!#jQPO,5<xOOQO1G2b1G2bOOQO<<Kn<<KnO$&sQPO1G/yOOQO<<MT<<MTOOQO7+&R7+&RO$'OQPO1G0jO$'ZQQO1G0hOOQO1G0h1G0hO$'cQPO1G0hOOQO,5=_,5=_OOQO-E:q-E:qO$'hQQO1G.oOOQO1G1Z1G1ZO$'rQPO'#GyO$(PQPO,5>pOOQO1G1Y1G1YO$(XQPO'#FTOOQO,5=f,5=fOOQO-E:x-E:xO$(^QPO'#GnO$(kQPO,5>bOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$(sQPO1G0dO$(xQPO1G0[O$(}QPO1G0dOOQOAN>sAN>sO!HxQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O9UQPOAN?[OOQO1G0`1G0`O$)SQPO1G0`OOQO,5=a,5=aOOQO-E:s-E:sO$)bQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1_1G1_O$)iQQO1G1_OOQO-E:z-E:zO$)qQQO'#IXO$)lQPO1G1_O$#[QPO1G1_O*jQPO1G1_OOQOAN@[AN@[O$)|QQO<<KRO:jQPO<<KRO$*TQPO<<J}OOQO<<J}<<J}O!'tQPO<<J}OOQO1G2R1G2RO$*YQQO7+(UO:jQPO7+(UOOQO<<Ko<<KoP!,yQPO'#HRO!#jQPO'#HQO$*dQPO,5<yO$*oQPO1G2dO<UQPO1G2dO9UQPO7+&SO$*tQPO7+&SOOQO7+&S7+&SOOQO,5=e,5=eOOQO-E:w-E:wO#JsQPO,5;oOOQO,5=Y,5=YOOQO-E:l-E:lO$*yQPO7+&OOOQO7+%v7+%vO$+XQPO7+&OOOQOG24_G24_OOQOG24vG24vOOQO7+%z7+%zOOQO7+&y7+&yO*jQPO'#G}O$+^QPO,5>sO$+fQPO7+&yO$+kQQO'#IYOOQOAN@mAN@mO$+vQQOAN@mOOQOAN@iAN@iO$+}QPOAN@iO$,SQQO<<KpO$,^QPO,5=lOOQO-E;O-E;OOOQO7+(O7+(OO$,oQPO7+(OO$,tQPO<<InOOQO<<In<<InO$,yQPO<<IjOOQO<<Ij<<IjO#JsQPO<<IjO$,yQPO<<IjO$-XQQO,5=iOOQO-E:{-E:{OOQO<<Je<<JeO$-dQPO,5>tOOQOG26XG26XOOQOG26TG26TOOQO<<Kj<<KjOOQOAN?YAN?YOOQOAN?UAN?UO#JsQPOAN?UO$-lQPOAN?UO$-qQPOAN?UO$.PQPOG24pOOQOG24pG24pO#JsQPOG24pOOQOLD*[LD*[O$.UQPOLD*[OOQO!$'Mv!$'MvO*jQPO'#CaO$.ZQQO'#H]O$.nQQO'#CbO!'{QPO'#Cy",
	  stateData: "$/Z~OPOSQOS%xOS~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO![!`O!]yO!^yO!_yO!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&sdO~Og^Oh^Ov{O}cO!P!mO!SyO!TyO!UyO!VyO!W!pO!XyO!YyO!ZzO!]yO!^yO!_yO!u}O!z|O%|TO&O!cO&Q!dO&^!hO&sdO~OWiXW&PXZ&PXuiXu&PX!P&PX!b&PX#]&PX#_&PX#a&PX#c&PX#d&PX#e&PX#f&PX#g&PX#h&PX#j&PX#n&PX#q&PX%|iX&OiX&QiX&]&PX&^iX&^&PX&m&PX&uiX&u&PX&w!aX~O#o$]X~P&bOWUXW&[XZUXuUXu&[X!PUX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%|&[X&O&[X&Q&[X&]UX&^UX&^&[X&mUX&uUX&u&[X&w!aX~O#o$]X~P(fO&OSO&Q!qO~O&V!vO&X!tO~Og^Oh^O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO%|TO&O!wO&QWOg!RXh!RX$g!RX&O!RX&Q!RX~O#x!|O#y!{O$V!}Ov!RX!u!RX!z!RX&s!RX~P*zOW#XOu#OO%|TO&O#SO&Q#SO&u&`X~OW#[Ou&ZX%|&ZX&O&ZX&Q&ZX&u&ZXY&ZXw&ZX&m&ZX&p&ZXZ&ZXq&ZX&]&ZX!P&ZX#_&ZX#a&ZX#c&ZX#d&ZX#e&ZX#f&ZX#g&ZX#h&ZX#j&ZX#n&ZX#q&ZX}&ZX!r&ZX#o&ZXs&ZX|&ZX~O&^#YO~P-^O&^&ZX~P-^OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO#epO#qoO#spO#tpO%|TO&WUO~O&O#^O&Q#]OY&oP~P/lO%|TOg%aXh%aXv%aX!S%aX!T%aX!U%aX!V%aX!W%aX!X%aX!Y%aX!Z%aX!]%aX!^%aX!_%aX!u%aX!z%aX$g%aX&O%aX&Q%aX&s%aX&^%aX~O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yOg!RXh!RXv!RX!u!RX!z!RX&O!RX&Q!RX&s!RX&^!RX~O$g!RX~P3^O|#kO~P]Og^Oh^Ov#pO!u#rO!z#qO&O!wO&QWO&s#oO~O$g#sO~P4|Ou#uO&u#vO!P&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&]&SX&^&SX&m&SX~OW#tOY&SX#o&SXs&SXq&SX|&SX~P5oO!b#wO#]#wOW&TXu&TX!P&TX#_&TX#a&TX#c&TX#d&TX#e&TX#f&TX#g&TX#h&TX#j&TX#n&TX#q&TX&]&TX&^&TX&m&TX&u&TXY&TX#o&TXs&TXq&TX|&TX~OZ#XX~P7^OZ#xO~O&u#vO~O#_#|O#a#}O#c$OO#d$OO#e$PO#f$QO#g$RO#h$RO#j$VO#n$SO#q$TO&]#zO&^#zO&m#{O~O!P$UO~P9`O&w$WO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO#epO#qoO#spO#tpO%|TO&O0kO&Q0jO&WUO~O#o$[O~O![$^O~O&O#SO&Q#SO~Og^Oh^O&O!wO&QWO&^#YO~OW$dO&u#vO~O#y!{O~O!W$hO&OSO&Q!qO~OZ$iO~OZ$lO~O!P$sO&O$rO&Q$rO~O!P$uO&O$rO&Q$rO~O!P$xO~P:jOZ${O}cO~OW&[Xu&[X%|&[X&O&[X&Q&[X&^&[X~OZ!aX~P>YOWiXuiX%|iX&OiX&QiX&^iX~OZ!aX~P>uOu#OO%|TO&O#SO&Q#SO~O%|TO~P3^Og^Oh^Ov#pO!u#rO!z#qO&^!hO&s#oO~O&O!cO&Q!dO~P?wOg^Oh^O%|TO&O!cO&Q!dO~O}cO!P%^O~OZ%_O~O}%aO!m%dO~O}cOg&fXh&fXv&fX!S&fX!T&fX!U&fX!V&fX!W&fX!X&fX!Y&fX!Z&fX!]&fX!^&fX!_&fX!u&fX!z&fX%|&fX&O&fX&Q&fX&^&fX&s&fX~OW%gOZ%hOgTahTa%|Ta&OTa&QTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#xTa#yTa$VTa$gTa&sTa&^TauTaYTaqTa|Ta!PTa~PBxO&V%kO&X!tO~Ou#OO%|TOqma&]maYma&mma!Pma~O&uma}ma!rma~PE[O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO~Og!Rah!Rav!Ra!u!Ra!z!Ra$g!Ra&O!Ra&Q!Ra&s!Ra&^!Ra~PFQO#y%mO~Os%oO~Ou%pO%|TO~Ou#OO%|ra&Ora&Qra&uraYrawra&mra&pra!Pra&]raqra~OWra#_ra#ara#cra#dra#era#fra#gra#hra#jra#nra#qra&^ra#orasra|ra~PG{Ou#OO%|TOq&hX!P&hX!b&hX~OY&hX#o&hX~PIyO!b%sOq!`X!P!`XY!`X~Oq%tO!P&gX~O!P%vO~Ov%wO~Og^Oh^O%|0iO&O!wO&QWO&a%zO~O&]&_P~PKWO%|TO&O!wO&QWO~OW&PXYiXY!aXY&PXZ&PXq!aXu&PXwiX!b&PX#]&PX#_&PX#a&PX#c&PX#d&PX#e&PX#f&PX#g&PX#h&PX#j&PX#n&PX#q&PX&]&PX&^&PX&miX&m&PX&piX&uiX&u&PX&w!aX~P>uOWUXYUXY!aXY&[XZUXq!aXuUXw&[X!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX&]UX&^UX&mUX&m&[X&p&[X&uUX&u&[X&w!aX~P>YOg^Oh^O%|TO&O!wO&QWOg!RXh!RX&O!RX&Q!RX~PFQOu#OOw&UO%|TO&O&RO&Q&QO&p&TO~OW#XOY&`X&m&`X&u&`X~P!!mOY&WO~P9`Og^Oh^O&O!wO&QWO~Oq&YOY&oX~OY&[O~Og^Oh^O%|TO&O!wO&QWOY&oP~PFQOY&aO&m&_O&u#vO~Oq&bO&w$WOY&vX~OY&dO~O%|TOg%aah%aav%aa!S%aa!T%aa!U%aa!V%aa!W%aa!X%aa!Y%aa!Z%aa!]%aa!^%aa!_%aa!u%aa!z%aa$g%aa&O%aa&Q%aa&s%aa&^%aa~O|&eO~P]O}&fO~Op&rOw&sO&OSO&Q!qO&^#YO~Oz&qO~P!&|Oz&uO&OSO&Q!qO&^#YO~OY&dP~P:jOg^Oh^O%|TO&O!wO&QWO~O}cO~P:jOW#XOu#OO%|TO&u&`X~O#q$TO!P#ra#_#ra#a#ra#c#ra#d#ra#e#ra#f#ra#g#ra#h#ra#j#ra#n#ra&]#ra&^#ra&m#raY#ra#o#ras#raq#ra|#ra~Oo'XO}'WO!r'YO&^!hO~O}'_O!r'YO~Oo'cO}'bO&^!hO~OZ#xOu'gO%|TO~OW%gO}'mO~OW%gO!P'oO~OW'pO!P'qO~O$g!WO&O0kO&Q0jO!P&dP~P/lO!P'|O#o'}O~P9`O}(OO~O$b(QO~O!P(RO~O!P(SO~O!P(TO~P9`O!P(VO~P9`OZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQO%P(bO%T(cOZ$|a_$|a`$|aa$|ab$|ac$|ae$|ag$|ah$|ap$|av$|aw$|az$|a}$|a!P$|a!S$|a!T$|a!U$|a!V$|a!W$|a!X$|a!Y$|a!Z$|a![$|a!]$|a!^$|a!_$|a!u$|a!z$|a#e$|a#q$|a#s$|a#t$|a#x$|a#y$|a$V$|a$X$|a$_$|a$b$|a$d$|a$g$|a$k$|a$m$|a$r$|a$t$|a$v$|a$x$|a${$|a$}$|a%v$|a%|$|a&O$|a&Q$|a&W$|a&s$|a|$|a$`$|a$p$|a~O}ra!rra&}ra~PG{OZ%_O~PIyO!P(gO~O!m%dO}&ka!P&ka~O}cO!P(jO~Oo(nOq!fX&]!fX~Oq(pO&]&lX~O&](rO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op)OOv{Ow(}Oz!OO|(yO}cO!PvO![!`O!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&^#YO&sdO~PFQO}%aO~O})VOY&yP~P:jOW%gO!P)^O~Os)_O~Ou#OO%|TOq&ha!P&ha!b&haY&ha#o&ha~O})`O~P:jOq%tO!P&ga~Og^Oh^O%|0iO&O!wO&QWO~O&a)gO~P!7zOu#OO%|TOq&`X&]&`XY&`X&m&`X!P&`X~O}&`X!r&`X~P!8dOo)iOp)iOqnX&]nX~Oq)jO&]&_X~O&])lO~Ou#OOw)nO%|TO&OSO&Q!qO~OYma&mma&uma~P!9rOW&PXY!aXq!aXu!aX%|!aX~OWUXY!aXq!aXu!aX%|!aX~OW)qO~Ou#OO%|TO&O#SO&Q#SO&p)sO~Og^Oh^O%|TO&O!wO&QWO~PFQOq&YOY&oa~Ou#OO%|TO&O#SO&Q#SO&p&TO~OY)vO~OY)yO&m&_O~Oq&bOY&va~Og^Oh^Ov{O|*RO!u}O%|TO&O!wO&QWO&sdO~PFQO!P*SO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#c^i#d^i#e^i#f^i#g^i#h^i#j^i#n^i#q^i&]^i&^^i&m^i&u^iY^i#o^is^iq^i|^i~OW*cO~Os*dO~P9`Oz*eO&OSO&Q!qO~O!P]iY]i#o]is]iq]i|]i~P9`Oq*fOY&dX!P&dX~P9`OY*hO~O#q$TO!P#^i#_#^i#a#^i#c#^i#d#^i#e#^i#f#^i#j#^i#n#^i&]#^i&^#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#g$RO#h$RO~P!@zO#_#|O#f$QO#g$RO#h$RO#j$VO#q$TO&]#zO&^#zO!P#^i#a#^i#c#^i#d#^i#n#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#e$PO~P!B`O#_#|O#f$QO#g$RO#h$RO#j$VO#q$TO&]#zO&^#zO!P#^i#c#^i#d#^i#n#^iY#^i#o#^is#^iq#^i|#^i~O#a#}O#e$PO&m#{O~P!CtO#e#^i~P!B`O#q$TO!P#^i#a#^i#c#^i#d#^i#e#^i#f#^i#n#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#_#|O#g$RO#h$RO#j$VO&]#zO&^#zO~P!EaO#g#^i#h#^i~P!@zO#o*iO~P9`O#_&`X#a&`X#c&`X#d&`X#e&`X#f&`X#g&`X#h&`X#j&`X#n&`X#q&`X&^&`X#o&`Xs&`X|&`X~P!8dO!P#kiY#ki#o#kis#kiq#ki|#ki~P9`O|*lO~P$wO}'WO~O}'WO!r'YO~Oo'XO}'WO!r'YO~O%|TO&O#SO&Q#SO|&rP!P&rP~PFQO}'_O~Og^Oh^Ov{O|*yO!P*wO!u}O!z|O%|TO&O!wO&QWO&^!hO&sdO~PFQO}'bO~Oo'cO}'bO~Os*{O~P:jOu*}O%|TO~Ou'gO})`O%|TOW#Zi!P#Zi#_#Zi#a#Zi#c#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#j#Zi#n#Zi#q#Zi&]#Zi&^#Zi&m#Zi&u#ZiY#Zi#o#Zis#Ziq#Zi|#Zi~O}'WOW&ciu&ci!P&ci#_&ci#a&ci#c&ci#d&ci#e&ci#f&ci#g&ci#h&ci#j&ci#n&ci#q&ci&]&ci&^&ci&m&ci&u&ciY&ci#o&cis&ciq&ci|&ci~O#|+VO$O+WO$Q+WO$R+XO$S+YO~O|+UO~P!NoO$Y+ZO&OSO&Q!qO~OW+[O!P+]O~O$`+^OZ$^i_$^i`$^ia$^ib$^ic$^ie$^ig$^ih$^ip$^iv$^iw$^iz$^i}$^i!P$^i!S$^i!T$^i!U$^i!V$^i!W$^i!X$^i!Y$^i!Z$^i![$^i!]$^i!^$^i!_$^i!u$^i!z$^i#e$^i#q$^i#s$^i#t$^i#x$^i#y$^i$V$^i$X$^i$_$^i$b$^i$d$^i$g$^i$k$^i$m$^i$r$^i$t$^i$v$^i$x$^i${$^i$}$^i%v$^i%|$^i&O$^i&Q$^i&W$^i&s$^i|$^i$p$^i~Og^Oh^O$g#sO&O!wO&QWO~O!P+bO~P:jO!P+cO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!Z+hO![!`O!]yO!^yO!_yO!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$p+iO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&sdO~O|+gO~P#&ROW&PXY&PXZ&PXu&PX!P&PX&uiX&u&PX~P>uOWUXYUXZUXuUX!PUX&uUX&u&[X~P>YOW#tOu#uO&u#vO~OW&TXY%WXu&TX!P%WX&u&TX~OZ#XX~P#+WOY+oO!P+mO~O%P(bO%T(cOZ$|i_$|i`$|ia$|ib$|ic$|ie$|ig$|ih$|ip$|iv$|iw$|iz$|i}$|i!P$|i!S$|i!T$|i!U$|i!V$|i!W$|i!X$|i!Y$|i!Z$|i![$|i!]$|i!^$|i!_$|i!u$|i!z$|i#e$|i#q$|i#s$|i#t$|i#x$|i#y$|i$V$|i$X$|i$_$|i$b$|i$d$|i$g$|i$k$|i$m$|i$r$|i$t$|i$v$|i$x$|i${$|i$}$|i%v$|i%|$|i&O$|i&Q$|i&W$|i&s$|i|$|i$`$|i$p$|i~OZ+rO~O%P(bO%T(cOZ%Ui_%Ui`%Uia%Uib%Uic%Uie%Uig%Uih%Uip%Uiv%Uiw%Uiz%Ui}%Ui!P%Ui!S%Ui!T%Ui!U%Ui!V%Ui!W%Ui!X%Ui!Y%Ui!Z%Ui![%Ui!]%Ui!^%Ui!_%Ui!u%Ui!z%Ui#e%Ui#q%Ui#s%Ui#t%Ui#x%Ui#y%Ui$V%Ui$X%Ui$_%Ui$b%Ui$d%Ui$g%Ui$k%Ui$m%Ui$r%Ui$t%Ui$v%Ui$x%Ui${%Ui$}%Ui%v%Ui%|%Ui&O%Ui&Q%Ui&W%Ui&s%Ui|%Ui$`%Ui$p%Ui~Ou#OO%|TO}&na!P&na!m&na~O!P+xO~Oo(nOq!fa&]!fa~Oq(pO&]&la~O!m%dO}&ki!P&ki~O|,RO~P]OW,TO~P5oOW&TXu&TX#_&TX#a&TX#c&TX#d&TX#e&TX#f&TX#g&TX#h&TX#j&TX#n&TX#q&TX&]&TX&^&TX&m&TX&u&TX~OZ#xO!P&TX~P#5_OW$dOZ#xO&u#vO~Op,VOw,VO~Oq,WO}&qX!P&qX~O!b,YO#]#wOY&TXZ#XX~P#5_OY&RXq&RX|&RX!P&RX~P9`O})VO|&xP~P:jOY&RXg%ZXh%ZX%|%ZX&O%ZX&Q%ZXq&RX|&RX!P&RX~Oq,]OY&yX~OY,_O~O})`O|&jP~P:jOq&iX!P&iX|&iXY&iX~P9`O&aTa~PBxOo)iOp)iOqna&]na~Oq)jO&]&_a~OW,gO~Ow,hO~Ou#OO%|TO&O,lO&Q,kO~Og^Oh^Ov#pO!u#rO&O!wO&QWO&s#oO~Og^Oh^Ov{O|,qO!u}O%|TO&O!wO&QWO&sdO~PFQOw,|O&OSO&Q!qO&^#YO~Oq*fOY&da!P&da~O#_ma#ama#cma#dma#ema#fma#gma#hma#jma#nma#qma&^ma#omasma|ma~PE[O|-QO~P$wOZ#xO}'WOq!|X|!|X!P!|X~Oq-UO|&rX!P&rX~O|-XO!P-WO~O&^!hO~P4|Og^Oh^Ov{O|-]O!P*wO!u}O!z|O%|TO&O!wO&QWO&^!hO&sdO~PFQOs-^O~P9`Os-^O~P:jO}'WOW&cqu&cq!P&cq#_&cq#a&cq#c&cq#d&cq#e&cq#f&cq#g&cq#h&cq#j&cq#n&cq#q&cq&]&cq&^&cq&m&cq&u&cqY&cq#o&cqs&cqq&cq|&cq~O|-bO~P!NoO!W-fO#}-fO&OSO&Q!qO~O!P-iO~O$Y-jO&OSO&Q!qO~O!b%sO#o-lOq!`X!P!`X~O!P-nO~P9`O!P-nO~P:jO!P-qO~P9`O|-sO~P#&RO![$^O#o-tO~O!P-vO~O!b-wO~OY-zOZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQOY-zO!P-{O~O%P(bO%T(cOZ%Uq_%Uq`%Uqa%Uqb%Uqc%Uqe%Uqg%Uqh%Uqp%Uqv%Uqw%Uqz%Uq}%Uq!P%Uq!S%Uq!T%Uq!U%Uq!V%Uq!W%Uq!X%Uq!Y%Uq!Z%Uq![%Uq!]%Uq!^%Uq!_%Uq!u%Uq!z%Uq#e%Uq#q%Uq#s%Uq#t%Uq#x%Uq#y%Uq$V%Uq$X%Uq$_%Uq$b%Uq$d%Uq$g%Uq$k%Uq$m%Uq$r%Uq$t%Uq$v%Uq$x%Uq${%Uq$}%Uq%v%Uq%|%Uq&O%Uq&Q%Uq&W%Uq&s%Uq|%Uq$`%Uq$p%Uq~Ou#OO%|TO}&ni!P&ni!m&ni~O&m&_Oq!ga&]!ga~O!m%dO}&kq!P&kq~O|.WO~P]Op.YOw&sOz&qO&OSO&Q!qO&^#YO~O!P.ZO~Oq,WO}&qa!P&qa~O})VO~P:jOq.aO|&xX~O|.cO~Oq,]OY&ya~Oq.gO|&jX~O|.iO~Ow.jO~Oq!aXu!aX!P!aX!b!aX%|!aX~OZ&PX~P#KsOZUX~P#KsO!P.kO~OZ.lO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#c^y#d^y#e^y#f^y#g^y#h^y#j^y#n^y#q^y&]^y&^^y&m^y&u^yY^y#o^ys^yq^y|^y~OY%_aq%_a!P%_a~P9`O!P#myY#my#o#mys#myq#my|#my~P9`O}'WOq!|a|!|a!P!|a~OZ#xO}'WOq!|a|!|a!P!|a~O%|TO&O#SO&Q#SOq%iX|%iX!P%iX~PFQOq-UO|&ra!P&ra~O|!}X~P$wO|.yO~Os.zO~P9`OW%gO!P.{O~OW%gO$P/QO&OSO&Q!qO!P&{P~OW%gO$T/RO~O!P/SO~O!b%sO#o/UOq!`X!P!`X~OY/WO~O!P/XO~P9`O#o/YO~P9`O!b/[O~OY/]OZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQOW#[Ou&ZX%|&ZX&O&ZX&Q&ZX&}&ZX~O&^#YO~P$%uOu#OO%|TO&}/_O&O%RX&Q%RX~O&m&_Oq!gi&]!gi~Op/cO&OSO&Q!qO~OW*cOZ#xO~O!P/eO~OY&RXq&RX~P9`O})VOq%mX|%mX~P:jOq.aO|&xa~O!b/hO~O})`Oq%bX|%bX~P:jOq.gO|&ja~OY/kO~O!P/lO~OZ/mO~O}'WOq!|i|!|i!P!|i~O|!}a~P$wOW%gO!P/qO~OW%gOq/rO!P&{X~OY/vO~P9`OY/xO~OY%Wq!P%Wq~P9`O&}/_O&O%Ra&Q%Ra~OY/}O~O!P0QO~Ou#OO!P0SO!Z0TO%|TO~OY0UO~Oq/rO!P&{a~O!P0XO~OW%gOq/rO!P&|X~OY0ZO~P9`OY0[O~OY%Wy!P%Wy~P9`Ou#OO%|TO&O%ta&Q%ta&}%ta~OY0]O~O!P0^O~Ou#OO!P0_O!Z0`O%|TO~OW%gOq%qa!P%qa~Oq/rO!P&|a~O!P0dO~Ou#OO!P0dO!Z0eO%|TO~O!P0fO~O!P0hO~O#o&PXY&PXs&PXq&PX|&PX~P&bO#oUXYUXsUXqUX|UX~P(fO`Q_P#f&Wc~",
	  goto: "#)S&}PPPP'O'c*t-wP'cPP.].a/uPPPPP1aP2yPP4c7U9q<^<v>kPPP>qPAXPPPBR2yPCzPPDuPElEtPPPPPPPPPPPPGPGhPJpJxKUKpKvK|MlMpMpMxPNX! a!!U!!`P!!u! aP!!{!#V! |!#fP!$V!$a!$g! a!$j!$pElEl!$t!%O!%R2y!&m2y2y!(fP.aP!(jP!)ZPPPPPP.aP.a!)w.aPP.aP.aPP.a!+]!+gPP!+m!+vPPPPPPPP'OP'OPP!+z!+z!,_!+zPP!+zP!+zP!,x!,{P!+z!-c!+zP!+zP!-f!-iP!+zP!+zP!+zP!+zP!+z!+zP!+zP!-mP!-s!-v!-|P!+z!.Y!.]P!.e!.w!2v!2|!3S!4Y!4`!4n!5t!5z!6Q!6[!6b!6h!6n!6t!6z!7Q!7W!7^!7d!7j!7p!7v!8Q!8W!8b!8hPPP!8n!+z!9cP!<vP!=zP!@]!@s!Co2yPPP!E]!Hy!KjPP!NV!NYP#!c#!i#$V#$f#$n#%p#&Y#'T#'^#'a#'oP#'r#(OP#(V#(^P#(aP#(lP#(o#(r#(u#(y#)PstOcx![#l$[$j$k$m$n%a(O(z({+^+f,S'orOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$V$W$X$Y$[$b$i$j$k$l$m$n${%P%S%W%Z%[%_%a%d%h%r%s%x%y&O&P&X&Y&]&_&a&f'R'W'X'Y'_'b'c'g'h'j'u'v'x'}(O(Y(f(n(p(u(w(x(z({)V)`)i)j)y)}*Q*f*i*j*k*t*u*x*}+^+`+b+c+f+i+l+m+r+w,Q,S,W,Y,o-U-W-Z-l-n-w-{.P.a.g.x/U/X/[/^/h/k/{0R0T0U0`0b0e0l#rhO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0et!sT!Q!S!T!{!}$h%m+V+W+X+Y-e-g/Q/R/r0iQ#mdS&V#`(wQ&i#oU&n#t$d,TQ&u#vW([${+m-{/^U)S%g'p+[Q)T%hS)o&P,QU*`&p,{.XQ*e&vQ,n)}Q,y*cQ.d,]R.n,ou!sT!Q!S!T!{!}$h%m+V+W+X+Y-e-g/Q/R/r0iT%i!r)f#uqO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e#tlO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eX(]${+m-{/^#}VO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0e#}kO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0e%x[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lQ%}#[Q)m&OV-}+r.R/_%x[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lV-}+r.R/_%x]OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lV.O+r.R/_S#Z[-}S$c!O&qS&p#t$dQ&v#vQ)P%aQ,{*cR.X,T$eZO`copx!Y![!_!a#Y#l#u#w#x#|#}$O$P$Q$R$S$V$W$[$i$j$k$l$m$n${%a%d%h%s&_&a'X'Y'c'g'x'}(O(n(z({)V)`)i)j)y*f*i*}+^+b+c+f+i+m,S,W,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ%{#YR,e)j%y_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0l!o#QY!e!x#R#T#`#n$Y%O%P%S%Z%r%y&P&X&]'R'v(Y(f(u(w)}*j*t+`+l+w,Q,o-Z.P/k/{0R0U0b#|kO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ$j!UQ$k!VQ$p!ZQ$y!`R+j(QQ#yiS'k$b*bQ*_&oQ+R'lS,U(})OQ,x*aQ-S*pQ.[,VQ.r,zQ.u-TQ/d.YQ/o.sR0P/cQ'Z$_W*U&j'[']'^Q+Q'kU,r*V*W*XQ-R*pQ-`+RS.o,s,tS.t-S-TQ/n.pR/p.u]!mP!o'W*k-W.xreOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!gP!o'W*k-W.xW#b`#e%_&YQ'w$lW(^${+m-{/^S*O&f*QS*q'_-US*v'b*xR.R+rh#VY!W!e#n#s%S'v)}*t+`,o-ZQ)d%tQ)p&TR,i)s#rnOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e^!kP!g!o'W*k-W.xv#TY!W#`#n#s%t&T&X&]'v(Y(w)s)}+`+l,o.Q/bQ#g`Q$_{Q$`|Q$a}W%P!e%S*t-ZS%V!h(pQ%]!iQ&j#pQ&k#qQ&l#rQ(o%WS(s%Z(uQ){&bS*p'_-UR-T*qU)b%s)`.gR+P'j[!mP!o'W*k-W.xT*w'b*x^!iP!g!o'W*k-W.xQ'^$_Q'f$aQ*X&jQ*^&lV*u'b*v*xQ%X!hR+|(pQ(m%VR+{(o#tnO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eQ%`!kS(f%P(sR(v%]T#e`%_U#c`#e%_R)t&YQ%c!lQ(h%RQ(l%UQ,O(tR.V,PrvOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xQ$|!bQ%^!jQ%f!pQ'U$WQ(U$yQ(e$}Q(j%TQ+t(cR.S+srtOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xS*P&f*QT*w'b*xQ']$_S*W&j'^R,t*XQ'[$_Q'a$`U*V&j']'^Q*Z&kS,s*W*XR.p,tQ*o'YR*z'cQ'e$aS*]&l'fR,w*^Q'd$aU*[&l'e'fS,v*]*^R.q,wrtOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xT*w'b*xQ'`$`S*Y&k'aR,u*ZQ*r'_R.v-UR-Y*sQ&g#mR*T&iT*P&f*QQ%b!lS(k%U%cR+y(lR({%aWk${+m-{/^#ulO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e#|iO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eU&o#t$d,TS*a&p.XQ,z*cR.s,{T'i$b'j!]#|m#a$o$w$z&t&w&x&{&|&}'O'Q'T)U)a*|+a+d,}-P-_-p-u._/T/Z/w/z!V#}m#a$o$w$z&t&w&x&|'Q'T)U)a*|+a+d,}-P-_-p-u._/T/Z/w/z#unO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0ea)W%h)V,Y.a/h0T0`0eQ)Y%hR.e,]Q'n$eQ)[%lR,`)]T+S'm+TsvOcx![#l$[$j$k$m$n%a(O(z({+^+f,SruOcx![#l$[$j$k$m$n%a(O(z({+^+f,SQ$t!]R$v!^R$m!XrvOcx![#l$[$j$k$m$n%a(O(z({+^+f,SR'x$lR$n!XR(P$pT+e(O+fX(`$|(a(e+uR+s(bQ.Q+rR/b.RQ(d$|Q+q(aQ+v(eR.T+uR$}!bQ(_${V-y+m-{/^QxOQ#lcW$]x#l(z,SQ(z%aR,S({rXOcx![#l$[$j$k$m$n%a(O(z({+^+f,Sn!fP!o#e&Y&f'W'_'b*Q*k*x+r-U-W.xl!zX!f#P#_#i$X%W%[%x&O'h'u(x0l!j#PY!e!x#T#`#n$Y%P%S%Z%r%y&P&X&]'R'v(Y(f(u(w)}*j*t+`+l+w,Q,o-Z.P/k/{0R0U0bQ#_`Q#ia#^$Xop!Y!_!a#u#w#x#|#}$O$P$Q$R$S$W$i%d%h%s&_&a'X'Y'c'g'x'}(n)V)`)i)y*f*i*}+b+c+i,W,Y-l-n-w.a.g/U/X/[/h0T0`0eS%W!h(pS%[!i*uS%x#Y)jQ&O#[S'h$b'jY'u$l${+m-{/^Q(x%_R0l$VQ!uUR%j!uQ)k%{R,f)k^#RY#`$Y'R'v(Y*jx%O!e!x#n%S%Z%y&P&X&](u(w)}*t+`+l,Q,o-Z.P/{[%q#R%O%r+w0R0bS%r#T%PQ+w(fQ0R/kR0b0UQ*g&xR-O*gQ!oPU%e!o*k.xQ*k'WR.x-W!pbOP`cx![!o#e#l$[$j$k$l$m$n${%_%a&Y&f'W'_'b(O(z({*Q*k*x+^+f+m+r,S-U-W-{.x/^Y!yX!f#_'u(xT#jb!yQ.h,aR/j.hQ%u#VR)e%uQ&`#fS)x&`.UR.U+zQ(q%XR+}(qQ&Z#cR)u&ZQ,X)QR.^,XQ*x'bR-[*xQ-V*rR.w-VQ*Q&fR,p*QQ'j$bR+O'jQ&c#gR)|&cQ.b,ZR/g.bQ,^)YR.f,^Q+T'mR-a+TQ-e+VR.}-eQ/s/OS0W/s0YR0Y/uQ+f(OR-r+fQ(a$|S+p(a+uR+u(eQ/`.PR/|/`Q+n(_R-|+n`wOcx#l%a(z({,SQ$q![Q'V$[Q's$jQ't$kQ'z$mQ'{$nS+e(O+fR-k+^'^sOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$V$W$X$Y$[$b$i$j$k$l$m$n${%P%S%W%Z%[%_%a%d%r%s%x%y&O&P&X&Y&]&_&a&f'R'W'X'Y'_'b'c'g'h'j'u'v'x'}(O(Y(f(n(p(u(w(x(z({)`)i)j)y)}*Q*f*i*j*k*t*u*x*}+^+`+b+c+f+i+l+m+r+w,Q,S,W,o-U-W-Z-l-n-w-{.P.g.x/U/X/[/^/k/{0R0U0b0la)X%h)V,Y.a/h0T0`0eQ!rTQ$e!QQ$f!SQ$g!TQ%l!{Q%n!}Q'r$hQ)]%mQ)f0iS-c+V+XQ-g+WQ-h+YQ.|-eS/O-g/QQ/u/RR0V/r%oSOT`cdopx!Q!S!T!Y![!_!a!{!}#`#l#o#t#u#v#w#x#|#}$O$P$Q$R$S$W$[$d$h$i$j$k$l$m$n${%a%g%h%m%s&P&a&p&v'g'p'x'}(O(w(z({)V)`)y)}*c*f*i*}+V+W+X+Y+[+^+b+c+f+i+m,Q,S,T,Y,],o,{-e-g-l-n-w-{.X.a.g/Q/R/U/X/[/^/h/r0T0`0e0iQ)Z%hQ,Z)VS.`,Y/hQ/f.aQ0a0TQ0c0`R0g0ermOcx![#l$[$j$k$m$n%a(O(z({+^+f,SS#a`$iQ$ToQ$ZpQ$o!YQ$w!_Q$z!aQ&t#uQ&w#wY&x#x$l+b-n/XQ&z#|Q&{#}Q&|$OQ&}$PQ'O$QQ'P$RQ'Q$SQ'T$W^)U%h)V.a/h0T0`0eU)a%s)`.gQ)z&aQ*|'gQ+a'xQ+d'}Q,j)yQ,}*fQ-P*iQ-_*}Q-p+cQ-u+iQ._,YQ/T-lQ/Z-wQ/w/UR/z/[#rgO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eW(Z${+m-{/^R(|%arYOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!eP!o'W*k-W.xW!xX$X%x'uQ#``Q#ne!|$Yop!Y!_!a#u#w#x#|#}$O$P$Q$R$S$W$i%h%s&a'g'x'})V)`)y*f*i*}+b+c+i,Y-l-n-w.a.g/U/X/[/h0T0`0eQ%S!gS%Z!i*ud%y#Y%d&_'X'Y'c(n)i)j,WQ&P#_Q&X#bS&]#e&YQ'R$VQ'v$lW(Y${+m-{/^Q(u%[Q(w%_S)}&f*QQ*j0lS*t'b*xQ+`'wQ+l(^Q,Q(xQ,o*OQ-Z*vS.P+r.RR/{/_%x_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0lQ$b!OQ'l$cR*b&q&TWOPX`ceopx!O!Y![!_!a!g!i!o#Y#[#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&O&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0lR%|#Y#zjOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ#f`Q%{#YQ'S$VU)Q%d'Y'cQ)w&_Q*m'XQ+z(nQ,d)iQ,e)jR.],WQ)h%zR,c)g#|fO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eT&m#t,TQ&y#xQ'y$lQ-o+bQ/V-nR/y/X]!nP!o'W*k-W.x#PaOPX`bcx![!f!o!y#_#e#l$[$j$k$l$m$n${%_%a&Y&f'W'_'b'u(O(x(z({*Q*k*x+^+f+m+r,S-U-W-{.x/^U#WY!W'vQ%Q!eU&h#n#s+`Q(i%SS,m)}*tT.m,o-Zj#UY!W!e#n#s%S%t&T)s)}*t,o-ZU&S#`&](wQ)r&XQ+_'vQ+k(YQ-m+`Q-x+lQ/a.QR0O/bQ)c%sQ,a)`R/i.gR,b)``!jP!o'W'b*k*x-W.xT%T!g*vR%Y!hW%R!e%S*t-ZQ(t%ZR,P(uS#d`%_R&^#eQ)R%dT*n'Y'cR*s'_[!lP!o'W*k-W.xR%U!gR#h`R,[)VR)Z%hT-d+V-eQ/P-gR/t/QR/t/R",
	  nodeNames: "⚠ LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource ClassContent",
	  maxTerm: 275,
	  nodeProps: [
		["group", -26,4,47,76,77,82,87,92,144,146,149,150,152,155,157,160,162,164,166,171,173,175,177,179,180,182,190,"Statement",-25,6,13,14,15,16,17,18,19,20,21,22,39,40,41,99,100,102,103,106,117,119,121,124,126,129,"Expression",-7,23,24,25,26,27,29,34,"Type"],
		["openedBy", 10,"(",44,"{"],
		["closedBy", 11,")",45,"}"]
	  ],
	  propSources: [javaHighlighting],
	  skippedNodes: [0,1,2],
	  repeatNodeCount: 28,
	  tokenData: "#$f_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5qvw7Rwx8ixyAQyzAnz{B[{|CQ|}Dh}!OEU!O!PFo!P!Q! i!Q!R!,_!R![!0V![!]!>g!]!^!?w!^!_!@e!_!`!BO!`!a!Br!a!b!D`!b!c!EO!c!}!Kz!}#O!MW#O#P%Q#P#Q!Mt#Q#R!Nb#R#S4e#S#T%Q#T#o4e#o#p# U#p#q# r#q#r##[#r#s##x#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%QS%VV&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&XSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&XS%xZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&XS%xZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%xZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#sP&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&XSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&XSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&XSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&VSXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&WP_4la&OZ&XSOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o;'S%Q;'S;=`&s<%lO%QU5xX#gQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU6lV#]Q&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7YZ&mR&XSOY%QYZ%lZr%Qrs%qsv%Qvw7{w!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU8SV#aQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8nZ&XSOY9aYZ%lZr9ars:osw9awx%Qx#O9a#O#P;y#P;'S9a;'S;=`@z<%lO9aT9fX&XSOY%QYZ%lZr%Qrs%qsw%Qwx:Rx;'S%Q;'S;=`&s<%lO%QT:YVbP&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT:rXOY&ZYZ%lZr&Zrs&ysw&Zwx;_x;'S&Z;'S;=`'`<%lO&ZT;dVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<OZ&XSOY<qYZ%lZr<qrs=isw<qwx9ax#O<q#O#P9a#P;'S<q;'S;=`?T<%lO<qT<vZ&XSOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT=lZOY>_YZ%lZr>_rs?Zsw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_T>bZOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT?WP;=`<%l<qT?^ZOY>_YZ%lZr>_rs@Psw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_P@SVOY@PZw@Pwx@ix#O@P#P;'S@P;'S;=`@n<%lO@PP@nObPP@qP;=`<%l@PT@wP;=`<%l>_T@}P;=`<%l9a_AXVZZ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVAuVYR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVBeX$YP&XS#fQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVCXZ#eR&XSOY%QYZ%lZr%Qrs%qs{%Q{|Cz|!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVDRV#qR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDoVqR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVE][#eR&XSOY%QYZ%lZr%Qrs%qs}%Q}!OCz!O!_%Q!_!`6e!`!aFR!a;'S%Q;'S;=`&s<%lO%QVFYV&wR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_FvZWY&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGi!P!Q%Q!Q![Hw![;'S%Q;'S;=`&s<%lO%QVGnX&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHZ!P;'S%Q;'S;=`&s<%lO%QVHbV&pR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTIOc&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#R%Q#R#SNq#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTJbV&XS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTJ|]&XSOY%QYZ%lZr%Qrs%qs{%Q{|Ku|}%Q}!OKu!O!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTKzX&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTLnc&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![!f%Q!f!gJZ!g!h%Q!h!iJZ!i#R%Q#R#SMy#S#W%Q#W#XJZ#X#Y%Q#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTNOZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![#R%Q#R#SMy#S;'S%Q;'S;=`&s<%lO%QTNvZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![#R%Q#R#SNq#S;'S%Q;'S;=`&s<%lO%Q_! p]&XS#fQOY%QYZ%lZr%Qrs%qsz%Qz{!!i{!P%Q!P!Q!)[!Q!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%Q_!!nX&XSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!#`T&XSOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!#rTOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!$UVOz!#oz{!$R{!P!#o!P!Q!$k!Q;'S!#o;'S;=`!$p<%lO!#oZ!$pOQZZ!$sP;=`<%l!#o_!$yXOY!%fYZ!#ZZr!%frs!'psz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!%iXOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!&ZZ&XSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!'TV&XSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'mP;=`<%l!!i_!'sXOY!%fYZ!#ZZr!%frs!#osz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!(cZOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!)XP;=`<%l!%f_!)cV&XSPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!)}VPZOY!*dYZ%lZr!*drs!+Us;'S!*d;'S;=`!,X<%lO!*d_!*iVPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!+RP;=`<%l!)[_!+ZVPZOY!*dYZ%lZr!*drs!+ps;'S!*d;'S;=`!,X<%lO!*dZ!+uSPZOY!+pZ;'S!+p;'S;=`!,R<%lO!+pZ!,UP;=`<%l!+p_!,[P;=`<%l!*dT!,fu&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!d%Q!d!e!3a!e!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o!q%Q!q!r!5_!r!z%Q!z!{!7V!{#R%Q#R#S!2i#S#U%Q#U#V!3a#V#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a#c%Q#c#d!5_#d#l%Q#l#m!7V#m;'S%Q;'S;=`&s<%lO%QT!/Qa&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QT!0^i&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o#R%Q#R#S!2i#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!2SV&XS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2nZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0V![#R%Q#R#S!2i#S;'S%Q;'S;=`&s<%lO%QT!3fY&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S;'S%Q;'S;=`&s<%lO%QT!4]`&XS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S!n%Q!n!o!1{!o#R%Q#R#S!3a#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!5dX&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y;'S%Q;'S;=`&s<%lO%QT!6W_&XS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y!n%Q!n!o!1{!o#R%Q#R#S!5_#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!7[_&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8Z!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QT!8`]&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i#T%Q#T#Z!9X#Z;'S%Q;'S;=`&s<%lO%QT!9^c&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#R%Q#R#S!8Z#S#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!:pi&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<_!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i!n%Q!n!o!1{!o!r%Q!r!sJw!s#R%Q#R#S!=i#S#T%Q#T#Z!:i#Z#`%Q#`#a!1{#a#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!<da&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!=n]&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QV!>nX#oR&XSOY%QYZ%lZr%Qrs%qs![%Q![!]!?Z!];'S%Q;'S;=`&s<%lO%QV!?bV&uR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!@OV!PR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@lY&^Z&XSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!A[!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!AcX#hQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV!BVX!bR&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!ByY&]R&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Ci!a;'S%Q;'S;=`&s<%lO%QU!CpY#hQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`!a!A[!a;'S%Q;'S;=`&s<%lO%Q_!DiV&aX#nQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!EVX%|Z&XSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!Er#^;'S%Q;'S;=`&s<%lO%QV!EwX&XSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!Fd#c;'S%Q;'S;=`&s<%lO%QV!FiX&XSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!GU#i;'S%Q;'S;=`&s<%lO%QV!GZX&XSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Gv#Y;'S%Q;'S;=`&s<%lO%QV!G{X&XSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hh#g;'S%Q;'S;=`&s<%lO%QV!HmX&XSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!IY#Z;'S%Q;'S;=`&s<%lO%QV!I_X&XSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!Iz#U;'S%Q;'S;=`&s<%lO%QV!JPX&XSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Jl#W;'S%Q;'S;=`&s<%lO%QV!JqX&XSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!K^#Y;'S%Q;'S;=`&s<%lO%QV!KeV&sR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!LRa&QZ&XSOY%QYZ%lZr%Qrs%qst%Qtu!Kzu!Q%Q!Q![!Kz![!c%Q!c!}!Kz!}#R%Q#R#S!Kz#S#T%Q#T#o!Kz#o;'S%Q;'S;=`&s<%lO%Q_!M_VuZ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!M{VsR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!NiX#cQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV# ]V}R&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_# {Z&}X#cQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`#p%Q#p#q#!n#q;'S%Q;'S;=`&s<%lO%QU#!uV#dQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##cV|R&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT#$PV#tP&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q",
	  tokenizers: [0, 1, 2, 3],
	  topRules: {"Program":[0,3],"ClassContent":[1,193]},
	  dynamicPrecedences: {"27":1,"231":-1,"242":-1},
	  specialized: [{term: 230, get: (value) => spec_identifier[value] || -1}],
	  tokenPrec: 6995
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/javascript/dist/index.cjs":
	/*!***************************************************************!*\
	  !*** ../editor/node_modules/@lezer/javascript/dist/index.cjs ***!
	  \***************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const noSemi = 309,
	  incdec = 1,
	  incdecPrefix = 2,
	  JSXStartTag = 3,
	  insertSemi = 310,
	  spaces = 312,
	  newline = 313,
	  LineComment = 4,
	  BlockComment = 5,
	  Dialect_jsx = 0;
	
	/* Hand-written tokenizers for JavaScript tokens that can't be
	   expressed by lezer's built-in tokenizer. */
	
	const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
				   8201, 8202, 8232, 8233, 8239, 8287, 12288];
	
	const braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, lt = 60, comma = 44;
	
	const trackNewline = new lr.ContextTracker({
	  start: false,
	  shift(context, term) {
		return term == LineComment || term == BlockComment || term == spaces ? context : term == newline
	  },
	  strict: false
	});
	
	const insertSemicolon = new lr.ExternalTokenizer((input, stack) => {
	  let {next} = input;
	  if (next == braceR || next == -1 || stack.context)
		input.acceptToken(insertSemi);
	}, {contextual: true, fallback: true});
	
	const noSemicolon = new lr.ExternalTokenizer((input, stack) => {
	  let {next} = input, after;
	  if (space.indexOf(next) > -1) return
	  if (next == slash && ((after = input.peek(1)) == slash || after == star)) return
	  if (next != braceR && next != semicolon && next != -1 && !stack.context)
		input.acceptToken(noSemi);
	}, {contextual: true});
	
	const incdecToken = new lr.ExternalTokenizer((input, stack) => {
	  let {next} = input;
	  if (next == plus || next == minus) {
		input.advance();
		if (next == input.next) {
		  input.advance();
		  let mayPostfix = !stack.context && stack.canShift(incdec);
		  input.acceptToken(mayPostfix ? incdec : incdecPrefix);
		}
	  }
	}, {contextual: true});
	
	function identifierChar(ch, start) {
	  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||
		!start && ch >= 48 && ch <= 57
	}
	
	const jsx = new lr.ExternalTokenizer((input, stack) => {
	  if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return
	  input.advance();
	  if (input.next == slash) return
	  // Scan for an identifier followed by a comma or 'extends', don't
	  // treat this as a start tag if present.
	  let back = 0;
	  while (space.indexOf(input.next) > -1) { input.advance(); back++; }
	  if (identifierChar(input.next, true)) {
		input.advance();
		back++;
		while (identifierChar(input.next, false)) { input.advance(); back++; }
		while (space.indexOf(input.next) > -1) { input.advance(); back++; }
		if (input.next == comma) return
		for (let i = 0;; i++) {
		  if (i == 7) {
			if (!identifierChar(input.next, true)) return
			break
		  }
		  if (input.next != "extends".charCodeAt(i)) break
		  input.advance();
		  back++;
		}
	  }
	  input.acceptToken(JSXStartTag, -back);
	});
	
	const jsHighlight = highlight.styleTags({
	  "get set async static": highlight.tags.modifier,
	  "for while do if else switch try catch finally return throw break continue default case": highlight.tags.controlKeyword,
	  "in of await yield void typeof delete instanceof": highlight.tags.operatorKeyword,
	  "let var const using function class extends": highlight.tags.definitionKeyword,
	  "import export from": highlight.tags.moduleKeyword,
	  "with debugger as new": highlight.tags.keyword,
	  TemplateString: highlight.tags.special(highlight.tags.string),
	  super: highlight.tags.atom,
	  BooleanLiteral: highlight.tags.bool,
	  this: highlight.tags.self,
	  null: highlight.tags.null,
	  Star: highlight.tags.modifier,
	  VariableName: highlight.tags.variableName,
	  "CallExpression/VariableName TaggedTemplateExpression/VariableName": highlight.tags.function(highlight.tags.variableName),
	  VariableDefinition: highlight.tags.definition(highlight.tags.variableName),
	  Label: highlight.tags.labelName,
	  PropertyName: highlight.tags.propertyName,
	  PrivatePropertyName: highlight.tags.special(highlight.tags.propertyName),
	  "CallExpression/MemberExpression/PropertyName": highlight.tags.function(highlight.tags.propertyName),
	  "FunctionDeclaration/VariableDefinition": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  "ClassDeclaration/VariableDefinition": highlight.tags.definition(highlight.tags.className),
	  PropertyDefinition: highlight.tags.definition(highlight.tags.propertyName),
	  PrivatePropertyDefinition: highlight.tags.definition(highlight.tags.special(highlight.tags.propertyName)),
	  UpdateOp: highlight.tags.updateOperator,
	  "LineComment Hashbang": highlight.tags.lineComment,
	  BlockComment: highlight.tags.blockComment,
	  Number: highlight.tags.number,
	  String: highlight.tags.string,
	  Escape: highlight.tags.escape,
	  ArithOp: highlight.tags.arithmeticOperator,
	  LogicOp: highlight.tags.logicOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  RegExp: highlight.tags.regexp,
	  Equals: highlight.tags.definitionOperator,
	  Arrow: highlight.tags.function(highlight.tags.punctuation),
	  ": Spread": highlight.tags.punctuation,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace,
	  "InterpolationStart InterpolationEnd": highlight.tags.special(highlight.tags.brace),
	  ".": highlight.tags.derefOperator,
	  ", ;": highlight.tags.separator,
	  "@": highlight.tags.meta,
	
	  TypeName: highlight.tags.typeName,
	  TypeDefinition: highlight.tags.definition(highlight.tags.typeName),
	  "type enum interface implements namespace module declare": highlight.tags.definitionKeyword,
	  "abstract global Privacy readonly override": highlight.tags.modifier,
	  "is keyof unique infer": highlight.tags.operatorKeyword,
	
	  JSXAttributeValue: highlight.tags.attributeValue,
	  JSXText: highlight.tags.content,
	  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": highlight.tags.angleBracket,
	  "JSXIdentifier JSXNameSpacedName": highlight.tags.tagName,
	  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": highlight.tags.attributeName,
	  "JSXBuiltin/JSXIdentifier": highlight.tags.standard(highlight.tags.tagName)
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,export:18, as:23, from:31, default:34, async:39, function:40, extends:52, this:56, true:64, false:64, null:76, void:80, typeof:84, super:102, new:136, delete:152, yield:161, await:165, class:170, public:227, private:227, protected:227, readonly:229, instanceof:248, satisfies:251, in:252, const:254, import:286, keyof:339, unique:343, infer:349, is:385, abstract:405, implements:407, type:409, let:412, var:414, using:417, interface:423, enum:427, namespace:433, module:435, declare:439, global:443, for:462, of:471, while:474, with:478, do:482, if:486, else:488, switch:492, case:498, try:504, catch:508, finally:512, return:516, throw:520, break:524, continue:528, debugger:532};
	const spec_word = {__proto__:null,async:123, get:125, set:127, declare:187, public:189, private:189, protected:189, static:191, abstract:193, override:195, readonly:201, accessor:203, new:389};
	const spec_LessThan = {__proto__:null,"<":143};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "$<UO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ08SO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO?MpO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DyO0fQ^O'#EROOQ07b'#EZ'#EZO1PQWO'#EWOOQO'#El'#ElOOQO'#Ie'#IeO1XQWO'#GmO1dQWO'#EkO1iQWO'#EkO3kQ08SO'#JiO6[Q08SO'#JjO6xQWO'#FZO6}Q&jO'#FqOOQ07b'#Fc'#FcO7YO,YO'#FcO7hQ7[O'#FxO9UQWO'#FwOOQ07b'#Jj'#JjOOQ07`'#Ji'#JiO9ZQWO'#GqOOQU'#KU'#KUO9fQWO'#IRO9kQ07hO'#ISOOQU'#JW'#JWOOQU'#IW'#IWQ`Q^OOO`Q^OOO%[Q^O'#DqO9sQ^O'#D}O9zQ^O'#EPO9aQWO'#GmO:RQ7[O'#CnO:aQWO'#EjO:lQWO'#EuO:qQ7[O'#FbO;`QWO'#GmOOQO'#KV'#KVO;eQWO'#KVO;sQWO'#GuO;sQWO'#GvO;sQWO'#GxO9aQWO'#G{O<jQWO'#HOO>RQWO'#CdO>cQWO'#H[O>kQWO'#HbO>kQWO'#HdO`Q^O'#HfO>kQWO'#HhO>kQWO'#HkO>pQWO'#HqO>uQ07iO'#HwO%[Q^O'#HyO?QQ07iO'#H{O?]Q07iO'#H}O9kQ07hO'#IPO?hQ08SO'#ChO@jQ`O'#DiQOQWOOO%[Q^O'#EPOAQQWO'#ESO:RQ7[O'#EjOA]QWO'#EjOAhQpO'#FbOOQU'#Cf'#CfOOQ07`'#Dn'#DnOOQ07`'#Jm'#JmO%[Q^O'#JmOOQO'#Jq'#JqOOQO'#Ib'#IbOBhQ`O'#EcOOQ07`'#Eb'#EbOCdQ07pO'#EcOCnQ`O'#EVOOQO'#Jp'#JpODSQ`O'#JqOEaQ`O'#EVOCnQ`O'#EcPEnO!0LbO'#CaPOOO)CDu)CDuOOOO'#IX'#IXOEyO!bO,59TOOQ07b,59T,59TOOOO'#IY'#IYOFXO#tO,59TO%[Q^O'#D`OOOO'#I['#I[OFgO?MpO,59xOOQ07b,59x,59xOFuQ^O'#I]OGYQWO'#JkOI[QrO'#JkO+}Q^O'#JkOIcQWO,5:OOIyQWO'#ElOJWQWO'#JyOJcQWO'#JxOJcQWO'#JxOJkQWO,5;YOJpQWO'#JwOOQ07f,5:Z,5:ZOJwQ^O,5:ZOLxQ08SO,5:eOMiQWO,5:mONSQ07hO'#JvONZQWO'#JuO9ZQWO'#JuONoQWO'#JuONwQWO,5;XON|QWO'#JuO!#UQrO'#JjOOQ07b'#Ch'#ChO%[Q^O'#ERO!#tQpO,5:rOOQO'#Jr'#JrOOQO-E<c-E<cO9aQWO,5=XO!$[QWO,5=XO!$aQ^O,5;VO!&dQ7[O'#EgO!'}QWO,5;VO!)mQ7[O'#DsO!)tQ^O'#DxO!*OQ`O,5;`O!*WQ`O,5;`O%[Q^O,5;`OOQU'#FR'#FROOQU'#FT'#FTO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aOOQU'#FX'#FXO!*fQ^O,5;rOOQ07b,5;w,5;wOOQ07b,5;x,5;xO!,iQWO,5;xOOQ07b,5;y,5;yO%[Q^O'#IiO!,qQ07hO,5<eO!&dQ7[O,5;aO!-`Q7[O,5;aO%[Q^O,5;uO!-gQ&jO'#FgO!.dQ&jO'#J}O!.OQ&jO'#J}O!.kQ&jO'#J}OOQO'#J}'#J}O!/PQ&jO,5<POOOS,5<],5<]O!/bQ^O'#FsOOOS'#Ih'#IhO7YO,YO,5;}O!/iQ&jO'#FuOOQ07b,5;},5;}O!0YQMhO'#CuOOQ07b'#Cy'#CyO!0mQWO'#CyO!0rO?MpO'#C}O!1`Q7[O,5<bO!1gQWO,5<dO!3SQ!LQO'#GSO!3aQWO'#GTO!3fQWO'#GTO!3kQ!LQO'#GXO!4jQ`O'#G]OOQO'#Gh'#GhO!(SQ7[O'#GgOOQO'#Gj'#GjO!(SQ7[O'#GiO!5]QMhO'#JdOOQ07b'#Jd'#JdO!5gQWO'#JcO!5uQWO'#JbO!5}QWO'#CtOOQ07b'#Cw'#CwOOQ07b'#DR'#DROOQ07b'#DT'#DTO1SQWO'#DVO!(SQ7[O'#FzO!(SQ7[O'#F|O!6VQWO'#GOO!6[QWO'#GPO!3fQWO'#GVO!(SQ7[O'#G[O!6aQWO'#EmO!7OQWO,5<cOOQ07`'#Cq'#CqO!7WQWO'#EnO!8QQ`O'#EoOOQ07`'#Jw'#JwO!8XQ07hO'#KWO9kQ07hO,5=]O`Q^O,5>mOOQU'#J`'#J`OOQU,5>n,5>nOOQU-E<U-E<UO!:ZQ08SO,5:]O!<wQ08SO,5:iO%[Q^O,5:iO!?bQ08SO,5:kOOQO,5@q,5@qO!@RQ7[O,5=XO!@aQ07hO'#JaO9UQWO'#JaO!@rQ07hO,59YO!@}Q`O,59YO!AVQ7[O,59YO:RQ7[O,59YO!AbQWO,5;VO!AjQWO'#HZO!BOQWO'#KZO%[Q^O,5;zO!7{Q`O,5;|O!BWQWO,5=tO!B]QWO,5=tO!BbQWO,5=tO9kQ07hO,5=tO;sQWO,5=dOOQO'#Cu'#CuO!BpQ`O,5=aO!BxQ7[O,5=bO!CTQWO,5=dO!CYQpO,5=gO!CbQWO'#KVO>pQWO'#HQO9aQWO'#HSO!CgQWO'#HSO:RQ7[O'#HUO!ClQWO'#HUOOQU,5=j,5=jO!CqQWO'#HVO!DSQWO'#CnO!DXQWO,59OO!DcQWO,59OO!FhQ^O,59OOOQU,59O,59OO!FxQ07hO,59OO%[Q^O,59OO!ITQ^O'#H^OOQU'#H_'#H_OOQU'#H`'#H`O`Q^O,5=vO!IkQWO,5=vO`Q^O,5=|O`Q^O,5>OO!IpQWO,5>QO`Q^O,5>SO!IuQWO,5>VO!IzQ^O,5>]OOQU,5>c,5>cO%[Q^O,5>cO9kQ07hO,5>eOOQU,5>g,5>gO!NUQWO,5>gOOQU,5>i,5>iO!NUQWO,5>iOOQU,5>k,5>kO!NZQ`O'#D[O%[Q^O'#JmO!NxQ`O'#JmO# gQ`O'#DjO# xQ`O'#DjO#$ZQ^O'#DjO#$bQWO'#JlO#$jQWO,5:TO#$oQWO'#EpO#$}QWO'#JzO#%VQWO,5;ZO#%[Q`O'#DjO#%iQ`O'#EUOOQ07b,5:n,5:nO%[Q^O,5:nO#%pQWO,5:nO>pQWO,5;UO!@}Q`O,5;UO!AVQ7[O,5;UO:RQ7[O,5;UO#%xQWO,5@XO#%}Q$ISO,5:rOOQO-E<`-E<`O#'TQ07pO,5:}OCnQ`O,5:qO#'_Q`O,5:qOCnQ`O,5:}O!@rQ07hO,5:qOOQ07`'#Ef'#EfOOQO,5:},5:}O%[Q^O,5:}O#'lQ07hO,5:}O#'wQ07hO,5:}O!@}Q`O,5:qOOQO,5;T,5;TO#(VQ07hO,5:}POOO'#IV'#IVP#(kO!0LbO,58{POOO,58{,58{OOOO-E<V-E<VOOQ07b1G.o1G.oOOOO-E<W-E<WO#(vQpO,59zOOOO-E<Y-E<YOOQ07b1G/d1G/dO#({QrO,5>wO+}Q^O,5>wOOQO,5>},5>}O#)VQ^O'#I]OOQO-E<Z-E<ZO#)dQWO,5@VO#)lQrO,5@VO#)sQWO,5@dOOQ07b1G/j1G/jO%[Q^O,5@eO#){QWO'#IcOOQO-E<a-E<aO#)sQWO,5@dOOQ07`1G0t1G0tOOQ07f1G/u1G/uOOQ07f1G0X1G0XO%[Q^O,5@bO#*aQ07hO,5@bO#*rQ07hO,5@bO#*yQWO,5@aO9ZQWO,5@aO#+RQWO,5@aO#+aQWO'#IfO#*yQWO,5@aOOQ07`1G0s1G0sO!*OQ`O,5:tO!*ZQ`O,5:tOOQO,5:v,5:vO#,RQWO,5:vO#,ZQ7[O1G2sO9aQWO1G2sOOQ07b1G0q1G0qO#,iQ08SO1G0qO#-nQ08QO,5;ROOQ07b'#GR'#GRO#.[Q08SO'#JdO!$aQ^O1G0qO#0dQ7[O'#JnO#0nQWO,5:_O#0sQrO'#JoO%[Q^O'#JoO#0}QWO,5:dOOQ07b'#D['#D[OOQ07b1G0z1G0zO%[Q^O1G0zOOQ07b1G1d1G1dO#1SQWO1G0zO#3kQ08SO1G0{O#3rQ08SO1G0{O#6]Q08SO1G0{O#6dQ08SO1G0{O#8nQ08SO1G0{O#9UQ08SO1G0{O#<OQ08SO1G0{O#<VQ08SO1G0{O#>pQ08SO1G0{O#>wQ08SO1G0{O#@oQ08SO1G0{O#CoQ(CYO'#ChO#EmQ(CYO1G1^O#EtQ(CYO'#JjO!,lQWO1G1dO#FUQ08SO,5?TOOQ07`-E<g-E<gO#FxQ08SO1G0{OOQ07b1G0{1G0{O#ITQ08SO1G1aO#IwQ&jO,5<TO#JPQ&jO,5<UO#JXQ&jO'#FlO#JpQWO'#FkOOQO'#KO'#KOOOQO'#Ig'#IgO#JuQ&jO1G1kOOQ07b1G1k1G1kOOOS1G1v1G1vO#KWQ(CYO'#JiO#KbQWO,5<_O!*fQ^O,5<_OOOS-E<f-E<fOOQ07b1G1i1G1iO#KgQ`O'#J}OOQ07b,5<a,5<aO#KoQ`O,5<aOOQ07b,59e,59eO!&dQ7[O'#DPOOOO'#IZ'#IZO#KtO?MpO,59iOOQ07b,59i,59iO%[Q^O1G1|O!6[QWO'#IkO#LPQ7[O,5<uOOQ07b,5<r,5<rO!(SQ7[O'#InO#LoQ7[O,5=RO!(SQ7[O'#IpO#MbQ7[O,5=TO!&dQ7[O,5=VOOQO1G2O1G2OO#MlQpO'#CqO#NPQpO,5<nO#NWQWO'#KRO9aQWO'#KRO#NfQWO,5<pO!(SQ7[O,5<oO#NkQWO'#GUO#NvQWO,5<oO#N{QpO'#GRO$ YQpO'#KSO$ dQWO'#KSO!&dQ7[O'#KSO$ iQWO,5<sO$ nQ`O'#G^O!4eQ`O'#G^O$!PQWO'#G`O$!UQWO'#GbO!3fQWO'#GeO$!ZQ07hO'#ImO$!fQ`O,5<wOOQ07f,5<w,5<wO$!mQ`O'#G^O$!{Q`O'#G_O$#TQ`O'#G_O$#YQ7[O,5=RO$#jQ7[O,5=TOOQ07b,5=W,5=WO!(SQ7[O,5?}O!(SQ7[O,5?}O$#zQWO'#IrO$$VQWO,5?|O$$_QWO,59`O$%OQ7[O,59qOOQ07b,59q,59qO$%qQ7[O,5<fO$&dQ7[O,5<hO@bQWO,5<jOOQ07b,5<k,5<kO$&nQWO,5<qO$&sQ7[O,5<vO$'TQWO'#JuO!$aQ^O1G1}O$'YQWO1G1}O9ZQWO'#JxO9ZQWO'#EpO%[Q^O'#EpO9ZQWO'#ItO$'_Q07hO,5@rOOQU1G2w1G2wOOQU1G4X1G4XOOQ07b1G/w1G/wO!,iQWO1G/wO$)dQ08SO1G0TOOQU1G2s1G2sO!&dQ7[O1G2sO%[Q^O1G2sO#,^QWO1G2sO$+hQ7[O'#EgOOQ07`,5?{,5?{O$+rQ07hO,5?{OOQU1G.t1G.tO!@rQ07hO1G.tO!@}Q`O1G.tO!AVQ7[O1G.tO$,TQWO1G0qO$,YQWO'#ChO$,eQWO'#K[O$,mQWO,5=uO$,rQWO'#K[O$,wQWO'#K[O$-VQWO'#IzO$-eQWO,5@uO$-mQrO1G1fOOQ07b1G1h1G1hO9aQWO1G3`O@bQWO1G3`O$-tQWO1G3`O$-yQWO1G3`OOQU1G3`1G3`O!CTQWO1G3OO!&dQ7[O1G2{O$.OQWO1G2{OOQU1G2|1G2|O!&dQ7[O1G2|O$.TQWO1G2|O$.]Q`O'#GzOOQU1G3O1G3OO!4eQ`O'#IvO!CYQpO1G3ROOQU1G3R1G3ROOQU,5=l,5=lO$.eQ7[O,5=nO9aQWO,5=nO$!UQWO,5=pO9UQWO,5=pO!@}Q`O,5=pO!AVQ7[O,5=pO:RQ7[O,5=pO$.sQWO'#KYO$/OQWO,5=qOOQU1G.j1G.jO$/TQ07hO1G.jO@bQWO1G.jO$/`QWO1G.jO9kQ07hO1G.jO$1eQrO,5@wO$1uQWO,5@wO9ZQWO,5@wO$2QQ^O,5=xO$2XQWO,5=xOOQU1G3b1G3bO`Q^O1G3bOOQU1G3h1G3hOOQU1G3j1G3jO>kQWO1G3lO$2^Q^O1G3nO$6bQ^O'#HmOOQU1G3q1G3qO$6oQWO'#HsO>pQWO'#HuOOQU1G3w1G3wO$6wQ^O1G3wO9kQ07hO1G3}OOQU1G4P1G4POOQ07`'#GY'#GYO9kQ07hO1G4RO9kQ07hO1G4TO$;OQWO,5@XO!*fQ^O,5;[O9ZQWO,5;[O>pQWO,5:UO!*fQ^O,5:UO!@}Q`O,5:UO$;TQ(CYO,5:UOOQO,5;[,5;[O$;_Q`O'#I^O$;uQWO,5@WOOQ07b1G/o1G/oO$;}Q`O'#IdO$<XQWO,5@fOOQ07`1G0u1G0uO# xQ`O,5:UOOQO'#Ia'#IaO$<aQ`O,5:pOOQ07f,5:p,5:pO#%sQWO1G0YOOQ07b1G0Y1G0YO%[Q^O1G0YOOQ07b1G0p1G0pO>pQWO1G0pO!@}Q`O1G0pO!AVQ7[O1G0pOOQ07`1G5s1G5sO!@rQ07hO1G0]OOQO1G0i1G0iO%[Q^O1G0iO$<hQ07hO1G0iO$<sQ07hO1G0iO!@}Q`O1G0]OCnQ`O1G0]O$=RQ07hO1G0iOOQO1G0]1G0]O$=gQ08SO1G0iPOOO-E<T-E<TPOOO1G.g1G.gOOOO1G/f1G/fO$=qQpO,5<eO$=yQrO1G4cOOQO1G4i1G4iO%[Q^O,5>wO$>TQWO1G5qO$>]QWO1G6OO$>eQrO1G6PO9ZQWO,5>}O$>oQ08SO1G5|O%[Q^O1G5|O$?PQ07hO1G5|O$?bQWO1G5{O$?bQWO1G5{O9ZQWO1G5{O$?jQWO,5?QO9ZQWO,5?QOOQO,5?Q,5?QO$@OQWO,5?QO$'TQWO,5?QOOQO-E<d-E<dOOQO1G0`1G0`OOQO1G0b1G0bO!,lQWO1G0bOOQU7+(_7+(_O!&dQ7[O7+(_O%[Q^O7+(_O$@^QWO7+(_O$@iQ7[O7+(_O$@wQ08SO,5=RO$CSQ08SO,5=TO$E_Q08SO,5=RO$GpQ08SO,5=TO$JRQ08SO,59qO$LZQ08SO,5<fO$NfQ08SO,5<hO%!qQ08SO,5<vOOQ07b7+&]7+&]O%%SQ08SO7+&]O%%vQ7[O'#I_O%&QQWO,5@YOOQ07b1G/y1G/yO%&YQ^O'#I`O%&gQWO,5@ZO%&oQrO,5@ZOOQ07b1G0O1G0OO%&yQWO7+&fOOQ07b7+&f7+&fO%'OQ(CYO,5:eO%[Q^O7+&xO%'YQ(CYO,5:]O%'gQ(CYO,5:iO%'qQ(CYO,5:kOOQ07b7+'O7+'OOOQO1G1o1G1oOOQO1G1p1G1pO%'{QtO,5<WO!*fQ^O,5<VOOQO-E<e-E<eOOQ07b7+'V7+'VOOOS7+'b7+'bOOOS1G1y1G1yO%(WQWO1G1yOOQ07b1G1{1G1{O%(]QpO,59kOOOO-E<X-E<XOOQ07b1G/T1G/TO%(dQ08SO7+'hOOQ07b,5?V,5?VO%)WQpO,5?VOOQ07b1G2a1G2aP!&dQ7[O'#IkPOQ07b-E<i-E<iO%)vQ7[O,5?YOOQ07b-E<l-E<lO%*iQ7[O,5?[OOQ07b-E<n-E<nO%*sQpO1G2qOOQ07b1G2Y1G2YO%*zQWO'#IjO%+YQWO,5@mO%+YQWO,5@mO%+bQWO,5@mO%+mQWO,5@mOOQO1G2[1G2[O%+{Q7[O1G2ZO!(SQ7[O1G2ZO%,]Q!LQO'#IlO%,mQWO,5@nO!&dQ7[O,5@nO%,uQpO,5@nOOQ07b1G2_1G2_OOQ07`,5<x,5<xOOQ07`,5<y,5<yO$'TQWO,5<yOC_QWO,5<yO!@}Q`O,5<xOOQO'#Ga'#GaO%-PQWO,5<zOOQ07`,5<|,5<|O$'TQWO,5=POOQO,5?X,5?XOOQO-E<k-E<kOOQ07f1G2c1G2cO!4eQ`O,5<xO%-XQWO,5<yO$!PQWO,5<zO!4eQ`O,5<yO!(SQ7[O'#InO%-{Q7[O1G2mO!(SQ7[O'#IpO%.nQ7[O1G2oO%.xQ7[O1G5iO%/SQ7[O1G5iOOQO,5?^,5?^OOQO-E<p-E<pOOQO1G.z1G.zO!7{Q`O,59sO%[Q^O,59sO%/aQWO1G2UO!(SQ7[O1G2]O%/fQ08SO7+'iOOQ07b7+'i7+'iO!$aQ^O7+'iO%0YQWO,5;[OOQ07`,5?`,5?`OOQ07`-E<r-E<rOOQ07b7+%c7+%cO%0_QpO'#KTO#%sQWO7+(_O%0iQrO7+(_O$@aQWO7+(_O%0pQ08QO'#ChO%1TQ08QO,5<}O%1uQWO,5<}OOQ07`1G5g1G5gOOQU7+$`7+$`O!@rQ07hO7+$`O!@}Q`O7+$`O!$aQ^O7+&]O%1zQWO'#IyO%2cQWO,5@vOOQO1G3a1G3aO9aQWO,5@vO%2cQWO,5@vO%2kQWO,5@vOOQO,5?f,5?fOOQO-E<x-E<xOOQ07b7+'Q7+'QO%2pQWO7+(zO9kQ07hO7+(zO9aQWO7+(zO@bQWO7+(zOOQU7+(j7+(jO%2uQ08QO7+(gO!&dQ7[O7+(gO%3PQpO7+(hOOQU7+(h7+(hO!&dQ7[O7+(hO%3WQWO'#KXO%3cQWO,5=fOOQO,5?b,5?bOOQO-E<t-E<tOOQU7+(m7+(mO%4rQ`O'#HTOOQU1G3Y1G3YO!&dQ7[O1G3YO%[Q^O1G3YO%4yQWO1G3YO%5UQ7[O1G3YO9kQ07hO1G3[O$!UQWO1G3[O9UQWO1G3[O!@}Q`O1G3[O!AVQ7[O1G3[O%5dQWO'#IxO%5xQWO,5@tO%6QQ`O,5@tOOQ07`1G3]1G3]OOQU7+$U7+$UO@bQWO7+$UO9kQ07hO7+$UO%6]QWO7+$UO%[Q^O1G6cO%[Q^O1G6dO%6bQ07hO1G6cO%6lQ^O1G3dO%6sQWO1G3dO%6xQ^O1G3dOOQU7+(|7+(|O9kQ07hO7+)WO`Q^O7+)YOOQU'#K_'#K_OOQU'#I{'#I{O%7PQ^O,5>XOOQU,5>X,5>XO%[Q^O'#HnO%7^QWO'#HpOOQU,5>_,5>_O9ZQWO,5>_OOQU,5>a,5>aOOQU7+)c7+)cOOQU7+)i7+)iOOQU7+)m7+)mOOQU7+)o7+)oO%7cQ`O1G5sO%7wQ(CYO1G0vO%8RQWO1G0vOOQO1G/p1G/pO%8^Q(CYO1G/pO>pQWO1G/pO!*fQ^O'#DjOOQO,5>x,5>xOOQO-E<[-E<[OOQO,5?O,5?OOOQO-E<b-E<bO!@}Q`O1G/pOOQO-E<_-E<_OOQ07f1G0[1G0[OOQ07b7+%t7+%tO#%sQWO7+%tOOQ07b7+&[7+&[O>pQWO7+&[O!@}Q`O7+&[OOQO7+%w7+%wO$=gQ08SO7+&TOOQO7+&T7+&TO%[Q^O7+&TO%8hQ07hO7+&TO!@rQ07hO7+%wO!@}Q`O7+%wO%8sQ07hO7+&TO%9RQ08SO7++hO%[Q^O7++hO%9cQWO7++gO%9cQWO7++gOOQO1G4l1G4lO9ZQWO1G4lO%9kQWO1G4lOOQO7+%|7+%|O#%sQWO<<KyO%0iQrO<<KyO%9yQWO<<KyOOQU<<Ky<<KyO!&dQ7[O<<KyO%[Q^O<<KyO%:RQWO<<KyO%:^Q08SO,5?YO%<iQ08SO,5?[O%>tQ08SO1G2ZO%AVQ08SO1G2mO%CbQ08SO1G2oO%EmQ7[O,5>yOOQO-E<]-E<]O%EwQrO,5>zO%[Q^O,5>zOOQO-E<^-E<^O%FRQWO1G5uOOQ07b<<JQ<<JQO%FZQ(CYO1G0qO%HeQ(CYO1G0{O%HlQ(CYO1G0{O%JpQ(CYO1G0{O%JwQ(CYO1G0{O%LlQ(CYO1G0{O%MSQ(CYO1G0{O& gQ(CYO1G0{O& nQ(CYO1G0{O&#rQ(CYO1G0{O&#yQ(CYO1G0{O&%qQ(CYO1G0{O&&UQ08SO<<JdO&'ZQ(CYO1G0{O&)PQ(CYO'#JdO&+SQ(CYO1G1aO&+aQ(CYO1G0TO!*fQ^O'#FnOOQO'#KP'#KPOOQO1G1r1G1rO&+kQWO1G1qO&+pQ(CYO,5?TOOOS7+'e7+'eOOOO1G/V1G/VOOQ07b1G4q1G4qO!(SQ7[O7+(]O&+zQWO,5?UO9aQWO,5?UOOQO-E<h-E<hO&,YQWO1G6XO&,YQWO1G6XO&,bQWO1G6XO&,mQ7[O7+'uO&,}QpO,5?WO&-XQWO,5?WO!&dQ7[O,5?WOOQO-E<j-E<jO&-^QpO1G6YO&-hQWO1G6YOOQ07`1G2e1G2eO$'TQWO1G2eOOQ07`1G2d1G2dO&-pQWO1G2fO!&dQ7[O1G2fOOQ07`1G2k1G2kO!@}Q`O1G2dOC_QWO1G2eO&-uQWO1G2fO&-}QWO1G2eO&.qQ7[O,5?YOOQ07b-E<m-E<mO&/dQ7[O,5?[OOQ07b-E<o-E<oO!(SQ7[O7++TOOQ07b1G/_1G/_O&/nQWO1G/_OOQ07b7+'p7+'pO&/sQ7[O7+'wO&0TQ08SO<<KTOOQ07b<<KT<<KTO&0wQWO1G0vO!&dQ7[O'#IsO&0|QWO,5@oO!&dQ7[O1G2iOOQU<<Gz<<GzO!@rQ07hO<<GzO&1UQ08SO<<IwOOQ07b<<Iw<<IwOOQO,5?e,5?eO&1xQWO,5?eO&1}QWO,5?eOOQO-E<w-E<wO&2]QWO1G6bO&2]QWO1G6bO9aQWO1G6bO@bQWO<<LfOOQU<<Lf<<LfO&2eQWO<<LfO9kQ07hO<<LfOOQU<<LR<<LRO%2uQ08QO<<LROOQU<<LS<<LSO%3PQpO<<LSO&2jQ`O'#IuO&2uQWO,5@sO!*fQ^O,5@sOOQU1G3Q1G3QO&2}Q^O'#JmOOQO'#Iw'#IwO9kQ07hO'#IwO&3XQ`O,5=oOOQU,5=o,5=oO&3`Q`O'#EcO&3tQWO7+(tO&3yQWO7+(tOOQU7+(t7+(tO!&dQ7[O7+(tO%[Q^O7+(tO&4RQWO7+(tOOQU7+(v7+(vO9kQ07hO7+(vO$!UQWO7+(vO9UQWO7+(vO!@}Q`O7+(vO&4^QWO,5?dOOQO-E<v-E<vOOQO'#HW'#HWO&4iQWO1G6`O9kQ07hO<<GpOOQU<<Gp<<GpO@bQWO<<GpO&4qQWO7++}O&4vQWO7+,OO%[Q^O7++}O%[Q^O7+,OOOQU7+)O7+)OO&4{QWO7+)OO&5QQ^O7+)OO&5XQWO7+)OOOQU<<Lr<<LrOOQU<<Lt<<LtOOQU-E<y-E<yOOQU1G3s1G3sO&5^QWO,5>YOOQU,5>[,5>[O&5cQWO1G3yO9ZQWO7+&bO!*fQ^O7+&bOOQO7+%[7+%[O&5hQ(CYO1G6PO>pQWO7+%[OOQ07b<<I`<<I`OOQ07b<<Iv<<IvO>pQWO<<IvOOQO<<Io<<IoO$=gQ08SO<<IoO%[Q^O<<IoOOQO<<Ic<<IcO!@rQ07hO<<IcO&5rQ07hO<<IoO&5}Q08SO<= SO&6_QWO<= ROOQO7+*W7+*WO9ZQWO7+*WOOQUANAeANAeO&6gQWOANAeO!&dQ7[OANAeO#%sQWOANAeO%0iQrOANAeO%[Q^OANAeO&6oQ08SO7+'uO&9QQ08SO,5?YO&;]Q08SO,5?[O&=hQ08SO7+'wO&?yQrO1G4fO&@TQ(CYO7+&]O&BXQ(CYO,5=RO&D`Q(CYO,5=TO&DpQ(CYO,5=RO&EQQ(CYO,5=TO&EbQ(CYO,59qO&GeQ(CYO,5<fO&IhQ(CYO,5<hO&KkQ(CYO,5<vO&MaQ(CYO7+'hO&MnQ(CYO7+'iO&M{QWO,5<YOOQO7+']7+']O&NQQ7[O<<KwOOQO1G4p1G4pO&NXQWO1G4pO&NdQWO1G4pO&NrQWO7++sO&NrQWO7++sO!&dQ7[O1G4rO&NzQpO1G4rO' UQWO7++tOOQ07`7+(P7+(PO$'TQWO7+(QO' ^QpO7+(QOOQ07`7+(O7+(OO$'TQWO7+(PO' eQWO7+(QO!&dQ7[O7+(QOC_QWO7+(PO' jQ7[O<<NoOOQ07b7+$y7+$yO' tQpO,5?_OOQO-E<q-E<qO'!OQ08QO7+(TOOQUAN=fAN=fO9aQWO1G5POOQO1G5P1G5PO'!`QWO1G5PO'!eQWO7++|O'!eQWO7++|O9kQ07hOANBQO@bQWOANBQOOQUANBQANBQOOQUANAmANAmOOQUANAnANAnO'!mQWO,5?aOOQO-E<s-E<sO'!xQ(CYO1G6_O'%YQrO'#ChOOQO,5?c,5?cOOQO-E<u-E<uOOQU1G3Z1G3ZO&2}Q^O,5<zOOQU<<L`<<L`O!&dQ7[O<<L`O&3tQWO<<L`O'%dQWO<<L`O%[Q^O<<L`OOQU<<Lb<<LbO9kQ07hO<<LbO$!UQWO<<LbO9UQWO<<LbO'%lQ`O1G5OO'%wQWO7++zOOQUAN=[AN=[O9kQ07hOAN=[OOQU<= i<= iOOQU<= j<= jO'&PQWO<= iO'&UQWO<= jOOQU<<Lj<<LjO'&ZQWO<<LjO'&`Q^O<<LjOOQU1G3t1G3tO>pQWO7+)eO'&gQWO<<I|O'&rQ(CYO<<I|OOQO<<Hv<<HvOOQ07bAN?bAN?bOOQOAN?ZAN?ZO$=gQ08SOAN?ZOOQOAN>}AN>}O%[Q^OAN?ZOOQO<<Mr<<MrOOQUG27PG27PO!&dQ7[OG27PO#%sQWOG27PO'&|QWOG27PO%0iQrOG27PO''UQ(CYO<<JdO''cQ(CYO1G2ZO')XQ(CYO,5?YO'+[Q(CYO,5?[O'-_Q(CYO1G2mO'/bQ(CYO1G2oO'1eQ(CYO<<KTO'1rQ(CYO<<IwOOQO1G1t1G1tO!(SQ7[OANAcOOQO7+*[7+*[O'2PQWO7+*[O'2[QWO<= _O'2dQpO7+*^OOQ07`<<Kl<<KlO$'TQWO<<KlOOQ07`<<Kk<<KkO'2nQpO<<KlO$'TQWO<<KkOOQO7+*k7+*kO9aQWO7+*kO'2uQWO<= hOOQUG27lG27lO9kQ07hOG27lO!*fQ^O1G4{O'2}QWO7++yO&3tQWOANAzOOQUANAzANAzO!&dQ7[OANAzO'3VQWOANAzOOQUANA|ANA|O9kQ07hOANA|O$!UQWOANA|OOQO'#HX'#HXOOQO7+*j7+*jOOQUG22vG22vOOQUANETANETOOQUANEUANEUOOQUANBUANBUO'3_QWOANBUOOQU<<MP<<MPO!*fQ^OAN?hOOQOG24uG24uO$=gQ08SOG24uO#%sQWOLD,kOOQULD,kLD,kO!&dQ7[OLD,kO'3dQWOLD,kO'3lQ(CYO7+'uO'5bQ(CYO,5?YO'7eQ(CYO,5?[O'9hQ(CYO7+'wO';^Q7[OG26}OOQO<<Mv<<MvOOQ07`ANAWANAWO$'TQWOANAWOOQ07`ANAVANAVOOQO<<NV<<NVOOQULD-WLD-WO';nQ(CYO7+*gOOQUG27fG27fO&3tQWOG27fO!&dQ7[OG27fOOQUG27hG27hO9kQ07hOG27hOOQUG27pG27pO';xQ(CYOG25SOOQOLD*aLD*aOOQU!$(!V!$(!VO#%sQWO!$(!VO!&dQ7[O!$(!VO'<SQ08SOG26}OOQ07`G26rG26rOOQULD-QLD-QO&3tQWOLD-QOOQULD-SLD-SOOQU!)9Eq!)9EqO#%sQWO!)9EqOOQU!$(!l!$(!lOOQU!.K;]!.K;]O'>eQ(CYOG26}O!*fQ^O'#DyO1PQWO'#EWO'@ZQrO'#JiO!*fQ^O'#DqO'@bQ^O'#D}O'@iQrO'#ChO'CPQrO'#ChO!*fQ^O'#EPO'CaQ^O,5;VO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O'#IiO'EdQWO,5<eO'ElQ7[O,5;aO'GVQ7[O,5;aO!*fQ^O,5;uO!&dQ7[O'#GgO'ElQ7[O'#GgO!&dQ7[O'#GiO'ElQ7[O'#GiO1SQWO'#DVO1SQWO'#DVO!&dQ7[O'#FzO'ElQ7[O'#FzO!&dQ7[O'#F|O'ElQ7[O'#F|O!&dQ7[O'#G[O'ElQ7[O'#G[O!*fQ^O,5:iO!*fQ^O,5@eO'CaQ^O1G0qO'G^Q(CYO'#ChO!*fQ^O1G1|O!&dQ7[O'#InO'ElQ7[O'#InO!&dQ7[O'#IpO'ElQ7[O'#IpO!&dQ7[O,5<oO'ElQ7[O,5<oO'CaQ^O1G1}O!*fQ^O7+&xO!&dQ7[O1G2ZO'ElQ7[O1G2ZO!&dQ7[O'#InO'ElQ7[O'#InO!&dQ7[O'#IpO'ElQ7[O'#IpO!&dQ7[O1G2]O'ElQ7[O1G2]O'CaQ^O7+'iO'CaQ^O7+&]O!&dQ7[OANAcO'ElQ7[OANAcO'GhQWO'#EkO'GmQWO'#EkO'GuQWO'#FZO'GzQWO'#EuO'HPQWO'#JyO'H[QWO'#JwO'HgQWO,5;VO'HlQ7[O,5<bO'HsQWO'#GTO'HxQWO'#GTO'H}QWO,5<cO'IVQWO,5;VO'I_Q(CYO1G1^O'IfQWO,5<oO'IkQWO,5<oO'IpQWO,5<qO'IuQWO,5<qO'IzQWO1G1}O'JPQWO1G0qO'JUQ7[O<<KwO'J]Q7[O<<KwO7hQ7[O'#FxO9UQWO'#FwOA]QWO'#EjO!*fQ^O,5;rO!3fQWO'#GTO!3fQWO'#GTO!3fQWO'#GVO!3fQWO'#GVO!(SQ7[O7+(]O!(SQ7[O7+(]O%*sQpO1G2qO%*sQpO1G2qO!&dQ7[O,5=VO!&dQ7[O,5=V",
	  stateData: "'Ka~O'tOS'uOSSOS'vRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!twO!wxO!{]O#s!PO$T|O%b}O%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO&P!WO&V!XO&X!YO&Z!ZO&]![O&`!]O&f!^O&l!_O&n!`O&p!aO&r!bO&t!cO'{SO'}TO(QUO(XVO(g[O(tiO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`!vOo!nO!P!oO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!wO#S!pO#T!pO#W!yO#X!yO'|!lO'}TO(QUO([!mO(g!sO~O'v!zO~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X'r[X(X[X(h[X(o[X(p[X~O!d$|X~P(qO^!|O'}#OO(O!|O(P#OO~O^#PO(P#OO(Q#OO(R#PO~Ot#RO!R#SO(Y#SO(Z#UO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{:hO'}TO(QUO(XVO(g[O(tiO~O!X#YO!Y#VO!V(_P!V(lP~P+}O!Z#bO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'}TO(QUO(XVO(g[O(tiO~Ol#lO!X#hO!{]O#e#kO#f#hO'{:iO!j(iP~P.iO!k#nO'{#mO~O!w#rO!{]O%b#sO~O#g#tO~O!d#uO#g#tO~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y$aO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`(]X'r(]X'p(]X!j(]X!V(]X![(]X%c(]X!d(]X~P1qO#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X![(^X%c(^X~O`(^X!i(^X'r(^X'p(^X!V(^X!j(^Xr(^X!d(^X~P4XO#[$eO~O$Y$gO$[$fO$c$lO~ORfO![$mO$f$nO$h$pO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{$rO'}TO(QUO(X$uO(o$}O(p%POf(UP~O!k%bO~O!P%eO![%fO'{%dO~O!d%jO~O`%kO'r%kO~O'|!lO~P%[O%h%rO~P%[Og%VO!k%bO'{%dO'|!lO~Od%yO!k%bO'{%dO~O#r$SO~O|&OO![%{O!k%}O%d&RO'{%dO'|!lO'}TO(QUO_(}P~O!w#rO~O%m&TO!P(yX![(yX'{(yX~O'{&UO~O!t&ZO#s!PO%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO~Oc&`Od&_O!w&]O%b&^O%u&[O~P;xOc&cOdyO![&bO!t&ZO!wxO!{]O#s!PO%b}O%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO~Oa&fO#[&iO%d&dO'|!lO~P<}O!k&jO!t&nO~O!k#nO~O![XO~O`%kO'q&vO'r%kO~O`%kO'q&yO'r%kO~O`%kO'q&{O'r%kO~O'p[X!V[Xr[X!j[X&T[X![[X%c[X!d[X~P(qO!_'YO!`'RO!a'RO'|!lO'}TO(QUO~Oo'PO!P'OO!X'SO([&}O!Z(`P!Z(nP~P@UOj']O!['ZO'{%dO~Od'bO!k%bO'{%dO~O|&OO!k%}O~Oo!nO!P!oO!{:dO#P!pO#Q!pO#S!pO#T!pO'|!lO'}TO(QUO([!mO(g!sO~O!_'hO!`'gO!a'gO#R!pO#W'iO#X'iO~PApO`%kOg%VO!d#uO!k%bO'r%kO(h'kO~O!o'oO#['mO~PCOOo!nO!P!oO'}TO(QUO([!mO(g!sO~O![XOo(eX!P(eX!_(eX!`(eX!a(eX!{(eX#P(eX#Q(eX#R(eX#S(eX#T(eX#W(eX#X(eX'|(eX'}(eX(Q(eX([(eX(g(eX~O!`'gO!a'gO'|!lO~PCnO'w'sO'x'sO'y'uO~O^!|O'}'wO(O!|O(P'wO~O^#PO(P'wO(Q'wO(R#PO~Ot#RO!R#SO(Y#SO(Z'{O~O!X'}O!V'PX!V'VX!Y'PX!Y'VX~P+}O!Y(PO!V(_X~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y(PO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O!V(_X~PGbO!V(UO~O!V(kX!Y(kX!d(kX!j(kX(h(kX~O#[(kX#g#`X!Z(kX~PIhO#[(VO!V(mX!Y(mX~O!Y(WO!V(lX~O!V(ZO~O#[$eO~PIhO!Z([O~P`O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!maZ!man!ma!Y!ma!h!ma!o!ma#j!ma#k!ma#l!ma#m!ma#n!ma#o!ma#p!ma#q!ma#r!ma#t!ma#v!ma#x!ma#y!ma(h!ma(o!ma(p!ma~O`!ma'r!ma'p!ma!V!ma!j!mar!ma![!ma%c!ma!d!ma~PKOO!j(]O~O!d#uO#[(^O(h'kO!Y(jX`(jX'r(jX~O!j(jX~PMnO!P%eO![%fO!{]O#e(cO#f(bO'{%dO~O!Y(dO!j(iX~O!j(fO~O!P%eO![%fO#f(bO'{%dO~OP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!i(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O!d#uO!j(^X~P! [O|(gO}(hO!i#wO!k#xO!{!za!P!za~O!w!za%b!za![!za#e!za#f!za'{!za~P!#`O!w(lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#g(rO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~Of(bP~P!(SO!X(vO!j(cP~P%[O([(xO(g[O~O!P(zO!k#xO([(xO(g[O~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O})]O!k#xO~O!Y$aO`$ma'r$ma'p$ma!j$ma!V$ma![$ma%c$ma!d$ma~O#s)aO~P!&dO|)dO!d)cO![$ZX$W$ZX$Y$ZX$[$ZX$c$ZX~O!d)cO![(qX$W(qX$Y(qX$[(qX$c(qX~O|)dO~P!.OO|)dO![(qX$W(qX$Y(qX$[(qX$c(qX~O![)fO$W)jO$Y)eO$[)eO$c)kO~O!X)nO~P!*fO$Y$gO$[$fO$c)rO~Oj$uX|$uX!P$uX!i$uX(o$uX(p$uX~OfiXf$uXjiX!YiX#[iX~P!/tOo)tO~Ot)uO(Y)vO(Z)xO~Oj*RO|)zO!P){O(o$}O(p%PO~Of)yO~P!0}Of*SO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~O!X*WO'{*TO!j(uP~P!1lO#g*YO~O!k*ZO~O!X*`O'{*]O!V(vP~P!1lOn*lO!P*dO!_*jO!`*cO!a*cO!k*ZO#W*kO%Y*fO'|!lO([!mO~O!Z*iO~P!3xO!i#wOj(WX|(WX!P(WX(o(WX(p(WX!Y(WX#[(WX~Of(WX#|(WX~P!4qOj*qO#[*pOf(VX!Y(VX~O!Y*rOf(UX~O'{&UOf(UP~O!k*yO~O'{(pO~Ol*}O!P%eO!X#hO![%fO!{]O#e#kO#f#hO'{%dO!j(iP~O!d#uO#g+OO~O!P%eO!X+QO!Y(WO![%fO'{%dO!V(lP~Oo'VO!P+SO!X+RO'}TO(QUO([(xO~O!Z(nP~P!7lO!Y+TO`(zX'r(zX~OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`!ea!Y!ea'r!ea'p!ea!V!ea!j!ear!ea![!ea%c!ea!d!ea~P!8dO|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qaZ!qan!qa!Y!qa!h!qa!o!qa#j!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#t!qa#v!qa#x!qa#y!qa(h!qa(o!qa(p!qa~O`!qa'r!qa'p!qa!V!qa!j!qar!qa![!qa%c!qa!d!qa~P!:}O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!saZ!san!sa!Y!sa!h!sa!o!sa#j!sa#k!sa#l!sa#m!sa#n!sa#o!sa#p!sa#q!sa#r!sa#t!sa#v!sa#x!sa#y!sa(h!sa(o!sa(p!sa~O`!sa'r!sa'p!sa!V!sa!j!sar!sa![!sa%c!sa!d!sa~P!=hOg%VOj+^O!['ZO%c+]O~O!d+`O`(TX![(TX'r(TX!Y(TX~O`%kO![XO'r%kO~Og%VO!k%bO~Og%VO!k%bO'{%dO~O!d#uO#g(rO~Oa+kO%d+lO'{+hO'}TO(QUO!Z)OP~O!Y+mO_(}X~OZ+qO~O_+rO~O![%{O'{%dO'|!lO_(}P~Og%VO#[+wO~Og%VOj+zO![$|O~O![+|O~O|,OO![XO~O%h%rO~O!w,TO~Od,YO~Oa,ZO'{#mO'}TO(QUO!Z(|P~Od%yO~O%d!QO'{&UO~P<}OZ,`O_,_O~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!kZO!nYO!oYO!pYO!rvO!wxO!{]O%b}O'}TO(QUO(XVO(g[O(tiO~O![!eO!t!gO$T!kO'{!dO~P!DkO_,_O`%kO'r%kO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`,eO!twO#s!OO%f!OO%g!OO%h!OO~P!GTO!k&jO~O&V,kO~O![,mO~O&h,oO&j,pOP&eaQ&eaR&eaX&ea`&eac&ead&eal&ean&eao&eap&eav&eax&eaz&ea!P&ea!T&ea!U&ea![&ea!f&ea!k&ea!n&ea!o&ea!p&ea!r&ea!t&ea!w&ea!{&ea#s&ea$T&ea%b&ea%d&ea%f&ea%g&ea%h&ea%k&ea%m&ea%p&ea%q&ea%s&ea&P&ea&V&ea&X&ea&Z&ea&]&ea&`&ea&f&ea&l&ea&n&ea&p&ea&r&ea&t&ea'p&ea'{&ea'}&ea(Q&ea(X&ea(g&ea(t&ea!Z&ea&^&eaa&ea&c&ea~O'{,uO~Og!bX!Y!OX!Y!bX!Z!OX!Z!bX!d!OX!d!bX!k!bX#[!OX~O!d,zO#[,yOg(aX!Y#dX!Y(aX!Z#dX!Z(aX!d(aX!k(aX~Og%VO!d,|O!k%bO!Y!^X!Z!^X~Oo!nO!P!oO'}TO(QUO([!mO~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'}TO(QUO(XVO(g[O(t<YO~O'{;]O~P#!ZO!Y-QO!Z(`X~O!Z-SO~O!d,zO#[,yO!Y#dX!Z#dX~O!Y-TO!Z(nX~O!Z-VO~O!`-WO!a-WO'|!lO~P# xO!Z-ZO~P'_Oj-^O!['ZO~O!V-cO~Oo!za!_!za!`!za!a!za#P!za#Q!za#R!za#S!za#T!za#W!za#X!za'|!za'}!za(Q!za([!za(g!za~P!#`O!o-hO#[-fO~PCOO!`-jO!a-jO'|!lO~PCnO`%kO#[-fO'r%kO~O`%kO!d#uO#[-fO'r%kO~O`%kO!d#uO!o-hO#[-fO'r%kO(h'kO~O'w'sO'x'sO'y-oO~Or-pO~O!V'Pa!Y'Pa~P!8dO!X-tO!V'PX!Y'PX~P%[O!Y(PO!V(_a~O!V(_a~PGbO!Y(WO!V(la~O!P%eO!X-xO![%fO'{%dO!V'VX!Y'VX~O#[-zO!Y(ja!j(ja`(ja'r(ja~O!d#uO~P#*aO!Y(dO!j(ia~O!P%eO![%fO#f.OO'{%dO~Ol.TO!P%eO!X.QO![%fO!{]O#e.SO#f.QO'{%dO!Y'YX!j'YX~O}.XO!k#xO~Og%VOj.[O!['ZO%c.ZO~O`#_i!Y#_i'r#_i'p#_i!V#_i!j#_ir#_i![#_i%c#_i!d#_i~P!8dOj<fO|)zO!P){O(o$}O(p%PO~O#g#Za`#Za#[#Za'r#Za!Y#Za!j#Za![#Za!V#Za~P#-]O#g(WXP(WXZ(WX`(WXn(WX}(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX'r(WX(X(WX(h(WX!j(WX!V(WX'p(WXr(WX![(WX%c(WX!d(WX~P!4qO!Y.iOf(bX~P!0}Of.kO~O!Y.lO!j(cX~P!8dO!j.oO~O!V.qO~OP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#ii`#iin#ii!Y#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#j#ii~P#1XO#j$OO~P#1XOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO(XVOZ#ii`#ii!Y#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~On#ii~P#3yOn$QO~P#3yOP$]On$QO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO(XVO`#ii!Y#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P#6kOZ$dO!h$SO#o$SO#p$SO#q$cO#r$SO~P#6kOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO(XVO`#ii!Y#ii#v#ii#x#ii#y#ii'r#ii(h#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O(o#ii~P#9lO(o#|O~P#9lOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO(XVO(o#|O`#ii!Y#ii#x#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O(p#ii~P#<^O(p#}O~P#<^OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO(XVO(o#|O(p#}O~O`#ii!Y#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#?OOP[XZ[Xn[X|[X}[X!P[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X!Y[X!Z[X~O#|[X~P#AiOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO#y:vO(XVO(h$ZO(o#|O(p#}O~O#|.sO~P#CvO#[:{O$O:{O#|(^X!Z(^X~P! [O`']a!Y']a'r']a'p']a!j']a!V']ar']a![']a%c']a!d']a~P!8dOP#iiZ#ii`#iin#ii}#ii!Y#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(X#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#-]O`#}i!Y#}i'r#}i'p#}i!V#}i!j#}ir#}i![#}i%c#}i!d#}i~P!8dO$Y.xO$[.xO~O$Y.yO$[.yO~O!d)cO#[.zO![$`X$W$`X$Y$`X$[$`X$c$`X~O!X.{O~O![)fO$W.}O$Y)eO$[)eO$c/OO~O!Y:wO!Z(]X~P#CvO!Z/PO~O!d)cO$c(qX~O$c/RO~Ot)uO(Y)vO(Z/UO~O!V/YO~P!&dO(o$}Oj%Za|%Za!P%Za(p%Za!Y%Za#[%Za~Of%Za#|%Za~P#LWO(p%POj%]a|%]a!P%]a(o%]a!Y%]a#[%]a~Of%]a#|%]a~P#LyO!YeX!deX!jeX!j$uX(heX~P!/tO!j/bO~P#-]O!Y/cO!d#uO(h'kO!j(uX~O!j/hO~O!X*WO'{%dO!j(uP~O#g/jO~O!V$uX!Y$uX!d$|X~P!/tO!Y/kO!V(vX~P#-]O!d/mO~O!V/oO~Og%VOn/sO!d#uO!k%bO(h'kO~O'{/uO~O!d+`O~O`%kO!Y/yO'r%kO~O!Z/{O~P!3xO!`/|O!a/|O'|!lO([!mO~O!P0OO([!mO~O#W0PO~Of%Za!Y%Za#[%Za#|%Za~P!0}Of%]a!Y%]a#[%]a#|%]a~P!0}O'{&UOf'fX!Y'fX~O!Y*rOf(Ua~Of0YO~O|0ZO}0ZO!P0[Ojya(oya(pya!Yya#[ya~Ofya#|ya~P$$dO|)zO!P){Oj$na(o$na(p$na!Y$na#[$na~Of$na#|$na~P$%YO|)zO!P){Oj$pa(o$pa(p$pa!Y$pa#[$pa~Of$pa#|$pa~P$%{O#g0^O~Of%Oa!Y%Oa#[%Oa#|%Oa~P!0}O!d#uO~O#g0aO~O!Y+TO`(za'r(za~O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qiZ!qin!qi!Y!qi!h!qi!o!qi#j!qi#k!qi#l!qi#m!qi#n!qi#o!qi#p!qi#q!qi#r!qi#t!qi#v!qi#x!qi#y!qi(h!qi(o!qi(p!qi~O`!qi'r!qi'p!qi!V!qi!j!qir!qi![!qi%c!qi!d!qi~P$'jOg%VOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~Ol0kO'{0jO~P$*TO!d+`O`(Ta![(Ta'r(Ta!Y(Ta~O#g0qO~OZ[X!YeX!ZeX~O!Y0rO!Z)OX~O!Z0tO~OZ0uO~Oa0wO'{+hO'}TO(QUO~O![%{O'{%dO_'nX!Y'nX~O!Y+mO_(}a~O!j0zO~P!8dOZ0}O~O_1OO~O#[1RO~Oj1UO![$|O~O([(xO!Z({P~Og%VOj1_O![1[O%c1^O~OZ1iO!Y1gO!Z(|X~O!Z1jO~O_1lO`%kO'r%kO~O'{#mO'}TO(QUO~O#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O#r1oO&T1pO`(^X!i(^X~P$/kO#[$eO#r1oO&T1pO~O`1rO~P%[O`1tO~O&^1wOP&[iQ&[iR&[iX&[i`&[ic&[id&[il&[in&[io&[ip&[iv&[ix&[iz&[i!P&[i!T&[i!U&[i![&[i!f&[i!k&[i!n&[i!o&[i!p&[i!r&[i!t&[i!w&[i!{&[i#s&[i$T&[i%b&[i%d&[i%f&[i%g&[i%h&[i%k&[i%m&[i%p&[i%q&[i%s&[i&P&[i&V&[i&X&[i&Z&[i&]&[i&`&[i&f&[i&l&[i&n&[i&p&[i&r&[i&t&[i'p&[i'{&[i'}&[i(Q&[i(X&[i(g&[i(t&[i!Z&[ia&[i&c&[i~Oa1}O!Z1{O&c1|O~P`O![XO!k2PO~O&j,pOP&eiQ&eiR&eiX&ei`&eic&eid&eil&ein&eio&eip&eiv&eix&eiz&ei!P&ei!T&ei!U&ei![&ei!f&ei!k&ei!n&ei!o&ei!p&ei!r&ei!t&ei!w&ei!{&ei#s&ei$T&ei%b&ei%d&ei%f&ei%g&ei%h&ei%k&ei%m&ei%p&ei%q&ei%s&ei&P&ei&V&ei&X&ei&Z&ei&]&ei&`&ei&f&ei&l&ei&n&ei&p&ei&r&ei&t&ei'p&ei'{&ei'}&ei(Q&ei(X&ei(g&ei(t&ei!Z&ei&^&eia&ei&c&ei~O!V2VO~O!Y!^a!Z!^a~P#CvOo!nO!P!oO!X2]O([!mO!Y'QX!Z'QX~P@UO!Y-QO!Z(`a~O!Y'WX!Z'WX~P!7lO!Y-TO!Z(na~O!Z2dO~P'_O`%kO#[2mO'r%kO~O`%kO!d#uO#[2mO'r%kO~O`%kO!d#uO!o2qO#[2mO'r%kO(h'kO~O`%kO'r%kO~P!8dO!Y$aOr$ma~O!V'Pi!Y'Pi~P!8dO!Y(PO!V(_i~O!Y(WO!V(li~O!V(mi!Y(mi~P!8dO!Y(ji!j(ji`(ji'r(ji~P!8dO#[2sO!Y(ji!j(ji`(ji'r(ji~O!Y(dO!j(ii~O!P%eO![%fO!{]O#e2xO#f2wO'{%dO~O!P%eO![%fO#f2wO'{%dO~Oj3PO!['ZO%c3OO~Og%VOj3PO!['ZO%c3OO~O#g%ZaP%ZaZ%Za`%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Zar%Za![%Za%c%Za!d%Za~P#LWO#g%]aP%]aZ%]a`%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]ar%]a![%]a%c%]a!d%]a~P#LyO#g%ZaP%ZaZ%Za`%Zan%Za}%Za!Y%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Za#[%Zar%Za![%Za%c%Za!d%Za~P#-]O#g%]aP%]aZ%]a`%]an%]a}%]a!Y%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]a#[%]ar%]a![%]a%c%]a!d%]a~P#-]O#gyaPyaZya`yanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya'rya(Xya(hya!jya!Vya'pyarya![ya%cya!dya~P$$dO#g$naP$naZ$na`$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na'r$na(X$na(h$na!j$na!V$na'p$nar$na![$na%c$na!d$na~P$%YO#g$paP$paZ$pa`$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa'r$pa(X$pa(h$pa!j$pa!V$pa'p$par$pa![$pa%c$pa!d$pa~P$%{O#g%OaP%OaZ%Oa`%Oan%Oa}%Oa!Y%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa'r%Oa(X%Oa(h%Oa!j%Oa!V%Oa'p%Oa#[%Oar%Oa![%Oa%c%Oa!d%Oa~P#-]O`#_q!Y#_q'r#_q'p#_q!V#_q!j#_qr#_q![#_q%c#_q!d#_q~P!8dOf'RX!Y'RX~P!(SO!Y.iOf(ba~O!X3ZO!Y'SX!j'SX~P%[O!Y.lO!j(ca~O!Y.lO!j(ca~P!8dO!V3^O~O#|!ma!Z!ma~PKOO#|!ea!Y!ea!Z!ea~P#CvO#|!qa!Z!qa~P!:}O#|!sa!Z!sa~P!=hORfO![3pO$a3qO~O!Z3uO~Or3vO~P#-]O`$jq!Y$jq'r$jq'p$jq!V$jq!j$jqr$jq![$jq%c$jq!d$jq~P!8dO!V3wO~P#-]O|)zO!P){O(p%POj'ba(o'ba!Y'ba#['ba~Of'ba#|'ba~P%)_O|)zO!P){Oj'da(o'da(p'da!Y'da#['da~Of'da#|'da~P%*QO(h$ZO~P#-]O!X3zO'{%dO!Y'^X!j'^X~O!Y/cO!j(ua~O!Y/cO!d#uO!j(ua~O!Y/cO!d#uO(h'kO!j(ua~Of$wi!Y$wi#[$wi#|$wi~P!0}O!X4SO'{*]O!V'`X!Y'`X~P!1lO!Y/kO!V(va~O!Y/kO!V(va~P#-]O!d#uO#r4[O~On4_O!d#uO(h'kO~O(o$}Oj%Zi|%Zi!P%Zi(p%Zi!Y%Zi#[%Zi~Of%Zi#|%Zi~P%-dO(p%POj%]i|%]i!P%]i(o%]i!Y%]i#[%]i~Of%]i#|%]i~P%.VOf(Vi!Y(Vi~P!0}O#[4fOf(Vi!Y(Vi~P!0}O!j4iO~O`$kq!Y$kq'r$kq'p$kq!V$kq!j$kqr$kq![$kq%c$kq!d$kq~P!8dO!V4mO~O!Y4nO![(wX~P#-]O!i#wO~P4XO`$uX![$uX%W[X'r$uX!Y$uX~P!/tO%W4pO`kXjkX|kX!PkX![kX'rkX(okX(pkX!YkX~O%W4pO~Oa4vO%d4wO'{+hO'}TO(QUO!Y'mX!Z'mX~O!Y0rO!Z)Oa~OZ4{O~O_4|O~O`%kO'r%kO~P#-]O![$|O~P#-]O!Y5UO#[5WO!Z({X~O!Z5XO~Oo!nO!P5YO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!pO#S!pO#T!pO#W5_O#X!yO'|!lO'}TO(QUO([!mO(g!sO~O!Z5^O~P%3hOj5dO![1[O%c5cO~Og%VOj5dO![1[O%c5cO~Oa5kO'{#mO'}TO(QUO!Y'lX!Z'lX~O!Y1gO!Z(|a~O'}TO(QUO([5mO~O_5qO~O#r5tO&T5uO~PMnO!j5vO~P%[O`5xO~O`5xO~P%[Oa1}O!Z5}O&c1|O~P`O!d6PO~O!d6ROg(ai!Y(ai!Z(ai!d(ai!k(ai~O!Y#di!Z#di~P#CvO#[6SO!Y#di!Z#di~O!Y!^i!Z!^i~P#CvO`%kO#[6]O'r%kO~O`%kO!d#uO#[6]O'r%kO~O!Y(jq!j(jq`(jq'r(jq~P!8dO!Y(dO!j(iq~O!P%eO![%fO#f6dO'{%dO~O!['ZO%c6gO~Oj6jO!['ZO%c6gO~O#g'baP'baZ'ba`'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba'r'ba(X'ba(h'ba!j'ba!V'ba'p'bar'ba!['ba%c'ba!d'ba~P%)_O#g'daP'daZ'da`'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da'r'da(X'da(h'da!j'da!V'da'p'dar'da!['da%c'da!d'da~P%*QO#g$wiP$wiZ$wi`$win$wi}$wi!Y$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi'r$wi(X$wi(h$wi!j$wi!V$wi'p$wi#[$wir$wi![$wi%c$wi!d$wi~P#-]O#g%ZiP%ZiZ%Zi`%Zin%Zi}%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi'r%Zi(X%Zi(h%Zi!j%Zi!V%Zi'p%Zir%Zi![%Zi%c%Zi!d%Zi~P%-dO#g%]iP%]iZ%]i`%]in%]i}%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i'r%]i(X%]i(h%]i!j%]i!V%]i'p%]ir%]i![%]i%c%]i!d%]i~P%.VOf'Ra!Y'Ra~P!0}O!Y'Sa!j'Sa~P!8dO!Y.lO!j(ci~O#|#_i!Y#_i!Z#_i~P#CvOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#iin#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~O#j#ii~P%FhO#j:lO~P%FhOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO(XVOZ#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~On#ii~P%HsOn:nO~P%HsOP$]On:nO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO(XVO#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P%KOOZ:zO!h:pO#o:pO#p:pO#q:yO#r:pO~P%KOOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO(XVO#v#ii#x#ii#y#ii#|#ii(h#ii(p#ii!Y#ii!Z#ii~O(o#ii~P%MjO(o#|O~P%MjOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO(XVO(o#|O#x#ii#y#ii#|#ii(h#ii!Y#ii!Z#ii~O(p#ii~P& uO(p#}O~P& uOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO(XVO(o#|O(p#}O~O#y#ii#|#ii(h#ii!Y#ii!Z#ii~P&$QO`#zy!Y#zy'r#zy'p#zy!V#zy!j#zyr#zy![#zy%c#zy!d#zy~P!8dOj<gO|)zO!P){O(o$}O(p%PO~OP#iiZ#iin#ii}#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(X#ii(h#ii!Y#ii!Z#ii~P&&xO!i#wOP(WXZ(WXj(WXn(WX|(WX}(WX!P(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX#|(WX(X(WX(h(WX(o(WX(p(WX!Y(WX!Z(WX~O#|#}i!Y#}i!Z#}i~P#CvO#|!qi!Z!qi~P$'jO!Z6|O~O!Y']a!Z']a~P#CvO!d#uO(h'kO!Y'^a!j'^a~O!Y/cO!j(ui~O!Y/cO!d#uO!j(ui~Of$wq!Y$wq#[$wq#|$wq~P!0}O!V'`a!Y'`a~P#-]O!d7TO~O!Y/kO!V(vi~P#-]O!Y/kO!V(vi~O!V7XO~O!d#uO#r7^O~On7_O!d#uO(h'kO~O|)zO!P){O(p%POj'ca(o'ca!Y'ca#['ca~Of'ca#|'ca~P&.YO|)zO!P){Oj'ea(o'ea(p'ea!Y'ea#['ea~Of'ea#|'ea~P&.{O!V7aO~Of$yq!Y$yq#[$yq#|$yq~P!0}O`$ky!Y$ky'r$ky'p$ky!V$ky!j$kyr$ky![$ky%c$ky!d$ky~P!8dO!d6RO~O!Y4nO![(wa~O`#_y!Y#_y'r#_y'p#_y!V#_y!j#_yr#_y![#_y%c#_y!d#_y~P!8dOZ7fO~Oa7hO'{+hO'}TO(QUO~O!Y0rO!Z)Oi~O_7lO~O([(xO!Y'iX!Z'iX~O!Y5UO!Z({a~OlkO'{7sO~P.iO!Z7vO~P%3hOo!nO!P7wO'}TO(QUO([!mO(g!sO~O![1[O~O![1[O%c7yO~Oj7|O![1[O%c7yO~OZ8RO!Y'la!Z'la~O!Y1gO!Z(|i~O!j8VO~O!j8WO~O!j8ZO~O!j8ZO~P%[O`8]O~O!d8^O~O!j8_O~O!Y(mi!Z(mi~P#CvO`%kO#[8gO'r%kO~O!Y(jy!j(jy`(jy'r(jy~P!8dO!Y(dO!j(iy~O!['ZO%c8jO~O#g$wqP$wqZ$wq`$wqn$wq}$wq!Y$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq'r$wq(X$wq(h$wq!j$wq!V$wq'p$wq#[$wqr$wq![$wq%c$wq!d$wq~P#-]O#g'caP'caZ'ca`'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca'r'ca(X'ca(h'ca!j'ca!V'ca'p'car'ca!['ca%c'ca!d'ca~P&.YO#g'eaP'eaZ'ea`'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea'r'ea(X'ea(h'ea!j'ea!V'ea'p'ear'ea!['ea%c'ea!d'ea~P&.{O#g$yqP$yqZ$yq`$yqn$yq}$yq!Y$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq'r$yq(X$yq(h$yq!j$yq!V$yq'p$yq#[$yqr$yq![$yq%c$yq!d$yq~P#-]O!Y'Si!j'Si~P!8dO#|#_q!Y#_q!Z#_q~P#CvO(o$}OP%ZaZ%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za#|%Za(X%Za(h%Za!Y%Za!Z%Za~Oj%Za|%Za!P%Za(p%Za~P&@bO(p%POP%]aZ%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a#|%]a(X%]a(h%]a!Y%]a!Z%]a~Oj%]a|%]a!P%]a(o%]a~P&BiOj<gO|)zO!P){O(p%PO~P&@bOj<gO|)zO!P){O(o$}O~P&BiO|0ZO}0ZO!P0[OPyaZyajyanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya#|ya(Xya(hya(oya(pya!Yya!Zya~O|)zO!P){OP$naZ$naj$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na#|$na(X$na(h$na(o$na(p$na!Y$na!Z$na~O|)zO!P){OP$paZ$paj$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa#|$pa(X$pa(h$pa(o$pa(p$pa!Y$pa!Z$pa~OP%OaZ%Oan%Oa}%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa#|%Oa(X%Oa(h%Oa!Y%Oa!Z%Oa~P&&xO#|$jq!Y$jq!Z$jq~P#CvO#|$kq!Y$kq!Z$kq~P#CvO!Z8vO~O#|8wO~P!0}O!d#uO!Y'^i!j'^i~O!d#uO(h'kO!Y'^i!j'^i~O!Y/cO!j(uq~O!V'`i!Y'`i~P#-]O!Y/kO!V(vq~O!V8}O~P#-]O!V8}O~Of(Vy!Y(Vy~P!0}O!Y'ga!['ga~P#-]O`%Vq![%Vq'r%Vq!Y%Vq~P#-]OZ9SO~O!Y0rO!Z)Oq~O#[9WO!Y'ia!Z'ia~O!Y5UO!Z({i~P#CvOP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!d%TX#r%TX~P'#SO![1[O%c9[O~O'}TO(QUO([9aO~O!Y1gO!Z(|q~O!j9dO~O!j9eO~O!j9fO~O!j9fO~P%[O#[9iO!Y#dy!Z#dy~O!Y#dy!Z#dy~P#CvO!['ZO%c9nO~O#|#zy!Y#zy!Z#zy~P#CvOP$wiZ$win$wi}$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi#|$wi(X$wi(h$wi!Y$wi!Z$wi~P&&xO|)zO!P){O(p%POP'baZ'baj'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba#|'ba(X'ba(h'ba(o'ba!Y'ba!Z'ba~O|)zO!P){OP'daZ'daj'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da#|'da(X'da(h'da(o'da(p'da!Y'da!Z'da~O(o$}OP%ZiZ%Zij%Zin%Zi|%Zi}%Zi!P%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi#|%Zi(X%Zi(h%Zi(p%Zi!Y%Zi!Z%Zi~O(p%POP%]iZ%]ij%]in%]i|%]i}%]i!P%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i#|%]i(X%]i(h%]i(o%]i!Y%]i!Z%]i~O#|$ky!Y$ky!Z$ky~P#CvO#|#_y!Y#_y!Z#_y~P#CvO!d#uO!Y'^q!j'^q~O!Y/cO!j(uy~O!V'`q!Y'`q~P#-]O!V9wO~P#-]O!Y0rO!Z)Oy~O!Y5UO!Z({q~O![1[O%c:OO~O!j:RO~O!['ZO%c:WO~OP$wqZ$wqn$wq}$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq#|$wq(X$wq(h$wq!Y$wq!Z$wq~P&&xO|)zO!P){O(p%POP'caZ'caj'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca#|'ca(X'ca(h'ca(o'ca!Y'ca!Z'ca~O|)zO!P){OP'eaZ'eaj'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea#|'ea(X'ea(h'ea(o'ea(p'ea!Y'ea!Z'ea~OP$yqZ$yqn$yq}$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq#|$yq(X$yq(h$yq!Y$yq!Z$yq~P&&xOf%_!Z!Y%_!Z#[%_!Z#|%_!Z~P!0}O!Y'iq!Z'iq~P#CvO!Y#d!Z!Z#d!Z~P#CvO#g%_!ZP%_!ZZ%_!Z`%_!Zn%_!Z}%_!Z!Y%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z'r%_!Z(X%_!Z(h%_!Z!j%_!Z!V%_!Z'p%_!Z#[%_!Zr%_!Z![%_!Z%c%_!Z!d%_!Z~P#-]OP%_!ZZ%_!Zn%_!Z}%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z#|%_!Z(X%_!Z(h%_!Z!Y%_!Z!Z%_!Z~P&&xOr(]X~P1qO'|!lO~P!*fO!VeX!YeX#[eX~P'#SOP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!h[X!i[X!k[X!o[X#[[X#[eX#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!deX!j[X!jeX(heX~P'@vOP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![XO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O!Y:wO!Z$ma~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;RO!P${O![$|O!f<aO!k$xO#f;XO$T%^O$o;TO$q;VO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#s)aO~P'ElO!Z[X!ZeX~P'@vO#g:kO~O!d#uO#g:kO~O#[:{O~O#r:pO~O#[;ZO!Y(mX!Z(mX~O#[:{O!Y(kX!Z(kX~O#g;[O~Of;^O~P!0}O#g;cO~O#g;dO~O!d#uO#g;eO~O!d#uO#g;[O~O#|;fO~P#CvO#g;gO~O#g;hO~O#g;mO~O#g;nO~O#g;oO~O#g;pO~O#|;qO~P!0}O#|;rO~P!0}O!i#P#Q#S#T#W#e#f#q(t$o$q$t%W%b%c%d%k%m%p%q%s%u~'vS#k!U't'|#lo#j#mn|'u$Y'u'{$[([~",
	  goto: "$2p)SPPPPP)TPP)WP)iP*x.|PPPP5pPP6WPP<S?gP?zP?zPPP?zPAxP?zP?zP?zPA|PPBRPBlPGdPPPGhPPPPGhJiPPPJoKjPGhPMxPPPP!!WGhPPPGhPGhP!$fGhP!'z!(|!)VP!)y!)}!)yPPPPP!-Y!(|PP!-v!.pP!1dGhGh!1i!4s!9Y!9Y!=OPPP!=VGhPPPPPPPPPPP!@dP!AuPPGh!CSPGhPGhGhGhGhPGh!DfP!GnP!JrP!Jv!KQ!KU!KUP!GkP!KY!KYP!N^P!NbGhGh!Nh##k?zP?zP?z?zP#$v?z?z#'O?z#)k?z#+m?z?z#,[#.f#.f#.j#.r#.f#.zP#.fP?z#/d?z#3R?z?z5pPPP#6vPPP#7a#7aP#7aP#7w#7aPP#7}P#7tP#7t#8b#7t#8|#9S5m)W#9V)WP#9^#9^#9^P)WP)WP)WP)WPP)WP#9d#9gP#9g)WP#9kP#9nP)WP)WP)WP)WP)WP)W)WPP#9t#9z#:V#:]#:c#:i#:o#:}#;T#;Z#;e#;k#;u#<U#<[#<|#=`#=f#=l#=z#>a#@O#@^#@d#Ax#BW#Cr#DQ#DW#D^#Dd#Dn#Dt#Dz#EU#Eh#EnPPPPPPPPPP#EtPPPPPPP#Fi#Ip#KP#KW#K`PPPP$!d$%Z$+r$+u$+x$,q$,t$,w$-O$-WPP$-^$-b$.Y$/X$/]$/qPP$/u$/{$0PP$0S$0W$0Z$1P$1h$2P$2T$2W$2Z$2a$2d$2h$2lR!{RoqOXst!Z#c%j&m&o&p&r,h,m1w1zY!uQ'Z-Y1[5]Q%pvQ%xyQ&P|Q&e!VS'R!e-QQ'a!iS'g!r!xS*c$|*hQ+f%yQ+s&RQ,X&_Q-W'YQ-b'bQ-j'hQ/|*jQ1f,YR;Y:g%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8gS#p]:d!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q*u%ZQ+k%{Q,Z&bQ,b&jQ.c;QQ0h+^Q0l+`Q0w+lQ1n,`Q2{.[Q4v0rQ5k1gQ6i3PQ6u;RQ7h4wR8m6j&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]t!nQ!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_$v$si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ&S|Q'P!eS'V%f-TQ+k%{Q,Z&bQ0]*yQ0w+lQ0|+rQ1m,_Q1n,`Q4v0rQ5P1OQ5k1gQ5n1iQ5o1lQ7h4wQ7k4|Q8U5qQ9V7lR9b8RrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR,]&f&v^OPXYstuvwz!Z!`!g!j!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O']'m(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<[<][#[WZ#V#Y'S'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ%sxQ%wyS%||&RQ&Y!TQ'^!hQ'`!iQ(k#rS*V$x*ZS+e%x%yQ+i%{Q,S&]Q,W&_S-a'a'bQ.^(lQ/g*WQ0p+fQ0v+lQ0x+mQ0{+qQ1a,TS1e,X,YQ2i-bQ3y/cQ4u0rQ4y0uQ5O0}Q5j1fQ7Q3zQ7g4wQ7j4{Q9R7fR9y9S!O$zi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c!S%uy!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^Q+_%sQ+x&VQ+{&WQ,V&_Q.](kQ1`,SU1d,W,X,YQ3Q.^Q5e1aS5i1e1fQ8Q5j#W<^#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go<_:y:z:};P;T;V;X;`;b;d;h;j;l;n;rW%Ti%V*r<YS&V!Q&dQ&W!RQ&X!SR+v&T$w%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gT)v$u)wV*v%Z;Q;RU'V!e%f-TS(y#y#zQ+p&OS.V(g(hQ1V+|Q4g0ZR7p5U&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]$i$`c#X#d%n%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.t.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PT#SV#T&}kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q'T!eR2^-Qv!nQ!e!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_S*b$|*hS/t*c*jQ/}*kQ1X,OQ4^/|R4a0PnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&t!^Q'q!wS(m#t:kQ+c%vQ,Q&YQ,R&[Q-_'_Q-l'jS.g(r;[S0`+O;eQ0n+dQ1Z,PQ2O,oQ2Q,pQ2Y,{Q2g-`Q2j-dS4l0a;oQ4q0oS4t0q;pQ6T2[Q6X2hQ6^2oQ7e4rQ8b6VQ8c6YQ8f6_R9h8_$d$_c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(j#o'dU*o%R(q3mS+Y%n.tQ2|0hQ6f2{Q8l6iR9o8m$d$^c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(i#o'dS({#z$_S+X%n.tS.W(h(jQ.w)]Q0e+YR2y.X&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S#p]:dQ&o!XQ&p!YQ&r![Q&s!]R1v,kQ'[!hQ+[%sQ-]'^S.Y(k+_Q2e-[W2}.].^0g0iQ6W2fU6e2z2|3QS8i6f6hS9m8k8lS:U9l9oQ:^:VR:a:_U!vQ'Z-YT5Z1[5]!Q_OXZ`st!V!Z#c#g%b%j&d&f&m&o&p&r(d,h,m.P1w1z]!pQ!r'Z-Y1[5]T#p]:d%Y{OPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS(y#y#zS.V(g(h!s;v$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Y!tQ'Z-Y1[5]Q'f!rS'p!u!xS'r!y5_S-i'g'hQ-k'iR2p-jQ'o!tS(`#f1qS-h'f'rQ/f*VQ/r*bQ2q-kQ4O/gS4X/s/}Q7P3yS7[4_4aQ8y7QR9Q7_Q#vbQ'n!tS(_#f1qS(a#l*}Q+P%cQ+a%tQ+g%zU-g'f'o'rQ-{(`Q/e*VQ/q*bQ/w*eQ0m+bQ1b,US2n-h-kQ2v.TS3}/f/gS4W/r/}Q4Z/vQ4]/xQ5g1cQ6`2qQ7O3yQ7S4OS7W4X4aQ7]4`Q8O5hS8x7P7QQ8|7XQ9O7[Q9_8PQ9u8yQ9v8}Q9x9QQ:Q9`Q:Y9wQ;y;tQ<U;}R<V<OV!vQ'Z-Y%YaOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS#vz!j!r;s$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;y<[%YbOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gQ%cj!S%ty!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^S%zz!jQ+b%uQ,U&_W1c,V,W,X,YU5h1d1e1fS8P5i5jQ9`8Q!r;t$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q;}<ZR<O<[$|eOPXYstuvw!Z!`!g!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gY#aWZ#V#Y'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ,c&j!p;u$[$m)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;x'SS'W!e%fR2`-T%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8g!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q,b&jQ0h+^Q2{.[Q6i3PR8m6j!f$Uc#X%n'|(S(n(u)U)V)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!T:r)Z)l-O.t2W2Z3_3g3h3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!b$Wc#X%n'|(S(n(u)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!P:t)Z)l-O.t2W2Z3_3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!^$[c#X%n'|(S(n(u)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:eQ3x/az<])Z)l-O.t2W2Z3_3n3t6U6p6y6z7r8a8n8t8u9{:S<PQ<b<dR<c<e&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S$nh$oR3q.z'TgOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$jf$pQ$hfS)e$k)iR)q$pT$if$pT)g$k)i'ThOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$nh$oQ$qhR)p$o%YjOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8g!s<Z$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]#clOPXZst!Z!`!o#R#c#n#{$m%j&f&i&j&m&o&p&r&v'O'](z)n+S+^,e,h,m-^.[.{0[1_1o1p1r1t1w1z1|3P3p5Y5d5t5u5x6j7w7|8]!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gQ*z%_Q/W)zo3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!O$yi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cQ*[$zS*e$|*hQ*{%`Q/x*f#W;{#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;|:y:z:};P;T;V;X;`;b;d;h;j;l;n;rQ<Q<^Q<R<_Q<S<`R<T<a!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;rnoOXst!Z#c%j&m&o&p&r,h,m1w1zQ*_${Q,v&yQ,w&{R4R/k$v%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ+y&WQ1T+{Q5S1SR7o5TT*g$|*hS*g$|*hT5[1[5]S/v*d5YT4`0O7wQ+a%tQ/w*eQ0m+bQ1b,UQ5g1cQ8O5hQ9_8PR:Q9`!O%Oi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cr)}$v(s*O*n*|/i0U0V3W4P4j6}7`9t;z<W<XS0Q*m0R#W:|#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn:}:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!^;_(o)`*U*^._.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<e`;`3l6q6t6x8o9p9s:bS;i.a3UT;j6s8r!O%Qi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cv*P$v(s*Q*m*|/]/i0U0V3W4P4b4j6}7`9t;z<W<XS0S*n0T#W;O#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;P:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!b;a(o)`*U*^.`.a.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<ed;b3l6r6s6x8o8p9p9q9s:bS;k.b3VT;l6t8srnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ&a!UR,e&jrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR&a!UQ+}&XR1P+vsnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ1],SS5b1`1aU7x5`5a5eS9Z7z7{S9|9Y9]Q:Z9}R:`:[Q&h!VR,^&dR5n1iS%||&RR0x+mQ&m!WR,h&nR,n&sT1x,m1zR,r&tQ,q&tR2R,rQ't!zR-n'tSsOtQ#cXT%ms#cQ!}TR'v!}Q#QUR'x#QQ)w$uR/T)wQ#TVR'z#TQ#WWU(Q#W(R-uQ(R#XR-u(SQ-R'TR2_-RQ.j(sR3X.jQ.m(uS3[.m3]R3].nQ-Y'ZR2c-YY!rQ'Z-Y1[5]R'e!rS#^W%eU(X#^(Y-vQ(Y#_R-v(TQ-U'WR2a-Ut`OXst!V!Z#c%j&d&f&m&o&p&r,h,m1w1zS#gZ%bU#q`#g.PR.P(dQ(e#iQ-|(aW.U(e-|2t6bQ2t-}R6b2uQ)i$kR.|)iQ$ohR)o$oQ$bcU)_$b-q:xQ-q:eR:x)lQ/d*VW3{/d3|7R8zU3|/e/f/gS7R3}4OR8z7S$X)|$v(o(s)`*U*^*m*n*w*x*|.a.b.d.e.f/S/X/]/_/a/i/n0U0V0f1Q1S3R3S3T3W3l4P4Q4U4b4d4j5R5T6k6l6m6n6s6t6v6w6x6}7U7Y7`7b7d8o8p8q8{9P9p9q9r9s9t:X:b;z<W<X<d<eQ/l*^U4T/l4V7VQ4V/nR7V4UQ*h$|R/z*hr*O$v(s*m*n*|/i0U0V3W4P4j6}7`9t;z<W<X!^._(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<eU/^*O._6qa6q3l6s6t6x8o9p9s:bQ0R*mQ3U.aU4c0R3U8rR8r6sv*Q$v(s*m*n*|/]/i0U0V3W4P4b4j6}7`9t;z<W<X!b.`(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<eU/`*Q.`6re6r3l6s6t6x8o8p9p9q9s:bQ0T*nQ3V.bU4e0T3V8sR8s6tQ*s%UR0X*sQ4o0fR7c4oQ+U%hR0d+UQ5V1VS7q5V9XR9X7rQ,P&YR1Y,PQ5]1[R7u5]Q1h,ZS5l1h8SR8S5nQ0s+iW4x0s4z7i9TQ4z0vQ7i4yR9T7jQ+n%|R0y+nQ1z,mR5|1zYrOXst#cQ&q!ZQ+W%jQ,g&mQ,i&oQ,j&pQ,l&rQ1u,hS1x,m1zR5{1wQ%lpQ&u!_Q&x!aQ&z!bQ&|!cQ'l!tQ+V%iQ+c%vQ+u&SQ,]&hQ,t&wW-e'f'n'o'rQ-l'jQ/y*gQ0n+dS1k,^,aQ2S,sQ2T,vQ2U,wQ2j-dW2l-g-h-k-mQ4q0oQ4}0|Q5Q1QQ5f1bQ5p1mQ5z1vU6Z2k2n2qQ6^2oQ7e4rQ7m5PQ7n5RQ7t5[Q7}5gQ8T5oS8d6[6`Q8f6_Q9U7kQ9^8OQ9c8UQ9j8eQ9z9VQ:P9_Q:T9kR:]:QQ%vyQ'_!iQ'j!tU+d%w%x%yQ,{'QU-`'`'a'bS-d'f'pQ/p*bS0o+e+fQ2[,}S2h-a-bQ2o-iQ4Y/tQ4r0pQ6V2bQ6Y2iQ6_2pR7Z4^S$wi<YR*t%VU%Ui%V<YR0W*rQ$viS(o#u+`Q(s#wS)`$c$dQ*U$xQ*^${Q*m%OQ*n%QQ*w%[Q*x%]Q*|%aQ.a:|Q.b;OQ.d;SQ.e;UQ.f;WQ/S)uS/X){/ZQ/])}Q/_*PQ/a*RQ/i*YQ/n*`Q0U*pQ0V*qh0f+].Z1^3O5c6g7y8j9[9n:O:WQ1Q+wQ1S+zQ3R;_Q3S;aQ3T;cQ3W.iS3l:y:zQ4P/jQ4Q/kQ4U/mQ4b0QQ4d0SQ4j0^Q5R1RQ5T1UQ6k;gQ6l;iQ6m;kQ6n;mQ6s:}Q6t;PQ6v;TQ6w;VQ6x;XQ6}3xQ7U4SQ7Y4[Q7`4fQ7b4nQ7d4pQ8o;dQ8p;`Q8q;bQ8{7TQ9P7^Q9p;hQ9q;jQ9r;lQ9s;nQ9t8wQ:X;qQ:b;rQ;z<YQ<W<bQ<X<cQ<d<fR<e<gnpOXst!Z#c%j&m&o&p&r,h,m1w1zQ!fPS#eZ#nQ&w!`U'c!o5Y7wQ'y#RQ(|#{Q)m$mS,a&f&iQ,f&jQ,s&vQ,x'OQ-[']Q.p(zQ/Q)nQ0b+SQ0i+^Q1s,eQ2f-^Q2|.[Q3s.{Q4h0[Q5a1_Q5r1oQ5s1pQ5w1rQ5y1tQ6O1|Q6f3PQ6{3pQ7{5dQ8X5tQ8Y5uQ8[5xQ8l6jQ9]7|R9g8]#WcOPXZst!Z!`!o#c#n#{%j&f&i&j&m&o&p&r&v'O'](z+S+^,e,h,m-^.[0[1_1o1p1r1t1w1z1|3P5Y5d5t5u5x6j7w7|8]Q#XWQ#dYQ%nuQ%ovS%qw!gS'|#V(PQ(S#YQ(n#tQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)X$YQ)Z$[Q)^$aQ)b$eW)l$m)n.{3pQ+Z%pQ+o%}S-O'S2]Q-m'mS-r'}-tQ-w(VQ-y(^Q.h(rQ.n(vQ.r:cQ.t:fQ.u:gQ.v:jQ/V)yQ0_+OQ2W,yQ2Z,|Q2k-fQ2r-zQ3Y.lQ3_:kQ3`:lQ3a:mQ3b:nQ3c:oQ3d:pQ3e:qQ3f:rQ3g:sQ3h:tQ3i:uQ3j:vQ3k.sQ3n:{Q3o;YQ3t:wQ4k0aQ4s0qQ6U;ZQ6[2mQ6a2sQ6o3ZQ6p;[Q6y;^Q6z;eQ7r5WQ8a6SQ8e6]Q8n;fQ8t;oQ8u;pQ9k8gQ9{9WQ:S9iQ:e#RR<P<]R#ZWR'U!eY!tQ'Z-Y1[5]S'Q!e-QQ'f!rS'p!u!xS'r!y5_S,}'R'YS-i'g'hQ-k'iQ2b-WR2p-jR(t#wR(w#xQ!fQT-X'Z-Y]!qQ!r'Z-Y1[5]Q#o]R'd:dT#jZ%bS#iZ%bS%hm,dU(a#g#h#kS-}(b(cQ.R(dQ0c+TQ2u.OU2v.P.Q.SS6c2w2xR8h6d`#]W#V#Y%e'}(W+Q-xr#fZm#g#h#k%b(b(c(d+T.O.P.Q.S2w2x6dQ1q,dQ2X,zQ6Q2PQ8`6RT;w'S+RT#`W%eS#_W%eS(O#V(WS(T#Y+QS-P'S+RT-s'}-xT'X!e%fQ$kfR)s$pT)h$k)iR3r.zT*X$x*ZR*a${Q0g+]Q2z.ZQ5`1^Q6h3OQ7z5cQ8k6gQ9Y7yQ9l8jQ9}9[Q:V9nQ:[:OR:_:WnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&g!VR,]&dtmOXst!U!V!Z#c%j&d&m&o&p&r,h,m1w1zR,d&jT%im,dR1W+|R,[&bQ&Q|R+t&RR+j%{T&k!W&nT&l!W&nT1y,m1z",
	  nodeNames: "⚠ ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
	  maxTerm: 371,
	  context: trackNewline,
	  nodeProps: [
		["group", -26,8,16,18,65,201,205,209,210,212,215,218,228,230,236,238,240,242,245,251,257,259,261,263,265,267,268,"Statement",-32,12,13,28,31,32,38,48,51,52,54,59,67,75,79,81,83,84,106,107,116,117,134,137,139,140,141,142,144,145,164,165,167,"Expression",-23,27,29,33,37,39,41,168,170,172,173,175,176,177,179,180,181,183,184,185,195,197,199,200,"Type",-3,87,99,105,"ClassItem"],
		["openedBy", 22,"<",34,"InterpolationStart",53,"[",57,"{",72,"(",157,"JSXStartCloseTag"],
		["closedBy", 23,">",36,"InterpolationEnd",47,"]",58,"}",73,")",162,"JSXEndTag"]
	  ],
	  propSources: [jsHighlight],
	  skippedNodes: [0,4,5,271],
	  repeatNodeCount: 37,
	  tokenData: "$Fj(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#8g!R![#:v![!]#Gv!]!^#IS!^!_#J^!_!`#Ns!`!a$#_!a!b$(l!b!c$,k!c!}Er!}#O$-u#O#P$/P#P#Q$4h#Q#R$5r#R#SEr#S#T$7P#T#o$8Z#o#p$<k#p#q$=a#q#r$>q#r#s$?}#s$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$I|Er$I|$I}$Dd$I}$JO$Dd$JO$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(n%d_$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$f&j(Op(R!b't(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST(P#S$f&j'u(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$f&j(Op(R!b'u(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$f&j!o$Ip(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|3l_'}$(n$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$f&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$a`$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$a``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$a`$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(R!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$a`(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k#%|:hh$f&j(Op(R!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$f&j(Op(R!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$f&j(R!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$f&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(R!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$f&j(OpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(OpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Op(R!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S#%|C}i$f&j(g!L^(Op(R!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr#%|EoP;=`<%lCr(CSFRk$f&j(Op(R!b$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$f&j(Op(R!b$Y#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv(CSJPP;=`<%lEr%#SJ_`$f&j(Op(R!b#l$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SKl_$f&j$O$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&COLva(p&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SNW`$f&j#x$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|! c_(Q$)`$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$f&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$a`$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(OpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$a`(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b(*Q!'t_!k(!b$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l!)O_!jM|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!*[b$f&j(Op(R!b'|#)d#m$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!+o`$f&j(Op(R!b#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!,|`$f&j(Op(R!bn&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!.Z_!Y&;l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!/ec$f&j(Op(R!b|'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!0ya$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!2Z_!XMt$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!3eg$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!5Vg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!6wc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!8_c$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!9uf$f&j(Op(R!b#k$IdOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpxz!;Zz{#,f{!P!;Z!P!Q#-{!Q!^!;Z!^!_#'Z!_!`#5k!`!a#7Q!a!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(r!;fb$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(Q!<w`$f&j(R!b!USOY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eb!Q!^!<n!^!_!GY!_!}!<n!}#O!Ja#O#P!Dj#P#o!<n#o#p!GY#p;'S!<n;'S;=`!Kj<%lO!<n&n!>Q^$f&j!USOY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@Y!_!}!=y!}#O!Bw#O#P!Dj#P#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!?Ta$f&j!USO!^&c!_#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&cS!@_X!USOY!@YZ!P!@Y!P!Q!@z!Q!}!@Y!}#O!Ac#O#P!Bb#P;'S!@Y;'S;=`!Bq<%lO!@YS!APU!US#Z#[!@z#]#^!@z#a#b!@z#g#h!@z#i#j!@z#m#n!@zS!AfVOY!AcZ#O!Ac#O#P!A{#P#Q!@Y#Q;'S!Ac;'S;=`!B[<%lO!AcS!BOSOY!AcZ;'S!Ac;'S;=`!B[<%lO!AcS!B_P;=`<%l!AcS!BeSOY!@YZ;'S!@Y;'S;=`!Bq<%lO!@YS!BtP;=`<%l!@Y&n!B|[$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#O!Bw#O#P!Cr#P#Q!=y#Q#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!CwX$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!DgP;=`<%l!Bw&n!DoX$f&jOY!=yYZ&cZ!^!=y!^!_!@Y!_#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!E_P;=`<%l!=y(Q!Eki$f&j(R!b!USOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!Eb#[#]&}#]#^!Eb#^#a&}#a#b!Eb#b#g&}#g#h!Eb#h#i&}#i#j!Eb#j#m&}#m#n!Eb#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!GaZ(R!b!USOY!GYZw!GYwx!@Yx!P!GY!P!Q!HS!Q!}!GY!}#O!Ic#O#P!Bb#P;'S!GY;'S;=`!JZ<%lO!GY!f!HZb(R!b!USOY'}Zw'}x#O'}#P#Z'}#Z#[!HS#[#]'}#]#^!HS#^#a'}#a#b!HS#b#g'}#g#h!HS#h#i'}#i#j!HS#j#m'}#m#n!HS#n;'S'};'S;=`(f<%lO'}!f!IhX(R!bOY!IcZw!Icwx!Acx#O!Ic#O#P!A{#P#Q!GY#Q;'S!Ic;'S;=`!JT<%lO!Ic!f!JWP;=`<%l!Ic!f!J^P;=`<%l!GY(Q!Jh^$f&j(R!bOY!JaYZ&cZw!Jawx!Bwx!^!Ja!^!_!Ic!_#O!Ja#O#P!Cr#P#Q!<n#Q#o!Ja#o#p!Ic#p;'S!Ja;'S;=`!Kd<%lO!Ja(Q!KgP;=`<%l!Ja(Q!KmP;=`<%l!<n'`!Ky`$f&j(Op!USOY!KpYZ&cZr!Kprs!=ys!P!Kp!P!Q!L{!Q!^!Kp!^!_!Ns!_!}!Kp!}#O##z#O#P!Dj#P#o!Kp#o#p!Ns#p;'S!Kp;'S;=`#%T<%lO!Kp'`!MUi$f&j(Op!USOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!L{#[#](r#]#^!L{#^#a(r#a#b!L{#b#g(r#g#h!L{#h#i(r#i#j!L{#j#m(r#m#n!L{#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!NzZ(Op!USOY!NsZr!Nsrs!@Ys!P!Ns!P!Q# m!Q!}!Ns!}#O#!|#O#P!Bb#P;'S!Ns;'S;=`##t<%lO!Nst# tb(Op!USOY)rZr)rs#O)r#P#Z)r#Z#[# m#[#])r#]#^# m#^#a)r#a#b# m#b#g)r#g#h# m#h#i)r#i#j# m#j#m)r#m#n# m#n;'S)r;'S;=`*Z<%lO)rt##RX(OpOY#!|Zr#!|rs!Acs#O#!|#O#P!A{#P#Q!Ns#Q;'S#!|;'S;=`##n<%lO#!|t##qP;=`<%l#!|t##wP;=`<%l!Ns'`#$R^$f&j(OpOY##zYZ&cZr##zrs!Bws!^##z!^!_#!|!_#O##z#O#P!Cr#P#Q!Kp#Q#o##z#o#p#!|#p;'S##z;'S;=`#$}<%lO##z'`#%QP;=`<%l##z'`#%WP;=`<%l!Kp(r#%fk$f&j(Op(R!b!USOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[#%Z#[#]%Z#]#^#%Z#^#a%Z#a#b#%Z#b#g%Z#g#h#%Z#h#i%Z#i#j#%Z#j#m%Z#m#n#%Z#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W#'d](Op(R!b!USOY#'ZZr#'Zrs!GYsw#'Zwx!Nsx!P#'Z!P!Q#(]!Q!}#'Z!}#O#)w#O#P!Bb#P;'S#'Z;'S;=`#*w<%lO#'Z#W#(fe(Op(R!b!USOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[#(]#[#]*g#]#^#(]#^#a*g#a#b#(]#b#g*g#g#h#(]#h#i*g#i#j#(]#j#m*g#m#n#(]#n;'S*g;'S;=`+Z<%lO*g#W#*OZ(Op(R!bOY#)wZr#)wrs!Icsw#)wwx#!|x#O#)w#O#P!A{#P#Q#'Z#Q;'S#)w;'S;=`#*q<%lO#)w#W#*tP;=`<%l#)w#W#*zP;=`<%l#'Z(r#+W`$f&j(Op(R!bOY#*}YZ&cZr#*}rs!Jasw#*}wx##zx!^#*}!^!_#)w!_#O#*}#O#P!Cr#P#Q!;Z#Q#o#*}#o#p#)w#p;'S#*};'S;=`#,Y<%lO#*}(r#,]P;=`<%l#*}(r#,cP;=`<%l!;Z(CS#,sb$f&j(Op(R!b'v(;d!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(CS#.W_$f&j(Op(R!bS(;dOY#-{YZ&cZr#-{rs#/Vsw#-{wx#2gx!^#-{!^!_#4f!_#O#-{#O#P#0X#P#o#-{#o#p#4f#p;'S#-{;'S;=`#5e<%lO#-{(Bb#/`]$f&j(R!bS(;dOY#/VYZ&cZw#/Vwx#0Xx!^#/V!^!_#1j!_#O#/V#O#P#0X#P#o#/V#o#p#1j#p;'S#/V;'S;=`#2a<%lO#/V(AO#0`X$f&jS(;dOY#0XYZ&cZ!^#0X!^!_#0{!_#o#0X#o#p#0{#p;'S#0X;'S;=`#1d<%lO#0X(;d#1QSS(;dOY#0{Z;'S#0{;'S;=`#1^<%lO#0{(;d#1aP;=`<%l#0{(AO#1gP;=`<%l#0X(<v#1qW(R!bS(;dOY#1jZw#1jwx#0{x#O#1j#O#P#0{#P;'S#1j;'S;=`#2Z<%lO#1j(<v#2^P;=`<%l#1j(Bb#2dP;=`<%l#/V(Ap#2p]$f&j(OpS(;dOY#2gYZ&cZr#2grs#0Xs!^#2g!^!_#3i!_#O#2g#O#P#0X#P#o#2g#o#p#3i#p;'S#2g;'S;=`#4`<%lO#2g(<U#3pW(OpS(;dOY#3iZr#3irs#0{s#O#3i#O#P#0{#P;'S#3i;'S;=`#4Y<%lO#3i(<U#4]P;=`<%l#3i(Ap#4cP;=`<%l#2g(=h#4oY(Op(R!bS(;dOY#4fZr#4frs#1jsw#4fwx#3ix#O#4f#O#P#0{#P;'S#4f;'S;=`#5_<%lO#4f(=h#5bP;=`<%l#4f(CS#5hP;=`<%l#-{%#W#5xb$f&j$O$Id(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z+h#7_b$W#t$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z$/l#8rp$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#U%Z#U#V#>Q#V#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#d#AY#d#l%Z#l#m#D[#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;Rk$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#=R_$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>Zd$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#?tf$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Acc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Bye$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Deg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#FXi$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#HT_!d$b$f&j#|%<f(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#I__`l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^#Jk^g!*v!h'.r(Op(R!b(tSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Kg!Q!^*g!^!_#L]!_!`#M}!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#KpX$h&j(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#LfZ#n$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#MX!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#MbX$O$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#NWX#o$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh$ Oa#[%?x$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$!T!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W$!`_#g$Ih$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh$#nafBf#o$Id$c#|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$$s!`!a$%}!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$%O_#o$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$&Ya#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$'_!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$'j`#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$(wc(h$Ip$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$*S!P!^%Z!^!_*g!_!a%Z!a!b$+^!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$*__}'#p$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$+i`$f&j#y$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$,v_!{!Ln$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$.Q_!P(8n$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/UZ$f&jO!^$/w!^!_$0_!_#i$/w#i#j$0d#j#l$/w#l#m$2V#m#o$/w#o#p$0_#p;'S$/w;'S;=`$4b<%lO$/w(n$0OT^#S$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0dO^#S(n$0i[$f&jO!Q&c!Q![$1_![!^&c!_!c&c!c!i$1_!i#T&c#T#Z$1_#Z#o&c#o#p$3u#p;'S&c;'S;=`&w<%lO&c(n$1dZ$f&jO!Q&c!Q![$2V![!^&c!_!c&c!c!i$2V!i#T&c#T#Z$2V#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2[Z$f&jO!Q&c!Q![$2}![!^&c!_!c&c!c!i$2}!i#T&c#T#Z$2}#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3SZ$f&jO!Q&c!Q![$/w![!^&c!_!c&c!c!i$/w!i#T&c#T#Z$/w#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$3xR!Q![$4R!c!i$4R#T#Z$4R#S$4US!Q![$4R!c!i$4R#T#Z$4R#q#r$0_(n$4eP;=`<%l$/w!2r$4s_!V!+S$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$5}`#v$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$7[_$f&j(Op(R!b(X&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$8jk$f&j(Op(R!b'{&;d$[#t([!LYOY%ZYZ&cZr%Zrs&}st%Ztu$8Zuw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$8Z![!^%Z!^!_*g!_!c%Z!c!}$8Z!}#O%Z#O#P&c#P#R%Z#R#S$8Z#S#T%Z#T#o$8Z#o#p*g#p$g%Z$g;'S$8Z;'S;=`$<e<%lO$8Z+d$:jk$f&j(Op(R!b$[#tOY%ZYZ&cZr%Zrs&}st%Ztu$:_uw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$:_![!^%Z!^!_*g!_!c%Z!c!}$:_!}#O%Z#O#P&c#P#R%Z#R#S$:_#S#T%Z#T#o$:_#o#p*g#p$g%Z$g;'S$:_;'S;=`$<_<%lO$:_+d$<bP;=`<%l$:_(CS$<hP;=`<%l$8Z!5p$<tX![!3l(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g&CO$=la(o&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+^#q;'S%Z;'S;=`+a<%lO%Z%#`$?O_!Z$I`r`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$@Y_!pS$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$Aj|$f&j(Op(R!b't(;d$Y#t'{&;d([!LYOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(CS$Duk$f&j(Op(R!b'u(;d$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
	  tokenizers: [noSemicolon, incdecToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, insertSemicolon, new lr.LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(Z~~", 141, 332), new lr.LocalTokenGroup("j~RQYZXz{^~^O'x~~aP!P!Qd~iO'y~~", 25, 315)],
	  topRules: {"Script":[0,6],"SingleExpression":[1,269],"SingleClassItem":[2,270]},
	  dialects: {jsx: 0, ts: 14602},
	  dynamicPrecedences: {"69":1,"79":1,"81":1,"165":1,"193":1},
	  specialized: [{term: 319, get: (value) => spec_identifier[value] || -1},{term: 334, get: (value) => spec_word[value] || -1},{term: 70, get: (value) => spec_LessThan[value] || -1}],
	  tokenPrec: 14626
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/json/dist/index.cjs":
	/*!*********************************************************!*\
	  !*** ../editor/node_modules/@lezer/json/dist/index.cjs ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	const jsonHighlighting = highlight.styleTags({
	  String: highlight.tags.string,
	  Number: highlight.tags.number,
	  "True False": highlight.tags.bool,
	  PropertyName: highlight.tags.propertyName,
	  Null: highlight.tags.null,
	  ",": highlight.tags.separator,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
	  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
	  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
	  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
	  maxTerm: 25,
	  nodeProps: [
		["openedBy", 7,"{",12,"["],
		["closedBy", 8,"}",13,"]"]
	  ],
	  propSources: [jsonHighlighting],
	  skippedNodes: [0],
	  repeatNodeCount: 2,
	  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
	  tokenizers: [0],
	  topRules: {"JsonText":[0,1]},
	  tokenPrec: 0
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/lr/dist/index.cjs":
	/*!*******************************************************!*\
	  !*** ../editor/node_modules/@lezer/lr/dist/index.cjs ***!
	  \*******************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	
	/**
	A parse stack. These are used internally by the parser to track
	parsing progress. They also provide some properties and methods
	that external code such as a tokenizer can use to get information
	about the parse state.
	*/
	class Stack {
		/**
		@internal
		*/
		constructor(
		/**
		The parse that this stack is part of @internal
		*/
		p, 
		/**
		Holds state, input pos, buffer index triplets for all but the
		top state @internal
		*/
		stack, 
		/**
		The current parse state @internal
		*/
		state, 
		// The position at which the next reduce should take place. This
		// can be less than `this.pos` when skipped expressions have been
		// added to the stack (which should be moved outside of the next
		// reduction)
		/**
		@internal
		*/
		reducePos, 
		/**
		The input position up to which this stack has parsed.
		*/
		pos, 
		/**
		The dynamic score of the stack, including dynamic precedence
		and error-recovery penalties
		@internal
		*/
		score, 
		// The output buffer. Holds (type, start, end, size) quads
		// representing nodes created by the parser, where `size` is
		// amount of buffer array entries covered by this node.
		/**
		@internal
		*/
		buffer, 
		// The base offset of the buffer. When stacks are split, the split
		// instance shared the buffer history with its parent up to
		// `bufferBase`, which is the absolute offset (including the
		// offset of previous splits) into the buffer at which this stack
		// starts writing.
		/**
		@internal
		*/
		bufferBase, 
		/**
		@internal
		*/
		curContext, 
		/**
		@internal
		*/
		lookAhead = 0, 
		// A parent stack from which this was split off, if any. This is
		// set up so that it always points to a stack that has some
		// additional buffer content, never to a stack with an equal
		// `bufferBase`.
		/**
		@internal
		*/
		parent) {
			this.p = p;
			this.stack = stack;
			this.state = state;
			this.reducePos = reducePos;
			this.pos = pos;
			this.score = score;
			this.buffer = buffer;
			this.bufferBase = bufferBase;
			this.curContext = curContext;
			this.lookAhead = lookAhead;
			this.parent = parent;
		}
		/**
		@internal
		*/
		toString() {
			return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
		}
		// Start an empty stack
		/**
		@internal
		*/
		static start(p, state, pos = 0) {
			let cx = p.parser.context;
			return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
		}
		/**
		The stack's current [context](#lr.ContextTracker) value, if
		any. Its type will depend on the context tracker's type
		parameter, or it will be `null` if there is no context
		tracker.
		*/
		get context() { return this.curContext ? this.curContext.context : null; }
		// Push a state onto the stack, tracking its start position as well
		// as the buffer base at that point.
		/**
		@internal
		*/
		pushState(state, start) {
			this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
			this.state = state;
		}
		// Apply a reduce action
		/**
		@internal
		*/
		reduce(action) {
			var _a;
			let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
			let { parser } = this.p;
			let dPrec = parser.dynamicPrecedence(type);
			if (dPrec)
				this.score += dPrec;
			if (depth == 0) {
				this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
				// Zero-depth reductions are a special case—they add stuff to
				// the stack without popping anything off.
				if (type < parser.minRepeatTerm)
					this.storeNode(type, this.reducePos, this.reducePos, 4, true);
				this.reduceContext(type, this.reducePos);
				return;
			}
			// Find the base index into `this.stack`, content after which will
			// be dropped. Note that with `StayFlag` reductions we need to
			// consume two extra frames (the dummy parent node for the skipped
			// expression and the state that we'll be staying in, which should
			// be moved to `this.state`).
			let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
			let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
			// This is a kludge to try and detect overly deep left-associative
			// trees, which will not increase the parse stack depth and thus
			// won't be caught by the regular stack-depth limit check.
			if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
				if (start == this.p.lastBigReductionStart) {
					this.p.bigReductionCount++;
					this.p.lastBigReductionSize = size;
				}
				else if (this.p.lastBigReductionSize < size) {
					this.p.bigReductionCount = 1;
					this.p.lastBigReductionStart = start;
					this.p.lastBigReductionSize = size;
				}
			}
			let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
			// Store normal terms or `R -> R R` repeat reductions
			if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
				let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
				this.storeNode(type, start, pos, count + 4, true);
			}
			if (action & 262144 /* Action.StayFlag */) {
				this.state = this.stack[base];
			}
			else {
				let baseStateID = this.stack[base - 3];
				this.state = parser.getGoto(baseStateID, type, true);
			}
			while (this.stack.length > base)
				this.stack.pop();
			this.reduceContext(type, start);
		}
		// Shift a value into the buffer
		/**
		@internal
		*/
		storeNode(term, start, end, size = 4, isReduce = false) {
			if (term == 0 /* Term.Err */ &&
				(!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
				// Try to omit/merge adjacent error nodes
				let cur = this, top = this.buffer.length;
				if (top == 0 && cur.parent) {
					top = cur.bufferBase - cur.parent.bufferBase;
					cur = cur.parent;
				}
				if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
					if (start == end)
						return;
					if (cur.buffer[top - 2] >= start) {
						cur.buffer[top - 2] = end;
						return;
					}
				}
			}
			if (!isReduce || this.pos == end) { // Simple case, just append
				this.buffer.push(term, start, end, size);
			}
			else { // There may be skipped nodes that have to be moved forward
				let index = this.buffer.length;
				if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)
					while (index > 0 && this.buffer[index - 2] > end) {
						// Move this record forward
						this.buffer[index] = this.buffer[index - 4];
						this.buffer[index + 1] = this.buffer[index - 3];
						this.buffer[index + 2] = this.buffer[index - 2];
						this.buffer[index + 3] = this.buffer[index - 1];
						index -= 4;
						if (size > 4)
							size -= 4;
					}
				this.buffer[index] = term;
				this.buffer[index + 1] = start;
				this.buffer[index + 2] = end;
				this.buffer[index + 3] = size;
			}
		}
		// Apply a shift action
		/**
		@internal
		*/
		shift(action, type, start, end) {
			if (action & 131072 /* Action.GotoFlag */) {
				this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
			}
			else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
				let nextState = action, { parser } = this.p;
				if (end > this.pos || type <= parser.maxNode) {
					this.pos = end;
					if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
						this.reducePos = end;
				}
				this.pushState(nextState, start);
				this.shiftContext(type, start);
				if (type <= parser.maxNode)
					this.buffer.push(type, start, end, 4);
			}
			else { // Shift-and-stay, which means this is a skipped token
				this.pos = end;
				this.shiftContext(type, start);
				if (type <= this.p.parser.maxNode)
					this.buffer.push(type, start, end, 4);
			}
		}
		// Apply an action
		/**
		@internal
		*/
		apply(action, next, nextStart, nextEnd) {
			if (action & 65536 /* Action.ReduceFlag */)
				this.reduce(action);
			else
				this.shift(action, next, nextStart, nextEnd);
		}
		// Add a prebuilt (reused) node into the buffer.
		/**
		@internal
		*/
		useNode(value, next) {
			let index = this.p.reused.length - 1;
			if (index < 0 || this.p.reused[index] != value) {
				this.p.reused.push(value);
				index++;
			}
			let start = this.pos;
			this.reducePos = this.pos = start + value.length;
			this.pushState(next, start);
			this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
			if (this.curContext)
				this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
		}
		// Split the stack. Due to the buffer sharing and the fact
		// that `this.stack` tends to stay quite shallow, this isn't very
		// expensive.
		/**
		@internal
		*/
		split() {
			let parent = this;
			let off = parent.buffer.length;
			// Because the top of the buffer (after this.pos) may be mutated
			// to reorder reductions and skipped tokens, and shared buffers
			// should be immutable, this copies any outstanding skipped tokens
			// to the new buffer, and puts the base pointer before them.
			while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
				off -= 4;
			let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
			// Make sure parent points to an actual parent with content, if there is such a parent.
			while (parent && base == parent.bufferBase)
				parent = parent.parent;
			return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
		}
		// Try to recover from an error by 'deleting' (ignoring) one token.
		/**
		@internal
		*/
		recoverByDelete(next, nextEnd) {
			let isNode = next <= this.p.parser.maxNode;
			if (isNode)
				this.storeNode(next, this.pos, nextEnd, 4);
			this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
			this.pos = this.reducePos = nextEnd;
			this.score -= 190 /* Recover.Delete */;
		}
		/**
		Check if the given term would be able to be shifted (optionally
		after some reductions) on this stack. This can be useful for
		external tokenizers that want to make sure they only provide a
		given token when it applies.
		*/
		canShift(term) {
			for (let sim = new SimulatedStack(this);;) {
				let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
				if (action == 0)
					return false;
				if ((action & 65536 /* Action.ReduceFlag */) == 0)
					return true;
				sim.reduce(action);
			}
		}
		// Apply up to Recover.MaxNext recovery actions that conceptually
		// inserts some missing token or rule.
		/**
		@internal
		*/
		recoverByInsert(next) {
			if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
				return [];
			let nextStates = this.p.parser.nextStates(this.state);
			if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
				let best = [];
				for (let i = 0, s; i < nextStates.length; i += 2) {
					if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
						best.push(nextStates[i], s);
				}
				if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
					for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
						let s = nextStates[i + 1];
						if (!best.some((v, i) => (i & 1) && v == s))
							best.push(nextStates[i], s);
					}
				nextStates = best;
			}
			let result = [];
			for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
				let s = nextStates[i + 1];
				if (s == this.state)
					continue;
				let stack = this.split();
				stack.pushState(s, this.pos);
				stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
				stack.shiftContext(nextStates[i], this.pos);
				stack.reducePos = this.pos;
				stack.score -= 200 /* Recover.Insert */;
				result.push(stack);
			}
			return result;
		}
		// Force a reduce, if possible. Return false if that can't
		// be done.
		/**
		@internal
		*/
		forceReduce() {
			let { parser } = this.p;
			let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
			if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
				return false;
			if (!parser.validAction(this.state, reduce)) {
				let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
				let target = this.stack.length - depth * 3;
				if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
					let backup = this.findForcedReduction();
					if (backup == null)
						return false;
					reduce = backup;
				}
				this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
				this.score -= 100 /* Recover.Reduce */;
			}
			this.reducePos = this.pos;
			this.reduce(reduce);
			return true;
		}
		/**
		Try to scan through the automaton to find some kind of reduction
		that can be applied. Used when the regular ForcedReduce field
		isn't a valid action. @internal
		*/
		findForcedReduction() {
			let { parser } = this.p, seen = [];
			let explore = (state, depth) => {
				if (seen.includes(state))
					return;
				seen.push(state);
				return parser.allActions(state, (action) => {
					if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
					else if (action & 65536 /* Action.ReduceFlag */) {
						let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
						if (rDepth > 1) {
							let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
							if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
								return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
						}
					}
					else {
						let found = explore(action, depth + 1);
						if (found != null)
							return found;
					}
				});
			};
			return explore(this.state, 0);
		}
		/**
		@internal
		*/
		forceAll() {
			while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
				if (!this.forceReduce()) {
					this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
					break;
				}
			}
			return this;
		}
		/**
		Check whether this state has no further actions (assumed to be a direct descendant of the
		top state, since any other states must be able to continue
		somehow). @internal
		*/
		get deadEnd() {
			if (this.stack.length != 3)
				return false;
			let { parser } = this.p;
			return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
				!parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
		}
		/**
		Restart the stack (put it back in its start state). Only safe
		when this.stack.length == 3 (state is directly below the top
		state). @internal
		*/
		restart() {
			this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
			this.state = this.stack[0];
			this.stack.length = 0;
		}
		/**
		@internal
		*/
		sameState(other) {
			if (this.state != other.state || this.stack.length != other.stack.length)
				return false;
			for (let i = 0; i < this.stack.length; i += 3)
				if (this.stack[i] != other.stack[i])
					return false;
			return true;
		}
		/**
		Get the parser used by this stack.
		*/
		get parser() { return this.p.parser; }
		/**
		Test whether a given dialect (by numeric ID, as exported from
		the terms file) is enabled.
		*/
		dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
		shiftContext(term, start) {
			if (this.curContext)
				this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
		}
		reduceContext(term, start) {
			if (this.curContext)
				this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
		}
		/**
		@internal
		*/
		emitContext() {
			let last = this.buffer.length - 1;
			if (last < 0 || this.buffer[last] != -3)
				this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
		}
		/**
		@internal
		*/
		emitLookAhead() {
			let last = this.buffer.length - 1;
			if (last < 0 || this.buffer[last] != -4)
				this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
		}
		updateContext(context) {
			if (context != this.curContext.context) {
				let newCx = new StackContext(this.curContext.tracker, context);
				if (newCx.hash != this.curContext.hash)
					this.emitContext();
				this.curContext = newCx;
			}
		}
		/**
		@internal
		*/
		setLookAhead(lookAhead) {
			if (lookAhead > this.lookAhead) {
				this.emitLookAhead();
				this.lookAhead = lookAhead;
			}
		}
		/**
		@internal
		*/
		close() {
			if (this.curContext && this.curContext.tracker.strict)
				this.emitContext();
			if (this.lookAhead > 0)
				this.emitLookAhead();
		}
	}
	class StackContext {
		constructor(tracker, context) {
			this.tracker = tracker;
			this.context = context;
			this.hash = tracker.strict ? tracker.hash(context) : 0;
		}
	}
	// Used to cheaply run some reductions to scan ahead without mutating
	// an entire stack
	class SimulatedStack {
		constructor(start) {
			this.start = start;
			this.state = start.state;
			this.stack = start.stack;
			this.base = this.stack.length;
		}
		reduce(action) {
			let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
			if (depth == 0) {
				if (this.stack == this.start.stack)
					this.stack = this.stack.slice();
				this.stack.push(this.state, 0, 0);
				this.base += 3;
			}
			else {
				this.base -= (depth - 1) * 3;
			}
			let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
			this.state = goto;
		}
	}
	// This is given to `Tree.build` to build a buffer, and encapsulates
	// the parent-stack-walking necessary to read the nodes.
	class StackBufferCursor {
		constructor(stack, pos, index) {
			this.stack = stack;
			this.pos = pos;
			this.index = index;
			this.buffer = stack.buffer;
			if (this.index == 0)
				this.maybeNext();
		}
		static create(stack, pos = stack.bufferBase + stack.buffer.length) {
			return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
		}
		maybeNext() {
			let next = this.stack.parent;
			if (next != null) {
				this.index = this.stack.bufferBase - next.bufferBase;
				this.stack = next;
				this.buffer = next.buffer;
			}
		}
		get id() { return this.buffer[this.index - 4]; }
		get start() { return this.buffer[this.index - 3]; }
		get end() { return this.buffer[this.index - 2]; }
		get size() { return this.buffer[this.index - 1]; }
		next() {
			this.index -= 4;
			this.pos -= 4;
			if (this.index == 0)
				this.maybeNext();
		}
		fork() {
			return new StackBufferCursor(this.stack, this.pos, this.index);
		}
	}
	
	// See lezer-generator/src/encode.ts for comments about the encoding
	// used here
	function decodeArray(input, Type = Uint16Array) {
		if (typeof input != "string")
			return input;
		let array = null;
		for (let pos = 0, out = 0; pos < input.length;) {
			let value = 0;
			for (;;) {
				let next = input.charCodeAt(pos++), stop = false;
				if (next == 126 /* Encode.BigValCode */) {
					value = 65535 /* Encode.BigVal */;
					break;
				}
				if (next >= 92 /* Encode.Gap2 */)
					next--;
				if (next >= 34 /* Encode.Gap1 */)
					next--;
				let digit = next - 32 /* Encode.Start */;
				if (digit >= 46 /* Encode.Base */) {
					digit -= 46 /* Encode.Base */;
					stop = true;
				}
				value += digit;
				if (stop)
					break;
				value *= 46 /* Encode.Base */;
			}
			if (array)
				array[out++] = value;
			else
				array = new Type(value);
		}
		return array;
	}
	
	class CachedToken {
		constructor() {
			this.start = -1;
			this.value = -1;
			this.end = -1;
			this.extended = -1;
			this.lookAhead = 0;
			this.mask = 0;
			this.context = 0;
		}
	}
	const nullToken = new CachedToken;
	/**
	[Tokenizers](#lr.ExternalTokenizer) interact with the input
	through this interface. It presents the input as a stream of
	characters, tracking lookahead and hiding the complexity of
	[ranges](#common.Parser.parse^ranges) from tokenizer code.
	*/
	class InputStream {
		/**
		@internal
		*/
		constructor(
		/**
		@internal
		*/
		input, 
		/**
		@internal
		*/
		ranges) {
			this.input = input;
			this.ranges = ranges;
			/**
			@internal
			*/
			this.chunk = "";
			/**
			@internal
			*/
			this.chunkOff = 0;
			/**
			Backup chunk
			*/
			this.chunk2 = "";
			this.chunk2Pos = 0;
			/**
			The character code of the next code unit in the input, or -1
			when the stream is at the end of the input.
			*/
			this.next = -1;
			/**
			@internal
			*/
			this.token = nullToken;
			this.rangeIndex = 0;
			this.pos = this.chunkPos = ranges[0].from;
			this.range = ranges[0];
			this.end = ranges[ranges.length - 1].to;
			this.readNext();
		}
		/**
		@internal
		*/
		resolveOffset(offset, assoc) {
			let range = this.range, index = this.rangeIndex;
			let pos = this.pos + offset;
			while (pos < range.from) {
				if (!index)
					return null;
				let next = this.ranges[--index];
				pos -= range.from - next.to;
				range = next;
			}
			while (assoc < 0 ? pos > range.to : pos >= range.to) {
				if (index == this.ranges.length - 1)
					return null;
				let next = this.ranges[++index];
				pos += next.from - range.to;
				range = next;
			}
			return pos;
		}
		/**
		@internal
		*/
		clipPos(pos) {
			if (pos >= this.range.from && pos < this.range.to)
				return pos;
			for (let range of this.ranges)
				if (range.to > pos)
					return Math.max(pos, range.from);
			return this.end;
		}
		/**
		Look at a code unit near the stream position. `.peek(0)` equals
		`.next`, `.peek(-1)` gives you the previous character, and so
		on.
		
		Note that looking around during tokenizing creates dependencies
		on potentially far-away content, which may reduce the
		effectiveness incremental parsing—when looking forward—or even
		cause invalid reparses when looking backward more than 25 code
		units, since the library does not track lookbehind.
		*/
		peek(offset) {
			let idx = this.chunkOff + offset, pos, result;
			if (idx >= 0 && idx < this.chunk.length) {
				pos = this.pos + offset;
				result = this.chunk.charCodeAt(idx);
			}
			else {
				let resolved = this.resolveOffset(offset, 1);
				if (resolved == null)
					return -1;
				pos = resolved;
				if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
					result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
				}
				else {
					let i = this.rangeIndex, range = this.range;
					while (range.to <= pos)
						range = this.ranges[++i];
					this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
					if (pos + this.chunk2.length > range.to)
						this.chunk2 = this.chunk2.slice(0, range.to - pos);
					result = this.chunk2.charCodeAt(0);
				}
			}
			if (pos >= this.token.lookAhead)
				this.token.lookAhead = pos + 1;
			return result;
		}
		/**
		Accept a token. By default, the end of the token is set to the
		current stream position, but you can pass an offset (relative to
		the stream position) to change that.
		*/
		acceptToken(token, endOffset = 0) {
			let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
			if (end == null || end < this.token.start)
				throw new RangeError("Token end out of bounds");
			this.token.value = token;
			this.token.end = end;
		}
		getChunk() {
			if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
				let { chunk, chunkPos } = this;
				this.chunk = this.chunk2;
				this.chunkPos = this.chunk2Pos;
				this.chunk2 = chunk;
				this.chunk2Pos = chunkPos;
				this.chunkOff = this.pos - this.chunkPos;
			}
			else {
				this.chunk2 = this.chunk;
				this.chunk2Pos = this.chunkPos;
				let nextChunk = this.input.chunk(this.pos);
				let end = this.pos + nextChunk.length;
				this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
				this.chunkPos = this.pos;
				this.chunkOff = 0;
			}
		}
		readNext() {
			if (this.chunkOff >= this.chunk.length) {
				this.getChunk();
				if (this.chunkOff == this.chunk.length)
					return this.next = -1;
			}
			return this.next = this.chunk.charCodeAt(this.chunkOff);
		}
		/**
		Move the stream forward N (defaults to 1) code units. Returns
		the new value of [`next`](#lr.InputStream.next).
		*/
		advance(n = 1) {
			this.chunkOff += n;
			while (this.pos + n >= this.range.to) {
				if (this.rangeIndex == this.ranges.length - 1)
					return this.setDone();
				n -= this.range.to - this.pos;
				this.range = this.ranges[++this.rangeIndex];
				this.pos = this.range.from;
			}
			this.pos += n;
			if (this.pos >= this.token.lookAhead)
				this.token.lookAhead = this.pos + 1;
			return this.readNext();
		}
		setDone() {
			this.pos = this.chunkPos = this.end;
			this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
			this.chunk = "";
			return this.next = -1;
		}
		/**
		@internal
		*/
		reset(pos, token) {
			if (token) {
				this.token = token;
				token.start = pos;
				token.lookAhead = pos + 1;
				token.value = token.extended = -1;
			}
			else {
				this.token = nullToken;
			}
			if (this.pos != pos) {
				this.pos = pos;
				if (pos == this.end) {
					this.setDone();
					return this;
				}
				while (pos < this.range.from)
					this.range = this.ranges[--this.rangeIndex];
				while (pos >= this.range.to)
					this.range = this.ranges[++this.rangeIndex];
				if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
					this.chunkOff = pos - this.chunkPos;
				}
				else {
					this.chunk = "";
					this.chunkOff = 0;
				}
				this.readNext();
			}
			return this;
		}
		/**
		@internal
		*/
		read(from, to) {
			if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
				return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
			if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
				return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
			if (from >= this.range.from && to <= this.range.to)
				return this.input.read(from, to);
			let result = "";
			for (let r of this.ranges) {
				if (r.from >= to)
					break;
				if (r.to > from)
					result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
			}
			return result;
		}
	}
	/**
	@internal
	*/
	class TokenGroup {
		constructor(data, id) {
			this.data = data;
			this.id = id;
		}
		token(input, stack) {
			let { parser } = stack.p;
			readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
		}
	}
	TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
	/**
	@hide
	*/
	class LocalTokenGroup {
		constructor(data, precTable, elseToken) {
			this.precTable = precTable;
			this.elseToken = elseToken;
			this.data = typeof data == "string" ? decodeArray(data) : data;
		}
		token(input, stack) {
			let start = input.pos, skipped = 0;
			for (;;) {
				let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
				readToken(this.data, input, stack, 0, this.data, this.precTable);
				if (input.token.value > -1)
					break;
				if (this.elseToken == null)
					return;
				if (!atEof)
					skipped++;
				if (nextPos == null)
					break;
				input.reset(nextPos, input.token);
			}
			if (skipped) {
				input.reset(start, input.token);
				input.acceptToken(this.elseToken, skipped);
			}
		}
	}
	LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
	/**
	`@external tokens` declarations in the grammar should resolve to
	an instance of this class.
	*/
	class ExternalTokenizer {
		/**
		Create a tokenizer. The first argument is the function that,
		given an input stream, scans for the types of tokens it
		recognizes at the stream's position, and calls
		[`acceptToken`](#lr.InputStream.acceptToken) when it finds
		one.
		*/
		constructor(
		/**
		@internal
		*/
		token, options = {}) {
			this.token = token;
			this.contextual = !!options.contextual;
			this.fallback = !!options.fallback;
			this.extend = !!options.extend;
		}
	}
	// Tokenizer data is stored a big uint16 array containing, for each
	// state:
	//
	//  - A group bitmask, indicating what token groups are reachable from
	//    this state, so that paths that can only lead to tokens not in
	//    any of the current groups can be cut off early.
	//
	//  - The position of the end of the state's sequence of accepting
	//    tokens
	//
	//  - The number of outgoing edges for the state
	//
	//  - The accepting tokens, as (token id, group mask) pairs
	//
	//  - The outgoing edges, as (start character, end character, state
	//    index) triples, with end character being exclusive
	//
	// This function interprets that data, running through a stream as
	// long as new states with the a matching group mask can be reached,
	// and updating `input.token` when it matches a token.
	function readToken(data, input, stack, group, precTable, precOffset) {
		let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
		scan: for (;;) {
			if ((groupMask & data[state]) == 0)
				break;
			let accEnd = data[state + 1];
			// Check whether this state can lead to a token in the current group
			// Accept tokens in this state, possibly overwriting
			// lower-precedence / shorter tokens
			for (let i = state + 3; i < accEnd; i += 2)
				if ((data[i + 1] & groupMask) > 0) {
					let term = data[i];
					if (dialect.allows(term) &&
						(input.token.value == -1 || input.token.value == term ||
							overrides(term, input.token.value, precTable, precOffset))) {
						input.acceptToken(term);
						break;
					}
				}
			let next = input.next, low = 0, high = data[state + 2];
			// Special case for EOF
			if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
				state = data[accEnd + high * 3 - 1];
				continue scan;
			}
			// Do a binary search on the state's edges
			for (; low < high;) {
				let mid = (low + high) >> 1;
				let index = accEnd + mid + (mid << 1);
				let from = data[index], to = data[index + 1] || 0x10000;
				if (next < from)
					high = mid;
				else if (next >= to)
					low = mid + 1;
				else {
					state = data[index + 2];
					input.advance();
					continue scan;
				}
			}
			break;
		}
	}
	function findOffset(data, start, term) {
		for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
			if (next == term)
				return i - start;
		return -1;
	}
	function overrides(token, prev, tableData, tableOffset) {
		let iPrev = findOffset(tableData, tableOffset, prev);
		return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
	}
	
	// Environment variable used to control console output
	const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
	let stackIDs = null;
	function cutAt(tree, pos, side) {
		let cursor = tree.cursor(common.IterMode.IncludeAnonymous);
		cursor.moveTo(pos);
		for (;;) {
			if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
				for (;;) {
					if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
						return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))
							: Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));
					if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
						break;
					if (!cursor.parent())
						return side < 0 ? 0 : tree.length;
				}
		}
	}
	class FragmentCursor {
		constructor(fragments, nodeSet) {
			this.fragments = fragments;
			this.nodeSet = nodeSet;
			this.i = 0;
			this.fragment = null;
			this.safeFrom = -1;
			this.safeTo = -1;
			this.trees = [];
			this.start = [];
			this.index = [];
			this.nextFragment();
		}
		nextFragment() {
			let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
			if (fr) {
				this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
				this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
				while (this.trees.length) {
					this.trees.pop();
					this.start.pop();
					this.index.pop();
				}
				this.trees.push(fr.tree);
				this.start.push(-fr.offset);
				this.index.push(0);
				this.nextStart = this.safeFrom;
			}
			else {
				this.nextStart = 1e9;
			}
		}
		// `pos` must be >= any previously given `pos` for this cursor
		nodeAt(pos) {
			if (pos < this.nextStart)
				return null;
			while (this.fragment && this.safeTo <= pos)
				this.nextFragment();
			if (!this.fragment)
				return null;
			for (;;) {
				let last = this.trees.length - 1;
				if (last < 0) { // End of tree
					this.nextFragment();
					return null;
				}
				let top = this.trees[last], index = this.index[last];
				if (index == top.children.length) {
					this.trees.pop();
					this.start.pop();
					this.index.pop();
					continue;
				}
				let next = top.children[index];
				let start = this.start[last] + top.positions[index];
				if (start > pos) {
					this.nextStart = start;
					return null;
				}
				if (next instanceof common.Tree) {
					if (start == pos) {
						if (start < this.safeFrom)
							return null;
						let end = start + next.length;
						if (end <= this.safeTo) {
							let lookAhead = next.prop(common.NodeProp.lookAhead);
							if (!lookAhead || end + lookAhead < this.fragment.to)
								return next;
						}
					}
					this.index[last]++;
					if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
						this.trees.push(next);
						this.start.push(start);
						this.index.push(0);
					}
				}
				else {
					this.index[last]++;
					this.nextStart = start + next.length;
				}
			}
		}
	}
	class TokenCache {
		constructor(parser, stream) {
			this.stream = stream;
			this.tokens = [];
			this.mainToken = null;
			this.actions = [];
			this.tokens = parser.tokenizers.map(_ => new CachedToken);
		}
		getActions(stack) {
			let actionIndex = 0;
			let main = null;
			let { parser } = stack.p, { tokenizers } = parser;
			let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
			let context = stack.curContext ? stack.curContext.hash : 0;
			let lookAhead = 0;
			for (let i = 0; i < tokenizers.length; i++) {
				if (((1 << i) & mask) == 0)
					continue;
				let tokenizer = tokenizers[i], token = this.tokens[i];
				if (main && !tokenizer.fallback)
					continue;
				if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
					this.updateCachedToken(token, tokenizer, stack);
					token.mask = mask;
					token.context = context;
				}
				if (token.lookAhead > token.end + 25 /* Safety.Margin */)
					lookAhead = Math.max(token.lookAhead, lookAhead);
				if (token.value != 0 /* Term.Err */) {
					let startIndex = actionIndex;
					if (token.extended > -1)
						actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
					actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
					if (!tokenizer.extend) {
						main = token;
						if (actionIndex > startIndex)
							break;
					}
				}
			}
			while (this.actions.length > actionIndex)
				this.actions.pop();
			if (lookAhead)
				stack.setLookAhead(lookAhead);
			if (!main && stack.pos == this.stream.end) {
				main = new CachedToken;
				main.value = stack.p.parser.eofTerm;
				main.start = main.end = stack.pos;
				actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
			}
			this.mainToken = main;
			return this.actions;
		}
		getMainToken(stack) {
			if (this.mainToken)
				return this.mainToken;
			let main = new CachedToken, { pos, p } = stack;
			main.start = pos;
			main.end = Math.min(pos + 1, p.stream.end);
			main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
			return main;
		}
		updateCachedToken(token, tokenizer, stack) {
			let start = this.stream.clipPos(stack.pos);
			tokenizer.token(this.stream.reset(start, token), stack);
			if (token.value > -1) {
				let { parser } = stack.p;
				for (let i = 0; i < parser.specialized.length; i++)
					if (parser.specialized[i] == token.value) {
						let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
						if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
							if ((result & 1) == 0 /* Specialize.Specialize */)
								token.value = result >> 1;
							else
								token.extended = result >> 1;
							break;
						}
					}
			}
			else {
				token.value = 0 /* Term.Err */;
				token.end = this.stream.clipPos(start + 1);
			}
		}
		putAction(action, token, end, index) {
			// Don't add duplicate actions
			for (let i = 0; i < index; i += 3)
				if (this.actions[i] == action)
					return index;
			this.actions[index++] = action;
			this.actions[index++] = token;
			this.actions[index++] = end;
			return index;
		}
		addActions(stack, token, end, index) {
			let { state } = stack, { parser } = stack.p, { data } = parser;
			for (let set = 0; set < 2; set++) {
				for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
					if (data[i] == 65535 /* Seq.End */) {
						if (data[i + 1] == 1 /* Seq.Next */) {
							i = pair(data, i + 2);
						}
						else {
							if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
								index = this.putAction(pair(data, i + 2), token, end, index);
							break;
						}
					}
					if (data[i] == token)
						index = this.putAction(pair(data, i + 1), token, end, index);
				}
			}
			return index;
		}
	}
	class Parse {
		constructor(parser, input, fragments, ranges) {
			this.parser = parser;
			this.input = input;
			this.ranges = ranges;
			this.recovering = 0;
			this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
			this.minStackPos = 0;
			this.reused = [];
			this.stoppedAt = null;
			this.lastBigReductionStart = -1;
			this.lastBigReductionSize = 0;
			this.bigReductionCount = 0;
			this.stream = new InputStream(input, ranges);
			this.tokens = new TokenCache(parser, this.stream);
			this.topTerm = parser.top[1];
			let { from } = ranges[0];
			this.stacks = [Stack.start(this, parser.top[0], from)];
			this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
				? new FragmentCursor(fragments, parser.nodeSet) : null;
		}
		get parsedPos() {
			return this.minStackPos;
		}
		// Move the parser forward. This will process all parse stacks at
		// `this.pos` and try to advance them to a further position. If no
		// stack for such a position is found, it'll start error-recovery.
		//
		// When the parse is finished, this will return a syntax tree. When
		// not, it returns `null`.
		advance() {
			let stacks = this.stacks, pos = this.minStackPos;
			// This will hold stacks beyond `pos`.
			let newStacks = this.stacks = [];
			let stopped, stoppedTokens;
			// If a large amount of reductions happened with the same start
			// position, force the stack out of that production in order to
			// avoid creating a tree too deep to recurse through.
			// (This is an ugly kludge, because unfortunately there is no
			// straightforward, cheap way to check for this happening, due to
			// the history of reductions only being available in an
			// expensive-to-access format in the stack buffers.)
			if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
				let [s] = stacks;
				while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
				this.bigReductionCount = this.lastBigReductionSize = 0;
			}
			// Keep advancing any stacks at `pos` until they either move
			// forward or can't be advanced. Gather stacks that can't be
			// advanced further in `stopped`.
			for (let i = 0; i < stacks.length; i++) {
				let stack = stacks[i];
				for (;;) {
					this.tokens.mainToken = null;
					if (stack.pos > pos) {
						newStacks.push(stack);
					}
					else if (this.advanceStack(stack, newStacks, stacks)) {
						continue;
					}
					else {
						if (!stopped) {
							stopped = [];
							stoppedTokens = [];
						}
						stopped.push(stack);
						let tok = this.tokens.getMainToken(stack);
						stoppedTokens.push(tok.value, tok.end);
					}
					break;
				}
			}
			if (!newStacks.length) {
				let finished = stopped && findFinished(stopped);
				if (finished) {
					if (verbose)
						console.log("Finish with " + this.stackID(finished));
					return this.stackToTree(finished);
				}
				if (this.parser.strict) {
					if (verbose && stopped)
						console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
					throw new SyntaxError("No parse at " + pos);
				}
				if (!this.recovering)
					this.recovering = 5 /* Rec.Distance */;
			}
			if (this.recovering && stopped) {
				let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
					: this.runRecovery(stopped, stoppedTokens, newStacks);
				if (finished) {
					if (verbose)
						console.log("Force-finish " + this.stackID(finished));
					return this.stackToTree(finished.forceAll());
				}
			}
			if (this.recovering) {
				let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
				if (newStacks.length > maxRemaining) {
					newStacks.sort((a, b) => b.score - a.score);
					while (newStacks.length > maxRemaining)
						newStacks.pop();
				}
				if (newStacks.some(s => s.reducePos > pos))
					this.recovering--;
			}
			else if (newStacks.length > 1) {
				// Prune stacks that are in the same state, or that have been
				// running without splitting for a while, to avoid getting stuck
				// with multiple successful stacks running endlessly on.
				outer: for (let i = 0; i < newStacks.length - 1; i++) {
					let stack = newStacks[i];
					for (let j = i + 1; j < newStacks.length; j++) {
						let other = newStacks[j];
						if (stack.sameState(other) ||
							stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
							if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
								newStacks.splice(j--, 1);
							}
							else {
								newStacks.splice(i--, 1);
								continue outer;
							}
						}
					}
				}
				if (newStacks.length > 12 /* Rec.MaxStackCount */)
					newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
			}
			this.minStackPos = newStacks[0].pos;
			for (let i = 1; i < newStacks.length; i++)
				if (newStacks[i].pos < this.minStackPos)
					this.minStackPos = newStacks[i].pos;
			return null;
		}
		stopAt(pos) {
			if (this.stoppedAt != null && this.stoppedAt < pos)
				throw new RangeError("Can't move stoppedAt forward");
			this.stoppedAt = pos;
		}
		// Returns an updated version of the given stack, or null if the
		// stack can't advance normally. When `split` and `stacks` are
		// given, stacks split off by ambiguous operations will be pushed to
		// `split`, or added to `stacks` if they move `pos` forward.
		advanceStack(stack, stacks, split) {
			let start = stack.pos, { parser } = this;
			let base = verbose ? this.stackID(stack) + " -> " : "";
			if (this.stoppedAt != null && start > this.stoppedAt)
				return stack.forceReduce() ? stack : null;
			if (this.fragments) {
				let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
				for (let cached = this.fragments.nodeAt(start); cached;) {
					let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
					if (match > -1 && cached.length && (!strictCx || (cached.prop(common.NodeProp.contextHash) || 0) == cxHash)) {
						stack.useNode(cached, match);
						if (verbose)
							console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
						return true;
					}
					if (!(cached instanceof common.Tree) || cached.children.length == 0 || cached.positions[0] > 0)
						break;
					let inner = cached.children[0];
					if (inner instanceof common.Tree && cached.positions[0] == 0)
						cached = inner;
					else
						break;
				}
			}
			let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
			if (defaultReduce > 0) {
				stack.reduce(defaultReduce);
				if (verbose)
					console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
				return true;
			}
			if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
				while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
			}
			let actions = this.tokens.getActions(stack);
			for (let i = 0; i < actions.length;) {
				let action = actions[i++], term = actions[i++], end = actions[i++];
				let last = i == actions.length || !split;
				let localStack = last ? stack : stack.split();
				let main = this.tokens.mainToken;
				localStack.apply(action, term, main ? main.start : localStack.pos, end);
				if (verbose)
					console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
						: `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
				if (last)
					return true;
				else if (localStack.pos > start)
					stacks.push(localStack);
				else
					split.push(localStack);
			}
			return false;
		}
		// Advance a given stack forward as far as it will go. Returns the
		// (possibly updated) stack if it got stuck, or null if it moved
		// forward and was given to `pushStackDedup`.
		advanceFully(stack, newStacks) {
			let pos = stack.pos;
			for (;;) {
				if (!this.advanceStack(stack, null, null))
					return false;
				if (stack.pos > pos) {
					pushStackDedup(stack, newStacks);
					return true;
				}
			}
		}
		runRecovery(stacks, tokens, newStacks) {
			let finished = null, restarted = false;
			for (let i = 0; i < stacks.length; i++) {
				let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
				let base = verbose ? this.stackID(stack) + " -> " : "";
				if (stack.deadEnd) {
					if (restarted)
						continue;
					restarted = true;
					stack.restart();
					if (verbose)
						console.log(base + this.stackID(stack) + " (restarted)");
					let done = this.advanceFully(stack, newStacks);
					if (done)
						continue;
				}
				let force = stack.split(), forceBase = base;
				for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
					if (verbose)
						console.log(forceBase + this.stackID(force) + " (via force-reduce)");
					let done = this.advanceFully(force, newStacks);
					if (done)
						break;
					if (verbose)
						forceBase = this.stackID(force) + " -> ";
				}
				for (let insert of stack.recoverByInsert(token)) {
					if (verbose)
						console.log(base + this.stackID(insert) + " (via recover-insert)");
					this.advanceFully(insert, newStacks);
				}
				if (this.stream.end > stack.pos) {
					if (tokenEnd == stack.pos) {
						tokenEnd++;
						token = 0 /* Term.Err */;
					}
					stack.recoverByDelete(token, tokenEnd);
					if (verbose)
						console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
					pushStackDedup(stack, newStacks);
				}
				else if (!finished || finished.score < stack.score) {
					finished = stack;
				}
			}
			return finished;
		}
		// Convert the stack's buffer to a syntax tree.
		stackToTree(stack) {
			stack.close();
			return common.Tree.build({ buffer: StackBufferCursor.create(stack),
				nodeSet: this.parser.nodeSet,
				topID: this.topTerm,
				maxBufferLength: this.parser.bufferLength,
				reused: this.reused,
				start: this.ranges[0].from,
				length: stack.pos - this.ranges[0].from,
				minRepeatType: this.parser.minRepeatTerm });
		}
		stackID(stack) {
			let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
			if (!id)
				stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
			return id + stack;
		}
	}
	function pushStackDedup(stack, newStacks) {
		for (let i = 0; i < newStacks.length; i++) {
			let other = newStacks[i];
			if (other.pos == stack.pos && other.sameState(stack)) {
				if (newStacks[i].score < stack.score)
					newStacks[i] = stack;
				return;
			}
		}
		newStacks.push(stack);
	}
	class Dialect {
		constructor(source, flags, disabled) {
			this.source = source;
			this.flags = flags;
			this.disabled = disabled;
		}
		allows(term) { return !this.disabled || this.disabled[term] == 0; }
	}
	const id = x => x;
	/**
	Context trackers are used to track stateful context (such as
	indentation in the Python grammar, or parent elements in the XML
	grammar) needed by external tokenizers. You declare them in a
	grammar file as `@context exportName from "module"`.
	
	Context values should be immutable, and can be updated (replaced)
	on shift or reduce actions.
	
	The export used in a `@context` declaration should be of this
	type.
	*/
	class ContextTracker {
		/**
		Define a context tracker.
		*/
		constructor(spec) {
			this.start = spec.start;
			this.shift = spec.shift || id;
			this.reduce = spec.reduce || id;
			this.reuse = spec.reuse || id;
			this.hash = spec.hash || (() => 0);
			this.strict = spec.strict !== false;
		}
	}
	/**
	Holds the parse tables for a given grammar, as generated by
	`lezer-generator`, and provides [methods](#common.Parser) to parse
	content with.
	*/
	class LRParser extends common.Parser {
		/**
		@internal
		*/
		constructor(spec) {
			super();
			/**
			@internal
			*/
			this.wrappers = [];
			if (spec.version != 14 /* File.Version */)
				throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
			let nodeNames = spec.nodeNames.split(" ");
			this.minRepeatTerm = nodeNames.length;
			for (let i = 0; i < spec.repeatNodeCount; i++)
				nodeNames.push("");
			let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
			let nodeProps = [];
			for (let i = 0; i < nodeNames.length; i++)
				nodeProps.push([]);
			function setProp(nodeID, prop, value) {
				nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
			}
			if (spec.nodeProps)
				for (let propSpec of spec.nodeProps) {
					let prop = propSpec[0];
					if (typeof prop == "string")
						prop = common.NodeProp[prop];
					for (let i = 1; i < propSpec.length;) {
						let next = propSpec[i++];
						if (next >= 0) {
							setProp(next, prop, propSpec[i++]);
						}
						else {
							let value = propSpec[i + -next];
							for (let j = -next; j > 0; j--)
								setProp(propSpec[i++], prop, value);
							i++;
						}
					}
				}
			this.nodeSet = new common.NodeSet(nodeNames.map((name, i) => common.NodeType.define({
				name: i >= this.minRepeatTerm ? undefined : name,
				id: i,
				props: nodeProps[i],
				top: topTerms.indexOf(i) > -1,
				error: i == 0,
				skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
			})));
			if (spec.propSources)
				this.nodeSet = this.nodeSet.extend(...spec.propSources);
			this.strict = false;
			this.bufferLength = common.DefaultBufferLength;
			let tokenArray = decodeArray(spec.tokenData);
			this.context = spec.context;
			this.specializerSpecs = spec.specialized || [];
			this.specialized = new Uint16Array(this.specializerSpecs.length);
			for (let i = 0; i < this.specializerSpecs.length; i++)
				this.specialized[i] = this.specializerSpecs[i].term;
			this.specializers = this.specializerSpecs.map(getSpecializer);
			this.states = decodeArray(spec.states, Uint32Array);
			this.data = decodeArray(spec.stateData);
			this.goto = decodeArray(spec.goto);
			this.maxTerm = spec.maxTerm;
			this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
			this.topRules = spec.topRules;
			this.dialects = spec.dialects || {};
			this.dynamicPrecedences = spec.dynamicPrecedences || null;
			this.tokenPrecTable = spec.tokenPrec;
			this.termNames = spec.termNames || null;
			this.maxNode = this.nodeSet.types.length - 1;
			this.dialect = this.parseDialect();
			this.top = this.topRules[Object.keys(this.topRules)[0]];
		}
		createParse(input, fragments, ranges) {
			let parse = new Parse(this, input, fragments, ranges);
			for (let w of this.wrappers)
				parse = w(parse, input, fragments, ranges);
			return parse;
		}
		/**
		Get a goto table entry @internal
		*/
		getGoto(state, term, loose = false) {
			let table = this.goto;
			if (term >= table[0])
				return -1;
			for (let pos = table[term + 1];;) {
				let groupTag = table[pos++], last = groupTag & 1;
				let target = table[pos++];
				if (last && loose)
					return target;
				for (let end = pos + (groupTag >> 1); pos < end; pos++)
					if (table[pos] == state)
						return target;
				if (last)
					return -1;
			}
		}
		/**
		Check if this state has an action for a given terminal @internal
		*/
		hasAction(state, terminal) {
			let data = this.data;
			for (let set = 0; set < 2; set++) {
				for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
					if ((next = data[i]) == 65535 /* Seq.End */) {
						if (data[i + 1] == 1 /* Seq.Next */)
							next = data[i = pair(data, i + 2)];
						else if (data[i + 1] == 2 /* Seq.Other */)
							return pair(data, i + 2);
						else
							break;
					}
					if (next == terminal || next == 0 /* Term.Err */)
						return pair(data, i + 1);
				}
			}
			return 0;
		}
		/**
		@internal
		*/
		stateSlot(state, slot) {
			return this.states[(state * 6 /* ParseState.Size */) + slot];
		}
		/**
		@internal
		*/
		stateFlag(state, flag) {
			return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
		}
		/**
		@internal
		*/
		validAction(state, action) {
			return !!this.allActions(state, a => a == action ? true : null);
		}
		/**
		@internal
		*/
		allActions(state, action) {
			let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
			let result = deflt ? action(deflt) : undefined;
			for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
				if (this.data[i] == 65535 /* Seq.End */) {
					if (this.data[i + 1] == 1 /* Seq.Next */)
						i = pair(this.data, i + 2);
					else
						break;
				}
				result = action(pair(this.data, i + 1));
			}
			return result;
		}
		/**
		Get the states that can follow this one through shift actions or
		goto jumps. @internal
		*/
		nextStates(state) {
			let result = [];
			for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
				if (this.data[i] == 65535 /* Seq.End */) {
					if (this.data[i + 1] == 1 /* Seq.Next */)
						i = pair(this.data, i + 2);
					else
						break;
				}
				if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
					let value = this.data[i + 1];
					if (!result.some((v, i) => (i & 1) && v == value))
						result.push(this.data[i], value);
				}
			}
			return result;
		}
		/**
		Configure the parser. Returns a new parser instance that has the
		given settings modified. Settings not provided in `config` are
		kept from the original parser.
		*/
		configure(config) {
			// Hideous reflection-based kludge to make it easy to create a
			// slightly modified copy of a parser.
			let copy = Object.assign(Object.create(LRParser.prototype), this);
			if (config.props)
				copy.nodeSet = this.nodeSet.extend(...config.props);
			if (config.top) {
				let info = this.topRules[config.top];
				if (!info)
					throw new RangeError(`Invalid top rule name ${config.top}`);
				copy.top = info;
			}
			if (config.tokenizers)
				copy.tokenizers = this.tokenizers.map(t => {
					let found = config.tokenizers.find(r => r.from == t);
					return found ? found.to : t;
				});
			if (config.specializers) {
				copy.specializers = this.specializers.slice();
				copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
					let found = config.specializers.find(r => r.from == s.external);
					if (!found)
						return s;
					let spec = Object.assign(Object.assign({}, s), { external: found.to });
					copy.specializers[i] = getSpecializer(spec);
					return spec;
				});
			}
			if (config.contextTracker)
				copy.context = config.contextTracker;
			if (config.dialect)
				copy.dialect = this.parseDialect(config.dialect);
			if (config.strict != null)
				copy.strict = config.strict;
			if (config.wrap)
				copy.wrappers = copy.wrappers.concat(config.wrap);
			if (config.bufferLength != null)
				copy.bufferLength = config.bufferLength;
			return copy;
		}
		/**
		Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
		are registered for this parser.
		*/
		hasWrappers() {
			return this.wrappers.length > 0;
		}
		/**
		Returns the name associated with a given term. This will only
		work for all terms when the parser was generated with the
		`--names` option. By default, only the names of tagged terms are
		stored.
		*/
		getName(term) {
			return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
		}
		/**
		The eof term id is always allocated directly after the node
		types. @internal
		*/
		get eofTerm() { return this.maxNode + 1; }
		/**
		The type of top node produced by the parser.
		*/
		get topNode() { return this.nodeSet.types[this.top[1]]; }
		/**
		@internal
		*/
		dynamicPrecedence(term) {
			let prec = this.dynamicPrecedences;
			return prec == null ? 0 : prec[term] || 0;
		}
		/**
		@internal
		*/
		parseDialect(dialect) {
			let values = Object.keys(this.dialects), flags = values.map(() => false);
			if (dialect)
				for (let part of dialect.split(" ")) {
					let id = values.indexOf(part);
					if (id >= 0)
						flags[id] = true;
				}
			let disabled = null;
			for (let i = 0; i < values.length; i++)
				if (!flags[i]) {
					for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
						(disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
				}
			return new Dialect(dialect, flags, disabled);
		}
		/**
		Used by the output of the parser generator. Not available to
		user code. @hide
		*/
		static deserialize(spec) {
			return new LRParser(spec);
		}
	}
	function pair(data, off) { return data[off] | (data[off + 1] << 16); }
	function findFinished(stacks) {
		let best = null;
		for (let stack of stacks) {
			let stopped = stack.p.stoppedAt;
			if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
				stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
				(!best || best.score < stack.score))
				best = stack;
		}
		return best;
	}
	function getSpecializer(spec) {
		if (spec.external) {
			let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
			return (value, stack) => (spec.external(value, stack) << 1) | mask;
		}
		return spec.get;
	}
	
	exports.ContextTracker = ContextTracker;
	exports.ExternalTokenizer = ExternalTokenizer;
	exports.InputStream = InputStream;
	exports.LRParser = LRParser;
	exports.LocalTokenGroup = LocalTokenGroup;
	exports.Stack = Stack;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/markdown/dist/index.cjs":
	/*!*************************************************************!*\
	  !*** ../editor/node_modules/@lezer/markdown/dist/index.cjs ***!
	  \*************************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var common = __webpack_require__(/*! @lezer/common */ "../editor/node_modules/@lezer/common/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	class CompositeBlock {
		static create(type, value, from, parentHash, end) {
			let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
			return new CompositeBlock(type, value, from, hash, end, [], []);
		}
		constructor(type, 
		// Used for indentation in list items, markup character in lists
		value, from, hash, end, children, positions) {
			this.type = type;
			this.value = value;
			this.from = from;
			this.hash = hash;
			this.end = end;
			this.children = children;
			this.positions = positions;
			this.hashProp = [[common.NodeProp.contextHash, hash]];
		}
		addChild(child, pos) {
			if (child.prop(common.NodeProp.contextHash) != this.hash)
				child = new common.Tree(child.type, child.children, child.positions, child.length, this.hashProp);
			this.children.push(child);
			this.positions.push(pos);
		}
		toTree(nodeSet, end = this.end) {
			let last = this.children.length - 1;
			if (last >= 0)
				end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
			return new common.Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
				makeTree: (children, positions, length) => new common.Tree(common.NodeType.none, children, positions, length, this.hashProp)
			});
		}
	}
	var Type;
	(function (Type) {
		Type[Type["Document"] = 1] = "Document";
		Type[Type["CodeBlock"] = 2] = "CodeBlock";
		Type[Type["FencedCode"] = 3] = "FencedCode";
		Type[Type["Blockquote"] = 4] = "Blockquote";
		Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
		Type[Type["BulletList"] = 6] = "BulletList";
		Type[Type["OrderedList"] = 7] = "OrderedList";
		Type[Type["ListItem"] = 8] = "ListItem";
		Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
		Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
		Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
		Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
		Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
		Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
		Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
		Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
		Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
		Type[Type["LinkReference"] = 18] = "LinkReference";
		Type[Type["Paragraph"] = 19] = "Paragraph";
		Type[Type["CommentBlock"] = 20] = "CommentBlock";
		Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
		// Inline
		Type[Type["Escape"] = 22] = "Escape";
		Type[Type["Entity"] = 23] = "Entity";
		Type[Type["HardBreak"] = 24] = "HardBreak";
		Type[Type["Emphasis"] = 25] = "Emphasis";
		Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
		Type[Type["Link"] = 27] = "Link";
		Type[Type["Image"] = 28] = "Image";
		Type[Type["InlineCode"] = 29] = "InlineCode";
		Type[Type["HTMLTag"] = 30] = "HTMLTag";
		Type[Type["Comment"] = 31] = "Comment";
		Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
		Type[Type["URL"] = 33] = "URL";
		// Smaller tokens
		Type[Type["HeaderMark"] = 34] = "HeaderMark";
		Type[Type["QuoteMark"] = 35] = "QuoteMark";
		Type[Type["ListMark"] = 36] = "ListMark";
		Type[Type["LinkMark"] = 37] = "LinkMark";
		Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
		Type[Type["CodeMark"] = 39] = "CodeMark";
		Type[Type["CodeText"] = 40] = "CodeText";
		Type[Type["CodeInfo"] = 41] = "CodeInfo";
		Type[Type["LinkTitle"] = 42] = "LinkTitle";
		Type[Type["LinkLabel"] = 43] = "LinkLabel";
	})(Type || (Type = {}));
	/// Data structure used to accumulate a block's content during [leaf
	/// block parsing](#BlockParser.leaf).
	class LeafBlock {
		/// @internal
		constructor(
		/// The start position of the block.
		start, 
		/// The block's text content.
		content) {
			this.start = start;
			this.content = content;
			/// @internal
			this.marks = [];
			/// The block parsers active for this block.
			this.parsers = [];
		}
	}
	/// Data structure used during block-level per-line parsing.
	class Line {
		constructor() {
			/// The line's full text.
			this.text = "";
			/// The base indent provided by the composite contexts (that have
			/// been handled so far).
			this.baseIndent = 0;
			/// The string position corresponding to the base indent.
			this.basePos = 0;
			/// The number of contexts handled @internal
			this.depth = 0;
			/// Any markers (i.e. block quote markers) parsed for the contexts. @internal
			this.markers = [];
			/// The position of the next non-whitespace character beyond any
			/// list, blockquote, or other composite block markers.
			this.pos = 0;
			/// The column of the next non-whitespace character.
			this.indent = 0;
			/// The character code of the character after `pos`.
			this.next = -1;
		}
		/// @internal
		forward() {
			if (this.basePos > this.pos)
				this.forwardInner();
		}
		/// @internal
		forwardInner() {
			let newPos = this.skipSpace(this.basePos);
			this.indent = this.countIndent(newPos, this.pos, this.indent);
			this.pos = newPos;
			this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
		}
		/// Skip whitespace after the given position, return the position of
		/// the next non-space character or the end of the line if there's
		/// only space after `from`.
		skipSpace(from) { return skipSpace(this.text, from); }
		/// @internal
		reset(text) {
			this.text = text;
			this.baseIndent = this.basePos = this.pos = this.indent = 0;
			this.forwardInner();
			this.depth = 1;
			while (this.markers.length)
				this.markers.pop();
		}
		/// Move the line's base position forward to the given position.
		/// This should only be called by composite [block
		/// parsers](#BlockParser.parse) or [markup skipping
		/// functions](#NodeSpec.composite).
		moveBase(to) {
			this.basePos = to;
			this.baseIndent = this.countIndent(to, this.pos, this.indent);
		}
		/// Move the line's base position forward to the given _column_.
		moveBaseColumn(indent) {
			this.baseIndent = indent;
			this.basePos = this.findColumn(indent);
		}
		/// Store a composite-block-level marker. Should be called from
		/// [markup skipping functions](#NodeSpec.composite) when they
		/// consume any non-whitespace characters.
		addMarker(elt) {
			this.markers.push(elt);
		}
		/// Find the column position at `to`, optionally starting at a given
		/// position and column.
		countIndent(to, from = 0, indent = 0) {
			for (let i = from; i < to; i++)
				indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
			return indent;
		}
		/// Find the position corresponding to the given column.
		findColumn(goal) {
			let i = 0;
			for (let indent = 0; i < this.text.length && indent < goal; i++)
				indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
			return i;
		}
		/// @internal
		scrub() {
			if (!this.baseIndent)
				return this.text;
			let result = "";
			for (let i = 0; i < this.basePos; i++)
				result += " ";
			return result + this.text.slice(this.basePos);
		}
	}
	function skipForList(bl, cx, line) {
		if (line.pos == line.text.length ||
			(bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
			return true;
		if (line.indent >= line.baseIndent + 4)
			return false;
		let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
		return size > 0 &&
			(bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
			line.text.charCodeAt(line.pos + size - 1) == bl.value;
	}
	const DefaultSkipMarkup = {
		[Type.Blockquote](bl, cx, line) {
			if (line.next != 62 /* '>' */)
				return false;
			line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
			line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
			bl.end = cx.lineStart + line.text.length;
			return true;
		},
		[Type.ListItem](bl, _cx, line) {
			if (line.indent < line.baseIndent + bl.value && line.next > -1)
				return false;
			line.moveBaseColumn(line.baseIndent + bl.value);
			return true;
		},
		[Type.OrderedList]: skipForList,
		[Type.BulletList]: skipForList,
		[Type.Document]() { return true; }
	};
	function space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
	function skipSpace(line, i = 0) {
		while (i < line.length && space(line.charCodeAt(i)))
			i++;
		return i;
	}
	function skipSpaceBack(line, i, to) {
		while (i > to && space(line.charCodeAt(i - 1)))
			i--;
		return i;
	}
	function isFencedCode(line) {
		if (line.next != 96 && line.next != 126 /* '`~' */)
			return -1;
		let pos = line.pos + 1;
		while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
			pos++;
		if (pos < line.pos + 3)
			return -1;
		if (line.next == 96)
			for (let i = pos; i < line.text.length; i++)
				if (line.text.charCodeAt(i) == 96)
					return -1;
		return pos;
	}
	function isBlockquote(line) {
		return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
	}
	function isHorizontalRule(line, cx, breaking) {
		if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
			return -1;
		let count = 1;
		for (let pos = line.pos + 1; pos < line.text.length; pos++) {
			let ch = line.text.charCodeAt(pos);
			if (ch == line.next)
				count++;
			else if (!space(ch))
				return -1;
		}
		// Setext headers take precedence
		if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
			return -1;
		return count < 3 ? -1 : 1;
	}
	function inList(cx, type) {
		for (let i = cx.stack.length - 1; i >= 0; i--)
			if (cx.stack[i].type == type)
				return true;
		return false;
	}
	function isBulletList(line, cx, breaking) {
		return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
			(line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&
			(!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
	}
	function isOrderedList(line, cx, breaking) {
		let pos = line.pos, next = line.next;
		for (;;) {
			if (next >= 48 && next <= 57 /* '0-9' */)
				pos++;
			else
				break;
			if (pos == line.text.length)
				return -1;
			next = line.text.charCodeAt(pos);
		}
		if (pos == line.pos || pos > line.pos + 9 ||
			(next != 46 && next != 41 /* '.)' */) ||
			(pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||
			breaking && !inList(cx, Type.OrderedList) &&
				(line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
			return -1;
		return pos + 1 - line.pos;
	}
	function isAtxHeading(line) {
		if (line.next != 35 /* '#' */)
			return -1;
		let pos = line.pos + 1;
		while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
			pos++;
		if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
			return -1;
		let size = pos - line.pos;
		return size > 6 ? -1 : size;
	}
	function isSetextUnderline(line) {
		if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
			return -1;
		let pos = line.pos + 1;
		while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
			pos++;
		let end = pos;
		while (pos < line.text.length && space(line.text.charCodeAt(pos)))
			pos++;
		return pos == line.text.length ? end : -1;
	}
	const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
	const HTMLBlockStyle = [
		[/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
		[/^\s*<!--/, CommentEnd],
		[/^\s*<\?/, ProcessingEnd],
		[/^\s*<![A-Z]/, />/],
		[/^\s*<!\[CDATA\[/, /\]\]>/],
		[/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
		[/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
	];
	function isHTMLBlock(line, _cx, breaking) {
		if (line.next != 60 /* '<' */)
			return -1;
		let rest = line.text.slice(line.pos);
		for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
			if (HTMLBlockStyle[i][0].test(rest))
				return i;
		return -1;
	}
	function getListIndent(line, pos) {
		let indentAfter = line.countIndent(pos, line.pos, line.indent);
		let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
		return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
	}
	function addCodeText(marks, from, to) {
		let last = marks.length - 1;
		if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
			marks[last].to = to;
		else
			marks.push(elt(Type.CodeText, from, to));
	}
	// Rules for parsing blocks. A return value of false means the rule
	// doesn't apply here, true means it does. When true is returned and
	// `p.line` has been updated, the rule is assumed to have consumed a
	// leaf block. Otherwise, it is assumed to have opened a context.
	const DefaultBlockParsers = {
		LinkReference: undefined,
		IndentedCode(cx, line) {
			let base = line.baseIndent + 4;
			if (line.indent < base)
				return false;
			let start = line.findColumn(base);
			let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
			let marks = [], pendingMarks = [];
			addCodeText(marks, from, to);
			while (cx.nextLine() && line.depth >= cx.stack.length) {
				if (line.pos == line.text.length) { // Empty
					addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
					for (let m of line.markers)
						pendingMarks.push(m);
				}
				else if (line.indent < base) {
					break;
				}
				else {
					if (pendingMarks.length) {
						for (let m of pendingMarks) {
							if (m.type == Type.CodeText)
								addCodeText(marks, m.from, m.to);
							else
								marks.push(m);
						}
						pendingMarks = [];
					}
					addCodeText(marks, cx.lineStart - 1, cx.lineStart);
					for (let m of line.markers)
						marks.push(m);
					to = cx.lineStart + line.text.length;
					let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
					if (codeStart < to)
						addCodeText(marks, codeStart, to);
				}
			}
			if (pendingMarks.length) {
				pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
				if (pendingMarks.length)
					line.markers = pendingMarks.concat(line.markers);
			}
			cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
			return true;
		},
		FencedCode(cx, line) {
			let fenceEnd = isFencedCode(line);
			if (fenceEnd < 0)
				return false;
			let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
			let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
			let marks = [elt(Type.CodeMark, from, from + len)];
			if (infoFrom < infoTo)
				marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
			for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
				let i = line.pos;
				if (line.indent - line.baseIndent < 4)
					while (i < line.text.length && line.text.charCodeAt(i) == ch)
						i++;
				if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
					for (let m of line.markers)
						marks.push(m);
					marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
					cx.nextLine();
					break;
				}
				else {
					if (!first)
						addCodeText(marks, cx.lineStart - 1, cx.lineStart);
					for (let m of line.markers)
						marks.push(m);
					let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
					if (textStart < textEnd)
						addCodeText(marks, textStart, textEnd);
				}
			}
			cx.addNode(cx.buffer.writeElements(marks, -from)
				.finish(Type.FencedCode, cx.prevLineEnd() - from), from);
			return true;
		},
		Blockquote(cx, line) {
			let size = isBlockquote(line);
			if (size < 0)
				return false;
			cx.startContext(Type.Blockquote, line.pos);
			cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
			line.moveBase(line.pos + size);
			return null;
		},
		HorizontalRule(cx, line) {
			if (isHorizontalRule(line, cx, false) < 0)
				return false;
			let from = cx.lineStart + line.pos;
			cx.nextLine();
			cx.addNode(Type.HorizontalRule, from);
			return true;
		},
		BulletList(cx, line) {
			let size = isBulletList(line, cx, false);
			if (size < 0)
				return false;
			if (cx.block.type != Type.BulletList)
				cx.startContext(Type.BulletList, line.basePos, line.next);
			let newBase = getListIndent(line, line.pos + 1);
			cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
			cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
			line.moveBaseColumn(newBase);
			return null;
		},
		OrderedList(cx, line) {
			let size = isOrderedList(line, cx, false);
			if (size < 0)
				return false;
			if (cx.block.type != Type.OrderedList)
				cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
			let newBase = getListIndent(line, line.pos + size);
			cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
			cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
			line.moveBaseColumn(newBase);
			return null;
		},
		ATXHeading(cx, line) {
			let size = isAtxHeading(line);
			if (size < 0)
				return false;
			let off = line.pos, from = cx.lineStart + off;
			let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
			while (after > off && line.text.charCodeAt(after - 1) == line.next)
				after--;
			if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
				after = line.text.length;
			let buf = cx.buffer
				.write(Type.HeaderMark, 0, size)
				.writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
			if (after < line.text.length)
				buf.write(Type.HeaderMark, after - off, endOfSpace - off);
			let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
			cx.nextLine();
			cx.addNode(node, from);
			return true;
		},
		HTMLBlock(cx, line) {
			let type = isHTMLBlock(line, cx, false);
			if (type < 0)
				return false;
			let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
			let marks = [], trailing = end != EmptyLine;
			while (!end.test(line.text) && cx.nextLine()) {
				if (line.depth < cx.stack.length) {
					trailing = false;
					break;
				}
				for (let m of line.markers)
					marks.push(m);
			}
			if (trailing)
				cx.nextLine();
			let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
			let to = cx.prevLineEnd();
			cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
			return true;
		},
		SetextHeading: undefined // Specifies relative precedence for block-continue function
	};
	// This implements a state machine that incrementally parses link references. At each
	// next line, it looks ahead to see if the line continues the reference or not. If it
	// doesn't and a valid link is available ending before that line, it finishes that.
	// Similarly, on `finish` (when the leaf is terminated by external circumstances), it
	// creates a link reference if there's a valid reference up to the current point.
	class LinkReferenceParser {
		constructor(leaf) {
			this.stage = 0 /* RefStage.Start */;
			this.elts = [];
			this.pos = 0;
			this.start = leaf.start;
			this.advance(leaf.content);
		}
		nextLine(cx, line, leaf) {
			if (this.stage == -1 /* RefStage.Failed */)
				return false;
			let content = leaf.content + "\n" + line.scrub();
			let finish = this.advance(content);
			if (finish > -1 && finish < content.length)
				return this.complete(cx, leaf, finish);
			return false;
		}
		finish(cx, leaf) {
			if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
				return this.complete(cx, leaf, leaf.content.length);
			return false;
		}
		complete(cx, leaf, len) {
			cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
			return true;
		}
		nextStage(elt) {
			if (elt) {
				this.pos = elt.to - this.start;
				this.elts.push(elt);
				this.stage++;
				return true;
			}
			if (elt === false)
				this.stage = -1 /* RefStage.Failed */;
			return false;
		}
		advance(content) {
			for (;;) {
				if (this.stage == -1 /* RefStage.Failed */) {
					return -1;
				}
				else if (this.stage == 0 /* RefStage.Start */) {
					if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
						return -1;
					if (content.charCodeAt(this.pos) != 58 /* ':' */)
						return this.stage = -1 /* RefStage.Failed */;
					this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
					this.pos++;
				}
				else if (this.stage == 1 /* RefStage.Label */) {
					if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
						return -1;
				}
				else if (this.stage == 2 /* RefStage.Link */) {
					let skip = skipSpace(content, this.pos), end = 0;
					if (skip > this.pos) {
						let title = parseLinkTitle(content, skip, this.start);
						if (title) {
							let titleEnd = lineEnd(content, title.to - this.start);
							if (titleEnd > 0) {
								this.nextStage(title);
								end = titleEnd;
							}
						}
					}
					if (!end)
						end = lineEnd(content, this.pos);
					return end > 0 && end < content.length ? end : -1;
				}
				else { // RefStage.Title
					return lineEnd(content, this.pos);
				}
			}
		}
	}
	function lineEnd(text, pos) {
		for (; pos < text.length; pos++) {
			let next = text.charCodeAt(pos);
			if (next == 10)
				break;
			if (!space(next))
				return -1;
		}
		return pos;
	}
	class SetextHeadingParser {
		nextLine(cx, line, leaf) {
			let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
			let next = line.next;
			if (underline < 0)
				return false;
			let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
			cx.nextLine();
			cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
				...cx.parser.parseInline(leaf.content, leaf.start),
				underlineMark
			]));
			return true;
		}
		finish() {
			return false;
		}
	}
	const DefaultLeafBlocks = {
		LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
		SetextHeading() { return new SetextHeadingParser; }
	};
	const DefaultEndLeaf = [
		(_, line) => isAtxHeading(line) >= 0,
		(_, line) => isFencedCode(line) >= 0,
		(_, line) => isBlockquote(line) >= 0,
		(p, line) => isBulletList(line, p, true) >= 0,
		(p, line) => isOrderedList(line, p, true) >= 0,
		(p, line) => isHorizontalRule(line, p, true) >= 0,
		(p, line) => isHTMLBlock(line, p, true) >= 0
	];
	const scanLineResult = { text: "", end: 0 };
	/// Block-level parsing functions get access to this context object.
	class BlockContext {
		/// @internal
		constructor(
		/// The parser configuration used.
		parser, 
		/// @internal
		input, fragments, 
		/// @internal
		ranges) {
			this.parser = parser;
			this.input = input;
			this.ranges = ranges;
			this.line = new Line();
			this.atEnd = false;
			/// For reused nodes on gaps, we can't directly put the original
			/// node into the tree, since that may be bitter than its parent.
			/// When this happens, we create a dummy tree that is replaced by
			/// the proper node in `injectGaps` @internal
			this.reusePlaceholders = new Map;
			this.stoppedAt = null;
			/// The range index that absoluteLineStart points into @internal
			this.rangeI = 0;
			this.to = ranges[ranges.length - 1].to;
			this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
			this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
			this.stack = [this.block];
			this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
			this.readLine();
		}
		get parsedPos() {
			return this.absoluteLineStart;
		}
		advance() {
			if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
				return this.finish();
			let { line } = this;
			for (;;) {
				for (let markI = 0;;) {
					let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
					while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {
						let mark = line.markers[markI++];
						this.addNode(mark.type, mark.from, mark.to);
					}
					if (!next)
						break;
					this.finishContext();
				}
				if (line.pos < line.text.length)
					break;
				// Empty line
				if (!this.nextLine())
					return this.finish();
			}
			if (this.fragments && this.reuseFragment(line.basePos))
				return null;
			start: for (;;) {
				for (let type of this.parser.blockParsers)
					if (type) {
						let result = type(this, line);
						if (result != false) {
							if (result == true)
								return null;
							line.forward();
							continue start;
						}
					}
				break;
			}
			let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
			for (let parse of this.parser.leafBlockParsers)
				if (parse) {
					let parser = parse(this, leaf);
					if (parser)
						leaf.parsers.push(parser);
				}
			lines: while (this.nextLine()) {
				if (line.pos == line.text.length)
					break;
				if (line.indent < line.baseIndent + 4) {
					for (let stop of this.parser.endLeafBlock)
						if (stop(this, line, leaf))
							break lines;
				}
				for (let parser of leaf.parsers)
					if (parser.nextLine(this, line, leaf))
						return null;
				leaf.content += "\n" + line.scrub();
				for (let m of line.markers)
					leaf.marks.push(m);
			}
			this.finishLeaf(leaf);
			return null;
		}
		stopAt(pos) {
			if (this.stoppedAt != null && this.stoppedAt < pos)
				throw new RangeError("Can't move stoppedAt forward");
			this.stoppedAt = pos;
		}
		reuseFragment(start) {
			if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
				!this.fragments.matches(this.block.hash))
				return false;
			let taken = this.fragments.takeNodes(this);
			if (!taken)
				return false;
			this.absoluteLineStart += taken;
			this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
			this.moveRangeI();
			if (this.absoluteLineStart < this.to) {
				this.lineStart++;
				this.absoluteLineStart++;
				this.readLine();
			}
			else {
				this.atEnd = true;
				this.readLine();
			}
			return true;
		}
		/// The number of parent blocks surrounding the current block.
		get depth() {
			return this.stack.length;
		}
		/// Get the type of the parent block at the given depth. When no
		/// depth is passed, return the type of the innermost parent.
		parentType(depth = this.depth - 1) {
			return this.parser.nodeSet.types[this.stack[depth].type];
		}
		/// Move to the next input line. This should only be called by
		/// (non-composite) [block parsers](#BlockParser.parse) that consume
		/// the line directly, or leaf block parser
		/// [`nextLine`](#LeafBlockParser.nextLine) methods when they
		/// consume the current line (and return true).
		nextLine() {
			this.lineStart += this.line.text.length;
			if (this.absoluteLineEnd >= this.to) {
				this.absoluteLineStart = this.absoluteLineEnd;
				this.atEnd = true;
				this.readLine();
				return false;
			}
			else {
				this.lineStart++;
				this.absoluteLineStart = this.absoluteLineEnd + 1;
				this.moveRangeI();
				this.readLine();
				return true;
			}
		}
		moveRangeI() {
			while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
				this.rangeI++;
				this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
			}
		}
		/// @internal
		scanLine(start) {
			let r = scanLineResult;
			r.end = start;
			if (start >= this.to) {
				r.text = "";
			}
			else {
				r.text = this.lineChunkAt(start);
				r.end += r.text.length;
				if (this.ranges.length > 1) {
					let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
					while (this.ranges[rangeI].to < r.end) {
						rangeI++;
						let nextFrom = this.ranges[rangeI].from;
						let after = this.lineChunkAt(nextFrom);
						r.end = nextFrom + after.length;
						r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
						textOffset = r.end - r.text.length;
					}
				}
			}
			return r;
		}
		/// @internal
		readLine() {
			let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
			this.absoluteLineEnd = end;
			line.reset(text);
			for (; line.depth < this.stack.length; line.depth++) {
				let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
				if (!handler)
					throw new Error("Unhandled block context " + Type[cx.type]);
				if (!handler(cx, this, line))
					break;
				line.forward();
			}
		}
		lineChunkAt(pos) {
			let next = this.input.chunk(pos), text;
			if (!this.input.lineChunks) {
				let eol = next.indexOf("\n");
				text = eol < 0 ? next : next.slice(0, eol);
			}
			else {
				text = next == "\n" ? "" : next;
			}
			return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
		}
		/// The end position of the previous line.
		prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
		/// @internal
		startContext(type, start, value = 0) {
			this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
			this.stack.push(this.block);
		}
		/// Start a composite block. Should only be called from [block
		/// parser functions](#BlockParser.parse) that return null.
		startComposite(type, start, value = 0) {
			this.startContext(this.parser.getNodeType(type), start, value);
		}
		/// @internal
		addNode(block, from, to) {
			if (typeof block == "number")
				block = new common.Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
			this.block.addChild(block, from - this.block.from);
		}
		/// Add a block element. Can be called by [block
		/// parsers](#BlockParser.parse).
		addElement(elt) {
			this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
		}
		/// Add a block element from a [leaf parser](#LeafBlockParser). This
		/// makes sure any extra composite block markup (such as blockquote
		/// markers) inside the block are also added to the syntax tree.
		addLeafElement(leaf, elt) {
			this.addNode(this.buffer
				.writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
				.finish(elt.type, elt.to - elt.from), elt.from);
		}
		/// @internal
		finishContext() {
			let cx = this.stack.pop();
			let top = this.stack[this.stack.length - 1];
			top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
			this.block = top;
		}
		finish() {
			while (this.stack.length > 1)
				this.finishContext();
			return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
		}
		addGaps(tree) {
			return this.ranges.length > 1 ?
				injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
		}
		/// @internal
		finishLeaf(leaf) {
			for (let parser of leaf.parsers)
				if (parser.finish(this, leaf))
					return;
			let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
			this.addNode(this.buffer
				.writeElements(inline, -leaf.start)
				.finish(Type.Paragraph, leaf.content.length), leaf.start);
		}
		elt(type, from, to, children) {
			if (typeof type == "string")
				return elt(this.parser.getNodeType(type), from, to, children);
			return new TreeElement(type, from);
		}
		/// @internal
		get buffer() { return new Buffer(this.parser.nodeSet); }
	}
	function injectGaps(ranges, rangeI, tree, offset, dummies) {
		let rangeEnd = ranges[rangeI].to;
		let children = [], positions = [], start = tree.from + offset;
		function movePastNext(upto, inclusive) {
			while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
				let size = ranges[rangeI + 1].from - rangeEnd;
				offset += size;
				upto += size;
				rangeI++;
				rangeEnd = ranges[rangeI].to;
			}
		}
		for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
			movePastNext(ch.from + offset, true);
			let from = ch.from + offset, node, reuse = dummies.get(ch.tree);
			if (reuse) {
				node = reuse;
			}
			else if (ch.to + offset > rangeEnd) {
				node = injectGaps(ranges, rangeI, ch, offset, dummies);
				movePastNext(ch.to + offset, false);
			}
			else {
				node = ch.toTree();
			}
			children.push(node);
			positions.push(from - start);
		}
		movePastNext(tree.to + offset, false);
		return new common.Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
	}
	/// A Markdown parser configuration.
	class MarkdownParser extends common.Parser {
		/// @internal
		constructor(
		/// The parser's syntax [node
		/// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
		nodeSet, 
		/// @internal
		blockParsers, 
		/// @internal
		leafBlockParsers, 
		/// @internal
		blockNames, 
		/// @internal
		endLeafBlock, 
		/// @internal
		skipContextMarkup, 
		/// @internal
		inlineParsers, 
		/// @internal
		inlineNames, 
		/// @internal
		wrappers) {
			super();
			this.nodeSet = nodeSet;
			this.blockParsers = blockParsers;
			this.leafBlockParsers = leafBlockParsers;
			this.blockNames = blockNames;
			this.endLeafBlock = endLeafBlock;
			this.skipContextMarkup = skipContextMarkup;
			this.inlineParsers = inlineParsers;
			this.inlineNames = inlineNames;
			this.wrappers = wrappers;
			/// @internal
			this.nodeTypes = Object.create(null);
			for (let t of nodeSet.types)
				this.nodeTypes[t.name] = t.id;
		}
		createParse(input, fragments, ranges) {
			let parse = new BlockContext(this, input, fragments, ranges);
			for (let w of this.wrappers)
				parse = w(parse, input, fragments, ranges);
			return parse;
		}
		/// Reconfigure the parser.
		configure(spec) {
			let config = resolveConfig(spec);
			if (!config)
				return this;
			let { nodeSet, skipContextMarkup } = this;
			let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
			if (nonEmpty(config.defineNodes)) {
				skipContextMarkup = Object.assign({}, skipContextMarkup);
				let nodeTypes = nodeSet.types.slice(), styles;
				for (let s of config.defineNodes) {
					let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
					if (nodeTypes.some(t => t.name == name))
						continue;
					if (composite)
						skipContextMarkup[nodeTypes.length] =
							(bl, cx, line) => composite(cx, line, bl.value);
					let id = nodeTypes.length;
					let group = composite ? ["Block", "BlockContext"] : !block ? undefined
						: id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
					nodeTypes.push(common.NodeType.define({
						id,
						name,
						props: group && [[common.NodeProp.group, group]]
					}));
					if (style) {
						if (!styles)
							styles = {};
						if (Array.isArray(style) || style instanceof highlight.Tag)
							styles[name] = style;
						else
							Object.assign(styles, style);
					}
				}
				nodeSet = new common.NodeSet(nodeTypes);
				if (styles)
					nodeSet = nodeSet.extend(highlight.styleTags(styles));
			}
			if (nonEmpty(config.props))
				nodeSet = nodeSet.extend(...config.props);
			if (nonEmpty(config.remove)) {
				for (let rm of config.remove) {
					let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
					if (block > -1)
						blockParsers[block] = leafBlockParsers[block] = undefined;
					if (inline > -1)
						inlineParsers[inline] = undefined;
				}
			}
			if (nonEmpty(config.parseBlock)) {
				for (let spec of config.parseBlock) {
					let found = blockNames.indexOf(spec.name);
					if (found > -1) {
						blockParsers[found] = spec.parse;
						leafBlockParsers[found] = spec.leaf;
					}
					else {
						let pos = spec.before ? findName(blockNames, spec.before)
							: spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
						blockParsers.splice(pos, 0, spec.parse);
						leafBlockParsers.splice(pos, 0, spec.leaf);
						blockNames.splice(pos, 0, spec.name);
					}
					if (spec.endLeaf)
						endLeafBlock.push(spec.endLeaf);
				}
			}
			if (nonEmpty(config.parseInline)) {
				for (let spec of config.parseInline) {
					let found = inlineNames.indexOf(spec.name);
					if (found > -1) {
						inlineParsers[found] = spec.parse;
					}
					else {
						let pos = spec.before ? findName(inlineNames, spec.before)
							: spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
						inlineParsers.splice(pos, 0, spec.parse);
						inlineNames.splice(pos, 0, spec.name);
					}
				}
			}
			if (config.wrap)
				wrappers = wrappers.concat(config.wrap);
			return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
		}
		/// @internal
		getNodeType(name) {
			let found = this.nodeTypes[name];
			if (found == null)
				throw new RangeError(`Unknown node type '${name}'`);
			return found;
		}
		/// Parse the given piece of inline text at the given offset,
		/// returning an array of [`Element`](#Element) objects representing
		/// the inline content.
		parseInline(text, offset) {
			let cx = new InlineContext(this, text, offset);
			outer: for (let pos = offset; pos < cx.end;) {
				let next = cx.char(pos);
				for (let token of this.inlineParsers)
					if (token) {
						let result = token(cx, next, pos);
						if (result >= 0) {
							pos = result;
							continue outer;
						}
					}
				pos++;
			}
			return cx.resolveMarkers(0);
		}
	}
	function nonEmpty(a) {
		return a != null && a.length > 0;
	}
	function resolveConfig(spec) {
		if (!Array.isArray(spec))
			return spec;
		if (spec.length == 0)
			return null;
		let conf = resolveConfig(spec[0]);
		if (spec.length == 1)
			return conf;
		let rest = resolveConfig(spec.slice(1));
		if (!rest || !conf)
			return conf || rest;
		let conc = (a, b) => (a || none).concat(b || none);
		let wrapA = conf.wrap, wrapB = rest.wrap;
		return {
			props: conc(conf.props, rest.props),
			defineNodes: conc(conf.defineNodes, rest.defineNodes),
			parseBlock: conc(conf.parseBlock, rest.parseBlock),
			parseInline: conc(conf.parseInline, rest.parseInline),
			remove: conc(conf.remove, rest.remove),
			wrap: !wrapA ? wrapB : !wrapB ? wrapA :
				(inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
		};
	}
	function findName(names, name) {
		let found = names.indexOf(name);
		if (found < 0)
			throw new RangeError(`Position specified relative to unknown parser ${name}`);
		return found;
	}
	let nodeTypes = [common.NodeType.none];
	for (let i = 1, name; name = Type[i]; i++) {
		nodeTypes[i] = common.NodeType.define({
			id: i,
			name,
			props: i >= Type.Escape ? [] : [[common.NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
			top: name == "Document"
		});
	}
	const none = [];
	class Buffer {
		constructor(nodeSet) {
			this.nodeSet = nodeSet;
			this.content = [];
			this.nodes = [];
		}
		write(type, from, to, children = 0) {
			this.content.push(type, from, to, 4 + children * 4);
			return this;
		}
		writeElements(elts, offset = 0) {
			for (let e of elts)
				e.writeTo(this, offset);
			return this;
		}
		finish(type, length) {
			return common.Tree.build({
				buffer: this.content,
				nodeSet: this.nodeSet,
				reused: this.nodes,
				topID: type,
				length
			});
		}
	}
	/// Elements are used to compose syntax nodes during parsing.
	class Element {
		/// @internal
		constructor(
		/// The node's
		/// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
		type, 
		/// The start of the node, as an offset from the start of the document.
		from, 
		/// The end of the node.
		to, 
		/// The node's child nodes @internal
		children = none) {
			this.type = type;
			this.from = from;
			this.to = to;
			this.children = children;
		}
		/// @internal
		writeTo(buf, offset) {
			let startOff = buf.content.length;
			buf.writeElements(this.children, offset);
			buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
		}
		/// @internal
		toTree(nodeSet) {
			return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
		}
	}
	class TreeElement {
		constructor(tree, from) {
			this.tree = tree;
			this.from = from;
		}
		get to() { return this.from + this.tree.length; }
		get type() { return this.tree.type.id; }
		get children() { return none; }
		writeTo(buf, offset) {
			buf.nodes.push(this.tree);
			buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
		}
		toTree() { return this.tree; }
	}
	function elt(type, from, to, children) {
		return new Element(type, from, to, children);
	}
	const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
	const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
	const LinkStart = {}, ImageStart = {};
	class InlineDelimiter {
		constructor(type, from, to, side) {
			this.type = type;
			this.from = from;
			this.to = to;
			this.side = side;
		}
	}
	const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
	let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
	try {
		Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
	}
	catch (_) { }
	const DefaultInline = {
		Escape(cx, next, start) {
			if (next != 92 /* '\\' */ || start == cx.end - 1)
				return -1;
			let escaped = cx.char(start + 1);
			for (let i = 0; i < Escapable.length; i++)
				if (Escapable.charCodeAt(i) == escaped)
					return cx.append(elt(Type.Escape, start, start + 2));
			return -1;
		},
		Entity(cx, next, start) {
			if (next != 38 /* '&' */)
				return -1;
			let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
			return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
		},
		InlineCode(cx, next, start) {
			if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
				return -1;
			let pos = start + 1;
			while (pos < cx.end && cx.char(pos) == 96)
				pos++;
			let size = pos - start, curSize = 0;
			for (; pos < cx.end; pos++) {
				if (cx.char(pos) == 96) {
					curSize++;
					if (curSize == size && cx.char(pos + 1) != 96)
						return cx.append(elt(Type.InlineCode, start, pos + 1, [
							elt(Type.CodeMark, start, start + size),
							elt(Type.CodeMark, pos + 1 - size, pos + 1)
						]));
				}
				else {
					curSize = 0;
				}
			}
			return -1;
		},
		HTMLTag(cx, next, start) {
			if (next != 60 /* '<' */ || start == cx.end - 1)
				return -1;
			let after = cx.slice(start + 1, cx.end);
			let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
			if (url)
				return cx.append(elt(Type.URL, start, start + 1 + url[0].length));
			let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
			if (comment)
				return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
			let procInst = /^\?[^]*?\?>/.exec(after);
			if (procInst)
				return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
			let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
			if (!m)
				return -1;
			return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
		},
		Emphasis(cx, next, start) {
			if (next != 95 && next != 42)
				return -1;
			let pos = start + 1;
			while (cx.char(pos) == next)
				pos++;
			let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
			let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
			let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
			let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
			let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
			let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
			let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
			return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
		},
		HardBreak(cx, next, start) {
			if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
				return cx.append(elt(Type.HardBreak, start, start + 2));
			if (next == 32) {
				let pos = start + 1;
				while (cx.char(pos) == 32)
					pos++;
				if (cx.char(pos) == 10 && pos >= start + 2)
					return cx.append(elt(Type.HardBreak, start, pos + 1));
			}
			return -1;
		},
		Link(cx, next, start) {
			return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;
		},
		Image(cx, next, start) {
			return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
				? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;
		},
		LinkEnd(cx, next, start) {
			if (next != 93 /* ']' */)
				return -1;
			// Scanning back to the next link/image start marker
			for (let i = cx.parts.length - 1; i >= 0; i--) {
				let part = cx.parts[i];
				if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
					// If this one has been set invalid (because it would produce
					// a nested link) or there's no valid link here ignore both.
					if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
						cx.parts[i] = null;
						return -1;
					}
					// Finish the content and replace the entire range in
					// this.parts with the link/image node.
					let content = cx.takeContent(i);
					let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
					// Set any open-link markers before this link to invalid.
					if (part.type == LinkStart)
						for (let j = 0; j < i; j++) {
							let p = cx.parts[j];
							if (p instanceof InlineDelimiter && p.type == LinkStart)
								p.side = 0 /* Mark.None */;
						}
					return link.to;
				}
			}
			return -1;
		}
	};
	function finishLink(cx, content, type, start, startPos) {
		let { text } = cx, next = cx.char(startPos), endPos = startPos;
		content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
		content.push(elt(Type.LinkMark, startPos - 1, startPos));
		if (next == 40 /* '(' */) {
			let pos = cx.skipSpace(startPos + 1);
			let dest = parseURL(text, pos - cx.offset, cx.offset), title;
			if (dest) {
				pos = cx.skipSpace(dest.to);
				title = parseLinkTitle(text, pos - cx.offset, cx.offset);
				if (title)
					pos = cx.skipSpace(title.to);
			}
			if (cx.char(pos) == 41 /* ')' */) {
				content.push(elt(Type.LinkMark, startPos, startPos + 1));
				endPos = pos + 1;
				if (dest)
					content.push(dest);
				if (title)
					content.push(title);
				content.push(elt(Type.LinkMark, pos, endPos));
			}
		}
		else if (next == 91 /* '[' */) {
			let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
			if (label) {
				content.push(label);
				endPos = label.to;
			}
		}
		return elt(type, start, endPos, content);
	}
	// These return `null` when falling off the end of the input, `false`
	// when parsing fails otherwise (for use in the incremental link
	// reference parser).
	function parseURL(text, start, offset) {
		let next = text.charCodeAt(start);
		if (next == 60 /* '<' */) {
			for (let pos = start + 1; pos < text.length; pos++) {
				let ch = text.charCodeAt(pos);
				if (ch == 62 /* '>' */)
					return elt(Type.URL, start + offset, pos + 1 + offset);
				if (ch == 60 || ch == 10 /* '<\n' */)
					return false;
			}
			return null;
		}
		else {
			let depth = 0, pos = start;
			for (let escaped = false; pos < text.length; pos++) {
				let ch = text.charCodeAt(pos);
				if (space(ch)) {
					break;
				}
				else if (escaped) {
					escaped = false;
				}
				else if (ch == 40 /* '(' */) {
					depth++;
				}
				else if (ch == 41 /* ')' */) {
					if (!depth)
						break;
					depth--;
				}
				else if (ch == 92 /* '\\' */) {
					escaped = true;
				}
			}
			return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
		}
	}
	function parseLinkTitle(text, start, offset) {
		let next = text.charCodeAt(start);
		if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
			return false;
		let end = next == 40 ? 41 : next;
		for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
			let ch = text.charCodeAt(pos);
			if (escaped)
				escaped = false;
			else if (ch == end)
				return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
			else if (ch == 92 /* '\\' */)
				escaped = true;
		}
		return null;
	}
	function parseLinkLabel(text, start, offset, requireNonWS) {
		for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
			let ch = text.charCodeAt(pos);
			if (escaped)
				escaped = false;
			else if (ch == 93 /* ']' */)
				return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
			else {
				if (requireNonWS && !space(ch))
					requireNonWS = false;
				if (ch == 91 /* '[' */)
					return false;
				else if (ch == 92 /* '\\' */)
					escaped = true;
			}
		}
		return null;
	}
	/// Inline parsing functions get access to this context, and use it to
	/// read the content and emit syntax nodes.
	class InlineContext {
		/// @internal
		constructor(
		/// The parser that is being used.
		parser, 
		/// The text of this inline section.
		text, 
		/// The starting offset of the section in the document.
		offset) {
			this.parser = parser;
			this.text = text;
			this.offset = offset;
			/// @internal
			this.parts = [];
		}
		/// Get the character code at the given (document-relative)
		/// position.
		char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
		/// The position of the end of this inline section.
		get end() { return this.offset + this.text.length; }
		/// Get a substring of this inline section. Again uses
		/// document-relative positions.
		slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
		/// @internal
		append(elt) {
			this.parts.push(elt);
			return elt.to;
		}
		/// Add a [delimiter](#DelimiterType) at this given position. `open`
		/// and `close` indicate whether this delimiter is opening, closing,
		/// or both. Returns the end of the delimiter, for convenient
		/// returning from [parse functions](#InlineParser.parse).
		addDelimiter(type, from, to, open, close) {
			return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
		}
		/// Add an inline element. Returns the end of the element.
		addElement(elt) {
			return this.append(elt);
		}
		/// Resolve markers between this.parts.length and from, wrapping matched markers in the
		/// appropriate node and updating the content of this.parts. @internal
		resolveMarkers(from) {
			// Scan forward, looking for closing tokens
			for (let i = from; i < this.parts.length; i++) {
				let close = this.parts[i];
				if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))
					continue;
				let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
				let closeSize = close.to - close.from;
				let open, j = i - 1;
				// Continue scanning for a matching opening token
				for (; j >= from; j--) {
					let part = this.parts[j];
					if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&
						// Ignore emphasis delimiters where the character count doesn't match
						!(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&
							(part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
						open = part;
						break;
					}
				}
				if (!open)
					continue;
				let type = close.type.resolve, content = [];
				let start = open.from, end = close.to;
				// Emphasis marker effect depends on the character count. Size consumed is minimum of the two
				// markers.
				if (emp) {
					let size = Math.min(2, open.to - open.from, closeSize);
					start = open.to - size;
					end = close.from + size;
					type = size == 1 ? "Emphasis" : "StrongEmphasis";
				}
				// Move the covered region into content, optionally adding marker nodes
				if (open.type.mark)
					content.push(this.elt(open.type.mark, start, open.to));
				for (let k = j + 1; k < i; k++) {
					if (this.parts[k] instanceof Element)
						content.push(this.parts[k]);
					this.parts[k] = null;
				}
				if (close.type.mark)
					content.push(this.elt(close.type.mark, close.from, end));
				let element = this.elt(type, start, end, content);
				// If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
				this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
				let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
				// Insert the new element in this.parts
				if (keep)
					this.parts.splice(i, 0, element);
				else
					this.parts[i] = element;
			}
			// Collect the elements remaining in this.parts into an array.
			let result = [];
			for (let i = from; i < this.parts.length; i++) {
				let part = this.parts[i];
				if (part instanceof Element)
					result.push(part);
			}
			return result;
		}
		/// Find an opening delimiter of the given type. Returns `null` if
		/// no delimiter is found, or an index that can be passed to
		/// [`takeContent`](#InlineContext.takeContent) otherwise.
		findOpeningDelimiter(type) {
			for (let i = this.parts.length - 1; i >= 0; i--) {
				let part = this.parts[i];
				if (part instanceof InlineDelimiter && part.type == type)
					return i;
			}
			return null;
		}
		/// Remove all inline elements and delimiters starting from the
		/// given index (which you should get from
		/// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
		/// resolve delimiters inside of them, and return them as an array
		/// of elements.
		takeContent(startIndex) {
			let content = this.resolveMarkers(startIndex);
			this.parts.length = startIndex;
			return content;
		}
		/// Skip space after the given (document) position, returning either
		/// the position of the next non-space character or the end of the
		/// section.
		skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
		elt(type, from, to, children) {
			if (typeof type == "string")
				return elt(this.parser.getNodeType(type), from, to, children);
			return new TreeElement(type, from);
		}
	}
	function injectMarks(elements, marks) {
		if (!marks.length)
			return elements;
		if (!elements.length)
			return marks;
		let elts = elements.slice(), eI = 0;
		for (let mark of marks) {
			while (eI < elts.length && elts[eI].to < mark.to)
				eI++;
			if (eI < elts.length && elts[eI].from < mark.from) {
				let e = elts[eI];
				if (e instanceof Element)
					elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
			}
			else {
				elts.splice(eI++, 0, mark);
			}
		}
		return elts;
	}
	// These are blocks that can span blank lines, and should thus only be
	// reused if their next sibling is also being reused.
	const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
	class FragmentCursor {
		constructor(fragments, input) {
			this.fragments = fragments;
			this.input = input;
			// Index into fragment array
			this.i = 0;
			// Active fragment
			this.fragment = null;
			this.fragmentEnd = -1;
			// Cursor into the current fragment, if any. When `moveTo` returns
			// true, this points at the first block after `pos`.
			this.cursor = null;
			if (fragments.length)
				this.fragment = fragments[this.i++];
		}
		nextFragment() {
			this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
			this.cursor = null;
			this.fragmentEnd = -1;
		}
		moveTo(pos, lineStart) {
			while (this.fragment && this.fragment.to <= pos)
				this.nextFragment();
			if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
				return false;
			if (this.fragmentEnd < 0) {
				let end = this.fragment.to;
				while (end > 0 && this.input.read(end - 1, end) != "\n")
					end--;
				this.fragmentEnd = end ? end - 1 : 0;
			}
			let c = this.cursor;
			if (!c) {
				c = this.cursor = this.fragment.tree.cursor();
				c.firstChild();
			}
			let rPos = pos + this.fragment.offset;
			while (c.to <= rPos)
				if (!c.parent())
					return false;
			for (;;) {
				if (c.from >= rPos)
					return this.fragment.from <= lineStart;
				if (!c.childAfter(rPos))
					return false;
			}
		}
		matches(hash) {
			let tree = this.cursor.tree;
			return tree && tree.prop(common.NodeProp.contextHash) == hash;
		}
		takeNodes(cx) {
			let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
			let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
			let prevEnd = end, prevI = blockI;
			for (;;) {
				if (cur.to - off > fragEnd) {
					if (cur.type.isAnonymous && cur.firstChild())
						continue;
					break;
				}
				let pos = toRelative(cur.from - off, cx.ranges);
				if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range
					cx.addNode(cur.tree, pos);
				}
				else {
					let dummy = new common.Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);
					cx.reusePlaceholders.set(dummy, cur.tree);
					cx.addNode(dummy, pos);
				}
				// Taken content must always end in a block, because incremental
				// parsing happens on block boundaries. Never stop directly
				// after an indented code block, since those can continue after
				// any number of blank lines.
				if (cur.type.is("Block")) {
					if (NotLast.indexOf(cur.type.id) < 0) {
						end = cur.to - off;
						blockI = cx.block.children.length;
					}
					else {
						end = prevEnd;
						blockI = prevI;
						prevEnd = cur.to - off;
						prevI = cx.block.children.length;
					}
				}
				if (!cur.nextSibling())
					break;
			}
			while (cx.block.children.length > blockI) {
				cx.block.children.pop();
				cx.block.positions.pop();
			}
			return end - start;
		}
	}
	// Convert an input-stream-relative position to a
	// Markdown-doc-relative position by subtracting the size of all input
	// gaps before `abs`.
	function toRelative(abs, ranges) {
		let pos = abs;
		for (let i = 1; i < ranges.length; i++) {
			let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;
			if (gapFrom < abs)
				pos -= gapTo - gapFrom;
		}
		return pos;
	}
	const markdownHighlighting = highlight.styleTags({
		"Blockquote/...": highlight.tags.quote,
		HorizontalRule: highlight.tags.contentSeparator,
		"ATXHeading1/... SetextHeading1/...": highlight.tags.heading1,
		"ATXHeading2/... SetextHeading2/...": highlight.tags.heading2,
		"ATXHeading3/...": highlight.tags.heading3,
		"ATXHeading4/...": highlight.tags.heading4,
		"ATXHeading5/...": highlight.tags.heading5,
		"ATXHeading6/...": highlight.tags.heading6,
		"Comment CommentBlock": highlight.tags.comment,
		Escape: highlight.tags.escape,
		Entity: highlight.tags.character,
		"Emphasis/...": highlight.tags.emphasis,
		"StrongEmphasis/...": highlight.tags.strong,
		"Link/... Image/...": highlight.tags.link,
		"OrderedList/... BulletList/...": highlight.tags.list,
		"BlockQuote/...": highlight.tags.quote,
		"InlineCode CodeText": highlight.tags.monospace,
		URL: highlight.tags.url,
		"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": highlight.tags.processingInstruction,
		"CodeInfo LinkLabel": highlight.tags.labelName,
		LinkTitle: highlight.tags.string,
		Paragraph: highlight.tags.content
	});
	/// The default CommonMark parser.
	const parser = new MarkdownParser(new common.NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);
	
	function leftOverSpace(node, from, to) {
		let ranges = [];
		for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
			let nextPos = n ? n.from : to;
			if (nextPos > pos)
				ranges.push({ from: pos, to: nextPos });
			if (!n)
				break;
			pos = n.to;
		}
		return ranges;
	}
	/// Create a Markdown extension to enable nested parsing on code
	/// blocks and/or embedded HTML.
	function parseCode(config) {
		let { codeParser, htmlParser } = config;
		let wrap = common.parseMixed((node, input) => {
			let id = node.type.id;
			if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
				let info = "";
				if (id == Type.FencedCode) {
					let infoNode = node.node.getChild(Type.CodeInfo);
					if (infoNode)
						info = input.read(infoNode.from, infoNode.to);
				}
				let parser = codeParser(info);
				if (parser)
					return { parser, overlay: node => node.type.id == Type.CodeText };
			}
			else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {
				return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
			}
			return null;
		});
		return { wrap };
	}
	
	const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
	/// An extension that implements
	/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
	/// Strikethrough syntax using `~~` delimiters.
	const Strikethrough = {
		defineNodes: [{
				name: "Strikethrough",
				style: { "Strikethrough/...": highlight.tags.strikethrough }
			}, {
				name: "StrikethroughMark",
				style: highlight.tags.processingInstruction
			}],
		parseInline: [{
				name: "Strikethrough",
				parse(cx, next, pos) {
					if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)
						return -1;
					let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);
					let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
					let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
					return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
				},
				after: "Emphasis"
			}]
	};
	function parseRow(cx, line, startI = 0, elts, offset = 0) {
		let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
		let parseCell = () => {
			elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
		};
		for (let i = startI; i < line.length; i++) {
			let next = line.charCodeAt(i);
			if (next == 124 /* '|' */ && !esc) {
				if (!first || cellStart > -1)
					count++;
				first = false;
				if (elts) {
					if (cellStart > -1)
						parseCell();
					elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
				}
				cellStart = cellEnd = -1;
			}
			else if (esc || next != 32 && next != 9) {
				if (cellStart < 0)
					cellStart = i;
				cellEnd = i + 1;
			}
			esc = !esc && next == 92;
		}
		if (cellStart > -1) {
			count++;
			if (elts)
				parseCell();
		}
		return count;
	}
	function hasPipe(str, start) {
		for (let i = start; i < str.length; i++) {
			let next = str.charCodeAt(i);
			if (next == 124 /* '|' */)
				return true;
			if (next == 92 /* '\\' */)
				i++;
		}
		return false;
	}
	const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
	class TableParser {
		constructor() {
			// Null means we haven't seen the second line yet, false means this
			// isn't a table, and an array means this is a table and we've
			// parsed the given rows so far.
			this.rows = null;
		}
		nextLine(cx, line, leaf) {
			if (this.rows == null) { // Second line
				this.rows = false;
				let lineText;
				if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
					delimiterLine.test(lineText = line.text.slice(line.pos))) {
					let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
					if (firstCount == parseRow(cx, lineText, line.pos))
						this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
							cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
				}
			}
			else if (this.rows) { // Line after the second
				let content = [];
				parseRow(cx, line.text, line.pos, content, cx.lineStart);
				this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
			}
			return false;
		}
		finish(cx, leaf) {
			if (!this.rows)
				return false;
			cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
			return true;
		}
	}
	/// This extension provides
	/// [GFM-style](https://github.github.com/gfm/#tables-extension-)
	/// tables, using syntax like this:
	///
	/// ```
	/// | head 1 | head 2 |
	/// | ---    | ---    |
	/// | cell 1 | cell 2 |
	/// ```
	const Table = {
		defineNodes: [
			{ name: "Table", block: true },
			{ name: "TableHeader", style: { "TableHeader/...": highlight.tags.heading } },
			"TableRow",
			{ name: "TableCell", style: highlight.tags.content },
			{ name: "TableDelimiter", style: highlight.tags.processingInstruction },
		],
		parseBlock: [{
				name: "Table",
				leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
				endLeaf(cx, line, leaf) {
					if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
						return false;
					let next = cx.scanLine(cx.absoluteLineEnd + 1).text;
					return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
				},
				before: "SetextHeading"
			}]
	};
	class TaskParser {
		nextLine() { return false; }
		finish(cx, leaf) {
			cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
				cx.elt("TaskMarker", leaf.start, leaf.start + 3),
				...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
			]));
			return true;
		}
	}
	/// Extension providing
	/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
	/// task list items, where list items can be prefixed with `[ ]` or
	/// `[x]` to add a checkbox.
	const TaskList = {
		defineNodes: [
			{ name: "Task", block: true, style: highlight.tags.list },
			{ name: "TaskMarker", style: highlight.tags.atom }
		],
		parseBlock: [{
				name: "TaskList",
				leaf(cx, leaf) {
					return /^\[[ xX]\][ \t]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
				},
				after: "SetextHeading"
			}]
	};
	const autolinkRE = /(www\.)|(https?:\/\/)|([\w.+-]+@)|(mailto:|xmpp:)/gy;
	const urlRE = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy;
	const lastTwoDomainWords = /[\w-]+\.[\w-]+($|\/)/;
	const emailRE = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy;
	const xmppResourceRE = /\/[a-zA-Z\d@.]+/gy;
	function count(str, from, to, ch) {
		let result = 0;
		for (let i = from; i < to; i++)
			if (str[i] == ch)
				result++;
		return result;
	}
	function autolinkURLEnd(text, from) {
		urlRE.lastIndex = from;
		let m = urlRE.exec(text);
		if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf("_") > -1)
			return -1;
		let end = from + m[0].length;
		for (;;) {
			let last = text[end - 1], m;
			if (/[?!.,:*_~]/.test(last) ||
				last == ")" && count(text, from, end, ")") > count(text, from, end, "("))
				end--;
			else if (last == ";" && (m = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(text.slice(from, end))))
				end = from + m.index;
			else
				break;
		}
		return end;
	}
	function autolinkEmailEnd(text, from) {
		emailRE.lastIndex = from;
		let m = emailRE.exec(text);
		if (!m)
			return -1;
		let last = m[0][m[0].length - 1];
		return last == "_" || last == "-" ? -1 : from + m[0].length - (last == "." ? 1 : 0);
	}
	/// Extension that implements autolinking for
	/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email
	/// addresses.
	const Autolink = {
		parseInline: [{
				name: "Autolink",
				parse(cx, next, absPos) {
					let pos = absPos - cx.offset;
					autolinkRE.lastIndex = pos;
					let m = autolinkRE.exec(cx.text), end = -1;
					if (!m)
						return -1;
					if (m[1] || m[2]) { // www., http://
						end = autolinkURLEnd(cx.text, pos + m[0].length);
					}
					else if (m[3]) { // email address
						end = autolinkEmailEnd(cx.text, pos);
					}
					else { // mailto:/xmpp:
						end = autolinkEmailEnd(cx.text, pos + m[0].length);
						if (end > -1 && m[0] == "xmpp:") {
							xmppResourceRE.lastIndex = end;
							m = xmppResourceRE.exec(cx.text);
							if (m)
								end = m.index + m[0].length;
						}
					}
					if (end < 0)
						return -1;
					cx.addElement(cx.elt("URL", absPos, end + cx.offset));
					return end + cx.offset;
				}
			}]
	};
	/// Extension bundle containing [`Table`](#Table),
	/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and
	/// [`Autolink`](#Autolink).
	const GFM = [Table, TaskList, Strikethrough, Autolink];
	function parseSubSuper(ch, node, mark) {
		return (cx, next, pos) => {
			if (next != ch || cx.char(pos + 1) == ch)
				return -1;
			let elts = [cx.elt(mark, pos, pos + 1)];
			for (let i = pos + 1; i < cx.end; i++) {
				let next = cx.char(i);
				if (next == ch)
					return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
				if (next == 92 /* '\\' */)
					elts.push(cx.elt("Escape", i, i++ + 2));
				if (space(next))
					break;
			}
			return -1;
		};
	}
	/// Extension providing
	/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
	/// superscript using `^` markers.
	const Superscript = {
		defineNodes: [
			{ name: "Superscript", style: highlight.tags.special(highlight.tags.content) },
			{ name: "SuperscriptMark", style: highlight.tags.processingInstruction }
		],
		parseInline: [{
				name: "Superscript",
				parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
			}]
	};
	/// Extension providing
	/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
	/// subscript using `~` markers.
	const Subscript = {
		defineNodes: [
			{ name: "Subscript", style: highlight.tags.special(highlight.tags.content) },
			{ name: "SubscriptMark", style: highlight.tags.processingInstruction }
		],
		parseInline: [{
				name: "Subscript",
				parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
			}]
	};
	/// Extension that parses two colons with only letters, underscores,
	/// and numbers between them as `Emoji` nodes.
	const Emoji = {
		defineNodes: [{ name: "Emoji", style: highlight.tags.character }],
		parseInline: [{
				name: "Emoji",
				parse(cx, next, pos) {
					let match;
					if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
						return -1;
					return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
				}
			}]
	};
	
	exports.Autolink = Autolink;
	exports.BlockContext = BlockContext;
	exports.Element = Element;
	exports.Emoji = Emoji;
	exports.GFM = GFM;
	exports.InlineContext = InlineContext;
	exports.LeafBlock = LeafBlock;
	exports.Line = Line;
	exports.MarkdownParser = MarkdownParser;
	exports.Strikethrough = Strikethrough;
	exports.Subscript = Subscript;
	exports.Superscript = Superscript;
	exports.Table = Table;
	exports.TaskList = TaskList;
	exports.parseCode = parseCode;
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/php/dist/index.cjs":
	/*!********************************************************!*\
	  !*** ../editor/node_modules/@lezer/php/dist/index.cjs ***!
	  \********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const castOpen = 1,
	  HeredocString = 2,
	  interpolatedStringContent = 263,
	  EscapeSequence = 3,
	  afterInterpolation = 264,
	  automaticSemicolon = 265,
	  eof = 266,
	  abstract = 4,
	  and = 5,
	  array = 6,
	  as = 7,
	  Boolean = 8,
	  _break = 9,
	  _case = 10,
	  _catch = 11,
	  clone = 12,
	  _const = 13,
	  _continue = 14,
	  _default = 15,
	  declare = 16,
	  _do = 17,
	  echo = 18,
	  _else = 19,
	  elseif = 20,
	  enddeclare = 21,
	  endfor = 22,
	  endforeach = 23,
	  endif = 24,
	  endswitch = 25,
	  endwhile = 26,
	  _enum = 27,
	  _extends = 28,
	  final = 29,
	  _finally = 30,
	  fn = 31,
	  _for = 32,
	  foreach = 33,
	  from = 34,
	  _function = 35,
	  global = 36,
	  goto = 37,
	  _if = 38,
	  _implements = 39,
	  include = 40,
	  include_once = 41,
	  _instanceof = 42,
	  insteadof = 43,
	  _interface = 44,
	  list = 45,
	  match = 46,
	  namespace = 47,
	  _new = 48,
	  _null = 49,
	  or = 50,
	  print = 51,
	  _require = 52,
	  require_once = 53,
	  _return = 54,
	  _switch = 55,
	  _throw = 56,
	  trait = 57,
	  _try = 58,
	  unset = 59,
	  use = 60,
	  _var = 61,
	  Visibility = 62,
	  _while = 63,
	  xor = 64,
	  _yield = 65;
	
	const keywordMap = {
	  abstract,
	  and,
	  array,
	  as,
	  true: Boolean,
	  false: Boolean,
	  break: _break,
	  case: _case,
	  catch: _catch,
	  clone,
	  const: _const,
	  continue: _continue,
	  declare,
	  default: _default,
	  do: _do,
	  echo,
	  else: _else,
	  elseif,
	  enddeclare,
	  endfor,
	  endforeach,
	  endif,
	  endswitch,
	  endwhile,
	  enum: _enum,
	  extends: _extends,
	  final,
	  finally: _finally,
	  fn,
	  for: _for,
	  foreach,
	  from,
	  function: _function,
	  global,
	  goto,
	  if: _if,
	  implements: _implements,
	  include,
	  include_once,
	  instanceof: _instanceof,
	  insteadof,
	  interface: _interface,
	  list,
	  match,
	  namespace,
	  new: _new,
	  null: _null,
	  or,
	  print,
	  require: _require,
	  require_once,
	  return: _return,
	  switch: _switch,
	  throw: _throw,
	  trait,
	  try: _try,
	  unset,
	  use,
	  var: _var,
	  public: Visibility,
	  private: Visibility,
	  protected: Visibility,
	  while: _while,
	  xor,
	  yield: _yield,
	  __proto__: null,
	};
	
	function keywords(name) {
	  let found = keywordMap[name.toLowerCase()];
	  return found == null ? -1 : found
	}
	
	function isSpace(ch) {
	  return ch == 9 || ch == 10 || ch == 13 || ch == 32
	}
	
	function isASCIILetter(ch) {
	  return ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90
	}
	
	function isIdentifierStart(ch) {
	  return ch == 95 || ch >= 0x80 || isASCIILetter(ch)
	}
	
	function isHex(ch) {
	  return ch >= 48 && ch <= 55 || ch >= 97 && ch <= 102 || ch >= 65 && ch <= 70 /* 0-9, a-f, A-F */
	}
	
	const castTypes = {
	  int: true, integer: true, bool: true, boolean: true,
	  float: true, double: true, real: true, string: true,
	  array: true, object: true, unset: true,
	  __proto__: null
	};
	
	const expression = new lr.ExternalTokenizer(input => {
	  if (input.next == 40 /* '(' */) {
		input.advance();
		let peek = 0;
		while (isSpace(input.peek(peek))) peek++;
		let name = "", next;
		while (isASCIILetter(next = input.peek(peek))) {
		  name += String.fromCharCode(next);
		  peek++;
		}
		while (isSpace(input.peek(peek))) peek++;
		if (input.peek(peek) == 41 /* ')' */ && castTypes[name.toLowerCase()])
		  input.acceptToken(castOpen);
	  } else if (input.next == 60 /* '<' */ && input.peek(1) == 60 && input.peek(2) == 60) {
		for (let i = 0; i < 3; i++) input.advance();
		while (input.next == 32 /* ' ' */ || input.next == 9 /* '\t' */) input.advance();
		let quoted = input.next == 39; /* "'" */
		if (quoted) input.advance();
		if (!isIdentifierStart(input.next)) return
		let tag = String.fromCharCode(input.next);
		for (;;) {
		  input.advance();
		  if (!isIdentifierStart(input.next) && !(input.next >= 48 && input.next <= 55) /* 0-9 */) break
		  tag += String.fromCharCode(input.next);
		}
		if (quoted) {
		  if (input.next != 39) return
		  input.advance();
		}
		if (input.next != 10 /* '\n' */ && input.next != 13 /* '\r' */) return
		for (;;) {
		  let lineStart = input.next == 10 || input.next == 13;
		  input.advance();
		  if (input.next < 0) return
		  if (lineStart) {
			while (input.next == 32 /* ' ' */ || input.next == 9 /* '\t' */) input.advance();
			let match = true;
			for (let i = 0; i < tag.length; i++) {
			  if (input.next != tag.charCodeAt(i)) { match = false; break }
			  input.advance();
			}
			if (match) return input.acceptToken(HeredocString)
		  }
		}
	  }
	});
	
	const eofToken = new lr.ExternalTokenizer(input => {
	  if (input.next < 0) input.acceptToken(eof);
	});
	
	const semicolon = new lr.ExternalTokenizer((input, stack) => {
	  if (input.next == 63 /* '?' */ && stack.canShift(automaticSemicolon) && input.peek(1) == 62 /* '>' */)
		input.acceptToken(automaticSemicolon);
	});
	
	function scanEscape(input) {
	  let after = input.peek(1);
	  if (after == 110 /* 'n' */ || after == 114 /* 'r' */ || after == 116 /* 't' */ ||
		  after == 118 /* 'v' */ || after == 101 /* 'e' */ || after == 102 /* 'f' */ ||
		  after == 92 /* '\\' */ || after == 36 /* '"' */ || after == 34 /* '$' */ ||
		  after == 123 /* '{' */)
		return 2
	
	  if (after >= 48 && after <= 55 /* '0'-'7' */) {
		let size = 2, next;
		while (size < 5 && (next = input.peek(size)) >= 48 && next <= 55) size++;
		return size
	  }
	
	  if (after == 120 /* 'x' */ && isHex(input.peek(2))) {
		return isHex(input.peek(3)) ? 4 : 3
	  }
	
	  if (after == 117 /* 'u' */ && input.peek(2) == 123 /* '{' */) {
		for (let size = 3;; size++) {
		  let next = input.peek(size);
		  if (next == 125 /* '}' */) return size == 2 ? 0 : size + 1
		  if (!isHex(next)) break
		}
	  }
	
	  return 0
	}
	
	const interpolated = new lr.ExternalTokenizer((input, stack) => {
	  let content = false;
	  for (;; content = true) {
		if (input.next == 34 /* '"' */ || input.next < 0 ||
			input.next == 36 /* '$' */ && (isIdentifierStart(input.peek(1)) || input.peek(1) == 123 /* '{' */) ||
			input.next == 123 /* '{' */ && input.peek(1) == 36 /* '$' */) {
		  break
		} else if (input.next == 92 /* '\\' */) {
		  let escaped = scanEscape(input);
		  if (escaped) {
			if (content) break
			else return input.acceptToken(EscapeSequence, escaped)
		  }
		} else if (!content && (
		  input.next == 91 /* '[' */ ||
		  input.next == 45 /* '-' */ && input.peek(1) == 62 /* '>' */ && isIdentifierStart(input.peek(2)) ||
		  input.next == 63 /* '?' */ && input.peek(1) == 45 && input.peek(2) == 62 && isIdentifierStart(input.peek(3))
		) && stack.canShift(afterInterpolation)) {
		  break
		}
		input.advance();
	  }
	  if (content) input.acceptToken(interpolatedStringContent);
	});
	
	const phpHighlighting = highlight.styleTags({
	  "Visibility abstract final static": highlight.tags.modifier,
	  "for foreach while do if else elseif switch try catch finally return throw break continue default case": highlight.tags.controlKeyword,
	  "endif endfor endforeach endswitch endwhile declare enddeclare goto match": highlight.tags.controlKeyword,
	  "and or xor yield unset clone instanceof insteadof": highlight.tags.operatorKeyword,
	  "function fn class trait implements extends const enum global interface use var": highlight.tags.definitionKeyword,
	  "include include_once require require_once namespace": highlight.tags.moduleKeyword,
	  "new from echo print array list as": highlight.tags.keyword,
	  null: highlight.tags.null,
	  Boolean: highlight.tags.bool,
	  VariableName: highlight.tags.variableName,
	  "NamespaceName/...": highlight.tags.namespace,
	  "NamedType/...": highlight.tags.typeName,
	  Name: highlight.tags.name,
	  "CallExpression/Name": highlight.tags.function(highlight.tags.variableName),
	  "LabelStatement/Name": highlight.tags.labelName,
	  "MemberExpression/Name": highlight.tags.propertyName,
	  "MemberExpression/VariableName": highlight.tags.special(highlight.tags.propertyName),
	  "ScopedExpression/ClassMemberName/Name": highlight.tags.propertyName,
	  "ScopedExpression/ClassMemberName/VariableName": highlight.tags.special(highlight.tags.propertyName),
	  "CallExpression/MemberExpression/Name": highlight.tags.function(highlight.tags.propertyName),
	  "CallExpression/ScopedExpression/ClassMemberName/Name": highlight.tags.function(highlight.tags.propertyName),
	  "MethodDeclaration/Name": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  "FunctionDefinition/Name": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  "ClassDeclaration/Name": highlight.tags.definition(highlight.tags.className),
	  UpdateOp: highlight.tags.updateOperator,
	  ArithOp: highlight.tags.arithmeticOperator,
	  LogicOp: highlight.tags.logicOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  ControlOp: highlight.tags.controlOperator,
	  AssignOp: highlight.tags.definitionOperator,
	  "$ ConcatOp": highlight.tags.operator,
	  LineComment: highlight.tags.lineComment,
	  BlockComment: highlight.tags.blockComment,
	  Integer: highlight.tags.integer,
	  Float: highlight.tags.float,
	  String: highlight.tags.string,
	  ShellExpression: highlight.tags.special(highlight.tags.string),
	  "=> ->": highlight.tags.punctuation,
	  "( )": highlight.tags.paren,
	  "#[ [ ]": highlight.tags.squareBracket,
	  "${ { }": highlight.tags.brace,
	  "-> ?->": highlight.tags.derefOperator,
	  ", ; :: : \\": highlight.tags.separator,
	  "PhpOpen PhpClose": highlight.tags.processingInstruction,
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_Name = {__proto__:null,static:311, STATIC:311, class:333, CLASS:333};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "$GSQ`OWOOQhQaOOP%oO`OOOOO#t'#H_'#H_O%tO#|O'#DtOOO#u'#Dw'#DwQ&SOWO'#DwO&XO$VOOOOQ#u'#Dx'#DxO&lQaO'#D|O(mQdO'#E}O(tQdO'#EQO*kQaO'#EWO,zQ`O'#ETO-PQ`O'#E^O/nQaO'#E^O/uQ`O'#EfO/zQ`O'#EoO*kQaO'#EoO0VQ`O'#HhO0[Q`O'#E{O0[Q`O'#E{OOQS'#Ic'#IcO0aQ`O'#EvOOQS'#IZ'#IZO2oQdO'#IWO6tQeO'#FUO*kQaO'#FeO*kQaO'#FfO*kQaO'#FgO*kQaO'#FhO*kQaO'#FhO*kQaO'#FkOOQO'#Id'#IdO7RQ`O'#FqOOQO'#Hi'#HiO7ZQ`O'#HOO7uQ`O'#FlO8QQ`O'#H]O8]Q`O'#FvO8eQaO'#FwO*kQaO'#GVO*kQaO'#GYO8}OrO'#G]OOQS'#Iq'#IqOOQS'#Ip'#IpOOQS'#IW'#IWO,zQ`O'#GdO,zQ`O'#GfO,zQ`O'#GkOhQaO'#GmO9UQ`O'#GnO9ZQ`O'#GqO9`Q`O'#GtO9eQeO'#GuO9eQeO'#GvO9eQeO'#GwO9oQ`O'#GxO9tQ`O'#GzO9yQaO'#G{O<YQ`O'#G|O<_Q`O'#G}O<dQ`O'#G}O9oQ`O'#HOO<iQ`O'#HQO<nQ`O'#HRO<sQ`O'#HSO<xQ`O'#HVO=TQ`O'#HWO9yQaO'#H[OOQ#u'#IV'#IVOOQ#u'#Ha'#HaQhQaOOO=fQ`O'#HPO7pQ`O'#HPO=kO#|O'#DrPOOO)CCw)CCwOOO#t-E;]-E;]OOO#u,5:c,5:cOOO#u'#H`'#H`O&XO$VOOO=vQ$VO'#IUOOOO'#IU'#IUQOOOOOOOQ#y,5:h,5:hO=}QaO,5:hOOQ#u,5:j,5:jO@eQaO,5:mO@lQaO,5;UO*kQaO,5;UO@sQ`O,5;VOCbQaO'#EsOOQS,5;^,5;^OCiQ`O,5;jOOQP'#F]'#F]O*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qOOQ#u'#Im'#ImOOQS,5<q,5<qOOQ#u,5:l,5:lOEbQ`O,5:rOEiQdO'#E}OF]Q`O'#FlOFeQ`O'#FlOFmQ`O,5:oOFrQaO'#E_OOQS,5:x,5:xOHyQ`O'#I]O9yQaO'#EaO9yQaO'#I]OOQS'#I]'#I]OIQQ`O'#I[OIYQ`O,5:xO-UQaO,5:xOI_QaO'#EgOOQS,5;Q,5;QOOQS,5;Z,5;ZOIiQ`O,5;ZOOQO,5>S,5>SOJ[QdO,5;gOOQO-E;f-E;fOL^Q`O,5;gOLcQpO,5;bO0aQ`O'#EyOLkQtO'#E}OOQS'#Ez'#EzOOQS'#Ib'#IbOM`QaO,5:wO*kQaO,5;nOOQS,5;p,5;pO*kQaO,5;pOMgQdO,5<POMwQdO,5<QONXQdO,5<RONiQdO,5<SO!!sQdO,5<SO!!zQdO,5<VO!#[Q`O'#FrO!#gQ`O'#IgO!#oQ`O,5<]OOQO-E;g-E;gO!#tQ`O'#IoO<_Q`O,5=iO!#|Q`O,5=iO9oQ`O,5=jO!$RQ`O,5=nO!$WQ`O,5=kO!$]Q`O,5=kO!$bQ`O'#FnO!$xQ`O,5<WO!%TQ`O,5<WO!%WQ`O,5?ZO!%]Q`O,5<WO!%eQ`O,5<bO!%mQdO'#GPO!%{QdO'#InO!&WQdO,5=wO!&`Q`O,5<bO!%WQ`O,5<bO!&hQdO,5<cO!&xQ`O,5<cO!'lQdO,5<qO!)nQdO,5<tO!*OOrO'#HsOOOQ'#It'#ItO*kQaO'#GbOOOQ'#Hs'#HsO!*pOrO,5<wOOQS,5<w,5<wO!*wQaO,5=OO!+OQ`O,5=QO!+WQeO,5=VO!+bQ`O,5=XO!+gQaO'#GoO!+WQeO,5=YO9yQaO'#GrO!+WQeO,5=]O!&WQdO,5=`O(tQdO,5=aOOQ#u,5=a,5=aO(tQdO,5=bOOQ#u,5=b,5=bO(tQdO,5=cOOQ#u,5=c,5=cO!+nQ`O,5=dO!+vQ`O,5=fO!+{QdO'#IvOOQS'#Iv'#IvO!&WQdO,5=gO>UQaO,5=hO!-eQ`O'#F}O!-jQdO'#IlO!&WQdO,5=iOOQ#u,5=j,5=jO!-uQ`O,5=lO!-xQ`O,5=mO!-}Q`O,5=nO!.YQdO,5=qOOQ#u,5=q,5=qO!.eQ`O,5=rO!.eQ`O,5=rO!.mQdO'#IwO!.{Q`O'#HXO!&WQdO,5=rO!/ZQ`O,5=rO!/fQdO'#IYO!&WQdO,5=vOOQ#u-E;_-E;_O!1RQ`O,5=kOOO#u,5:^,5:^O!1^O#|O,5:^OOO#u-E;^-E;^OOOO,5>p,5>pOOQ#y1G0S1G0SO!1fQ`O1G0XO*kQaO1G0XO!2xQ`O1G0pOOQS1G0p1G0pO!4[Q`O1G0pOOQS'#I_'#I_O*kQaO'#I_OOQS1G0q1G0qO!4cQ`O'#IaO!7lQ`O'#E}O!7yQaO'#EuOOQO'#Ia'#IaO!8TQ`O'#I`O!8]Q`O,5;_OOQS'#FQ'#FQOOQS1G1U1G1UO!8bQdO1G1]O!:dQdO1G1]O!<PQdO1G1]O!=lQdO1G1]O!?XQdO1G1]O!@tQdO1G1]O!BaQdO1G1]O!C|QdO1G1]O!EiQdO1G1]O!GUQdO1G1]O!HqQdO1G1]O!J^QdO1G1]O!KyQdO1G1]O!MfQdO1G1]O# RQdO1G1]O#!nQdO1G1]OOQT1G0^1G0^O!%WQ`O,5<WO#$ZQaO'#EXOOQS1G0Z1G0ZO#$bQ`O,5:yOFuQaO,5:yO#$gQaO,5:}O#$nQdO,5:{O#&jQdO,5>wO#(fQaO'#HdO#(vQ`O,5>vOOQS1G0d1G0dO#)OQ`O1G0dO#)TQ`O'#I^O#*mQ`O'#I^O#*uQ`O,5;ROIbQaO,5;ROOQS1G0u1G0uPOQO'#E}'#E}O#+fQdO1G1RO0aQ`O'#HgO#-hQtO,5;cO#.YQaO1G0|OOQS,5;e,5;eO#0iQtO,5;gO#0vQdO1G0cO*kQaO1G0cO#2cQdO1G1YO#4OQdO1G1[OOQO,5<^,5<^O#4`Q`O'#HjO#4nQ`O,5?ROOQO1G1w1G1wO#4vQ`O,5?ZO!&WQdO1G3TO<_Q`O1G3TOOQ#u1G3U1G3UO#4{Q`O1G3YO!1RQ`O1G3VO#5WQ`O1G3VO#5]QpO'#FoO#5kQ`O'#FoO#5{Q`O'#FoO#6WQ`O'#FoO#6`Q`O'#FsO#6eQ`O'#FtOOQO'#If'#IfO#6lQ`O'#IeO#6tQ`O,5<YOOQS1G1r1G1rO0aQ`O1G1rO#6yQ`O1G1rO#7OQ`O1G1rO!%WQ`O1G4uO#7ZQdO1G4uO!%WQ`O1G1rO#7iQ`O1G1|O!%WQ`O1G1|O9yQaO,5<kO#7qQdO'#HqO#8PQdO,5?YOOQ#u1G3c1G3cO*kQaO1G1|O0aQ`O1G1|O#8[QdO1G1}O7RQ`O'#FyO7RQ`O'#FzO#:nQ`O'#F{OOQS1G1}1G1}O!-xQ`O1G1}O!1UQ`O1G1}O!1RQ`O1G1}O#;eO`O,5<xO#;jO`O,5<xO#;uO!bO,5<yO#<TQ`O,5<|OOOQ-E;q-E;qOOQS1G2c1G2cO#<[QaO'#GeO#<uQ$VO1G2jO#AuQ`O1G2jO#BQQ`O'#GgO#B]Q`O'#GjOOQ#u1G2l1G2lO#BhQ`O1G2lOOQ#u'#Gl'#GlOOQ#u'#Iu'#IuOOQ#u1G2q1G2qO#BmQ`O1G2qO,zQ`O1G2sO#BrQaO,5=ZO#ByQ`O,5=ZOOQ#u1G2t1G2tO#COQ`O1G2tO#CTQ`O,5=^OOQ#u1G2w1G2wO#DgQ`O1G2wOOQ#u1G2z1G2zOOQ#u1G2{1G2{OOQ#u1G2|1G2|OOQ#u1G2}1G2}O#DlQ`O'#HxO9oQ`O'#HxO#DqQ$VO1G3OO#IwQ`O1G3QO9yQaO'#HwO#I|QdO,5=[OOQ#u1G3R1G3RO#JXQ`O1G3SO9yQaO,5<iO#J^QdO'#HpO#JlQdO,5?WOOQ#u1G3T1G3TOOQ#u1G3W1G3WO!-xQ`O1G3WOOQ#u1G3X1G3XO#KfQ`O'#HTOOQ#u1G3Y1G3YO#KmQ`O1G3YO0aQ`O1G3YOOQ#u1G3]1G3]O!&WQdO1G3^O#KrQ`O1G3^O#KzQdO'#HzO#L]QdO,5?cO#LhQ`O,5?cO#LmQ`O'#HYO7RQ`O'#HYO#LxQ`O'#IxO#MQQ`O,5=sOOQ#u1G3^1G3^O!.eQ`O1G3^O!.eQ`O1G3^O#MVQeO'#HbO#MgQdO,5>tOOQ#u1G3b1G3bOOQ#u1G3V1G3VO!-xQ`O1G3VO!1UQ`O1G3VOOO#u1G/x1G/xO*kQaO7+%sO#MuQdO7+%sOOQS7+&[7+&[O$ bQ`O,5>yO>UQaO,5;`O$ iQ`O,5;aO$#OQaO'#HfO$#YQ`O,5>zOOQS1G0y1G0yO$#bQ`O'#EYO$#gQ`O'#IXO$#oQ`O,5:sOOQS1G0e1G0eO$#tQ`O1G0eO$#yQ`O1G0iO9yQaO1G0iOOQO,5>O,5>OOOQO-E;b-E;bOOQS7+&O7+&OO>UQaO,5;SO$%`QaO'#HeO$%jQ`O,5>xOOQS1G0m1G0mO$%rQ`O1G0mOOQS,5>R,5>ROOQS-E;e-E;eO$%wQdO7+&hO$'yQtO1G1RO$(WQdO7+%}OOQS1G0i1G0iOOQO,5>U,5>UOOQO-E;h-E;hOOQ#u7+(o7+(oO!&WQdO7+(oOOQ#u7+(t7+(tO#KmQ`O7+(tO0aQ`O7+(tOOQ#u7+(q7+(qO!-xQ`O7+(qO!1UQ`O7+(qO!1RQ`O7+(qO$)sQ`O,5<ZO$*OQ`O,5<ZO$*WQ`O,5<_O$*]QpO,5<ZO>UQaO,5<ZOOQO,5<_,5<_O$*kQpO,5<`O$*sQ`O,5<`O$+OQ`O'#HkO$+iQ`O,5?POOQS1G1t1G1tO$+qQpO7+'^O$+yQ`O'#FuO$,UQ`O7+'^OOQS7+'^7+'^O0aQ`O7+'^O#6yQ`O7+'^O$,^QdO7+*aO0aQ`O7+*aO$,lQ`O7+'^O*kQaO7+'hO0aQ`O7+'hO$,wQ`O7+'hO$-PQdO1G2VOOQS,5>],5>]OOQS-E;o-E;oO$.iQdO7+'hO$.yQpO7+'hO$/RQdO'#IiOOQO,5<e,5<eOOQO,5<f,5<fO$/dQpO'#GOO$/lQ`O'#GOOOQO'#Ik'#IkOOQO'#Ho'#HoO$0]Q`O'#GOO<_Q`O'#F|O!&WQdO'#GOO!.YQdO'#GQO7RQ`O'#GROOQO'#Ij'#IjOOQO'#Hn'#HnO$0yQ`O,5<gOOQ#y,5<g,5<gOOQS7+'i7+'iO!-xQ`O7+'iO!1UQ`O7+'iOOOQ1G2d1G2dO$1pO`O1G2dO$1uO!bO1G2eO$2TO`O'#G`O$2YO`O1G2eOOOQ1G2h1G2hO$2_QaO,5=PO,zQ`O'#HtO$2xQ$VO7+(UOhQaO7+(UO,zQ`O'#HuO$7xQ`O7+(UO!&WQdO7+(UO$8TQ`O7+(UO$8YQaO'#GhO$:iQ`O'#GiOOQO'#Hv'#HvO$:qQ`O,5=ROOQ#u,5=R,5=RO$:|Q`O,5=UO!&WQdO7+(WO!&WQdO7+(]O!&WQdO7+(_O$;XQaO1G2uO$;`Q`O1G2uO$;eQaO1G2uO!&WQdO7+(`O9yQaO1G2xO!&WQdO7+(cO0aQ`O'#GyO9oQ`O,5>dOOQ#u,5>d,5>dOOQ#u-E;v-E;vO$;lQaO7+(lO$<TQdO,5>cOOQS-E;u-E;uO!&WQdO7+(nO$=mQdO1G2TOOQS,5>[,5>[OOQS-E;n-E;nOOQ#u7+(r7+(rO$?nQ`O'#GQO$?uQ`O'#GQO$@ZQ`O'#HUOOQO'#Hy'#HyO$@`Q`O,5=oOOQ#u,5=o,5=oO$@gQpO7+(tOOQ#u7+(x7+(xO!&WQdO7+(xO$@rQdO,5>fOOQS-E;x-E;xO$AQQdO1G4}O$A]Q`O,5=tO$AbQ`O,5=tO$AmQ`O'#H{O$BRQ`O,5?dOOQS1G3_1G3_O#KrQ`O7+(xO$BZQdO,5=|OOQS-E;`-E;`O$CvQdO<<I_OOQS1G4e1G4eO$EcQ`O1G0zOOQO,5>Q,5>QOOQO-E;d-E;dO$8YQaO,5:tO$FxQaO'#HcO$GVQ`O,5>sOOQS1G0_1G0_OOQS7+&P7+&PO$G_Q`O7+&TO$HtQ`O1G0nO$JZQ`O,5>POOQO,5>P,5>POOQO-E;c-E;cOOQS7+&X7+&XOOQS7+&T7+&TOOQ#u<<LZ<<LZOOQ#u<<L`<<L`O$@gQpO<<L`OOQ#u<<L]<<L]O!-xQ`O<<L]O!1UQ`O<<L]O>UQaO1G1uO$KsQ`O1G1uO$LOQ`O1G1yOOQO1G1y1G1yO$LTQ`O1G1uO$L]Q`O1G1uO$MrQ`O1G1zO>UQaO1G1zOOQO,5>V,5>VOOQO-E;i-E;iOOQS<<Jx<<JxO$M}Q`O'#IhO$NVQ`O'#IhO$N[Q`O,5<aO0aQ`O<<JxO$+qQpO<<JxO$NaQ`O<<JxO0aQ`O<<M{O$NiQtO<<M{O#6yQ`O<<JxO$NwQdO<<KSO% XQpO<<KSO*kQaO<<KSO0aQ`O<<KSO% aQdO'#HmO% xQdO,5?TO!&WQdO,5<jO$/dQpO,5<jO%!ZQ`O,5<jO<_Q`O,5<hO!.YQdO,5<lOOQO-E;m-E;mO!&WQdO,5<hOOQO,5<j,5<jOOQO,5<l,5<lO%!tQdO,5<mOOQO-E;l-E;lOOQ#y1G2R1G2ROOQS<<KT<<KTO!-xQ`O<<KTOOOQ7+(O7+(OO%#PO`O7+(POOOO,5<z,5<zOOOQ7+(P7+(POhQaO,5>`OOQ#u-E;r-E;rOhQaO<<KpOOQ#u<<Kp<<KpO$8TQ`O,5>aOOQO-E;s-E;sO!&WQdO<<KpO$8TQ`O<<KpO%#UQ`O<<KpO%#ZQ`O,5=SO%$pQaO,5=TOOQO-E;t-E;tOOQ#u1G2m1G2mOOQ#u<<Kr<<KrOOQ#u<<Kw<<KwOOQ#u<<Ky<<KyOOQT7+(a7+(aO%%QQ`O7+(aO%%VQaO7+(aO%%^Q`O7+(aOOQ#u<<Kz<<KzO%%cQ`O7+(dO%&xQ`O7+(dOOQ#u<<K}<<K}O%&}QpO,5=eOOQ#u1G4O1G4OO%'YQ`O<<LWOOQ#u<<LY<<LYO$?uQ`O,5<lO%'_Q`O,5=pO%'dQdO,5=pOOQO-E;w-E;wOOQ#u1G3Z1G3ZO#KmQ`O<<L`OOQ#u<<Ld<<LdO%'oQ`O1G4QO%'tQdO7+*iOOQO1G3`1G3`O%(PQ`O1G3`O%(UQ`O'#HZO7RQ`O'#HZOOQO,5>g,5>gOOQO-E;y-E;yO!&WQdO<<LdO%(aQ`O1G0`OOQO,5=},5=}OOQO-E;a-E;aO>UQaO,5;TOOQ#uANAzANAzO#KmQ`OANAzOOQ#uANAwANAwO!-xQ`OANAwO%)vQ`O7+'aO>UQaO7+'aOOQO7+'e7+'eO%+]Q`O7+'aO%+hQ`O7+'eO>UQaO7+'fO%+mQ`O7+'fO%-SQ`O'#HlO%-bQ`O,5?SO%-bQ`O,5?SOOQO1G1{1G1{O$+qQpOAN@dOOQSAN@dAN@dO0aQ`OAN@dO%-jQtOANCgO%-xQ`OAN@dO*kQaOAN@nO%.QQdOAN@nO%.bQpOAN@nOOQS,5>X,5>XOOQS-E;k-E;kOOQO1G2U1G2UO!&WQdO1G2UO$/dQpO1G2UO<_Q`O1G2SO!.YQdO1G2WO!&WQdO1G2SOOQO1G2W1G2WOOQO1G2S1G2SO%.jQaO'#GSOOQO1G2X1G2XOOQSAN@oAN@oOOOQ<<Kk<<KkOOQ#u1G3z1G3zOOQ#uANA[ANA[OOQO1G3{1G3{O%0iQ`OANA[O!&WQdOANA[O%0nQaO1G2nO%1OQaO1G2oOOQT<<K{<<K{O%1`Q`O<<K{O%1eQaO<<K{O*kQaO,5=_OOQT<<LO<<LOOOQO1G3P1G3PO%1lQ`O1G3PO!+WQeOANArO%1qQdO1G3[OOQO1G3[1G3[O%1|Q`O1G3[OOQS7+)l7+)lOOQO7+(z7+(zO%2UQ`O,5=uO%2ZQ`O,5=uOOQ#uANBOANBOO%2fQ`O1G0oOOQ#uG27fG27fOOQ#uG27cG27cO%3{Q`O<<J{O>UQaO<<J{OOQO<<KP<<KPO%5bQ`O<<KQOOQO,5>W,5>WO%6wQ`O,5>WOOQO-E;j-E;jO%6|Q`O1G4nOOQSG26OG26OO$+qQpOG26OO0aQ`OG26OO%7UQdOG26YO*kQaOG26YOOQO7+'p7+'pO!&WQdO7+'pO!&WQdO7+'nOOQO7+'r7+'rOOQO7+'n7+'nO%7fQ`OLD+tO%8uQ`O'#E}O%9PQ`O'#IZO!&WQdO'#HrO%:|QaO,5<nOOQO,5<n,5<nO!&WQdOG26vOOQ#uG26vG26vO%<{QaO7+(YOOQTANAgANAgO%=]Q`OANAgO%=bQ`O1G2yOOQO7+(k7+(kOOQ#uG27^G27^O%=iQ`OG27^OOQO7+(v7+(vO%=nQ`O7+(vO!&WQdO7+(vOOQO1G3a1G3aO%=vQ`O1G3aO%={Q`OAN@gOOQO1G3r1G3rOOQSLD+jLD+jO$+qQpOLD+jO%?bQdOLD+tOOQO<<K[<<K[OOQO<<KY<<KYO%?rQ`O,5<oO%?wQ`O,5<pOOQP,5>^,5>^OOQP-E;p-E;pOOQO1G2Y1G2YOOQ#uLD,bLD,bOOQTG27RG27RO!&WQdOLD,xO!&WQdO<<LbOOQO<<Lb<<LbOOQO7+({7+({OOQS!$( U!$( UOOQS1G2Z1G2ZOOQS1G2[1G2[O%@PQdO1G2[OOQ#u!$(!d!$(!dOOQOANA|ANA|OOQS7+'v7+'vO%@[Q`O'#E{O%@[Q`O'#E{O%@aQ`O,5;gO%@fQdO,5<cO%BbQaO,5:}O*kQaO1G0iO%BiQaO'#FwO#.YQaO'#GVO#.YQaO'#GYO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO%BpQdO'#I]O%D`QdO'#I]O#.YQaO'#EaO#.YQaO'#I]O%FbQaO,5:wO#.YQaO,5;nO#.YQaO,5;pO%FiQdO,5<PO%HeQdO,5<QO%JaQdO,5<RO%L]QdO,5<SO%NXQdO,5<SO%NoQdO,5<VO&!kQdO,5<tO#.YQaO1G0XO&$gQdO1G1]O&&cQdO1G1]O&(_QdO1G1]O&*ZQdO1G1]O&,VQdO1G1]O&.RQdO1G1]O&/}QdO1G1]O&1yQdO1G1]O&3uQdO1G1]O&5qQdO1G1]O&7mQdO1G1]O&9iQdO1G1]O&;eQdO1G1]O&=aQdO1G1]O&?]QdO1G1]O&AXQdO,5:{O&CTQdO,5>wO&EPQdO1G0cO#.YQaO1G0cO&F{QdO1G1YO&HwQdO1G1[O#.YQaO1G1|O#.YQaO7+%sO&JsQdO7+%sO&LoQdO7+%}O#.YQaO7+'hO&NkQdO7+'hO'!gQdO<<I_O'$cQdO<<KSO#.YQaO<<KSO#.YQaOAN@nO'&_QdOAN@nO'(ZQdOG26YO#.YQaOG26YO'*VQdOLD+tO',RQaO,5:}O'.QQaO1G0iO'/|QdO'#IWO'0aQeO'#FUO'4aQeO'#FUO#.YQaO'#FeO'.QQaO'#FeO#.YQaO'#FfO'.QQaO'#FfO#.YQaO'#FgO'.QQaO'#FgO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FkO'.QQaO'#FkO'8gQaO,5:mO'8nQ`O,5<bO'8vQ`O1G0XO'.QQaO1G0|O':YQ`O1G1|O':bQ`O7+'hO':jQpO7+'hO':rQpO<<KSO':zQpOAN@nO';SQaO'#FwO'.QQaO'#GVO'.QQaO'#GYO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO'#EaO'.QQaO'#I]O'=RQaO,5:wO'.QQaO,5;nO'.QQaO,5;pO'?QQdO,5<PO'ASQdO,5<QO'CUQdO,5<RO'EWQdO,5<SO'GYQdO,5<SO'GvQdO,5<VO'IxQdO,5<tO'.QQaO1G0XO'KzQdO1G1]O'M|QdO1G1]O(!OQdO1G1]O($QQdO1G1]O(&SQdO1G1]O((UQdO1G1]O(*WQdO1G1]O(,YQdO1G1]O(.[QdO1G1]O(0^QdO1G1]O(2`QdO1G1]O(4bQdO1G1]O(6dQdO1G1]O(8fQdO1G1]O(:hQdO1G1]O(<jQdO,5:{O(>lQdO,5>wO(@nQdO1G0cO'.QQaO1G0cO(BpQdO1G1YO(DrQdO1G1[O'.QQaO1G1|O'.QQaO7+%sO(FtQdO7+%sO(HvQdO7+%}O'.QQaO7+'hO(JxQdO7+'hO(LzQdO<<I_O(N|QdO<<KSO'.QQaO<<KSO'.QQaOAN@nO)#OQdOAN@nO)%QQdOG26YO'.QQaOG26YO)'SQdOLD+tO))UQaO,5:}O#.YQaO1G0iO))]Q`O'#FvO))eQpO,5;bO))mQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO))uQdO,5<cO)+wQdO'#I]O)-vQdO'#IWO).aQaO,5:mO).hQ`O,5<bO).pQ`O1G0XO)0SQ`O1G1|O)0[Q`O7+'hO)0dQpO7+'hO)0lQpO<<KSO)0tQpOAN@nO0aQ`O'#EvO9yQaO'#FeO9yQaO'#FfO9yQaO'#FgO9yQaO'#FhO9yQaO'#FhO9yQaO'#FkO)0|QaO'#FwO9yQaO'#GVO9yQaO'#GYO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO)1TQ`O'#FlO*kQaO'#EaO*kQaO'#I]O)1]QaO,5:wO9yQaO,5;nO9yQaO,5;pO)1dQdO,5<PO)3`QdO,5<QO)5[QdO,5<RO)7WQdO,5<SO)9SQdO,5<SO)9jQdO,5<VO);fQdO,5<cO)=bQdO,5<tO)?^Q`O'#IvO)@sQ`O'#IYO9yQaO1G0XO)BYQdO1G1]O)DUQdO1G1]O)FQQdO1G1]O)G|QdO1G1]O)IxQdO1G1]O)KtQdO1G1]O)MpQdO1G1]O* lQdO1G1]O*#hQdO1G1]O*%dQdO1G1]O*'`QdO1G1]O*)[QdO1G1]O*+WQdO1G1]O*-SQdO1G1]O*/OQdO1G1]O*0zQaO,5:}O*1RQdO,5:{O*1cQdO,5>wO*1sQaO'#HdO*2TQ`O,5>vO*2]QdO1G0cO9yQaO1G0cO*4XQdO1G1YO*6TQdO1G1[O9yQaO1G1|O>UQaO'#HwO*8PQ`O,5=[O*8XQaO'#HbO*8cQ`O,5>tO9yQaO7+%sO*8kQdO7+%sO*:gQ`O1G0iO>UQaO1G0iO*;|QdO7+%}O9yQaO7+'hO*=xQdO7+'hO*?tQ`O,5>cO*AZQ`O,5=|O*BpQdO<<I_O*DlQ`O7+&TO*FRQdO<<KSO9yQaO<<KSO9yQaOAN@nO*G}QdOAN@nO*IyQdOG26YO9yQaOG26YO*KuQdOLD+tO*MqQaO,5:}O9yQaO1G0iO*MxQdO'#I]O*NcQ`O'#FvO*NkQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO*NsQdO'#IWO+ ^QeO'#FUO+ zQaO'#FUO+#sQaO'#FUO+%`QaO'#FUO>UQaO'#FeO>UQaO'#FfO>UQaO'#FgO>UQaO'#FhO>UQaO'#FhO>UQaO'#FkO+'XQaO'#FwO>UQaO'#GVO>UQaO'#GYO+'`QaO,5:mO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO+'gQ`O'#I]O$8YQaO'#EaO+)PQaOG26YO$8YQaO'#I]O+*{Q`O'#I[O++TQaO,5:wO>UQaO,5;nO>UQaO,5;pO++[Q`O,5<PO+,wQ`O,5<QO+.dQ`O,5<RO+0PQ`O,5<SO+1lQ`O,5<SO+3XQ`O,5<VO+4tQ`O,5<bO+4|Q`O,5<cO+6iQ`O,5<tO+8UQ`O1G0XO>UQaO1G0XO+9hQ`O1G1]O+;TQ`O1G1]O+<pQ`O1G1]O+>]Q`O1G1]O+?xQ`O1G1]O+AeQ`O1G1]O+CQQ`O1G1]O+DmQ`O1G1]O+FYQ`O1G1]O+GuQ`O1G1]O+IbQ`O1G1]O+J}Q`O1G1]O+LjQ`O1G1]O+NVQ`O1G1]O, rQ`O1G1]O,#_Q`O1G0cO>UQaO1G0cO,$zQ`O1G1YO,&gQ`O1G1[O,(SQ`O1G1|O>UQaO1G1|O>UQaO7+%sO,([Q`O7+%sO,)wQ`O7+%}O>UQaO7+'hO,+dQ`O7+'hO,+lQ`O7+'hO,-XQpO7+'hO,-aQ`O<<I_O,.|Q`O<<KSO,0iQpO<<KSO>UQaO<<KSO>UQaOAN@nO,0qQ`OAN@nO,2^QpOAN@nO,2fQ`OG26YO>UQaOG26YO,4RQ`OLD+tO,5nQaO,5:}O>UQaO1G0iO,5uQ`O'#I]O$8YQaO'#FeO$8YQaO'#FfO$8YQaO'#FgO$8YQaO'#FhO$8YQaO'#FhO+)PQaO'#FhO$8YQaO'#FkO,6SQaO'#FwO,6ZQaO'#FwO$8YQaO'#GVO+)PQaO'#GVO$8YQaO'#GYO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO,8YQ`O'#FlO>UQaO'#EaO>UQaO'#I]O,8bQaO,5:wO,8iQaO,5:wO$8YQaO,5;nO+)PQaO,5;nO$8YQaO,5;pO,:hQ`O,5<PO,<TQ`O,5<QO,=pQ`O,5<RO,?]Q`O,5<SO,@xQ`O,5<SO,BeQ`O,5<SO,CtQ`O,5<VO,EaQ`O,5<cO%7fQ`O,5<cO,F|Q`O,5<tO$8YQaO1G0XO+)PQaO1G0XO,HiQ`O1G1]O,JUQ`O1G1]O,KeQ`O1G1]O,MQQ`O1G1]O,NaQ`O1G1]O- |Q`O1G1]O-#]Q`O1G1]O-$xQ`O1G1]O-&XQ`O1G1]O-'tQ`O1G1]O-)TQ`O1G1]O-*pQ`O1G1]O-,PQ`O1G1]O--lQ`O1G1]O-.{Q`O1G1]O-0hQ`O1G1]O-1wQ`O1G1]O-3dQ`O1G1]O-4sQ`O1G1]O-6`Q`O1G1]O-7oQ`O1G1]O-9[Q`O1G1]O-:kQ`O1G1]O-<WQ`O1G1]O-=gQ`O1G1]O-?SQ`O1G1]O-@cQ`O1G1]O-BOQ`O1G1]O-C_Q`O1G1]O-DzQ`O1G1]O-FZQ`O,5:{O-GvQ`O,5>wO-IcQ`O1G0cO-KOQ`O1G0cO$8YQaO1G0cO+)PQaO1G0cO-L_Q`O1G1YO-MzQ`O1G1YO. ZQ`O1G1[O$8YQaO1G1|O$8YQaO7+%sO+)PQaO7+%sO.!vQ`O7+%sO.$cQ`O7+%sO.%rQ`O7+%}O.'_Q`O7+%}O$8YQaO7+'hO.(nQ`O7+'hO.*ZQ`O<<I_O.+vQ`O<<I_O.-VQ`O<<KSO$8YQaO<<KSO$8YQaOAN@nO..rQ`OAN@nO.0_Q`OG26YO$8YQaOG26YO.1zQ`OLD+tO.3gQaO,5:}O.3nQaO,5:}O$8YQaO1G0iO+)PQaO1G0iO.5mQ`O'#I]O.7PQ`O'#I]O.:fQ`O'#IWO.:vQ`O'#FvO.;OQaO,5:mO.;VQ`O,5<bO.;_Q`O,5<bO!%WQ`O,5<bO.;gQ`O1G0XO.<yQ`O,5:{O.>fQ`O,5>wO.@RQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO.@ZQ`O7+'hO.@cQpO7+'hO.@kQpO<<KSO0aQ`O<<KSO.@sQpOAN@nO.@{Q`O'#IWO.A]Q`O'#IWO.CSQaO,5:mO.CZQaO,5:mO.CbQ`O,5<bO.CjQ`O7+'hO.CrQ`O1G0XO.EUQ`O1G0XO.FhQ`O1G1|O.FpQ`O7+'hO.FxQpO7+'hO.GQQpOAN@nO.GYQpO<<KSO.GbQpOAN@nO.GjQ`O'#FvO.GrQ`O'#FlO.GzQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO.HSQ`O'#FvO.H[Q`O,5<bO.HdQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O<<KSO0aQ`O7+'hO0aQ`O<<KSO.HlQ`O'#FlO.HtQ`O'#FlO.H|Q`O'#Fl",
	  stateData: ".Ic~O!dOS!eOS&vOS!gQQ~O!iTO&wRO~OPgOQ|OS!lOU^OW}OX!XO[mO]!_O^!WO`![Oa!SOb!]Ok!dOm!lOowOp!TOq!UOsuOt!gOu!VOv!POxkOykO|!bO}`O!O]O!P!eO!QxO!R}O!TpO!UlO!VlO!W!YO!X!QO!YzO!Z!cO![!ZO!]!^O!^!fO!`!`O!a!RO!cjO!mWO!oXO!sYO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$drO$l!kO$zyO${!OO$}}O%O}O%V|O'g{O~O!g!mO~O&wRO!i!hX&p!hX&t!hX~O!i!pO~O!d!qO!e!qO!g!mO&t!tO&v!qO~PhO!n!vO~PhOT'VXz'VX!S'VX!b'VX!m'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX&s'VX~O!q!xO~P&sOT#TOz#RO!S#UO!b#VO!m#cO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO&s#cO~OPgOQ|OU^OW}O[mOowOs#hOxkOykO}`O!O]O!QxO!R}O!TpO!UlO!VlO!YzO!cjO!s#gO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$zyO${!OO$}}O%O}O%V|O'g{O~O!y[O~O!y#kO~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#S#oO#U#nO#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O#X'OP~O!}#sO~P-UO!y#tO~O#b#vO#daO#ebO~O#p#xO~O!s#yO~OU$PO!R$PO!s$OO!v#}O#p2XO~OT&zXz&zX!S&zX!b&zX!m&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX&s&zX!x&zX!n&zX~O#u$RO#w$SO~P0rOP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{OT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX~Or$UO#S6yO#U6xO~P2yO!s#gO#peO~OS$gO]$bOk$eOm$gOs$aO!`$cO$drO$l$fO~O!s$kO!y$hO#S$jO~Oo$mOs$lO#b$nO~O!y$hO#S$rO~O$l$tO~P*kOR$zO!o$yO#b$xO#e$yO&q$zO~O'f$|O~P8lO!y%RO~O!y%TO~O!s%VO~O!m#cO&s#cO~P*kO!oXO~O!y%_O~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O~O!y%cO~O!s%dO~O]$bO~O!s%hO~O!s%iO~O!s%jO~O!oXO!s#gO#peO~O]%rOs%rO!o%pO!s#gO#p%nO~O!s%vO~O!i%wO&t%wO&wRO~O&t%zO~PhO!n%{O~PhOPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!q%}O~P>UO#X&PO~P>UO!o&SO!s&RO#b&RO~OPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s&VO!y[O#U&WO#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!x'SP~PAOO!s&[O#b&[O~OT#TOz#RO!S#UO!b#VO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO~O!x&nO~PCqO!x'VX!}'VX#O'VX#X'VX!n'VXV'VX!q'VX#u'VX#w'VXw'VX~P&sO!y$hO#S&oO~Oo$mOs$lO~O!o&pO~O!}&sO#S;dO#U;cO!x'OP~P9yOT6iOz6gO!S6jO!b6kO!o!{O!v8sO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'PX#X'PX~O#O&tO~PGSO!}&wO#X'OX~O#X&yO~O!}'OO!x'QP~P9yO!n'PO~PCqO!m#oa!o#oa#S#oa#p#qX&s#oa!x#oa#O#oaw#oa~OT#oaz#oa!S#oa!b#oa!v#oa!y#oa#W#oa#`#oa#a#oa#s#oa#z#oa#{#oa#|#oa#}#oa$O#oa$Q#oa$R#oa$S#oa$T#oa$U#oa$V#oa$W#oa$z#oa!}#oa#X#oa!n#oaV#oa!q#oa#u#oa#w#oa~PIpO!s'RO~O!x'UO#l'SO~O!x'VX#l'VX#p#qX#S'VX#U'VX#b'VX!o'VX#O'VXw'VX!m'VX&s'VX~O#S'YO~P*kO!m$Xa&s$Xa!x$Xa!n$Xa~PCqO!m$Ya&s$Ya!x$Ya!n$Ya~PCqO!m$Za&s$Za!x$Za!n$Za~PCqO!m$[a&s$[a!x$[a!n$[a~PCqO!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO$z#dOT$[a!S$[a!b$[a!m$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a&s$[a!x$[a!n$[a~Oz#RO~PNyO!m$_a&s$_a!x$_a!n$_a~PCqO!y!}O!}$fX#X$fX~O!}'^O#X'ZX~O#X'`O~O!s$kO#S'aO~O]'cO~O!s'eO~O!s'fO~O$l'gO~O!`'mO#S'kO#U'lO#b'jO$drO!x'XP~P0aO!^'sO!oXO!q'rO~O!s'uO!y$hO~O!y$hO#S'wO~O!y$hO#S'yO~O#u'zO!m$sX!}$sX&s$sX~O!}'{O!m'bX&s'bX~O!m#cO&s#cO~O!q(PO#O(OO~O!m$ka&s$ka!x$ka!n$ka~PCqOl(ROw(SO!o(TO!y!}O~O!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO~OT$yaz$ya!S$ya!b$ya!m$ya!v$ya#S$ya#z$ya#{$ya#|$ya#}$ya$O$ya$Q$ya$R$ya$S$ya$T$ya$U$ya$V$ya$W$ya$z$ya&s$ya!x$ya!}$ya#O$ya#X$ya!n$ya!q$yaV$ya#u$ya#w$ya~P!'WO!m$|a&s$|a!x$|a!n$|a~PCqO#W([O#`(YO#a(YO&r(ZOR&gX!o&gX#b&gX#e&gX&q&gX'f&gX~O'f(_O~P8lO!q(`O~PhO!o(cO!q(dO~O!q(`O&s(gO~PhO!a(kO~O!m(lO~P9yOZ(wOn(xO~O!s(zO~OT6iOz6gO!S6jO!b6kO!v8sO!}({O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'jX&s'jX~P!'WO#u)PO~O!})QO!m'`X&s'`X~Ol(RO!o(TO~Ow(SO!o)WO!q)ZO~O!m#cO!oXO&s#cO~O!o%pO!s#yO~OV)aO!})_O!m'kX&s'kX~O])cOs)cO!s#gO#peO~O!o%pO!s#gO#p)hO~OT6iOz6gO!S6jO!b6kO!v8sO!})iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&|X&s&|X#O&|X~P!'WOl(ROw(SO!o(TO~O!i)oO&t)oO~OT8vOz8tO!S8wO!b8xO!q)pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#X)rO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!n)rO~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'TX!}'TX~P!'WOT'VXz'VX!S'VX!b'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX~O!q)tO!x'VX!}'VX~P!5xO!x#iX!}#iX~P>UO!})vO!x'SX~O!x)xO~O$z#dOT#yiz#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi$W#yi&s#yi!x#yi!}#yi#O#yi#X#yi!n#yi!q#yiV#yi#u#yi#w#yi~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi&s#yi!x#yi!n#yi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!b#VO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi~P!'WOz#RO$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi~P!'WO_)yO~P9yO!x)|O~O#S*PO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Ta#X#Ta#O#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'Pa#X'Pa#O'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WO#S#oO#U#nO!}&WX#X&WX~P9yO!}&wO#X'Oa~O#X*SO~OT6iOz6gO!S6jO!b6kO!v8sO!}*UO#O*TO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'QX~P!'WO!}*UO!x'QX~O!x*WO~O!m#oi!o#oi#S#oi#p#qX&s#oi!x#oi#O#oiw#oi~OT#oiz#oi!S#oi!b#oi!v#oi!y#oi#W#oi#`#oi#a#oi#s#oi#z#oi#{#oi#|#oi#}#oi$O#oi$Q#oi$R#oi$S#oi$T#oi$U#oi$V#oi$W#oi$z#oi!}#oi#X#oi!n#oiV#oi!q#oi#u#oi#w#oi~P#*zO#l'SO!x#ka#S#ka#U#ka#b#ka!o#ka#O#kaw#ka!m#ka&s#ka~OPgOQ|OU^OW}O[4OOo5xOs#hOx3zOy3zO}`O!O]O!Q2^O!R}O!T4UO!U3|O!V3|O!Y2`O!c3xO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4SO$]4QO$^4SO$aqO$z2_O${!OO$}}O%O}O%V|O'g{O~O#l#oa#U#oa#b#oa~PIpOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pi!S#Pi!b#Pi!m#Pi&s#Pi!x#Pi!n#Pi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#vi!S#vi!b#vi!m#vi&s#vi!x#vi!n#vi~P!'WO!m#xi&s#xi!x#xi!n#xi~PCqO!s#gO#peO!}&^X#X&^X~O!}'^O#X'Za~O!s'uO~Ow(SO!o)WO!q*fO~O!s*jO~O#S*lO#U*mO#b*kO#l'SO~O#S*lO#U*mO#b*kO$drO~P0aO#u*oO!x$cX!}$cX~O#U*mO#b*kO~O#b*pO~O#b*rO~P0aO!}*sO!x'XX~O!x*uO~O!y*wO~O!^*{O!oXO!q*zO~O!q*}O!o'ci!m'ci&s'ci~O!q+QO#O+PO~O#b$nO!m&eX!}&eX&s&eX~O!}'{O!m'ba&s'ba~OT$kiz$ki!S$ki!b$ki!m$ki!o$ki!v$ki!y$ki#S$ki#W$ki#`$ki#a$ki#s$ki#u#fa#w#fa#z$ki#{$ki#|$ki#}$ki$O$ki$Q$ki$R$ki$S$ki$T$ki$U$ki$V$ki$W$ki$z$ki&s$ki!x$ki!}$ki#O$ki#X$ki!n$ki!q$kiV$ki~OS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n+hO#b$nO$aqO$drO~P0aO!s+lO~O#W+nO#`+mO#a+mO~O!s+pO#b+pO$}+pO%T+oO~O!n+qO~PCqOc%XXd%XXh%XXj%XXf%XXg%XXe%XX~PhOc+uOd+sOP%WiQ%WiS%WiU%WiW%WiX%Wi[%Wi]%Wi^%Wi`%Wia%Wib%Wik%Wim%Wio%Wip%Wiq%Wis%Wit%Wiu%Wiv%Wix%Wiy%Wi|%Wi}%Wi!O%Wi!P%Wi!Q%Wi!R%Wi!T%Wi!U%Wi!V%Wi!W%Wi!X%Wi!Y%Wi!Z%Wi![%Wi!]%Wi!^%Wi!`%Wi!a%Wi!c%Wi!m%Wi!o%Wi!s%Wi!y%Wi#W%Wi#b%Wi#d%Wi#e%Wi#p%Wi$T%Wi$]%Wi$^%Wi$a%Wi$d%Wi$l%Wi$z%Wi${%Wi$}%Wi%O%Wi%V%Wi&p%Wi'g%Wi&t%Wi!n%Wih%Wij%Wif%Wig%WiY%Wi_%Wii%Wie%Wi~Oc+yOd+vOh+xO~OY+zO_+{O!n,OO~OY+zO_+{Oi%^X~Oi,QO~Oj,RO~O!m,TO~P9yO!m,VO~Of,WO~OT6iOV,XOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOg,YO~O!y,ZO~OZ(wOn(xOP%liQ%liS%liU%liW%liX%li[%li]%li^%li`%lia%lib%lik%lim%lio%lip%liq%lis%lit%liu%liv%lix%liy%li|%li}%li!O%li!P%li!Q%li!R%li!T%li!U%li!V%li!W%li!X%li!Y%li!Z%li![%li!]%li!^%li!`%li!a%li!c%li!m%li!o%li!s%li!y%li#W%li#b%li#d%li#e%li#p%li$T%li$]%li$^%li$a%li$d%li$l%li$z%li${%li$}%li%O%li%V%li&p%li'g%li&t%li!n%lic%lid%lih%lij%lif%lig%liY%li_%lii%lie%li~O#u,_O~O!}({O!m%da&s%da~O!x,bO~O!s%dO!m&dX!}&dX&s&dX~O!})QO!m'`a&s'`a~OS+^OY,iOm+^Os$aO!^+dO!_+^O!`+^O$aqO$drO~O!n,lO~P#JwO!o)WO~O!o%pO!s'RO~O!s#gO#peO!m&nX!}&nX&s&nX~O!})_O!m'ka&s'ka~O!s,rO~OV,sO!n%|X!}%|X~O!},uO!n'lX~O!n,wO~O!m&UX!}&UX&s&UX#O&UX~P9yO!})iO!m&|a&s&|a#O&|a~Oz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq&s!uq!x!uq!n!uq~P!'WO!n,|O~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#ia!}#ia~P!'WO!x&YX!}&YX~PAOO!})vO!x'Sa~O#O-QO~O!}-RO!n&{X~O!n-TO~O!x-UO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vi#X#Vi~P!'WO!x&XX!}&XX~P9yO!}*UO!x'Qa~O!x-[O~OT#jqz#jq!S#jq!b#jq!m#jq!v#jq#S#jq#u#jq#w#jq#z#jq#{#jq#|#jq#}#jq$O#jq$Q#jq$R#jq$S#jq$T#jq$U#jq$V#jq$W#jq$z#jq&s#jq!x#jq!}#jq#O#jq#X#jq!n#jq!q#jqV#jq~P!'WO#l#oi#U#oi#b#oi~P#*zOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pq!S#Pq!b#Pq!m#Pq&s#Pq!x#Pq!n#Pq~P!'WO#u-dO!x$ca!}$ca~O#U-fO#b-eO~O#b-gO~O#S-hO#U-fO#b-eO#l'SO~O#b-jO#l'SO~O#u-kO!x$ha!}$ha~O!`'mO#S'kO#U'lO#b'jO$drO!x&_X!}&_X~P0aO!}*sO!x'Xa~O!oXO#l'SO~O#S-pO#b-oO!x'[P~O!oXO!q-rO~O!q-uO!o'cq!m'cq&s'cq~O!^-wO!oXO!q-rO~O!q-{O#O-zO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$si!}$si&s$si~P!'WO!m$jq&s$jq!x$jq!n$jq~PCqO#O-zO#l'SO~O!}-|Ow']X!o']X!m']X&s']X~O#b$nO#l'SO~OS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO$drO~P0aOS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO~P0aOS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n.ZO#b$nO$aqO$drO~P0aO!s.^O~O!s._O#b._O$}._O%T+oO~O$}.`O~O#X.aO~Oc%Xad%Xah%Xaj%Xaf%Xag%Xae%Xa~PhOc.dOd+sOP%WqQ%WqS%WqU%WqW%WqX%Wq[%Wq]%Wq^%Wq`%Wqa%Wqb%Wqk%Wqm%Wqo%Wqp%Wqq%Wqs%Wqt%Wqu%Wqv%Wqx%Wqy%Wq|%Wq}%Wq!O%Wq!P%Wq!Q%Wq!R%Wq!T%Wq!U%Wq!V%Wq!W%Wq!X%Wq!Y%Wq!Z%Wq![%Wq!]%Wq!^%Wq!`%Wq!a%Wq!c%Wq!m%Wq!o%Wq!s%Wq!y%Wq#W%Wq#b%Wq#d%Wq#e%Wq#p%Wq$T%Wq$]%Wq$^%Wq$a%Wq$d%Wq$l%Wq$z%Wq${%Wq$}%Wq%O%Wq%V%Wq&p%Wq'g%Wq&t%Wq!n%Wqh%Wqj%Wqf%Wqg%WqY%Wq_%Wqi%Wqe%Wq~Oc.iOd+vOh.hO~O!q(`O~OP6]OQ|OU^OW}O[:fOo>ROs#hOx:dOy:dO}`O!O]O!Q:kO!R}O!T:jO!U:eO!V:eO!Y:oO!c8gO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:hO$]:gO$^:hO$aqO$z:mO${!OO$}}O%O}O%V|O'g{O~O!m.lO!q.lO~OY+zO_+{O!n.nO~OY+zO_+{Oi%^a~O!x.rO~P>UO!m.tO~O!m.tO~P9yOQ|OW}O!R}O$}}O%O}O%V|O'g{O~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&ka!}&ka&s&ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$qi!}$qi&s$qi~P!'WOS+^Om+^Os$aO!_+^O!`+^O$aqO$drO~OY/PO~P$?VOS+^Om+^Os$aO!_+^O!`+^O$aqO~O!s/QO~O!n/SO~P#JwOw(SO!o)WO#l'SO~OV/VO!m&na!}&na&s&na~O!})_O!m'ki&s'ki~O!s/XO~OV/YO!n%|a!}%|a~O]/[Os/[O!s#gO#peO!n&oX!}&oX~O!},uO!n'la~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&Ua!}&Ua&s&Ua#O&Ua~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy&s!uy!x!uy!n!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#hi!}#hi~P!'WO_)yO!n&VX!}&VX~P9yO!}-RO!n&{a~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vq#X#Vq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#[i!}#[i~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O/cO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x&Xa!}&Xa~P!'WO#u/iO!x$ci!}$ci~O#b/jO~O#U/lO#b/kO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$ci!}$ci~P!'WO#u/mO!x$hi!}$hi~O!}/oO!x'[X~O#b/qO~O!x/rO~O!oXO!q/uO~O#l'SO!o'cy!m'cy&s'cy~O!m$jy&s$jy!x$jy!n$jy~PCqO#O/xO#l'SO~O!s#gO#peOw&aX!o&aX!}&aX!m&aX&s&aX~O!}-|Ow']a!o']a!m']a&s']a~OU$PO]0QO!R$PO!s$OO!v#}O#b$nO#p2XO~P$?uO!m#cO!o0VO&s#cO~O#X0YO~Oh0_O~OT:tOz:pO!S:vO!b:xO!m0`O!q0`O!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO~P!'WOY%]a_%]a!n%]ai%]a~PhO!x0bO~O!x0bO~P>UO!m0dO~OT6iOz6gO!S6jO!b6kO!v8sO!x0fO#O0eO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WO!x0fO~O!x0gO#b0hO#l'SO~O!x0iO~O!s0jO~O!m#cO#u0lO&s#cO~O!s0mO~O!})_O!m'kq&s'kq~O!s0nO~OV0oO!n%}X!}%}X~OT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!n!|i!}!|i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cq!}$cq~P!'WO#u0vO!x$cq!}$cq~O#b0wO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hq!}$hq~P!'WO#S0zO#b0yO!x&`X!}&`X~O!}/oO!x'[a~O#l'SO!o'c!R!m'c!R&s'c!R~O!oXO!q1PO~O!m$j!R&s$j!R!x$j!R!n$j!R~PCqO#O1RO#l'SO~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1^O!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOh1_O~OY%[i_%[i!n%[ii%[i~PhOY%]i_%]i!n%]ii%]i~PhO!x1bO~O!x1bO~P>UO!x1eO~O!m#cO#u1iO&s#cO~O$}1jO%V1jO~O!s1kO~OV1lO!n%}a!}%}a~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#]i!}#]i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cy!}$cy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hy!}$hy~P!'WO#b1nO~O!}/oO!x'[i~O!m$j!Z&s$j!Z!x$j!Z!n$j!Z~PCqOT:uOz:qO!S:wO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO~P!'WOV1uO{1tO~P!5xOV1uO{1tOT&}Xz&}X!S&}X!b&}X!o&}X!v&}X!y&}X#S&}X#W&}X#`&}X#a&}X#s&}X#u&}X#w&}X#z&}X#{&}X#|&}X#}&}X$O&}X$Q&}X$R&}X$S&}X$T&}X$U&}X$V&}X$W&}X$z&}X~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1xO!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOY%[q_%[q!n%[qi%[q~PhO!x1zO~O!x%gi~PCqOe1{O~O$}1|O%V1|O~O!s2OO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$c!R!}$c!R~P!'WO!m$j!c&s$j!c!x$j!c!n$j!c~PCqO!s2QO~O!`2SO!s2RO~O!s2VO!m$xi&s$xi~O!s'WO~O!s*]O~OT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$ka#u$ka#w$ka&s$ka!x$ka!n$ka!q$ka#X$ka!}$ka~P!'WO#S2]O~P*kO$l$tO~P#.YOT6iOz6gO!S6jO!b6kO!v8sO#O2[O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX&s'PX!x'PX!n'PX~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O3uO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'PX#X'PX#u'PX#w'PX!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~P!'WO#S3dO~P#.YOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Xa#u$Xa#w$Xa&s$Xa!x$Xa!n$Xa!q$Xa#X$Xa!}$Xa~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Ya#u$Ya#w$Ya&s$Ya!x$Ya!n$Ya!q$Ya#X$Ya!}$Ya~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Za#u$Za#w$Za&s$Za!x$Za!n$Za!q$Za#X$Za!}$Za~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$[a#u$[a#w$[a&s$[a!x$[a!n$[a!q$[a#X$[a!}$[a~P!'WOz2aO#u$[a#w$[a!q$[a#X$[a!}$[a~PNyOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$_a#u$_a#w$_a&s$_a!x$_a!n$_a!q$_a#X$_a!}$_a~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$|a#u$|a#w$|a&s$|a!x$|a!n$|a!q$|a#X$|a!}$|a~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#Ta#u#Ta#w#Ta&s#Ta!x#Ta!n#Ta!q#Ta#X#Ta!}#Ta~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m'Pa#u'Pa#w'Pa&s'Pa!x'Pa!n'Pa!q'Pa#X'Pa!}'Pa~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pi!S#Pi!b#Pi!m#Pi#u#Pi#w#Pi&s#Pi!x#Pi!n#Pi!q#Pi#X#Pi!}#Pi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#vi!S#vi!b#vi!m#vi#u#vi#w#vi&s#vi!x#vi!n#vi!q#vi#X#vi!}#vi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#xi#u#xi#w#xi&s#xi!x#xi!n#xi!q#xi#X#xi!}#xi~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq#u!uq#w!uq&s!uq!x!uq!n!uq!q!uq#X!uq!}!uq~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pq!S#Pq!b#Pq!m#Pq#u#Pq#w#Pq&s#Pq!x#Pq!n#Pq!q#Pq#X#Pq!}#Pq~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jq#u$jq#w$jq&s$jq!x$jq!n$jq!q$jq#X$jq!}$jq~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy#u!uy#w!uy&s!uy!x!uy!n!uy!q!uy#X!uy!}!uy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jy#u$jy#w$jy&s$jy!x$jy!n$jy!q$jy#X$jy!}$jy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!R#u$j!R#w$j!R&s$j!R!x$j!R!n$j!R!q$j!R#X$j!R!}$j!R~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!Z#u$j!Z#w$j!Z&s$j!Z!x$j!Z!n$j!Z!q$j!Z#X$j!Z!}$j!Z~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!c#u$j!c#w$j!c&s$j!c!x$j!c!n$j!c!q$j!c#X$j!c!}$j!c~P!'WOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S3vO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lO#u2uO#w2vO!q&zX#X&zX!}&zX~P0rOP6]OU^O[4POo8^Or2wOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S2tO#U2sO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX!q#xX#X#xX!}#xX~P$;lOP6]OU^O[4POo8^Or4xOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S4uO#U4tO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!o#xX!v#xX!}#xX#O#xX#X#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!m#xX&s#xX!x#xX!n#xXV#xX!q#xX~P$;lO!q3PO~P>UO!q5}O#O3gO~OT8vOz8tO!S8wO!b8xO!q3hO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q6OO#O3kO~O!q6PO#O3oO~O#O3oO#l'SO~O#O3pO#l'SO~O#O3sO#l'SO~OP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$l$tO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S5eO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Xa#O$Xa#X$Xa#u$Xa#w$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Ya#O$Ya#X$Ya#u$Ya#w$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Za#O$Za#X$Za#u$Za#w$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$[a#O$[a#X$[a#u$[a#w$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz4dO!}$[a#O$[a#X$[a#u$[a#w$[aV$[a!q$[a~PNyOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$_a#O$_a#X$_a#u$_a#w$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$|a#O$|a#X$|a#u$|a#w$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#Ta#O#Ta#X#Ta#u#Ta#w#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'Pa#O'Pa#X'Pa#u'Pa#w'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi#u#Pi#w#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi#u#vi#w#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#xi#O#xi#X#xi#u#xi#w#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq#u!uq#w!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq#u#Pq#w#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jq#O$jq#X$jq#u$jq#w$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy#u!uy#w!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jy#O$jy#X$jy#u$jy#w$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!R#O$j!R#X$j!R#u$j!R#w$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!Z#O$j!Z#X$j!Z#u$j!Z#w$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!c#O$j!c#X$j!c#u$j!c#w$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S5wO~P#.YO!y$hO#S5{O~O!x4ZO#l'SO~O!y$hO#S5|O~OT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$ka#O$ka#X$ka#u$ka#w$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O5vO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!m'PX#u'PX#w'PX&s'PX!x'PX!n'PX!q'PX#X'PX!}'PX~P!'WO#u4vO#w4wO!}&zX#O&zX#X&zXV&zX!q&zX~P0rO!q5QO~P>UO!q8bO#O5hO~OT8vOz8tO!S8wO!b8xO!q5iO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q8cO#O5lO~O!q8dO#O5pO~O#O5pO#l'SO~O#O5qO#l'SO~O#O5tO#l'SO~O$l$tO~P9yOo5zOs$lO~O#S7oO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Xa#O$Xa#X$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Ya#O$Ya#X$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Za#O$Za#X$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$[a#O$[a#X$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz6gO!}$[a#O$[a#X$[aV$[a!q$[a~PNyOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$_a#O$_a#X$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$ka#O$ka#X$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$|a#O$|a#X$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7sO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'jX~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7uO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&|X~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WO#S7zO~P>UO!m#Ta&s#Ta!x#Ta!n#Ta~PCqO!m'Pa&s'Pa!x'Pa!n'Pa~PCqO#S;dO#U;cO!x&WX!}&WX~P9yO!}7lO!x'Oa~Oz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#xi#O#xi#X#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WO!}7sO!x%da~O!x&UX!}&UX~P>UO!}7uO!x&|a~Oz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vi!}#Vi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jq#O$jq#X$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&ka!}&ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&Ua!}&Ua~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vq!}#Vq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jy#O$jy#X$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!R#O$j!R#X$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!Z#O$j!Z#X$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!c#O$j!c#X$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S8[O~P9yO#O8ZO!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~PGSO!y$hO#S8`O~O!y$hO#S8aO~O#u6zO#w6{O!}&zX#O&zX#X&zXV&zX!q&zX~P0rOr6|O#S#oO#U#nO!}#xX#O#xX#X#xXV#xX!q#xX~P2yOr;iO#S9XO#U9VOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!n#xX!}#xX~P9yOr9WO#S9WO#U9WOT#xXz#xX!S#xX!b#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX~P9yOr9]O#S;dO#U;cOT#xXz#xX!S#xX!b#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX#X#xX!x#xX!}#xX~P9yO$l$tO~P>UO!q7XO~P>UOT6iOz6gO!S6jO!b6kO!v8sO#O7iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'PX!}'PX~P!'WOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lO!}7lO!x'OX~O#S9yO~P>UOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Xa#X$Xa!x$Xa!}$Xa~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Ya#X$Ya!x$Ya!}$Ya~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Za#X$Za!x$Za!}$Za~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$[a#X$[a!x$[a!}$[a~P!'WOz8tO$z#dOT$[a!S$[a!b$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a#X$[a!x$[a!}$[a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$_a#X$_a!x$_a!}$_a~P!'WO!q=dO#O7rO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$ka#X$ka!x$ka!}$ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$|a#X$|a!x$|a!}$|a~P!'WOT8vOz8tO!S8wO!b8xO!q7wO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi#X#yi!x#yi!}#yi~P!'WOz8tO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pi!S#Pi!b#Pi!q#Pi#X#Pi!x#Pi!}#Pi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#vi!S#vi!b#vi!q#vi#X#vi!x#vi!}#vi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q#xi#X#xi!x#xi!}#xi~P!'WO!q=eO#O7|O~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uq!S!uq!b!uq!q!uq!v!uq#X!uq!x!uq!}!uq~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pq!S#Pq!b#Pq!q#Pq#X#Pq!x#Pq!}#Pq~P!'WO!q=iO#O8TO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jq#X$jq!x$jq!}$jq~P!'WO#O8TO#l'SO~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uy!S!uy!b!uy!q!uy!v!uy#X!uy!x!uy!}!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jy#X$jy!x$jy!}$jy~P!'WO#O8UO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!R#X$j!R!x$j!R!}$j!R~P!'WO#O8XO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!Z#X$j!Z!x$j!Z!}$j!Z~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!c#X$j!c!x$j!c!}$j!c~P!'WO#S:bO~P>UO#O:aO!q'PX!x'PX~PGSO$l$tO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$l$tO$z:nO${!OO~P$;lOo8_Os$lO~O#S<jO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S<kO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Xa!q$Xa!n$Xa!}$Xa~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Ya!q$Ya!n$Ya!}$Ya~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Za!q$Za!n$Za!}$Za~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$[a!q$[a!n$[a!}$[a~P!'WOz:pO$z#dOT$[a!S$[a!b$[a!m$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a!n$[a!}$[a~P!'WOz:qO$z#dOT$[a!S$[a!b$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$_a!q$_a!n$_a!}$_a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$ka!q$ka!n$ka!}$ka~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$|a!q$|a!n$|a!}$|a~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi!n#yi!}#yi~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi~P!'WOT:tOz:pO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi~P!'WOT:tOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi!b#yi~P!'WOz:pO#S#QO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi!n#yi!}#yi~P!'WOz:qO#S#QO#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi~P!'WOz:pO#S#QO#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi!n#yi!}#yi~P!'WOz:qO#S#QO#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi~P!'WOz:pO#S#QO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi!n#yi!}#yi~P!'WOz:qO#S#QO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi~P!'WOz:pO#S#QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO#S#QO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!n#yi!}#yi~P!'WOz:qO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi~P!'WOz:pO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi~P!'WOz:pO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!n#yi!}#yi~P!'WOz:qO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi~P!'WOz:pO$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!n#yi!}#yi~P!'WOz:qO$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi~P!'WOz:pO$S;YO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi~P!'WOz:pO$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!n#yi!}#yi~P!'WOz:qO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Ta!}#Ta!q#Ta#X#Ta~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'Pa!}'Pa!q'Pa#X'Pa~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pi!S#Pi!b#Pi!m#Pi!q#Pi!n#Pi!}#Pi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pi!S#Pi!b#Pi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#vi!S#vi!b#vi!m#vi!q#vi!n#vi!}#vi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#vi!S#vi!b#vi~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#xi!q#xi!n#xi!}#xi~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uq!S!uq!b!uq!m!uq!q!uq!v!uq!n!uq!}!uq~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uq!S!uq!b!uq!v!uq~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pq!S#Pq!b#Pq!m#Pq!q#Pq!n#Pq!}#Pq~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pq!S#Pq!b#Pq~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jq!q$jq!n$jq!}$jq~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uy!S!uy!b!uy!m!uy!q!uy!v!uy!n!uy!}!uy~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uy!S!uy!b!uy!v!uy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jy!q$jy!n$jy!}$jy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!R!q$j!R!n$j!R!}$j!R~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!Z!q$j!Z!n$j!Z!}$j!Z~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!c!q$j!c!n$j!c!}$j!c~P!'WO#S=TO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S=UO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT6iOz6gO!S6jO!b6kO!v8sO#O=SO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O=RO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX!q'PX!n'PX!}'PX~P!'WOT&zXz&zX!S&zX!b&zX!o&zX!q&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX!}&zX~O#u9ZO#w9[O#X&zX!x&zX~P.8oO!y$hO#S=^O~O!q9hO~P>UO!y$hO#S=cO~O!q>OO#O9}O~OT8vOz8tO!S8wO!b8xO!q:OO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#Ta!q#Ta!n#Ta!}#Ta~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m'Pa!q'Pa!n'Pa!}'Pa~P!'WO!q>PO#O:RO~O!q>QO#O:YO~O#O:YO#l'SO~O#O:ZO#l'SO~O#O:_O#l'SO~O#u;eO#w;gO!m&zX!n&zX~P.8oO#u;fO#w;hOT&zXz&zX!S&zX!b&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX~O!q;tO~P>UO!q;uO~P>UO!q>XO#O<oO~O!q>YO#O9WO~OT8vOz8tO!S8wO!b8xO!q<pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!q<qO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q>ZO#O<vO~O!q>[O#O<{O~O#O<{O#l'SO~O#O9WO#l'SO~O#O<|O#l'SO~O#O=PO#l'SO~O!y$hO#S=|O~Oo=[Os$lO~O!y$hO#S=}O~O!y$hO#S>UO~O!y$hO#S>VO~O!y$hO#S>WO~Oo={Os$lO~Oo>TOs$lO~Oo>SOs$lO~O%O$U$}$d!d$V#b%V#e'g!s#d~",
	  goto: "%&y'mPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'nP'uPP'{(OPPP(hP(OP(O*ZP*ZPP2W:j:mPP*Z:sBpPBsPBsPP:sCSCVCZ:s:sPPPC^PP:sK^!$S!$S:s!$WP!$W!$W!%UP!.]!7pP!?oP*ZP*Z*ZPPPPP!?rPPPPPPP*Z*Z*Z*ZPP*Z*ZP!E]!GRP!GV!Gy!GR!GR!HP*Z*ZP!HY!Hl!Ib!J`!Jd!J`!Jo!J}!J}!KV!KY!KY*ZPP*ZPP!K^#%[#%[#%`P#%fP(O#%j(O#&S#&V#&V#&](O#&`(O(O#&f#&i(O#&r#&u(O(O(O(O(O#&x(O(O(O(O(O(O(O(O(O#&{!KR(O(O#'_#'o#'r(O(OP#'u#'|#(S#(o#(y#)P#)Z#)b#)h#*d#4X#5T#5Z#5a#5k#5q#5w#6]#6c#6i#6o#6u#6{#7R#7]#7g#7m#7s#7}PPPPPPPP#8T#8X#8}#NO#NR#N]$(f$(r$)X$)_$)b$)e$)k$,X$5v$>_$>b$>h$>k$>n$>w$>{$?X$?k$Bk$CO$C{$K{PP%%y%%}%&Z%&p%&vQ!nQT!qV!rQUOR%x!mRVO}!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a|!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ%^!ZQ%g!aQ%l!eQ'd$dQ'q$iQ)[%kQ*y'tQ,](xU-n*v*x+OQ.W+cQ.{,[S/t-s-tQ0T.SS0}/s/wQ1V0RQ1o1OR2P1p0u!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nQ#j]Q$}!PQ%O!QQ%P!RQ,S(kQ.b+sR.f+vR&q#jQ)z&pR/a-R0uhPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#l^k#p_j#k#s&s&w3x3y7l8f8g8h8iR#u`T&|#t'OR-Y*U0thPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#va-r#OZ#f#m#w$V$W$X$Y$Z$[$u$v%W%Y%[%`%s%|&O&Q&U&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&u&v&{'X'Z'[(](p)q)s)u*O*[*^+S+V,`,c,y,{,}-V-W-X-i-x.k.w/`/h/n/y0r0u0x1Q1X1d1m1q2q2r2x2y2z2{2|2}3O3Q3R3S3T3U3V3W3X3Y3Z3[3]3^3_3`3a3b3c3e3f3i3j3l3m3n3q3r3t4Y4y4z4{4|4}5O5P5R5S5T5U5V5W5X5Y5Z5[5]5^5_5`5a5b5c5d5f5g5j5k5m5n5o5r5s5u6R6V6}7O7P7Q7R7S7U7V7W7Y7Z7[7]7^7_7`7a7b7c7d7e7f7g7h7j7k7n7p7q7x7y7{7}8O8P8Q8R8S8V8W8Y8]9U9^9_9`9a9b9c9f9g9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9z9{:P:Q:T:V:W:[:^:`:c;j;k;l;m;n;o;p;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<a<b<c<d<e<f<g<h<i<l<m<n<r<s<t<u<w<x<y<z<}=O=Q=V=W=_=`=a=q=rQ']$]Y(Q$s7T9e;q;rS(U2Z6QR(X$tT&X!})v!w$Qg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[3ZfPVX[_bgjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#}$R$S$U$h$y$}%P%R%S%T%U%c%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)_)c)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[3scPVX[_bdegjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#{#}$R$S$U$h$y$}%P%R%S%T%U%c%m%n%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)^)_)c)g)h)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u,x-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2W2X2Y2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[0phPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0`0a0d0e0i0v1R1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT1Z0V1]R&]#P!n#[Z#f#w$V$W$X$Y$[$s$v%W%Y%[&Q&_&`&a&b&c&d&e&f'X'Z'[(])q)s*^+V,{-x/y1Q1d1q7j7k!Y2j2Z2x2y2z2{2}3O3Q3R3S3T3U3V3W3X3a3b3c3e3f3i3j3l3m3n3q3r3t!^4m2r4y4z4{4|5O5P5R5S5T5U5V5W5X5Y5b5c5d5f5g5j5k5m5n5o5r5s5u6Q6R#Q6p#m%`%s&u&v&{(p*O+S,`,c,y-V-X.w2q6}7O7P7Q7S7T7U7Y7Z7[7]7^7_7`7a7n7p7q7x7{7}8Q8S8V8W8Y8]9U:c=V=W#^8}%|&O&U)u,}-W-i/h/n0r0u0x1m4Y6V7V7W7y8O8P8R9^9_9`9a9c9e9f9g9i9j9k9l9m9n9o9p9x9z9{:P:Q:T:V:W:[:^:`<f<g=_=q=r!^;S.k/`;j;k;l;m;p;q;s;v;x;z;|<O<Q<S<U<h<l<n<r<t<w<x<z<}=O=Q=`=ao;T1X;r;w;y;{;}<P<R<T<V<i<m<s<u<yS$iu#hQ$qwU't$j$l&oQ'v$kS'x$m$rQ*|'uQ+O'wQ+R'yQ4X5xS4[5z5{Q4]5|Q6U8^S6W8_8`Q6X8aQ9d=YS9|=[=^Q:S=cQ=]=yS=b={=|Q=f=}Q=o>RS=p>S>VS=s>T>UR=t>WT'n$h*s!csPVXt!S!j!r!s!w$h$}%P%S%U'i(T(`)W*s+]+g+r+u,g,k.b.d.l0`0a0i1aQ$^rR*`'^Q*x'sQ-t*{R/w-wQ(W$tQ)U%hQ)n%vQ*i'fQ+k(XR-c*jQ(V$tQ)Y%jQ)m%vQ*e'eS*h'f)nS+j(W(XS-b*i*jQ.]+kQ/T,mQ/e-`R/g-cQ(U$tQ)T%hQ)V%iQ)l%vU*g'f)m)nU+i(V(W(XQ,f)UU-a*h*i*jS.[+j+kS/f-b-cQ0X.]R0t/gT+e(T+g[%e!_$b'c+a.R0QR,d)Qb$ov(T+[+]+`+g.P.Q0PR+T'{S+e(T+gT,j)W,kR0W.XT1[0V1]0w|PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$x{${Q+p([R._+nT$z{${Q(b$}Q(j%PQ(o%SQ(r%UQ.j+yQ0].fQ0^.iR1g0iR(e%OX+|(c(d+},PR(f%OX(h%P%S%U0iR%S!T_%a!]%R(l,T,V.t0dR%U!UR.x,XR,[(wQ)X%jS*d'e)YS-_*e,mS/d-`/TR0s/eQ%q!fU)]%m%n%rU,o)^)g)hR/_,xR)d%pR/],uSSO!mR!oSQ!rVR%y!rQ!jPS!sV!rQ!wX[%u!j!s!w+r0a1aQ+r(`Q0a.lR1a0`Q)j%sS,z)j7vR7v7WQ-S)zR/b-SQ&x#qS*R&x7mR7m9YS*V&{&|R-Z*VQ)w&YR-P)w!l'T#|'h*n*q*v+W+[,m-`-s-v-y.P.z/s/v/z0P1O1p4^4_4`5y6Y6Z6[:U:X:]=g=h=j=u=v=w=xR*Z'T1^dPVX[_bjklmnoprxyz!S!W!X!Y!]!e!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%p%}&S&W&p&s&t&w'O'U'Y'^'z(O(R(S(`(l({)P)_)c)i)p)t)v*P*T*U*o+P+d+r+u+z,T,V,X,u-Q-R-d-k-z-|.b.d.l.t/[/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n`#zd#{%m)^)g,x2W2YQ#{eQ%m!fQ)^%nQ)g%rQ,x)h!v2Wg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[R2Y2X|tPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aW$`t'i+],gS'i$h*sS+](T+gT,g)W,kQ'_$^R*a'_Q*t'oR-m*tQ/p-oS0{/p0|R0|/qQ-}+XR/|-}Q+g(TR.Y+gS+`(T+gS,h)W,kQ.Q+]W.T+`,h.Q/OR/O,gQ)R%eR,e)RQ'|$oR+U'|Q1]0VR1w1]Q${{R(^${Q+t(aR.c+tQ+w(bR.g+wQ+}(cQ,P(dT.m+},PQ(|%`S,a(|7tR7t7VQ(y%^R,^(yQ,k)WR/R,kQ)`%oS,q)`/WR/W,rQ,v)dR/^,vT!uV!rj!iPVX!j!r!s!w(`+r.l0`0a1aQ%Q!SQ(a$}W(h%P%S%U0iQ.e+uQ0Z.bR0[.d|ZPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ#f[U#m_#s&wQ#wbQ$VkQ$WlQ$XmQ$YnQ$ZoQ$[pQ$sx^$uy2_4b6e8q:m:nQ$vzQ%W!WQ%Y!XQ%[!YW%`!]%R(l,VU%s!g&p-RQ%|!yQ&O!zQ&Q!{S&U!})v^&^#R2a4d6g8t:p:qQ&_#SQ&`#TQ&a#UQ&b#VQ&c#WQ&d#XQ&e#YQ&f#ZQ&g#[Q&h#]Q&i#^Q&j#_Q&k#`Q&l#aQ&m#bQ&u#nQ&v#oS&{#t'OQ'X$RQ'Z$SQ'[$UQ(]$yQ(p%TQ)q%}Q)s&SQ)u&WQ*O&tS*['U4ZQ*^'Y^*_2[3u5v8Z:a=R=SQ+S'zQ+V(OQ,`({Q,c)PQ,y)iQ,{)pQ,})tQ-V*PQ-W*TQ-X*U^-]2]3v5w8[:b=T=UQ-i*oQ-x+PQ.k+zQ.w,XQ/`-QQ/h-dQ/n-kQ/y-zQ0r/cQ0u/iQ0x/mQ1Q/xU1X0V1]9WQ1d0eQ1m0vQ1q1RQ2Z2^Q2qjQ2r3yQ2x3zQ2y3|Q2z4OQ2{4QQ2|4SQ2}4UQ3O2`Q3Q2bQ3R2cQ3S2dQ3T2eQ3U2fQ3V2gQ3W2hQ3X2iQ3Y2jQ3Z2kQ3[2lQ3]2mQ3^2nQ3_2oQ3`2pQ3a2sQ3b2tQ3c2uQ3e2vQ3f2wQ3i3PQ3j3dQ3l3gQ3m3hQ3n3kQ3q3oQ3r3pQ3t3sQ4Y4WQ4y3{Q4z3}Q4{4PQ4|4RQ4}4TQ5O4VQ5P4cQ5R4eQ5S4fQ5T4gQ5U4hQ5V4iQ5W4jQ5X4kQ5Y4lQ5Z4mQ5[4nQ5]4oQ5^4pQ5_4qQ5`4rQ5a4sQ5b4tQ5c4uQ5d4vQ5f4wQ5g4xQ5j5QQ5k5eQ5m5hQ5n5iQ5o5lQ5r5pQ5s5qQ5u5tQ6Q4aQ6R3xQ6V6TQ6}6^Q7O6_Q7P6`Q7Q6aQ7R6bQ7S6cQ7T6dQ7U6fU7V,T.t0dQ7W%cQ7Y6hQ7Z6iQ7[6jQ7]6kQ7^6lQ7_6mQ7`6nQ7a6oQ7b6pQ7c6qQ7d6rQ7e6sQ7f6tQ7g6uQ7h6vQ7j6xQ7k6yQ7n6zQ7p6{Q7q6|Q7x7XQ7y7iQ7{7oQ7}7rQ8O7sQ8P7uQ8Q7wQ8R7zQ8S7|Q8V8TQ8W8UQ8Y8XQ8]8fU9U#k&s7lQ9^8jQ9_8kQ9`8lQ9a8mQ9b8nQ9c8oQ9e8pQ9f8rQ9g8sQ9i8uQ9j8vQ9k8wQ9l8xQ9m8yQ9n8zQ9o8{Q9p8|Q9q8}Q9r9OQ9s9PQ9t9QQ9u9RQ9v9SQ9w9TQ9x9ZQ9z9[Q9{9]Q:P9hQ:Q9yQ:T9}Q:V:OQ:W:RQ:[:YQ:^:ZQ:`:_Q:c8iQ;j:dQ;k:eQ;l:fQ;m:gQ;n:hQ;o:iQ;p:jQ;q:kQ;r:lQ;s:oQ;v:rQ;w:sQ;x:tQ;y:uQ;z:vQ;{:wQ;|:xQ;}:yQ<O:zQ<P:{Q<Q:|Q<R:}Q<S;OQ<T;PQ<U;QQ<V;RQ<W;SQ<X;TQ<Y;UQ<Z;VQ<[;WQ<];XQ<^;YQ<_;ZQ<`;[Q<a;]Q<b;^Q<c;_Q<d;`Q<e;aQ<f;cQ<g;dQ<h;eQ<i;fQ<l;gQ<m;hQ<n;iQ<r;tQ<s;uQ<t<jQ<u<kQ<w<oQ<x<pQ<y<qQ<z<vQ<}<{Q=O<|Q=Q=PQ=V8hQ=W8gQ=_=ZQ=`9VQ=a9XQ=q=mR=r=nR){&pQ%t!gQ)O%cT)y&p-R$SiPVX[bklmnopxyz!S!W!X!Y!j!r!s!w!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y$}%P%S%U%}&S'Y(O(`)p+P+r+u-z.b.d.l/x0`0a0e0i1R1a2[2]6x6y!t3w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x6S3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O8e_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|=X!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v=k+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]=l0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UQ#r_Q&r#kQ&z#sR)}&sS#q_#s^$Tj3x3y8f8g8h8iS*Q&w7lT9Y#k&sQ&}#tR*X'OR&T!|R&Z!}Q&Y!}R-O)vQ#|gQ'V#}S'h$h*sQ*Y'SQ*n'iQ*q'mQ*v'rQ+W(PS+[(T+gQ,m)ZQ-`*fQ-s*zQ-v*}Q-y+QS.P+]+`Q.z,ZQ/s-rQ/v-uQ/z-{Q0P.QQ1O/uQ1p1PQ4^5}Q4_6OQ4`6PQ5y6]Q6Y8bQ6Z8cQ6[8dQ:U=dQ:X=eQ:]=iQ=g>OQ=h>PQ=j>QQ=u>XQ=v>YQ=w>ZR=x>[0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n!v$Pg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[S$]r'^Q%k!eS%o!f%rQ)b%pU+X(R(S+dQ,p)_Q,t)cQ/Z,uQ/{-|R0p/[|vPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a#U#i[bklmnopxyz!W!X!Y!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y%}&S'Y(O)p+P-z/x0e1R2[2]6x6yd+^(T)W+]+`+g,g,h,k.Q/O!t6w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x;b3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O=z_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|>]!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v>^+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]>_0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UR'p$hQ'o$hR-l*sR$_rR-q*wQ+Y(RQ+Z(SR.X+dT+f(T+ge+_(T)W+]+`+g,g,h,k.Q/OQ%f!_Q'b$bQ*c'cQ.U+aQ0S.RR1U0QQ#eZQ%X!WQ%Z!XQ%]!YQ'}$pQ(s%VQ(t%WQ(u%YQ(v%[Q(}%bQ)S%fQ)[%kQ)f%qQ)k%tQ*b'bQ,n)]Q-^*cQ.V+bQ.W+cQ.e+xQ.o,QQ.p,RQ.q,SQ.v,WQ.y,YQ.},bQ/U,oQ/}.OQ0T.SQ0U.UQ0W.XQ0[.hQ0k/QQ0q/_Q1S0OQ1V0RQ1W0SQ1`0_Q1h0jQ1r1TQ1s1UQ1v1[Q1y1_Q1}1jQ2T1{R2U1|Q$pvS+b(T+gU.O+[+]+`S0O.P.QR1T0P|!aPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ$dtW+c(T)W+g,kW.S+]+`,g,hT0R.Q/O0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR.|,_0w}PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$w{${Q(i%PQ(n%SQ(q%UR1f0iQ%b!]Q(m%RQ,U(lQ.s,TQ.u,VQ0c.tR1c0dQ%q!fR)]%rR)e%p",
	  nodeNames: "⚠ ( HeredocString EscapeSequence abstract LogicOp array as Boolean break case catch clone const continue default declare do echo else elseif enddeclare endfor endforeach endif endswitch endwhile enum extends final finally fn for foreach from function global goto if implements include include_once LogicOp insteadof interface list match namespace new null LogicOp print require require_once return switch throw trait try unset use var Visibility while LogicOp yield LineComment BlockComment TextInterpolation PhpClose Text PhpOpen Template TextInterpolation EmptyStatement ; } { Block : LabelStatement Name ExpressionStatement ConditionalExpression LogicOp MatchExpression ) ( ParenthesizedExpression MatchBlock MatchArm , => AssignmentExpression ArrayExpression ValueList & VariadicUnpacking ... Pair [ ] ListExpression ValueList Pair Pair SubscriptExpression MemberExpression -> ?-> VariableName DynamicVariable $ ${ CallExpression ArgList NamedArgument SpreadArgument CastExpression UnionType LogicOp OptionalType NamedType QualifiedName \\ NamespaceName ScopedExpression :: ClassMemberName AssignOp UpdateExpression UpdateOp YieldExpression BinaryExpression LogicOp LogicOp LogicOp BitOp BitOp BitOp CompareOp CompareOp BitOp ArithOp ConcatOp ArithOp ArithOp IncludeExpression RequireExpression CloneExpression UnaryExpression ControlOp LogicOp PrintIntrinsic FunctionExpression static ParamList Parameter #[ Attributes Attribute VariadicParameter PropertyParameter UseList ArrowFunction NewExpression class BaseClause ClassInterfaceClause DeclarationList ConstDeclaration VariableDeclarator PropertyDeclaration VariableDeclarator MethodDeclaration UseDeclaration UseList UseInsteadOfClause UseAsClause UpdateExpression ArithOp ShellExpression ThrowExpression Integer Float String MemberExpression SubscriptExpression UnaryExpression ArithOp Interpolation String IfStatement ColonBlock SwitchStatement Block CaseStatement DefaultStatement ColonBlock WhileStatement EmptyStatement DoStatement ForStatement ForSpec SequenceExpression ForeachStatement ForSpec Pair GotoStatement ContinueStatement BreakStatement ReturnStatement TryStatement CatchDeclarator DeclareStatement EchoStatement UnsetStatement ConstDeclaration FunctionDefinition ClassDeclaration InterfaceDeclaration TraitDeclaration EnumDeclaration EnumBody EnumCase NamespaceDefinition NamespaceUseDeclaration UseGroup UseClause UseClause GlobalDeclaration FunctionStaticDeclaration Program",
	  maxTerm: 304,
	  nodeProps: [
		["group", -36,2,8,49,81,83,85,88,93,94,102,106,107,110,111,114,118,123,126,130,132,133,147,148,149,150,153,154,164,165,179,181,182,183,184,185,191,"Expression",-28,74,78,80,82,192,194,199,201,202,205,208,209,210,211,212,214,215,216,217,218,219,220,221,222,225,226,230,231,"Statement",-3,119,121,122,"Type"],
		["openedBy", 69,"phpOpen",76,"{",86,"(",101,"#["],
		["closedBy", 71,"phpClose",77,"}",87,")",158,"]"]
	  ],
	  propSources: [phpHighlighting],
	  skippedNodes: [0],
	  repeatNodeCount: 29,
	  tokenData: "!F|_R!]OX$zXY&^YZ'sZ]$z]^&^^p$zpq&^qr)Rrs+Pst+otu2buv5evw6rwx8Vxy>]yz>yz{?g{|@}|}Bb}!OCO!O!PDh!P!QKT!Q!R!!o!R![!$q![!]!,P!]!^!-a!^!_!-}!_!`!1S!`!a!2d!a!b!3t!b!c!7^!c!d!7z!d!e!9W!e!}!7z!}#O!;^#O#P!;z#P#Q!<h#Q#R!=U#R#S!7z#S#T!=u#T#U!7z#U#V!9W#V#o!7z#o#p!Co#p#q!D]#q#r!Er#r#s!F`#s$f$z$f$g&^$g&j!7z&j$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zP%PV&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zP%kO&wPP%nWOY$zYZ%fZ!a$z!b;'S$z;'S;=`&W<%l~$z~O$z~~%fP&ZP;=`<%l$zV&ed&wP&vUOX$zXY&^YZ'sZ]$z]^&^^p$zpq&^q!^$z!^!_%k!_$f$z$f$g&^$g$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zV'zW&wP&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dU(iW&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dR)YW$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`;'S$z;'S;=`&W<%lO$zR)yW$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`*c!`;'S$z;'S;=`&W<%lO$zR*jV$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+YV'fS&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+v]&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b!},o!}#O1f#O;'S,o;'S;=`/s<%lO,oV,vZ&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,oV-nZ!dUOY,oYZ%fZ],o]^$z^!a,o!a!b.a!b;'S,o;'S;=`/s<%l~,o~O,o~~%fU.dWOY.|YZ/nZ].|]^/n^!`.|!a;'S.|;'S;=`/h<%lO.|U/RV!dUOY.|Z].|^!a.|!a!b.a!b;'S.|;'S;=`/h<%lO.|U/kP;=`<%l.|U/sO!dUV/vP;=`<%l,oV0OZ&wPOY,oYZ0qZ],o]^0x^!^,o!^!_-i!_!`,o!`!a$z!a;'S,o;'S;=`/s<%lO,oV0xO&wP!dUV1PV&wP!dUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV1oZ&wP$dQ!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,o_2i`&wP#dQOY$zYZ%fZ!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o#p4w#p$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$z_3ra&wP#b^OY$zYZ%fZ!Q$z!Q![3k![!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$zV5OV&wP#eUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR5lW&wP$VQOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR6]V#wQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV6yY#SU&wPOY$zYZ%fZv$zvw7iw!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR7pV#|Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR8^Z&wP%VQOY8VYZ9PZw8Vwx;_x!^8V!^!_;{!_#O8V#O#P<y#P;'S8V;'S;=`>V<%lO8VR9WV&wP%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ9rV%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ:^O%VQQ:aRO;'S9m;'S;=`:j;=`O9mQ:oW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l9m<%lO9mQ;[P;=`<%l9mR;fV&wP%VQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR<Q]%VQOY8VYZ9PZw8Vwx;_x!a8V!a!b9m!b#O8V#O#P<y#P;'S8V;'S;=`>V<%l~8V~O8V~~%fR=OW&wPOY8VYZ9PZ!^8V!^!_;{!_;'S8V;'S;=`=h;=`<%l9m<%lO8VR=mW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l8V<%lO9mR>YP;=`<%l8VR>dV!yQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV?QV!xU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR?nY&wP$VQOY$zYZ%fZz$zz{@^{!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR@eW$WQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRAUY$TQ&wPOY$zYZ%fZ{$z{|At|!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRA{V$zQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRBiV!}Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_CXZ$TQ%TW&wPOY$zYZ%fZ}$z}!OAt!O!^$z!^!_%k!_!`6U!`!aCz!a;'S$z;'S;=`&W<%lO$zVDRV#`U&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVDo[&wP$UQOY$zYZ%fZ!O$z!O!PEe!P!Q$z!Q![Fs![!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVEjX&wPOY$zYZ%fZ!O$z!O!PFV!P!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVF^V#UU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRFz_&wP%OQOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#SJc#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zRHO]&wPOY$zYZ%fZ{$z{|Hw|}$z}!OHw!O!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRH|X&wPOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRIpZ&wP%OQOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_#R$z#R#SHw#S;'S$z;'S;=`&W<%lO$zRJhX&wPOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVK[[&wP$VQOY$zYZ%fZz$zz{LQ{!P$z!P!Q,o!Q!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVLVX&wPOYLQYZLrZzLQz{N_{!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQVLwT&wPOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMZTOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMmVOzMWz{Mj{!PMW!P!QNS!Q;'SMW;'S;=`NX<%lOMWUNXO!eUUN[P;=`<%lMWVNdZ&wPOYLQYZLrZzLQz{N_{!PLQ!P!Q! V!Q!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQV! ^V!eU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV! vZOYLQYZLrZzLQz{N_{!aLQ!a!bMW!b;'SLQ;'S;=`!!i<%l~LQ~OLQ~~%fV!!lP;=`<%lLQZ!!vm&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!d$z!d!e!&o!e!g$z!g!hGy!h!q$z!q!r!(a!r!z$z!z!{!){!{#R$z#R#S!%}#S#U$z#U#V!&o#V#X$z#X#YGy#Y#c$z#c#d!(a#d#l$z#l#m!){#m;'S$z;'S;=`&W<%lO$zZ!$xa&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#S!%}#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zZ!&SX&wPOY$zYZ%fZ!Q$z!Q![!$q![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!&tY&wPOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!'k[&wP$}YOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_#R$z#R#S!&o#S;'S$z;'S;=`&W<%lO$zZ!(fX&wPOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!)YZ&wP$}YOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_#R$z#R#S!(a#S;'S$z;'S;=`&W<%lO$zZ!*Q]&wPOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zZ!+Q_&wP$}YOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#R$z#R#S!){#S#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zR!,WX!qQ&wPOY$zYZ%fZ![$z![!]!,s!]!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!,zV#sQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!-hV!mU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!.S[$RQOY$zYZ%fZ!^$z!^!_!.x!_!`!/i!`!a*c!a!b!0]!b;'S$z;'S;=`&W<%l~$z~O$z~~%fR!/PW$SQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!/pX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a*c!a;'S$z;'S;=`&W<%lO$zP!0bR!iP!_!`!0k!r!s!0p#d#e!0pP!0pO!iPP!0sQ!j!k!0y#[#]!0yP!0|Q!r!s!0k#d#e!0kV!1ZX#uQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`!a!1v!a;'S$z;'S;=`&W<%lO$zV!1}V#OU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!2kX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`!3W!`!a!.x!a;'S$z;'S;=`&W<%lO$zR!3_V$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!3{[!vQ&wPOY$zYZ%fZ}$z}!O!4q!O!^$z!^!_%k!_!`$z!`!a!6P!a!b!6m!b;'S$z;'S;=`&W<%lO$zV!4vX&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a!5c!a;'S$z;'S;=`&W<%lO$zV!5jV#aU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!6WV!gU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!6tW#zQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!7eV$]Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_!8Ra&wP!s^OY$zYZ%fZ!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$z_!9_e&wP!s^OY$zYZ%fZr$zrs!:psw$zwx8Vx!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$zR!:wV&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!;eV#WU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!<RV#pU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!<oV#XQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!=]W$OQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!=zZ&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%lO!=uR!>rV&wPO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?[VO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?tRO;'S!?X;'S;=`!?};=`O!?XQ!@QWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!?X<%lO!?XQ!@oO${QQ!@rP;=`<%l!?XR!@x]OY!=uYZ!>mZ!a!=u!a!b!?X!b#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%l~!=u~O!=u~~%fR!AvW&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_;'S!=u;'S;=`!B`;=`<%l!?X<%lO!=uR!BcWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!=u<%lO!?XR!CSV${Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!ClP;=`<%l!=uV!CvV!oU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!DfY#}Q#lS&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`#p$z#p#q!EU#q;'S$z;'S;=`&W<%lO$zR!E]V#{Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!EyV!nQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!FgV$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z",
	  tokenizers: [expression, interpolated, semicolon, 0, 1, 2, 3, eofToken],
	  topRules: {"Template":[0,72],"Program":[1,232]},
	  dynamicPrecedences: {"284":1},
	  specialized: [{term: 81, get: (value, stack) => (keywords(value) << 1), external: keywords},{term: 81, get: value => spec_Name[value] || -1}],
	  tokenPrec: 29354
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/python/dist/index.cjs":
	/*!***********************************************************!*\
	  !*** ../editor/node_modules/@lezer/python/dist/index.cjs ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const printKeyword = 1,
	  indent = 201,
	  dedent = 202,
	  newline$1 = 203,
	  blankLineStart = 204,
	  newlineBracketed = 205,
	  eof = 206,
	  formatString1Content = 207,
	  formatString1Brace = 2,
	  formatString1End = 208,
	  formatString2Content = 209,
	  formatString2Brace = 3,
	  formatString2End = 210,
	  formatString1lContent = 211,
	  formatString1lBrace = 4,
	  formatString1lEnd = 212,
	  formatString2lContent = 213,
	  formatString2lBrace = 5,
	  formatString2lEnd = 214,
	  ParenL = 26,
	  ParenthesizedExpression = 27,
	  TupleExpression = 51,
	  ComprehensionExpression = 52,
	  BracketL = 57,
	  ArrayExpression = 58,
	  ArrayComprehensionExpression = 59,
	  BraceL = 61,
	  DictionaryExpression = 62,
	  DictionaryComprehensionExpression = 63,
	  SetExpression = 64,
	  SetComprehensionExpression = 65,
	  ArgList = 67,
	  subscript = 251,
	  FormatString = 74,
	  importList = 270,
	  TypeParamList = 115,
	  ParamList = 133,
	  SequencePattern = 154,
	  MappingPattern = 155,
	  PatternArgList = 158;
	
	const newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46,
		  braceOpen = 123, singleQuote = 39, doubleQuote = 34, backslash = 92;
	
	const bracketed = new Set([
	  ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,
	  ArrayExpression, ArrayComprehensionExpression, subscript,
	  SetExpression, SetComprehensionExpression, FormatString,
	  DictionaryExpression, DictionaryComprehensionExpression,
	  SequencePattern, MappingPattern, PatternArgList, TypeParamList
	]);
	
	function isLineBreak(ch) {
	  return ch == newline || ch == carriageReturn
	}
	
	const newlines = new lr.ExternalTokenizer((input, stack) => {
	  let prev;
	  if (input.next < 0) {
		input.acceptToken(eof);
	  } else if (stack.context.depth < 0) {
		if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
	  } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&
				 stack.canShift(blankLineStart)) {
		let spaces = 0;
		while (input.next == space || input.next == tab) { input.advance(); spaces++; }
		if (input.next == newline || input.next == carriageReturn || input.next == hash)
		  input.acceptToken(blankLineStart, -spaces);
	  } else if (isLineBreak(input.next)) {
		input.acceptToken(newline$1, 1);
	  }
	}, {contextual: true});
	
	const indentation = new lr.ExternalTokenizer((input, stack) => {
	  let cDepth = stack.context.depth;
	  if (cDepth < 0) return
	  let prev = input.peek(-1);
	  if (prev == newline || prev == carriageReturn) {
		let depth = 0, chars = 0;
		for (;;) {
		  if (input.next == space) depth++;
		  else if (input.next == tab) depth += 8 - (depth % 8);
		  else break
		  input.advance();
		  chars++;
		}
		if (depth != cDepth &&
			input.next != newline && input.next != carriageReturn && input.next != hash) {
		  if (depth < cDepth) input.acceptToken(dedent, -chars);
		  else input.acceptToken(indent);
		}
	  }
	});
	
	function IndentLevel(parent, depth) {
	  this.parent = parent;
	  // -1 means this is not an actual indent level but a set of brackets
	  this.depth = depth;
	  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
	}
	
	const topIndent = new IndentLevel(null, 0);
	
	function countIndent(space) {
	  let depth = 0;
	  for (let i = 0; i < space.length; i++)
		depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;
	  return depth
	}
	
	const trackIndent = new lr.ContextTracker({
	  start: topIndent,
	  reduce(context, term) {
		return context.depth < 0 && bracketed.has(term) ? context.parent : context
	  },
	  shift(context, term, stack, input) {
		if (term == indent) return new IndentLevel(context, countIndent(input.read(input.pos, stack.pos)))
		if (term == dedent) return context.parent
		if (term == ParenL || term == BracketL || term == BraceL) return new IndentLevel(context, -1)
		return context
	  },
	  hash(context) { return context.hash }
	});
	
	const legacyPrint = new lr.ExternalTokenizer(input => {
	  for (let i = 0; i < 5; i++) {
		if (input.next != "print".charCodeAt(i)) return
		input.advance();
	  }
	  if (/\w/.test(String.fromCharCode(input.next))) return
	  for (let off = 0;; off++) {
		let next = input.peek(off);
		if (next == space || next == tab) continue
		if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)
		  input.acceptToken(printKeyword);
		return
	  }
	});
	
	function formatString(quote, len, content, brace, end) {
	  return new lr.ExternalTokenizer(input => {
		let start = input.pos;
		for (;;) {
		  if (input.next < 0) {
			break
		  } else if (input.next == braceOpen) {
			if (input.peek(1) == braceOpen) {
			  input.advance(2);
			} else {
			  if (input.pos == start) {
				input.acceptToken(brace, 1);
				return
			  }
			  break
			}
		  } else if (input.next == backslash) {
			input.advance();
			if (input.next >= 0) input.advance();
		  } else if (input.next == quote && (len == 1 || input.peek(1) == quote && input.peek(2) == quote)) {
			if (input.pos == start) {
			  input.acceptToken(end, len);
			  return
			}
			break
		  } else {
			input.advance();
		  }
		}
		if (input.pos > start) input.acceptToken(content);
	  })
	}
	
	const formatString1 = formatString(singleQuote, 1, formatString1Content, formatString1Brace, formatString1End);
	const formatString2 = formatString(doubleQuote, 1, formatString2Content, formatString2Brace, formatString2End);
	const formatString1l = formatString(singleQuote, 3, formatString1lContent, formatString1lBrace, formatString1lEnd);
	const formatString2l = formatString(doubleQuote, 3, formatString2lContent, formatString2lBrace, formatString2lEnd);
	
	const pythonHighlighting = highlight.styleTags({
	  "async \"*\" \"**\" FormatConversion FormatSpec": highlight.tags.modifier,
	  "for while if elif else try except finally return raise break continue with pass assert await yield match case": highlight.tags.controlKeyword,
	  "in not and or is del": highlight.tags.operatorKeyword,
	  "from def class global nonlocal lambda": highlight.tags.definitionKeyword,
	  import: highlight.tags.moduleKeyword,
	  "with as print": highlight.tags.keyword,
	  Boolean: highlight.tags.bool,
	  None: highlight.tags.null,
	  VariableName: highlight.tags.variableName,
	  "CallExpression/VariableName": highlight.tags.function(highlight.tags.variableName),
	  "FunctionDefinition/VariableName": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  "ClassDefinition/VariableName": highlight.tags.definition(highlight.tags.className),
	  PropertyName: highlight.tags.propertyName,
	  "CallExpression/MemberExpression/PropertyName": highlight.tags.function(highlight.tags.propertyName),
	  Comment: highlight.tags.lineComment,
	  Number: highlight.tags.number,
	  String: highlight.tags.string,
	  FormatString: highlight.tags.special(highlight.tags.string),
	  UpdateOp: highlight.tags.updateOperator,
	  "ArithOp!": highlight.tags.arithmeticOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  AssignOp: highlight.tags.definitionOperator,
	  Ellipsis: highlight.tags.punctuation,
	  At: highlight.tags.meta,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace,
	  ".": highlight.tags.derefOperator,
	  ", ;": highlight.tags.separator
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,await:48, or:58, and:60, in:64, not:66, is:68, if:74, else:76, lambda:80, yield:98, from:100, async:106, for:108, None:168, True:170, False:170, del:184, pass:188, break:192, continue:196, return:200, raise:208, import:212, as:214, global:218, nonlocal:220, assert:224, type:229, elif:242, while:246, try:252, except:254, finally:256, with:260, def:264, class:274, match:285, case:291};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "#&jO`Q#yOOP$bOSOOO%kQ&nO'#HcOOQS'#Cq'#CqOOQS'#Cr'#CrO'ZQ#xO'#CpO(|Q&nO'#HbOOQS'#Hc'#HcOOQS'#DW'#DWOOQS'#Hb'#HbO)jQ#xO'#DaO)}Q#xO'#DhO*_Q#xO'#DlOOQS'#Dw'#DwO*rO,UO'#DwO*zO7[O'#DwO+SOWO'#DxO+_O`O'#DxO+jOpO'#DxO+uO!bO'#DxO-wQ&nO'#HSOOQS'#HS'#HSO'ZQ#xO'#HRO/ZQ&nO'#HROOQS'#Ee'#EeO/rQ#xO'#EfOOQS'#HQ'#HQO/|Q#xO'#HPOOQV'#HP'#HPO0XQ#xO'#F]OOQS'#Ge'#GeO0^Q#xO'#F[OOQV'#IY'#IYOOQV'#HO'#HOOOQV'#Ft'#FtQ`Q#yOOO'ZQ#xO'#CsO0lQ#xO'#DPO0sQ#xO'#DTO1RQ#xO'#HgO1cQ&nO'#EYO'ZQ#xO'#EZOOQS'#E]'#E]OOQS'#E_'#E_OOQS'#Ea'#EaO1wQ#xO'#EcO2_Q#xO'#EgO0XQ#xO'#EiO2rQ&nO'#EiO0XQ#xO'#ElO/rQ#xO'#EoO0XQ#xO'#EqO/rQ#xO'#EwO/rQ#xO'#EzO2}Q#xO'#E|O3UQ#xO'#FRO3aQ#xO'#E}O/rQ#xO'#FRO0XQ#xO'#FTO0XQ#xO'#FYO3fQ#xO'#F_P3mO#xO'#G}POOO)CBq)CBqOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Ck'#CkOOQS'#Cl'#ClOOQS'#Cn'#CnO'ZQ#xO,59QO'ZQ#xO,59QO'ZQ#xO,59QO'ZQ#xO,59QO'ZQ#xO,59QO'ZQ#xO,59QO3xQ#xO'#DqOOQS,5:[,5:[O4]Q#xO'#HqOOQS,5:_,5:_O4jQMlO,5:_O4oQ&nO,59[O0lQ#xO,59dO0lQ#xO,59dO0lQ#xO,59dO7_Q#xO,59dO7dQ#xO,59dO7kQ#xO,59lO7rQ#xO'#HbO8xQ#xO'#HaOOQS'#Ha'#HaOOQS'#D^'#D^O9aQ#xO,59cO'ZQ#xO,59cO9oQ#xO,59cOOQS,59{,59{O9tQ#xO,5:TO'ZQ#xO,5:TOOQS,5:S,5:SO:SQ#xO,5:SO:XQ#xO,5:ZO'ZQ#xO,5:ZO'ZQ#xO,5:XOOQS,5:W,5:WO:jQ#xO,5:WO:oQ#xO,5:YOOOO'#F|'#F|O:tO,UO,5:cOOQS,5:c,5:cOOOO'#F}'#F}O:|O7[O,5:cO;UQ#xO'#DyOOOW'#GO'#GOO;fOWO,5:dOOQS,5:d,5:dO;UQ#xO'#D}OOO`'#GR'#GRO;qO`O,5:dO;UQ#xO'#EOOOOp'#GS'#GSO;|OpO,5:dO;UQ#xO'#EPOOO!b'#GT'#GTO<XO!bO,5:dOOQS'#GU'#GUO<dQ&nO,5:lO?UQ&nO,5=mO?oQ!LUO,5=mO@`Q&nO,5=mOOQS,5;Q,5;QO@wQ#yO'#G_OBZQ#xO,5;aOOQV,5=k,5=kOBfQ&nO'#ITOB}Q#xO,5;wOOQS-E:c-E:cOOQV,5;v,5;vO3[Q#xO'#FTOOQV-E9r-E9rOCVQ&nO,59_OE^Q&nO,59kOEwQ#xO'#HdOFSQ#xO'#HdO0XQ#xO'#HdOF_Q#xO'#DVOFgQ#xO,59oOFlQ#xO'#HhO'ZQ#xO'#HhO/rQ#xO,5>ROOQS,5>R,5>RO/rQ#xO'#EUOOQS'#EV'#EVOGZQ#xO'#GWOGkQ#xO,59OOGkQ#xO,59OO)pQ#xO,5:rOGyQ&nO'#HjOOQS,5:u,5:uOOQS,5:},5:}OH^Q#xO,5;ROHoQ#xO,5;TOOQS'#GZ'#GZOH}Q&nO,5;TOI]Q#xO,5;TOIbQ#xO'#IWOOQS,5;W,5;WOIpQ#xO'#ISOOQS,5;Z,5;ZOJRQ#xO,5;]O3aQ#xO,5;cO3aQ#xO,5;fOJZQ&nO'#IZO'ZQ#xO'#IZOJeQ#xO,5;hO2}Q#xO,5;hO/rQ#xO,5;mO0XQ#xO,5;oOJjQ#yO'#ExOKvQ#{O,5;iO! [Q#xO'#I[O3aQ#xO,5;mO! gQ#xO,5;oO! oQ#xO,5;tO! zQ&nO,5;yO'ZQ#xO,5;yPOOO,5=i,5=iP!!ROSO,5=iP!!WO#xO,5=iO!${Q&nO1G.lO!%SQ&nO1G.lO!'sQ&nO1G.lO!'}Q&nO1G.lO!*hQ&nO1G.lO!*{Q&nO1G.lO!+`Q#xO'#HpO!+nQ&nO'#HSO/rQ#xO'#HpO!+xQ#xO'#HoOOQS,5:],5:]O!,QQ#xO,5:]O!,VQ#xO'#HrO!,bQ#xO'#HrO!,uQ#xO,5>]OOQS'#Du'#DuOOQS1G/y1G/yOOQS1G/O1G/OO!-uQ&nO1G/OO!-|Q&nO1G/OO0lQ#xO1G/OO!.iQ#xO1G/WOOQS'#D]'#D]O/rQ#xO,59vOOQS1G.}1G.}O!.pQ#xO1G/gO!/QQ#xO1G/gO!/YQ#xO1G/hO'ZQ#xO'#HiO!/_Q#xO'#HiO!/dQ&nO1G.}O!/tQ#xO,59kO!0zQ#xO,5>XO!1[Q#xO,5>XO!1dQ#xO1G/oO!1iQ&nO1G/oOOQS1G/n1G/nO!1yQ#xO,5>SO!2pQ#xO,5>SO/rQ#xO1G/sO!3_Q#xO1G/uO!3dQ&nO1G/uO!3tQ&nO1G/sOOQS1G/r1G/rOOQS1G/t1G/tOOOO-E9z-E9zOOQS1G/}1G/}OOOO-E9{-E9{O!4UQ#xO'#H|O/rQ#xO'#H|O!4dQ#xO,5:eOOOW-E9|-E9|OOQS1G0O1G0OO!4oQ#xO,5:iOOO`-E:P-E:PO!4zQ#xO,5:jOOOp-E:Q-E:QO!5VQ#xO,5:kOOO!b-E:R-E:ROOQS-E:S-E:SO!5bQ!LUO1G3XO!6RQ&nO1G3XO'ZQ#xO,5<qOOQS,5<q,5<qOOQS-E:T-E:TOOQS,5<y,5<yOOQS-E:]-E:]OOQV1G0{1G0{O0XQ#xO'#GYO!6jQ&nO,5>oOOQS1G1c1G1cO!7RQ#xO1G1cOOQS'#DX'#DXO/rQ#xO,5>OOOQS,5>O,5>OO!7WQ#xO'#FuO!7cQ#xO,59qO!7kQ#xO1G/ZO!7uQ&nO,5>SOOQS1G3m1G3mOOQS,5:p,5:pO!8fQ#xO'#HROOQS,5<r,5<rOOQS-E:U-E:UO!8wQ#xO1G.jOOQS1G0^1G0^O!9VQ#xO,5>UO!9gQ#xO,5>UO/rQ#xO1G0mO/rQ#xO1G0mO0XQ#xO1G0oOOQS-E:X-E:XO!9xQ#xO1G0oO!:TQ#xO1G0oO!:YQ#xO,5>rO!:hQ#xO,5>rO!:vQ#xO,5>nO!;^Q#xO,5>nO!;oQ#xO'#EsO/rQ#xO1G0wO!;zQ#xO1G0wO!<PQ#{O1G0}O!?bQ#{O1G1QO!BpQ#xO,5>uO!BzQ#xO,5>uO!CSQ&nO,5>uO/rQ#xO1G1SO!C^Q#xO1G1SO3aQ#xO1G1XO! gQ#xO1G1ZOOQV,5;d,5;dO!CcQ#zO,5;dO!ChQ#{O1G1TO!F|Q#xO'#GbO3aQ#xO1G1TO3aQ#xO1G1TO!G^Q#xO,5>vO!GkQ#xO,5>vO0XQ#xO,5>vOOQV1G1X1G1XO!GsQ#xO'#FVO!HUQMlO1G1ZO!H^Q#xO1G1ZOOQV1G1`1G1`O3aQ#xO1G1`O!HcQ#xO1G1`O!HkQ#xO'#FaOOQV1G1e1G1eO! zQ&nO1G1ePOOO1G3T1G3TP!HpOSO1G3TOOQS,5>[,5>[OOQS'#Dr'#DrO/rQ#xO,5>[O!HuQ#xO,5>ZO!IYQ#xO,5>ZOOQS1G/w1G/wO!IbQ#xO,5>^O!IrQ#xO,5>^O!IzQ#xO,5>^O!J_Q#xO,5>^O!JoQ#xO,5>^OOQS1G3w1G3wOOQS7+$j7+$jO!7kQ#xO7+$rO!LbQ#xO1G/OO!LiQ#xO1G/OOOQS1G/b1G/bOOQS,5<c,5<cO'ZQ#xO,5<cOOQS7+%R7+%RO!LpQ#xO7+%ROOQS-E9u-E9uOOQS7+%S7+%SO!MQQ#xO,5>TO'ZQ#xO,5>TOOQS7+$i7+$iO!MVQ#xO7+%RO!M_Q#xO7+%SO!MdQ#xO1G3sOOQS7+%Z7+%ZO!MtQ#xO1G3sO!M|Q#xO7+%ZOOQS,5<b,5<bO'ZQ#xO,5<bO!NRQ#xO1G3nOOQS-E9t-E9tO!NxQ#xO7+%_OOQS7+%a7+%aO# WQ#xO1G3nO# uQ#xO7+%aO# zQ#xO1G3tO#![Q#xO1G3tO#!dQ#xO7+%_O#!iQ#xO,5>hO##PQ#xO,5>hO##PQ#xO,5>hO##_O$ISO'#D{O##jO#tO'#H}OOOW1G0P1G0PO##oQ#xO1G0POOO`1G0T1G0TO##wQ#xO1G0TOOOp1G0U1G0UO#$PQ#xO1G0UOOO!b1G0V1G0VO#$XQ#xO1G0VO#$aQ!LUO7+(sO#%QQ&nO1G2]P#%kQ#xO'#GVOOQS,5<t,5<tOOQS-E:W-E:WOOQS7+&}7+&}OOQS1G3j1G3jOOQS,5<a,5<aOOQS-E9s-E9sOOQS7+$u7+$uO#%xQ#xO,5=mO#&cQ#xO,5=mO#&tQ&nO,5<dO#'XQ#xO1G3pOOQS-E9v-E9vOOQS7+&X7+&XO#'iQ#xO7+&XOOQS7+&Z7+&ZO#'wQ#xO'#IVO0XQ#xO'#IUO#(]Q#xO7+&ZOOQS,5<w,5<wO#(hQ#xO1G4^OOQS-E:Z-E:ZOOQS,5<s,5<sO#(vQ#xO1G4YOOQS-E:V-E:VO0XQ#xO'#EtO#)^Q#xO'#EtO#)iQ#xO'#IXO#)qQ#xO,5;_OOQS7+&c7+&cO/rQ#xO7+&cO#)vQ#{O7+&iO!GPQ#xO'#G`O3aQ#xO7+&iO3aQ#xO7+&lO#-XQ&nO,5<{O'ZQ#xO,5<{O#-cQ#xO1G4aOOQS-E:_-E:_O#-mQ#xO1G4aO3aQ#xO7+&nO/rQ#xO7+&nOOQV7+&s7+&sO!HUQMlO7+&uO!H^Q#xO7+&uO`Q#yO1G1OOOQV-E:`-E:`O3aQ#xO7+&oO3aQ#xO7+&oOOQV,5<|,5<|O#-uQ#xO,5<|O!GPQ#xO,5<|OOQV7+&o7+&oO#.QQ#{O7+&oO#1`Q#xO,5<}O#1kQ#xO1G4bOOQS-E:a-E:aO#1xQ#xO1G4bO#2QQ#xO'#I^O#2`Q#xO'#I^O0XQ#xO'#I^OOQS'#I^'#I^O#2kQ#xO'#I]OOQS,5;q,5;qO#2sQ#xO,5;qO/rQ#xO'#FXOOQV7+&u7+&uO3aQ#xO7+&uOOQV7+&z7+&zO3aQ#xO7+&zO#2xQ#zO,5;{OOQV7+'P7+'PPOOO7+(o7+(oO#2}Q#xO1G3vOOQS,5<f,5<fO#3]Q#xO1G3uOOQS-E9x-E9xO#3pQ#xO,5<gO#3{Q#xO,5<gO#4`Q#xO1G3xOOQS-E9y-E9yO#4pQ#xO1G3xO#4xQ#xO1G3xO#5YQ#xO1G3xO#4pQ#xO1G3xOOQS<<H^<<H^O#5eQ&nO1G1}OOQS<<Hm<<HmP#5rQ#xO'#FwO7kQ#xO1G3oO#6PQ#xO1G3oO#6UQ#xO<<HmOOQS<<Hn<<HnO#6fQ#xO7+)_OOQS<<Hu<<HuO#6vQ&nO1G1|P#7gQ#xO'#FvO#7tQ#xO7+)`O#8UQ#xO7+)`O#8^Q#xO<<HyO#8cQ#xO7+)YOOQS<<H{<<H{O#9YQ#xO,5<eO'ZQ#xO,5<eOOQS-E9w-E9wOOQS<<Hy<<HyOOQS,5<k,5<kO/rQ#xO,5<kO#9_Q#xO1G4SOOQS-E9}-E9}O#9uQ#xO1G4SO;UQ#xO'#D|OOOO'#GQ'#GQO#:TO$ISO,5:gOOO#l,5>i,5>iOOOW7+%k7+%kOOO`7+%o7+%oOOOp7+%p7+%pOOO!b7+%q7+%qO#:`Q#xO1G3XO#:yQ#xO1G3XP'ZQ#xO'#FxO/rQ#xO<<IsO#;[Q#xO,5>qO#;mQ#xO,5>qO0XQ#xO,5>qO#<OQ#xO,5>pOOQS<<Iu<<IuP0XQ#xO'#G]P/rQ#xO'#GXOOQS,5;`,5;`O#<TQ#xO,5>sO#<cQ#xO,5>sOOQS1G0y1G0yOOQS<<I}<<I}OOQV-E:^-E:^O3aQ#xO<<JTOOQV,5<z,5<zO3aQ#xO,5<zOOQV<<JT<<JTOOQV<<JW<<JWO#<kQ&nO1G2gP#<uQ#xO'#GaO#<|Q#xO7+){O#=WQ#{O<<JYO3aQ#xO<<JYOOQV<<Ja<<JaO3aQ#xO<<JaO!HUQMlO<<JaO#@fQ#{O7+&jOOQV<<JZ<<JZO#@pQ#{O<<JZOOQV1G2h1G2hO0XQ#xO1G2hO#DOQ#xO1G2hO3aQ#xO<<JZO0XQ#xO1G2iP/rQ#xO'#GcO#DZQ#xO7+)|O#DhQ#xO7+)|OOQS'#FW'#FWO/rQ#xO,5>xO#DpQ#xO,5>xOOQS,5>x,5>xO#D{Q#xO,5>wO#E^Q#xO,5>wOOQS1G1]1G1]OOQS,5;s,5;sOOQV<<Jf<<JfO#EfQ#xO1G1gOOQS7+)b7+)bP#EkQ#xO'#FzO#E{Q#xO1G2RO#F`Q#xO1G2RO#FpQ#xO1G2RP#F{Q#xO'#F{O#GYQ#xO7+)dO#GjQ#xO7+)dO#GjQ#xO7+)dO#GrQ#xO7+)dO#HSQ#xO7+)ZO7kQ#xO7+)ZOOQSAN>XAN>XO#HmQ#xO<<LzOOQSAN>eAN>eO/rQ#xO1G2PO#H}Q&nO1G2PP#IXQ#xO'#FyOOQS1G2V1G2VP#IfQ#xO'#GPO#IsQ#xO7+)nO#JZQ#xO,5:hOOOO-E:O-E:OO#JfQ#xO7+(sOOQSAN?_AN?_O#KPQ#xO,5<vO#KeQ#xO1G4]OOQS-E:Y-E:YO#KvQ#xO1G4]OOQS1G4[1G4[OOQS,5<x,5<xO#LXQ#xO1G4_OOQS-E:[-E:[OOQVAN?oAN?oOOQV1G2f1G2fO3aQ#xOAN?tO#LgQ#{OAN?tOOQVAN?{AN?{O3aQ#xOAN?{OOQV<<JU<<JUO3aQ#xOAN?uO3aQ#xO7+(SOOQV7+(S7+(SO0XQ#xO7+(SOOQVAN?uAN?uOOQS7+(T7+(TO$ uQ#xO<<MhOOQS1G4d1G4dO/rQ#xO1G4dOOQS,5=O,5=OO$!SQ#xO1G4cOOQS-E:b-E:bOOQU'#Gf'#GfO$!eQ#zO7+'RO$!pQ#xO'#FbO$#hQ#xO7+'mO$#xQ#xO7+'mOOQS7+'m7+'mO$$TQ#xO<<MOO$$eQ#xO<<MOO$$eQ#xO<<MOO$$mQ#xO'#HkOOQS<<Lu<<LuO$$wQ#xO<<LuOOQS7+'k7+'kOOOO1G0S1G0SO$%bQ#xO1G0SO0XQ#xO1G2bP0XQ#xO'#G[O$%jQ#xO7+)wO$%{Q#xO7+)wP!;oQ#xO'#G^OOQVG25`G25`O3aQ#xOG25`OOQVG25gG25gOOQVG25aG25aOOQV<<Kn<<KnO3aQ#xO<<KnOOQS7+*O7+*OP$&^Q#xO'#GdOOQU-E:d-E:dOOQV<<Jm<<JmO$'QQ&nO'#FdOOQS'#Ff'#FfO$'bQ#xO'#FeO$(SQ#xO'#FeOOQS'#Fe'#FeO$(XQ#xO'#I`O$!pQ#xO'#FlO$!pQ#xO'#FlO$(pQ#xO'#FmO$!pQ#xO'#FnO$(wQ#xO'#IaOOQS'#Ia'#IaO$)fQ#xO,5;|OOQS<<KX<<KXO$)nQ#xO<<KXO$*OQ#xOANBjO$*`Q#xOANBjO$*hQ#xO'#HlOOQS'#Hl'#HlO0sQ#xO'#DeO$+RQ#xO,5>VOOQSANBaANBaOOOO7+%n7+%nOOQS7+'|7+'|O$+jQ#xO<<McOOQVLD*zLD*zOOQVANAYANAYO4jQMlO'#GhO$+{Q&nO,5<VO$!pQ#xO'#FpOOQS,5<Z,5<ZOOQS'#Fg'#FgO$,mQ#xO,5<PO$,rQ#xO,5<POOQS'#Fj'#FjO$!pQ#xO'#GgO$-dQ#xO,5<TO$.OQ#xO,5>zO$.`Q#xO,5>zO0XQ#xO,5<SO$.qQ#xO,5<WO$.vQ#xO,5<WO$!pQ#xO'#IbO$.{Q#xO'#IbO$/QQ#xO,5<XOOQS,5<Y,5<YO'ZQ#xO'#FsOOQU1G1h1G1hO3aQ#xO1G1hOOQSAN@sAN@sO$/VQ#xOG28UO$/gQ#xO,5:POOQS1G3q1G3qOOQS,5=S,5=SOOQS-E:f-E:fO$/lQ&nO'#FdO$/sQ#xO'#IcO$0RQ#xO'#IcO$0ZQ#xO,5<[OOQS1G1k1G1kO$0`Q#xO1G1kO$0eQ#xO,5=ROOQS-E:e-E:eO$1PQ#xO,5=VO$1hQ#xO1G4fOOQS-E:i-E:iOOQS1G1n1G1nOOQS1G1r1G1rO$1xQ#xO,5>|O$!pQ#xO,5>|OOQS1G1s1G1sO$2WQ&nO,5<_OOQU7+'S7+'SO$$mQ#xO1G/kO$!pQ#xO,5<]O$2_Q#xO,5>}O$2fQ#xO,5>}OOQS1G1v1G1vOOQS7+'V7+'VP$!pQ#xO'#GkO$2nQ#xO1G4hO$2xQ#xO1G4hO$3QQ#xO1G4hOOQS7+%V7+%VO$3`Q#xO1G1wO$3nQ&nO'#FdO$3uQ#xO,5=UOOQS,5=U,5=UO$4TQ#xO1G4iOOQS-E:h-E:hO$!pQ#xO,5=TO$4[Q#xO,5=TO$4aQ#xO7+*SOOQS-E:g-E:gO$4kQ#xO7+*SO$!pQ#xO,5<^P$!pQ#xO'#GjO$4sQ#xO1G2oO$!pQ#xO1G2oP$5RQ#xO'#GiO$5YQ#xO<<MnO$5dQ#xO1G1xO$5rQ#xO7+(ZO7kQ#xO'#DPO7kQ#xO,59dO7kQ#xO,59dO7kQ#xO,59dO$6QQ&nO,5=mO7kQ#xO1G/OO/rQ#xO1G/ZO/rQ#xO7+$rP$6eQ#xO'#GVO'ZQ#xO'#HRO$6rQ#xO,59dO$6wQ#xO,59dO$7OQ#xO,59oO$7TQ#xO1G/WO0sQ#xO'#DTO7kQ#xO,59l",
	  stateData: "$7f~O%pOS%eOSUOS%dPQ~OPiOXfOhtOjYOquOu!UOxvO!RwO!S!QO!V!XO!W!WO!ZZO!_[O!jeO!ueO!veO!weO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO#f!TO#o!VO#r!YO#v!ZO#x![O#}!]O$QmO$S!^O%|RO%}RO&RSO&SWO&h]O&i^O&l_O&o`O&saO&tbO&ucO~O%d!_O~OX!fOa!fOc!gOj!nO!Z!pO!h!rO%w!aO%x!bO%y!cO%z!dO%{!dO%|!eO%}!eO&O!fO&P!fO&Q!fO~Om&VXn&VXo&VXp&VXq&VXr&VXu&VX|&VX}&VX!{&VX#j&VX%c&VX%f&VX&X&VXi&VX!V&VX!W&VX&Y&VX!Y&VX!^&VX!S&VX#_&VXv&VX!n&VX~P$gOhtOjYO!ZZO!_[O!jeO!ueO!veO!weO%|RO%}RO&RSO&SWO&h]O&i^O&l_O&o`O&saO&tbO&ucO~O|&UX}&UX#j&UX%c&UX%f&UX&X&UX~Om!uOn!vOo!tOp!tOq!wOr!xOu!yO!{&UX~P(hOX#POi#ROq0zOx1YO!RwO~P'ZOX#TOq0zOx1YO!Y#UO~P'ZOX#XOc#YOq0zOx1YO!^#ZO~P'ZO&j#^O&k#`O~O&m#aO&n#`O~OQ#cO%g#dO%h#fO~OR#gO%i#hO%j#fO~OS#jO%k#kO%l#fO~OT#mO%m#nO%n#fO~OX%vXa%vXc%vXj%vXm%vXn%vXo%vXp%vXq%vXr%vXu%vX|%vX!Z%vX!h%vX%w%vX%x%vX%y%vX%z%vX%{%vX%|%vX%}%vX&O%vX&P%vX&Q%vXi%vX!V%vX!W%vX~O&h]O&i^O&l_O&o`O&saO&tbO&ucO}%vX!{%vX#j%vX%c%vX%f%vX&X%vX&Y%vX!Y%vX!^%vX!S%vX#_%vXv%vX!n%vX~P,QO|#sO}%uX!{%uX#j%uX%c%uX%f%uX&X%uX~Oq0zOx1YO~P'ZO#j#vO%c#xO%f#xO~O&SWO~O!V#}O#x![O#}!]O$QmO~OquO~P'ZOX$SOc$TO&SWO}yP~OX$XOq0zOx1YO!S$YO~P'ZO}$[O!{$aO&X$]O#j!|X%c!|X%f!|X~OX$XOq0zOx1YO#j#VX%c#VX%f#VX~P'ZOq0zOx1YO#j#ZX%c#ZX%f#ZX~P'ZO!h$gO!u$gO&SWO~OX$rO~P'ZO!W$tO#v$uO#x$vO~O}$wO~OX%OO~P'ZOU%QO%c%PO%p%RO~OX%[Oc%[Oi%^Oq0zOx1YO~P'ZOq0zOx1YO}%aO~P'ZO&g%cO~Oc!gOj!nO!Z!pO!h!rOXdaadamdandaodapdaqdardauda|da}da!{da#jda%cda%fda%wda%xda%yda%zda%{da%|da%}da&Oda&Pda&Qda&Xdaida!Vda!Wda&Yda!Yda!^da!Sda#_davda!nda~Op%hO~Oq%hO~P'ZOq0zO~P'ZOm0|On0}Oo0{Op0{Oq1UOr1VOu1ZOi&UX!V&UX!W&UX&Y&UX!Y&UX!^&UX!S&UX#_&UX!n&UX~P(hO&Y%jOi&TX|&TX!V&TX!W&TX!Y&TX}&TX~Oi%lO|%mO!V%qO!W%pO~Oi%lO~O|%tO!V%qO!W%pO!Y&aX~O!Y%xO~O|%yO}%{O!V%qO!W%pO!^&[X~O!^&PO~O!^&QO~O&j#^O&k&SO~O&m#aO&n&SO~OX&VOq0zOx1YO!RwO~P'ZOQ#cO%g#dO%h&YO~OR#gO%i#hO%j&YO~OS#jO%k#kO%l&YO~OT#mO%m#nO%n&YO~OX!taa!tac!taj!tam!tan!tao!tap!taq!tar!tau!ta|!ta}!ta!Z!ta!h!ta!{!ta#j!ta%c!ta%f!ta%w!ta%x!ta%y!ta%z!ta%{!ta%|!ta%}!ta&O!ta&P!ta&Q!ta&X!tai!ta!V!ta!W!ta&Y!ta!Y!ta!^!ta!S!ta#_!tav!ta!n!ta~P#yO|&bO}%ua!{%ua#j%ua%c%ua%f%ua&X%ua~P$gOX&dOquOxvO}%ua!{%ua#j%ua%c%ua%f%ua&X%ua~P'ZO|&bO}%ua!{%ua#j%ua%c%ua%f%ua&X%ua~OPiOXfOquOxvO!RwO!S!QO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO#f!TO#j%RX%c%RX%f%RX~P'ZO#j#vO%c&iO%f&iO~O!h&jOj&wX%c&wX#_&wX#j&wX%f&wX#^&wX~Oj!nO%c&lO~Omgangaogapgaqgargauga|ga}ga!{ga#jga%cga%fga&Xgaiga!Vga!Wga&Yga!Yga!^ga!Sga#_gavga!nga~P$gOusa|sa}sa#jsa%csa%fsa&Xsa~Om!uOn!vOo!tOp!tOq!wOr!xO!{sa~PDuO&X&nO|&WX}&WX~O&SWO|&WX}&WX~O|&qO}yX~O}&sO~O|%yO#j&[X%c&[X%f&[Xi&[X}&[X!^&[X!n&[X&X&[X~OX1TOq0zOx1YO!RwO~P'ZO&X$]O#jWa%cWa%fWa~O|&|O#j&^X%c&^X%f&^Xp&^X~P$gO|'PO!S'OO#j#Za%c#Za%f#Za~O#_'QO#j#]a%c#]a%f#]a~O!h$gO!u$gO#^'SO&SWO~O#^'SO~O|'UO#j&zX%c&zX%f&zX~O|'WO#j&vX%c&vX%f&vX}&vX~O!Z'YO&X'ZO~O|'_Op&}X~P$gOp'bO~OPiOXfOquOxvO!RwO!S!QO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO#f!TO%c'gO~P'ZOv'kO#s'iO#t'jOP#qaX#qah#qaj#qaq#qau#qax#qa!R#qa!S#qa!V#qa!W#qa!Z#qa!_#qa!j#qa!u#qa!v#qa!w#qa#O#qa#Q#qa#S#qa#U#qa#W#qa#[#qa#^#qa#a#qa#b#qa#d#qa#f#qa#o#qa#r#qa#v#qa#x#qa#}#qa$Q#qa$S#qa%`#qa%|#qa%}#qa&R#qa&S#qa&h#qa&i#qa&l#qa&o#qa&s#qa&t#qa&u#qa%b#qa%f#qa~O|'lO#_'nO}'OX~Oj'pO!Z'YO~Oj!nO}$wO!Z'YO~O}'vO~P$gO%c'yO~OU'zO%c'yO~OX!fOa!fOc!gOj!nO!Z!pO!h!rO%y!cO%z!dO%{!dO%|!eO%}!eO&O!fO&P!fO&Q!fOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#jYi%cYi%fYi%wYi&XYiiYi!VYi!WYi&YYi!YYi!^Yi!SYi#_YivYi!nYi~O%x!bO~P!!`O%xYi~P!!`OX!fOa!fOc!gOj!nO!Z!pO!h!rO%|!eO%}!eO&O!fO&P!fO&Q!fOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#jYi%cYi%fYi%wYi%xYi%yYi&XYiiYi!VYi!WYi&YYi!YYi!^Yi!SYi#_YivYi!nYi~O%z!dO%{!dO~P!%ZO%zYi%{Yi~P!%ZOc!gOj!nO!Z!pO!h!rOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#jYi%cYi%fYi%wYi%xYi%yYi%zYi%{Yi%|Yi%}Yi&XYiiYi!VYi!WYi&YYi!YYi!^Yi!SYi#_YivYi!nYi~OX!fOa!fO&O!fO&P!fO&Q!fO~P!(XOXYiaYi&OYi&PYi&QYi~P!(XO!V%qO!W%pOi&dX|&dX~O&X'|O&Y'|O~P,QO|(OOi&cX~Oi(QO~O|(RO}(TO!Y&fX~Oq0zOx1YO|(RO}(UO!Y&fX~P'ZO!Y(WO~Oo!tOp!tOq!wOr!xOmliuli|li}li!{li#jli%cli%fli&Xli~On!vO~P!,zOnli~P!,zOm0|On0}Oo0{Op0{Oq1UOr1VO~Ov(YO~P!.TOX(_Oi(`Oq0zOx1YO~P'ZOi(`O|(aO~Oi(cO~O!W(eO~Oi(fO|(aO!V%qO!W%pO~P$gOm0|On0}Oo0{Op0{Oq1UOr1VOisa!Vsa!Wsa&Ysa!Ysa!^sa!Ssa#_savsa!nsa~PDuOX(_Oq0zOx1YO!Y&aa~P'ZO|(iO!Y&aa~O!Y(jO~O|(iO!V%qO!W%pO!Y&aa~P$gOX(nOq0zOx1YO!^&[a#j&[a%c&[a%f&[ai&[a}&[a!n&[a&X&[a~P'ZO|(oO!^&[a#j&[a%c&[a%f&[ai&[a}&[a!n&[a&X&[a~O!^(rO~O|(oO!V%qO!W%pO!^&[a~P$gO|(uO!V%qO!W%pO!^&ba~P$gO|(xO}&pX!^&pX!n&pX~O}({O!^(}O!n)OO~O}({O!^)PO!n)QO~O}({O!^)RO!n)SO~O}({O!^)TO!n)UO~OX&dOquOxvO}%ui!{%ui#j%ui%c%ui%f%ui&X%ui~P'ZO|)VO}%ui!{%ui#j%ui%c%ui%f%ui&X%ui~O!h&jOj&wa%c&wa#_&wa#j&wa%f&wa#^&wa~O%c)[O~OX$SOc$TO&SWO~O|&qO}ya~OquOxvO~P'ZO|(oO#j&[a%c&[a%f&[ai&[a}&[a!^&[a!n&[a&X&[a~P$gO|)aO#j%uX%c%uX%f%uX&X%uX~O&X$]O#jWi%cWi%fWi~O#j&^a%c&^a%f&^ap&^a~P'ZO|)dO#j&^a%c&^a%f&^ap&^a~OX)hOj)jO&SWO~O#^)kO~O&SWO#j&za%c&za%f&za~O|)mO#j&za%c&za%f&za~Oq0zOx1YO#j&va%c&va%f&va}&va~P'ZO|)pO#j&va%c&va%f&va}&va~OX)rOc)rO&SWO~O&X)wO~Ov)zO#m)yOP#kiX#kih#kij#kiq#kiu#kix#ki!R#ki!S#ki!V#ki!W#ki!Z#ki!_#ki!j#ki!u#ki!v#ki!w#ki#O#ki#Q#ki#S#ki#U#ki#W#ki#[#ki#^#ki#a#ki#b#ki#d#ki#f#ki#o#ki#r#ki#v#ki#x#ki#}#ki$Q#ki$S#ki%`#ki%|#ki%}#ki&R#ki&S#ki&h#ki&i#ki&l#ki&o#ki&s#ki&t#ki&u#ki%b#ki%f#ki~Ov){OP#niX#nih#nij#niq#niu#nix#ni!R#ni!S#ni!V#ni!W#ni!Z#ni!_#ni!j#ni!u#ni!v#ni!w#ni#O#ni#Q#ni#S#ni#U#ni#W#ni#[#ni#^#ni#a#ni#b#ni#d#ni#f#ni#o#ni#r#ni#v#ni#x#ni#}#ni$Q#ni$S#ni%`#ni%|#ni%}#ni&R#ni&S#ni&h#ni&i#ni&l#ni&o#ni&s#ni&t#ni&u#ni%b#ni%f#ni~OX)}Op&}a~P'ZO|*OOp&}a~O|*OOp&}a~P$gOp*SO~O%a*WO~Ov*ZO#s'iO#t*YOP#qiX#qih#qij#qiq#qiu#qix#qi!R#qi!S#qi!V#qi!W#qi!Z#qi!_#qi!j#qi!u#qi!v#qi!w#qi#O#qi#Q#qi#S#qi#U#qi#W#qi#[#qi#^#qi#a#qi#b#qi#d#qi#f#qi#o#qi#r#qi#v#qi#x#qi#}#qi$Q#qi$S#qi%`#qi%|#qi%}#qi&R#qi&S#qi&h#qi&i#qi&l#qi&o#qi&s#qi&t#qi&u#qi%b#qi%f#qi~OX*^Oq0zOx1YO}$wO~P'ZOq0zOx1YO}'Oa~P'ZO|*bO}'Oa~OX*fOc*gOi*jO&O*hO&SWO~O}$wO'R*lO~Oj'pO~Oj!nO}$wO~O%c*qO~O%c*sO~OX%[Oc%[Oq0zOx1YOi&ca~P'ZO|*vOi&ca~Oq0zOx1YO}*yO!Y&fa~P'ZO|*zO!Y&fa~Oq0zOx1YO|*zO}*}O!Y&fa~P'ZOq0zOx1YO|*zO!Y&fa~P'ZO|*zO}*}O!Y&fa~Oo0{Op0{Oq1UOr1VOilimliuli|li!Vli!Wli&Yli!Yli}li!^li#jli%cli%fli!Sli#_livli!nli&Xli~On0}O~P!JzOnli~P!JzOX(_Oi+SOq0zOx1YO~P'ZOp+UO~Oi+SO|+WO~Oi+XO~OX(_Oq0zOx1YO!Y&ai~P'ZO|+YO!Y&ai~O!Y+ZO~OX(nOq0zOx1YO!^&[i#j&[i%c&[i%f&[ii&[i}&[i!n&[i&X&[i~P'ZO|+^O!V%qO!W%pO!^&bi~O|+aO!^&[i#j&[i%c&[i%f&[ii&[i}&[i!n&[i&X&[i~O!^+bO~Oc+dOq0zOx1YO!^&bi~P'ZO|+^O!^&bi~O!^+fO~OX+hOq0zOx1YO}&pa!^&pa!n&pa~P'ZO|+iO}&pa!^&pa!n&pa~O!_+lO&r+mO!^!oX~O!^+oO~O}({O!^+pO~O}({O!^+qO~O}({O!^+rO~O}({O!^+sO~OX&dOquOxvO}%uq!{%uq#j%uq%c%uq%f%uq&X%uq~P'ZO|$yi}$yi!{$yi#j$yi%c$yi%f$yi&X$yi~P$gOX&dOquOxvO~P'ZOX&dOq0zOx1YO#j%ua%c%ua%f%ua&X%ua~P'ZO|+tO#j%ua%c%ua%f%ua&X%ua~O|$la#j$la%c$la%f$lap$la~P$gO#j&^i%c&^i%f&^ip&^i~P'ZO|+wO#j#Zq%c#Zq%f#Zq~O|+xO#_+zO#j&yX%c&yX%f&yXi&yX~OX+|Oj)jO&SWO~O&SWO#j&zi%c&zi%f&zi~Oq0zOx1YO#j&vi%c&vi%f&vi}&vi~P'ZO}$[O|#hX!Y#hX~O|,QO!Y&{X~O!Y,SO~Ov,VO#m)yOP#kqX#kqh#kqj#kqq#kqu#kqx#kq!R#kq!S#kq!V#kq!W#kq!Z#kq!_#kq!j#kq!u#kq!v#kq!w#kq#O#kq#Q#kq#S#kq#U#kq#W#kq#[#kq#^#kq#a#kq#b#kq#d#kq#f#kq#o#kq#r#kq#v#kq#x#kq#}#kq$Q#kq$S#kq%`#kq%|#kq%}#kq&R#kq&S#kq&h#kq&i#kq&l#kq&o#kq&s#kq&t#kq&u#kq%b#kq%f#kq~Op%Ta|%Ta~P$gOX)}Op&}i~P'ZO|,^Op&}i~O|,hO}$wO#_,hO~O#t,jOP#qqX#qqh#qqj#qqq#qqu#qqx#qq!R#qq!S#qq!V#qq!W#qq!Z#qq!_#qq!j#qq!u#qq!v#qq!w#qq#O#qq#Q#qq#S#qq#U#qq#W#qq#[#qq#^#qq#a#qq#b#qq#d#qq#f#qq#o#qq#r#qq#v#qq#x#qq#}#qq$Q#qq$S#qq%`#qq%|#qq%}#qq&R#qq&S#qq&h#qq&i#qq&l#qq&o#qq&s#qq&t#qq&u#qq%b#qq%f#qq~O#_,kO|%Va}%Va~Oq0zOx1YO}'Oi~P'ZO|,mO}'Oi~O}$[O&X,oOi'QX|'QX~O&SWOi'QX|'QX~O|,sOi'PX~Oi,uO~O%a,xO~O!V%qO!W%pOi&di|&di~OX%[Oc%[Oq0zOx1YOi&ci~P'ZO},{O|$oa!Y$oa~Oq0zOx1YO},|O|$oa!Y$oa~P'ZOq0zOx1YO}*yO!Y&fi~P'ZO|-PO!Y&fi~Oq0zOx1YO|-PO!Y&fi~P'ZO|-PO}-SO!Y&fi~Oi$ki|$ki!Y$ki~P$gOX(_Oq0zOx1YO~P'ZOp-UO~OX(_Oi-VOq0zOx1YO~P'ZOX(_Oq0zOx1YO!Y&aq~P'ZO|$ji!^$ji#j$ji%c$ji%f$jii$ji}$ji!n$ji&X$ji~P$gOX(nOq0zOx1YO~P'ZOc+dOq0zOx1YO!^&bq~P'ZO|-WO!^&bq~O!^-XO~OX(nOq0zOx1YO!^&[q#j&[q%c&[q%f&[qi&[q}&[q!n&[q&X&[q~P'ZO}-YO~OX+hOq0zOx1YO}&pi!^&pi!n&pi~P'ZO|-_O}&pi!^&pi!n&pi~O!_+lO&r+mO!^!oa~OX&dOq0zOx1YO#j%ui%c%ui%f%ui&X%ui~P'ZO|-bO#j%ui%c%ui%f%ui&X%ui~O&SWO#j&ya%c&ya%f&yai&ya~O|-eO#j&ya%c&ya%f&yai&ya~Oi-hO~OX)rOc)rO&SWO!Y&{a~O|-jO!Y&{a~Op%Ti|%Ti~P$gOX)}O~P'ZOX)}Op&}q~P'ZOv-nOP#pyX#pyh#pyj#pyq#pyu#pyx#py!R#py!S#py!V#py!W#py!Z#py!_#py!j#py!u#py!v#py!w#py#O#py#Q#py#S#py#U#py#W#py#[#py#^#py#a#py#b#py#d#py#f#py#o#py#r#py#v#py#x#py#}#py$Q#py$S#py%`#py%|#py%}#py&R#py&S#py&h#py&i#py&l#py&o#py&s#py&t#py&u#py%b#py%f#py~O%b-rO%f-rO~P`O#t-sOP#qyX#qyh#qyj#qyq#qyu#qyx#qy!R#qy!S#qy!V#qy!W#qy!Z#qy!_#qy!j#qy!u#qy!v#qy!w#qy#O#qy#Q#qy#S#qy#U#qy#W#qy#[#qy#^#qy#a#qy#b#qy#d#qy#f#qy#o#qy#r#qy#v#qy#x#qy#}#qy$Q#qy$S#qy%`#qy%|#qy%}#qy&R#qy&S#qy&h#qy&i#qy&l#qy&o#qy&s#qy&t#qy&u#qy%b#qy%f#qy~O|-vO}$wO#_-vO~Oq0zOx1YO}'Oq~P'ZO|-yO}'Oq~O&X,oOi'Qa|'Qa~OX*fOc*gO&O*hO&SWOi'Pa~O|-}Oi'Pa~O$V.RO~OX%[Oc%[Oq0zOx1YO~P'ZOq0zOx1YO}.SO|$oi!Y$oi~P'ZOq0zOx1YO|$oi!Y$oi~P'ZO}.SO|$oi!Y$oi~Oq0zOx1YO}*yO~P'ZOq0zOx1YO}*yO!Y&fq~P'ZO|.VO!Y&fq~Oq0zOx1YO|.VO!Y&fq~P'ZOu.YO!V%qO!W%pOi&]q!Y&]q!^&]q|&]q~P!.TOc+dOq0zOx1YO!^&by~P'ZO|$mi!^$mi~P$gOc+dOq0zOx1YO~P'ZOX+hOq0zOx1YO~P'ZOX+hOq0zOx1YO}&pq!^&pq!n&pq~P'ZO}({O!^.^O!n._O~OX&dOq0zOx1YO#j%uq%c%uq%f%uq&X%uq~P'ZO#_.`O|%Oa#j%Oa%c%Oa%f%Oai%Oa~O&SWO#j&yi%c&yi%f&yii&yi~O|.bO#j&yi%c&yi%f&yii&yi~OX)rOc)rO&SWO!Y&{i~Ov.fOP#p!RX#p!Rh#p!Rj#p!Rq#p!Ru#p!Rx#p!R!R#p!R!S#p!R!V#p!R!W#p!R!Z#p!R!_#p!R!j#p!R!u#p!R!v#p!R!w#p!R#O#p!R#Q#p!R#S#p!R#U#p!R#W#p!R#[#p!R#^#p!R#a#p!R#b#p!R#d#p!R#f#p!R#o#p!R#r#p!R#v#p!R#x#p!R#}#p!R$Q#p!R$S#p!R%`#p!R%|#p!R%}#p!R&R#p!R&S#p!R&h#p!R&i#p!R&l#p!R&o#p!R&s#p!R&t#p!R&u#p!R%b#p!R%f#p!R~Oq0zOx1YO}'Oy~P'ZOX*fOc*gO&O*hO&SWOi'Pi~O$V.RO%b.nO%f.nO~OX.xOj.vO!Z.uO!_.wO!j.qO!v.sO!w.sO%}.pO&SWO&h]O&i^O&l_O~Oq0zOx1YO|$oq!Y$oq~P'ZO}.}O|$oq!Y$oq~Oq0zOx1YO}*yO!Y&fy~P'ZO|/OO!Y&fy~Oq0zOx/SO~P'ZOu.YO!V%qO!W%pOi&]y!Y&]y!^&]y|&]y~P!.TO}({O!^/VO~O&SWO#j&yq%c&yq%f&yqi&yq~O|/XO#j&yq%c&yq%f&yqi&yq~OX*fOc*gO&O*hO&SWO~Oj/^O!h/[O|$WX#_$WX%w$WXi$WX~Ou$WX}$WX!Y$WX!^$WX~P$&lO%|/`O%}/`Ou$XX|$XX}$XX#_$XX%w$XX!Y$XXi$XX!^$XX~O!j/bO~O|/fO#_/hO%w/cOu'SX}'SX!Y'SXi'SX~Oc/kO~P$!|Oj/^Ou'TX|'TX}'TX#_'TX%w'TX!Y'TXi'TX!^'TX~Ou/oO}$wO~Oq0zOx1YO|$oy!Y$oy~P'ZOq0zOx1YO}*yO!Y&f!R~P'ZO|/sO!Y&f!R~Oi&`Xu&`X!V&`X!W&`X!Y&`X!^&`X|&`X~P!.TOu.YO!V%qO!W%pOi&_a!Y&_a!^&_a|&_a~O&SWO#j&yy%c&yy%f&yyi&yy~O!h/[Oj$_au$_a|$_a}$_a#_$_a%w$_a!Y$_ai$_a!^$_a~O!j/|O~O%|/`O%}/`Ou$Xa|$Xa}$Xa#_$Xa%w$Xa!Y$Xai$Xa!^$Xa~O%w/cOu$]a|$]a}$]a#_$]a!Y$]ai$]a!^$]a~Ou'Sa}'Sa!Y'Sai'Sa~P$!pO|0ROu'Sa}'Sa!Y'Sai'Sa~O!Y0UO~Oi0UO~O}0WO~O!^0XO~Oq0zOx1YO}*yO!Y&f!Z~P'ZO}0[O~O&X0]O~P$&lO|0^O#_/hO%w/cOi'VX~O|0^Oi'VX~Oi0`O~O!j0aO~O#_/hOu%Za|%Za}%Za%w%Za!Y%Zai%Za!^%Za~O#_/hO%w/cOu%_a|%_a}%_a!Y%_ai%_a~Ou'Si}'Si!Y'Sii'Si~P$!pO|0cO#_/hO%w/cO!^'Ua~O}$ga~P$gOi'Va~P$!pO|0kOi'Va~Oc0mO!^'Ui~P$!|O|0oO!^'Ui~O|0oO#_/hO%w/cO!^'Ui~O#_/hO%w/cOi$ei|$ei~O&X0rO~P$&lO#_/hO%w/cOi%^a|%^a~Oi'Vi~P$!pO}0uO~Oc0mO!^'Uq~P$!|O|0wO!^'Uq~O#_/hO%w/cO|%]i!^%]i~Oc0mO~P$!|Oc0mO!^'Uy~P$!|O#_/hO%w/cOi$fi|$fi~O#_/hO%w/cO|%]q!^%]q~O|+tO#j%ua%c%ua%f%ua&X%ua~P$gOX&dOq0zOx1YO~P'ZOp1PO~Oq1PO~P'ZO}1QO~Ov1RO~P!.TO&i&l&t&u&h&o&s&S&h~",
	  goto: "!?b'WPPPPPPPP'XP'a*|+f,P,k-W-tP.cP'a/S/S'aPPP'a2oPPPPPP2o5fPP5fP7y8S>fPP>i?Z?^PP'a'aPP?vPP'a'aPP'a'a'a'a'a?z@t'aP@wP@}EXHxPH|IYI^IbIf'aPPPIjIs'XP'X'XP'XP'XP'XP'XP'X'X'XP'XPP'XPP'XP'XPIyJVJ_PJfJlPJfPJfJfPPPJfPLzPMTM_MeLzPJfMnPJfPMuM{PNPNe! S! mNPNP! s!!QNPNPNPNP!!f!!l!!o!!t!!w!#R!#X!#e!#w!#}!$X!$_!${!%R!%X!%_!%i!%o!%u!%{!&R!&X!&k!&u!&{!'R!'X!'c!'i!'o!'u!'{!(V!(]!(g!(m!(v!(|!)]!)e!)o!)vPPPPPPPPPPPPPPPPP!)|!*P!*V!*`!*j!*uPPPPPPPPPPPP!/l!1Q!5T!8hPP!8p!9S!9]!:U!9{!:_!:e!:h!:k!:n!:v!;gPPPPPPPPP!;j!;yPPPP!<i!<u!=R!=X!=b!=e!=h!=n!=t!=z!=}P!>V!>`!?[!?_]jOs#v$w*W,d(TeOTYZ[fistuwy}!O!S!U!V!W!Z!^!h!i!j!k!l!m!n!p!t!u!v!x!y#P#T#X#Y#c#g#j#m#s#v$X$Y$[$^$a$r$t$u$w%O%[%a%h%k%m%p%t%y%{&V&b&d&o&s&|'O'P'W'Z'_'b'i'l'}(O(R(T(U(Y(_(a(e(i(n(o(u(x)V)X)a)d)p)w)y)}*O*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+d+h+i+l+t+v+w,O,],^,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/o/s0[0z0{0|0}1P1Q1R1S1T1V1Z}!hQ#r$P$b$q$}%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!P!iQ#r$P$b$q$}%S%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!R!jQ#r$P$b$q$}%S%T%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!T!kQ#r$P$b$q$}%S%T%U%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!V!lQ#r$P$b$q$}%S%T%U%V%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!X!mQ#r$P$b$q$}%S%T%U%V%W%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O!]!mQ!s#r$P$b$q$}%S%T%U%V%W%X%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1O(TTOTYZ[fistuwy}!O!S!U!V!W!Z!^!h!i!j!k!l!m!n!p!t!u!v!x!y#P#T#X#Y#c#g#j#m#s#v$X$Y$[$^$a$r$t$u$w%O%[%a%h%k%m%p%t%y%{&V&b&d&o&s&|'O'P'W'Z'_'b'i'l'}(O(R(T(U(Y(_(a(e(i(n(o(u(x)V)X)a)d)p)w)y)}*O*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+d+h+i+l+t+v+w,O,],^,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/o/s0[0z0{0|0}1P1Q1R1S1T1V1Z&iVOYZ[isuw}!O!S!U!V!Z!n!p!t!u!v!x!y#c#g#j#m#s#v$Y$[$^$a$u$w%[%a%h%k%m%t%y%{&V&b&o&s'O'P'W'Z'b'i'l'}(O(R(T(U(Y(a(i(o(u(x)V)X)a)p)w)y*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+h+i+l+t+w,O,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/s0[0z0{0|0}1P1Q1R1S1V1Z%sXOYZ[isw}!O!S!U!V!Z!n!p#c#g#j#m#s#v$Y$[$^$a$u$w%[%a%k%m%t%y%{&V&b&o&s'O'P'W'Z'b'i'l'}(O(R(T(U(Y(a(i(o(u(x)V)X)a)p)w)y*S*W*^*b*l*v*y*z*}+T+W+Y+]+^+a+h+i+l+t+w,O,d,l,m,p,z,{,|-O-P-S-W-Y-[-^-_-b-y-{.S.V.}/O/s1Q1R1SQ$VvQ/t/SR1W1Y'zeOTYZ[fistuwy}!O!S!U!V!W!Z!^!h!i!j!k!l!m!p!t!u!v!x!y#P#T#X#Y#c#g#j#m#s#v$X$Y$[$^$a$r$t$u$w%O%[%a%h%k%m%p%t%y%{&V&b&d&o&s&|'O'P'W'Z'_'b'i'l'}(R(T(U(Y(_(a(e(i(n(o(u(x)V)X)a)d)p)w)y)}*O*S*W*^*b*l*y*z*}+T+U+W+Y+]+^+a+d+h+i+l+t+v+w,O,],^,d,l,m,p,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/o/s0[0z0{0|0}1P1Q1R1S1T1V1ZW#ym!P!Q$hW$Rv&q/S1YQ$j!RQ$n!TQ${![Q$|!]W%Z!n(O*v,zS&p$S$TQ'e$vQ)Y&jQ)h'QU)i'S)j)kU)l'U)m+}W)s'Y,Q-j.dQ*d'nW*e'p,s-}.lQ,P)rS,r*f*gY-d+x-e.a.b/XQ-g+zQ-t,hQ-x,kQ.j-vl.o.R.u.v.x/d/f/k0R0W0]0b0m0r0uQ/W.`Q/l.wQ/x/^Q0T/hU0h0^0k0sX0n0c0o0v0wR&o$R!_!|YZ!U!V!p%a%m%t(R(T(U(a(i)y*y*z*}+T+W+Y,{,|-O-P-S.S.V.}/O/sR%k!{Q#QYQ&W#cQ&Z#gQ&]#jQ&_#mQ&x$^Q&{$aR-`+lT/R.Y0[![!oQ!s#r$P$b$q$}%S%T%U%V%W%X%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1OQ&m#zQ't$|R*p'uR'}%ZQ%d!rR/v/[(SdOTYZ[fistuwy}!O!S!U!V!W!Z!^!h!i!j!k!l!m!n!p!t!u!v!x!y#P#T#X#Y#c#g#j#m#s#v$X$Y$[$^$a$r$t$u$w%O%[%a%h%k%m%p%t%y%{&V&b&d&o&s&|'O'P'W'Z'_'b'i'l'}(O(R(T(U(Y(_(a(e(i(n(o(u(x)V)X)a)d)p)w)y)}*O*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+d+h+i+l+t+v+w,O,],^,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/o/s0[0z0{0|0}1P1Q1R1S1T1V1ZS#pd#q!P.s.R.u.v.w.x/^/d/f/k0R0W0]0^0b0c0k0m0o0r0s0u0v0w(SdOTYZ[fistuwy}!O!S!U!V!W!Z!^!h!i!j!k!l!m!n!p!t!u!v!x!y#P#T#X#Y#c#g#j#m#s#v$X$Y$[$^$a$r$t$u$w%O%[%a%h%k%m%p%t%y%{&V&b&d&o&s&|'O'P'W'Z'_'b'i'l'}(O(R(T(U(Y(_(a(e(i(n(o(u(x)V)X)a)d)p)w)y)}*O*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+d+h+i+l+t+v+w,O,],^,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/o/s0[0z0{0|0}1P1Q1R1S1T1V1ZT#pd#qT#d`#ee(|&W&Z&]&_)O)Q)S)U-`._T+m({+nT#ha#iT#kb#lT#nc#oQ$`xQ,P)sR,q*eX$^x$_$`&zQ'[$nQ'r${Q'u$|R*V'eQ)t'YV-i,Q-j.dZlOs$w*W,dXpOs*W,dQ$x!YQ']$oQ'^$pQ'o$zQ's$|Q*T'dQ*['iQ*_'jQ*`'kQ*m'qS*o't'uQ,W)yQ,Y)zQ,Z){Q,_*RS,a*U*nQ,e*YQ,f*ZS,g*]*^Q,w*pQ-l,VQ-m,XQ-o,`S-p,b,cQ-u,iQ-w,jQ.e-nQ.g-qQ.h-sQ.i-tQ/Y.fQ/Z.jQ/p.{R0Z/qWpOs*W,dR#|oQ'q${S*U'e'rR,c*VQ,p*eR-{,qQ*n'qQ,b*UR-q,cZnOos*W,dQ'w$}R*r'xT.P,x.Qu.z.R.u.v.x/^/d/f/k0R0W0]0^0b0k0m0r0s0ut.z.R.u.v.x/^/d/f/k0R0W0]0^0b0k0m0r0s0uQ/l.wX0n0c0o0v0w!P.r.R.u.v.w.x/^/d/f/k0R0W0]0^0b0c0k0m0o0r0s0u0v0wQ/a.qR/}/bg/d.t/e/y0Q0V0e0g0i0t0x0yu.y.R.u.v.x/^/d/f/k0R0W0]0^0b0k0m0r0s0uX/_.o.y/x0hR/z/^V0j0^0k0sR/q.{QsOS$Os,dR,d*WQ&r$UR)_&rS%z#W$WS(p%z(sT(s%}&tQ%n#OQ%u#SW(b%n%u(g(kQ(g%rR(k%wQ&}$bR)e&}Q(v&OQ+_(qT+e(v+_Q(P%]R*w(PS(S%`%aY*{(S*|-Q.W/PU*|(T(U(VU-Q*}+O+PS.W-R-SR/P.XQ#_^R&R#_Q#b_R&T#bQ#e`R&X#eQ(y&US+j(y+kR+k(zQ+n({R-a+nQ#iaR&[#iQ#lbR&^#lQ#ocR&`#oQ#qdR&a#qQ#tgQ&c#rW&f#t&c)b+uQ)b&wR+u1OQ$_xS&y$_&zR&z$`Q'X$lR)q'XQ&k#yR)Z&kQ$h!QR'R$hQ+y)iS-f+y.cR.c-gQ'V$jR)n'VQ,R)tR-k,RQ#wkR&h#wQ)x']R,U)xQ'`$qS*P'`*QR*Q'aQ'h$xR*X'hQ'm$yS*c'm,nR,n*dQ,t*iR.O,tWoOs*W,dR#{oQ.Q,xR.m.Qd/e.t/y0Q0V0e0g0i0t0x0yR0P/eU/].o/x0hR/w/]Q0d0VS0p0d0qR0q0eS0_/y/zR0l0_Q/g.tR0S/gR!`PXrOs*W,dWqOs*W,dR'f$wYkOs$w*W,dR&g#v[xOs#v$w*W,dR&x$^&hQOYZ[isuw}!O!S!U!V!Z!n!p!t!u!v!x!y#c#g#j#m#s#v$Y$[$^$a$u$w%[%a%h%k%m%t%y%{&V&b&o&s'O'P'W'Z'b'i'l'}(O(R(T(U(Y(a(i(o(u(x)V)X)a)p)w)y*S*W*^*b*l*v*y*z*}+T+U+W+Y+]+^+a+h+i+l+t+w,O,d,l,m,p,z,{,|-O-P-S-U-W-Y-[-^-_-b-y-{.S.V.Y.}/O/s0[0z0{0|0}1P1Q1R1S1V1ZQ!sTQ#rfQ$PtU$by%p(eS$q!W$tQ$}!^Q%S!hQ%T!iQ%U!jQ%V!kQ%W!lQ%X!mQ%r#PQ%w#TQ%}#XQ&O#YQ&t$XQ'a$rQ'x%OQ)W&dU)c&|)d+vW)|'_*O,],^Q+R(_Q+[(nQ,[)}Q-Z+dQ0Y/oR1O1TQ#OYQ#SZQ$o!UQ$p!VQ%`!pQ(V%a^(^%m%t(a(i+T+W+Y^*x(R*z-O-P.V/O/sQ+O(TQ+P(UQ,X)yQ,}*yQ-R*}Q.T,{Q.U,|Q.X-SQ.|.SR/r.}[gOs#v$w*W,d!^!{YZ!U!V!p%a%m%t(R(T(U(a(i)y*y*z*}+T+W+Y,{,|-O-P-S.S.V.}/O/sQ#W[Q#uiS$Ww}Q$e!OW$l!S$a'b*SS$y!Z$uW%Y!n(O*v,zY&U#c#g#j#m+l`&e#s&b)V)X)a+t-b1SQ&u$YQ&v$[Q&w$^Q'{%[Q(]%kW(m%y(o+]+aQ(q%{Q(z&VQ)]&oS)`&s1QQ)f'OQ)g'PU)o'W)p,OQ)v'ZQ*]'iY*a'l*b,l,m-yQ*t'}S+Q(Y1RW+c(u+^-W-[W+g(x+i-^-_Q,T)wQ,i*^Q,v*lQ-]+hQ-c+wQ-z,pQ.]-YR.k-{hUOs#s#v$w&b&s(Y)V)X*W,d%Y!zYZ[iw}!O!S!U!V!Z!n!p#c#g#j#m$Y$[$^$a$u%[%a%k%m%t%y%{&V&o'O'P'W'Z'b'i'l'}(O(R(T(U(a(i(o(u(x)a)p)w)y*S*^*b*l*v*y*z*}+T+W+Y+]+^+a+h+i+l+t+w,O,l,m,p,z,{,|-O-P-S-W-Y-[-^-_-b-y-{.S.V.}/O/s1Q1R1SQ$QuW%e!t!x0{1VQ%f!uQ%g!vQ%i!yQ%s0zS(X%h1PQ(Z0|Q([0}Q-T+UQ.[-US/Q.Y0[R1X1ZU$Uv/S1YR)^&q[hOs#v$w*W,da!}Y#c#g#j#m$^$a+lQ#][Q$ZwR$d}Q%o#OQ%v#SQ%|#WQ'{%YQ(h%rQ(l%wQ(t%}Q(w&OQ+`(qQ,y*tQ.Z-TQ/U.[R/u/TQ$cyQ(d%pR+V(eQ/T.YR0f0[R#VZR#[[R%_!nQ%]!nV*u(O*v,z!]!qQ!s#r$P$b$q$}%S%T%U%V%W%X%r%w%}&O&t'a'x)W)c)|+R+[,[-Z0Y1OR%b!pQ&W#cQ&Z#gQ&]#jQ&_#mR-`+lQ(}&WQ)P&ZQ)R&]Q)T&_Q+p)OQ+q)QQ+r)SQ+s)UQ.^-`R/V._Q$m!SQ&{$aQ*R'bR,`*SQ#zmQ$f!PQ$i!QR'T$hQ)h'SR+|)kQ)h'SQ+{)jR+|)kR$k!RR)u'YXqOs*W,dQ$s!WR'c$tQ$z!ZR'd$uR*k'pQ*i'pV-|,s-}.lQ.{.RQ/i.uR/j.vU.t.R.u.vQ/n.xQ/y/^Q0O/dU0Q/f0R0bQ0V/kQ0e0WQ0g0]U0i0^0k0sQ0t0mQ0x0rR0y0uR/m.wR/{/^",
	  nodeNames: "⚠ print { { { { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec FormatReplacement FormatReplacement FormatReplacement FormatReplacement ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
	  maxTerm: 283,
	  context: trackIndent,
	  nodeProps: [
		["group", -15,8,88,90,91,93,95,97,99,101,102,103,105,108,111,113,"Statement Statement",-22,10,20,23,27,42,51,52,58,59,62,63,64,65,66,69,72,73,74,82,83,84,85,"Expression",-10,117,119,122,124,125,129,131,136,138,141,"Statement",-9,146,147,150,151,153,154,155,156,157,"Pattern"],
		["openedBy", 25,"(",56,"[",60,"{"],
		["closedBy", 26,")",57,"]",61,"}"]
	  ],
	  propSources: [pythonHighlighting],
	  skippedNodes: [0,6],
	  repeatNodeCount: 38,
	  tokenData: "%-W#sR!`OX%TXY=|Y[%T[]=|]p%Tpq=|qr@_rsDOst!+|tu%Tuv!Nnvw#!|wx#$Wxy#:Uyz#;Yz{#<^{|#>x|}#@S}!O#AW!O!P#Ci!P!Q#N_!Q!R$!y!R![$&w![!]$1e!]!^$3s!^!_$4w!_!`$7c!`!a$8m!a!b%T!b!c$;U!c!d$<b!d!e$>W!e!h$<b!h!i$H[!i!t$<b!t!u%#r!u!w$<b!w!x$Fl!x!}$<b!}#O%%z#O#P?d#P#Q%'O#Q#R%(S#R#S$<b#S#T%T#T#U$<b#U#V$>W#V#Y$<b#Y#Z$H[#Z#f$<b#f#g%#r#g#i$<b#i#j$Fl#j#o$<b#o#p%)^#p#q%*S#q#r%+^#r#s%,S#s$g%T$g;'S$<b;'S;=`$>Q<%lO$<b!n%^]&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n&^]&r!b&jSOr%Trs'Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n'^]&r!b&jSOr%Trs(Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!f(^Z&r!b&jSOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!f)UZ&r!bOw(Vwx)wx#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!f)|Z&r!bOw(Vwx*ox#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!b*tT&r!bO#o*o#p#q*o#r;'S*o;'S;=`+T<%lO*o!b+WP;=`<%l*o!f+`W&r!bO#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`.d;=`<%l+x<%lO(VS+}V&jSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS,gVOw+xwx,|x#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS-PUOw+xx#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS-fRO;'S+x;'S;=`-o;=`O+xS-tW&jSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l+x<%lO+xS.aP;=`<%l+x!f.iW&jSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l(V<%lO+x!f/UP;=`<%l(V!n/`]&r!b&mWOr%Trs&Vsw%Twx0Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n0`]&r!b&mWOr%Trs&Vsw%Twx1Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!j1`Z&r!b&mWOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j2WZ&r!bOr1Xrs2ys#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j3OZ&r!bOr1Xrs*os#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j3vW&r!bO#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`6z;=`<%l4`<%lO1XW4eV&mWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W4}VOr4`rs5ds#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W5gUOr4`s#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W5|RO;'S4`;'S;=`6V;=`O4`W6[W&mWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l4`<%lO4`W6wP;=`<%l4`!j7PW&mWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l1X<%lO4`!j7lP;=`<%l1X!n7tW&r!bO#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=P;=`<%l8^<%lO%T[8eX&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[9VX&jSOr8^rs9rsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[9wX&jSOr8^rs+xsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[:iX&mWOr8^rs9Qsw8^wx;Ux#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[;ZX&mWOr8^rs9Qsw8^wx4`x#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[;yRO;'S8^;'S;=`<S;=`O8^[<ZY&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l8^<%lO8^[<|P;=`<%l8^!n=WY&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l%T<%lO8^!n=yP;=`<%l%T#s>Xc&r!b&jS&mW%p!TOX%TXY=|Y[%T[]=|]p%Tpq=|qr%Trs&Vsw%Twx/Xx#O%T#O#P?d#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s?i[&r!bOY%TYZ=|Z]%T]^=|^#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=P;=`<%l8^<%lO%T!q@hd&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`#O%T#O#P7o#P#T%T#T#UBz#U#f%T#f#gBz#g#hBz#h#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!qBR]oR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!qCV]!nR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#cDXa&r!b&jS&hsOYE^YZ%TZ]E^]^%T^rE^rs!)|swE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cEia&r!b&jS&mW&hsOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cFw]&r!b&jS&hsOr%Trs'Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#cGya&r!b&mW&hsOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxIOx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cIXa&r!b&mW&hsOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxJ^x#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#_Jg_&r!b&mW&hsOYJ^YZ1XZ]J^]^1X^rJ^rsKfs#OJ^#O#PL`#P#oJ^#o#pL}#p#qJ^#q#rL}#r;'SJ^;'S;=`!!o<%lOJ^#_KmZ&r!b&hsOr1Xrs2ys#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#_LeW&r!bO#oJ^#o#pL}#p#qJ^#q#rL}#r;'SJ^;'S;=`! r;=`<%lL}<%lOJ^{MUZ&mW&hsOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l<%lOL}{M|V&hsOr4`rs5ds#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`{NfRO;'SL};'S;=`No;=`OL}{Nv[&mW&hsOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l;=`<%lL}<%lOL}{! oP;=`<%lL}#_! y[&mW&hsOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l;=`<%lJ^<%lOL}#_!!rP;=`<%lJ^#c!!zW&r!bO#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!(q;=`<%l!#d<%lOE^!P!#m]&jS&mW&hsOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!$mX&jS&hsOr8^rs9rsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^!P!%a]&mW&hsOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!&Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!&a]&mW&hsOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwxL}x#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!']RO;'S!#d;'S;=`!'f;=`O!#d!P!'o^&jS&mW&hsOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k;=`<%l!#d<%lO!#d!P!(nP;=`<%l!#d#c!(z^&jS&mW&hsOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k;=`<%lE^<%lO!#d#c!)yP;=`<%lE^#c!*V]&r!b&jS&hsOr%Trs!+Osw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c!+ZZ&nW&r!b&jS&lsOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#s!,XaU!T&r!b&jS&mWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!-gaU!T&r!b&jSOY!+|YZ%TZ]!+|]^%T^r!+|rs!.lsw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!.uaU!T&r!b&jSOY!+|YZ%TZ]!+|]^%T^r!+|rs!/zsw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#k!0T_U!T&r!b&jSOY!/zYZ(VZ]!/z]^(V^w!/zwx!1Sx#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#k!1Z_U!T&r!bOY!/zYZ(VZ]!/z]^(V^w!/zwx!2Yx#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#k!2a_U!T&r!bOY!/zYZ(VZ]!/z]^(V^w!/zwx!3`x#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#g!3gZU!T&r!bOY!3`YZ*oZ]!3`]^*o^#o!3`#o#p!4Y#p#q!3`#q#r!4Y#r;'S!3`;'S;=`!4t<%lO!3`!T!4_TU!TOY!4YZ]!4Y^;'S!4Y;'S;=`!4n<%lO!4Y!T!4qP;=`<%l!4Y#g!4wP;=`<%l!3`#k!5R[U!T&r!bOY!/zYZ(VZ]!/z]^(V^#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!9s;=`<%l+x<%lO!/z!X!6OZU!T&jSOY!5wYZ+xZ]!5w]^+x^w!5wwx!6qx#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!6vZU!TOY!5wYZ+xZ]!5w]^+x^w!5wwx!7ix#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!7nZU!TOY!5wYZ+xZ]!5w]^+x^w!5wwx!4Yx#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!8fWU!TOY!5wYZ+xZ]!5w]^+x^;'S!5w;'S;=`!9O;=`<%l+x<%lO!5w!X!9TW&jSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l!5w<%lO+x!X!9pP;=`<%l!5w#k!9xW&jSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l!/z<%lO+x#k!:eP;=`<%l!/z#s!:qaU!T&r!b&mWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!;vx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!<PaU!T&r!b&mWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!=Ux#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#o!=__U!T&r!b&mWOY!=UYZ1XZ]!=U]^1X^r!=Urs!>^s#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!>e_U!T&r!bOY!=UYZ1XZ]!=U]^1X^r!=Urs!?ds#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!?k_U!T&r!bOY!=UYZ1XZ]!=U]^1X^r!=Urs!3`s#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!@q[U!T&r!bOY!=UYZ1XZ]!=U]^1X^#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!Ec;=`<%l4`<%lO!=U!]!AnZU!T&mWOY!AgYZ4`Z]!Ag]^4`^r!Agrs!Bas#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!BfZU!TOY!AgYZ4`Z]!Ag]^4`^r!Agrs!CXs#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!C^ZU!TOY!AgYZ4`Z]!Ag]^4`^r!Agrs!4Ys#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!DUWU!TOY!AgYZ4`Z]!Ag]^4`^;'S!Ag;'S;=`!Dn;=`<%l4`<%lO!Ag!]!DsW&mWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l!Ag<%lO4`!]!E`P;=`<%l!Ag#o!EhW&mWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l!=U<%lO4`#o!FTP;=`<%l!=U#s!F_[U!T&r!bOY!+|YZ%TZ]!+|]^%T^#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Mq;=`<%l8^<%lO!+|!a!G^]U!T&jS&mWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!H^]U!T&jSOY!GTYZ8^Z]!GT]^8^^r!GTrs!IVsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!I^]U!T&jSOY!GTYZ8^Z]!GT]^8^^r!GTrs!5wsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!J^]U!T&mWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!KVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!K^]U!T&mWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!Agx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!L[WU!TOY!GTYZ8^Z]!GT]^8^^;'S!GT;'S;=`!Lt;=`<%l8^<%lO!GT!a!L{Y&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l!GT<%lO8^!a!MnP;=`<%l!GT#s!MxY&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l!+|<%lO8^#s!NkP;=`<%l!+|#b!Ny_&PQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b#!T]!{r&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b##X_%yQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#$aa&r!b&mW&hsOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx#8Ux#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#%qa&r!b&jS&mW&hsOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#'Pa&r!b&jS&hsOY#%fYZ%TZ]#%f]^%T^r#%frs#(Usw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#(_a&r!b&jS&hsOY#%fYZ%TZ]#%f]^%T^r#%frs#)dsw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#Z#)m_&r!b&jS&hsOY#)dYZ(VZ]#)d]^(V^w#)dwx#*lx#O#)d#O#P#+f#P#o#)d#o#p#,T#p#q#)d#q#r#,T#r;'S#)d;'S;=`#/u<%lO#)d#Z#*sZ&r!b&hsOw(Vwx)wx#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#Z#+kW&r!bO#o#)d#o#p#,T#p#q#)d#q#r#,T#r;'S#)d;'S;=`#.x;=`<%l#,T<%lO#)dw#,[Z&jS&hsOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r<%lO#,Tw#-SV&hsOw+xwx,|x#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xw#-lRO;'S#,T;'S;=`#-u;=`O#,Tw#-|[&jS&hsOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r;=`<%l#,T<%lO#,Tw#.uP;=`<%l#,T#Z#/P[&jS&hsOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r;=`<%l#)d<%lO#,T#Z#/xP;=`<%l#)d#c#0U]&r!b&mW&hsOr%Trs&Vsw%Twx0Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#1SW&r!bO#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#6y;=`<%l#1l<%lO#%f!P#1u]&jS&mW&hsOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#2u]&jS&hsOY#1lYZ8^Z]#1l]^8^^r#1lrs#3nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#3u]&jS&hsOY#1lYZ8^Z]#1l]^8^^r#1lrs#,Tsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#4uX&mW&hsOr8^rs9Qsw8^wx;Ux#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^!P#5eRO;'S#1l;'S;=`#5n;=`O#1l!P#5w^&jS&mW&hsOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s;=`<%l#1l<%lO#1l!P#6vP;=`<%l#1l#c#7S^&jS&mW&hsOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s;=`<%l#%f<%lO#1l#c#8RP;=`<%l#%f#c#8_]&r!b&mW&hsOr%Trs&Vsw%Twx#9Wx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#9cZ&kS&r!b&mW&isOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#c#:a]js&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q#;e]iR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#<iaXs&r!b&jS&mWOr%Trs&Vsw%Twx/Xxz%Tz{#=n{!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#=y_cR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#?T_%|s&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q#@_]|R&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s#Ac`%}s&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`!a#Be!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#O#Bp]'R`&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#Cta!hQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!O%T!O!P#Dy!P!Q%T!Q![#GV![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#ES_&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!O%T!O!P#FR!P#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#F^]!us&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Gbi!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#GV![!g%T!g!h#IP!h!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S#GV#S#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#IYc&r!b&jS&mWOr%Trs&Vsw%Twx/Xx{%T{|#Je|}%T}!O#Je!O!Q%T!Q![#Km![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Jn_&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#Km![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Kxe!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#Km![!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S#Km#S#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Mf]!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#Nja&OR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!P%T!P!Q$ o!Q!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$ z_&QQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$#Uw!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!O%T!O!P$%o!P!Q%T!Q![$&w![!d%T!d!e$(w!e!g%T!g!h#IP!h!l%T!l!m#MZ!m!q%T!q!r$+m!r!z%T!z!{$.]!{#O%T#O#P7o#P#R%T#R#S$&w#S#U%T#U#V$(w#V#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#c%T#c#d$+m#d#l%T#l#m$.]#m#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$%x_&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#GV![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$'Sk!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!O%T!O!P$%o!P!Q%T!Q![$&w![!g%T!g!h#IP!h!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S$&w#S#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$)Qb&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q!R$*Y!R!S$*Y!S#O%T#O#P7o#P#R%T#R#S$*Y#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$*eb!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q!R$*Y!R!S$*Y!S#O%T#O#P7o#P#R%T#R#S$*Y#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$+va&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q!Y$,{!Y#O%T#O#P7o#P#R%T#R#S$,{#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$-Wa!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q!Y$,{!Y#O%T#O#P7o#P#R%T#R#S$,{#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$.fe&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![$/w![!c%T!c!i$/w!i#O%T#O#P7o#P#R%T#R#S$/w#S#T%T#T#Z$/w#Z#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$0Se!jq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!Q%T!Q![$/w![!c%T!c!i$/w!i#O%T#O#P7o#P#R%T#R#S$/w#S#T%T#T#Z$/w#Z#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s$1p_}!T&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`$2o!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q$2z]&YR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$4O]#js&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$5SaoR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!^%T!^!_$6X!_!`Av!`!aAv!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$6d_%zQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$7n_&Xs&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$8x`oR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`!a$9z!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$:V_%{Q&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$;c_aQ$QP&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s$<oe&r!b&jS&mW&g`&SsOr%Trs&Vsw%Twx/Xx!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s$>TP;=`<%l$<b#s$>ei&r!b&jS&mW&g`&SsOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!t$<b!t!u$Fl!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#f$<b#f#g$Fl#g#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c$@]a&r!b&jS&hsOYE^YZ%TZ]E^]^%T^rE^rs$AbswE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#c$Ak]&r!b&jS&hsOr%Trs$Bdsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#Z$BmZ&r!b&jS&lsOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#c$Cia&r!b&mW&hsOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx$Dnx#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c$Dw]&r!b&mW&hsOr%Trs&Vsw%Twx$Epx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#_$EyZ&r!b&mW&isOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#s$Fye&r!b&jS&mW&g`&SsOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s$Hii&r!b&jS&mW&g`&SsOr%Trs$JWsw%Twx$MUx!Q%T!Q![$<b![!c%T!c!t$<b!t!u%!S!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#f$<b#f#g%!S#g#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c$Ja]&r!b&jS&ssOr%Trs$KYsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$Ka]&r!b&jSOr%Trs$LYsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#Z$LcZ&r!b&jS&usOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#c$M_]&r!b&mW&osOr%Trs&Vsw%Twx$NWx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$N_]&r!b&mWOr%Trs&Vsw%Twx% Wx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#_% aZ&r!b&mW&tsOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#s%!ae&r!b&jS&mW&g`&SsOr%Trs$JWsw%Twx$MUx!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s%$Pm&r!b&jS&mW&g`&SsOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!h$<b!h!i%!S!i!t$<b!t!u$Fl!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#U$<b#U#V$Fl#V#Y$<b#Y#Z%!S#Z#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c%&V]!Zs&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q%'Z]!YR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b%(__%xQ&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a%)gX!_#T&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^#c%*__%wR&r!b&jS&mWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q%+gX!^!e&jS&mWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^#a%,_]&Rq&r!b&jS&mWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T",
	  tokenizers: [legacyPrint, indentation, newlines, formatString1, formatString2, formatString1l, formatString2l, 0, 1, 2, 3, 4, 5, 6],
	  topRules: {"Script":[0,7]},
	  specialized: [{term: 234, get: (value) => spec_identifier[value] || -1}],
	  tokenPrec: 7372
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/rust/dist/index.cjs":
	/*!*********************************************************!*\
	  !*** ../editor/node_modules/@lezer/rust/dist/index.cjs ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const closureParamDelim = 1,
	  tpOpen = 2,
	  tpClose = 3,
	  RawString = 4,
	  Float = 5;
	
	const _b = 98, _e = 101, _f = 102, _r = 114, _E = 69, Zero = 48,
		  Dot = 46, Plus = 43, Minus = 45, Hash = 35, Quote = 34, Pipe = 124, LessThan = 60, GreaterThan = 62;
	
	function isNum(ch) { return ch >= 48 && ch <= 57 }
	function isNum_(ch) { return isNum(ch) || ch == 95 }
	
	const literalTokens = new lr.ExternalTokenizer((input, stack) => {
	  if (isNum(input.next)) {
		let isFloat = false;
		do { input.advance(); } while (isNum_(input.next))
		if (input.next == Dot) {
		  isFloat = true;
		  input.advance();
		  if (isNum(input.next)) {
			do { input.advance(); } while (isNum_(input.next))
		  } else if (input.next == Dot || input.next > 0x7f || /\w/.test(String.fromCharCode(input.next))) {
			return
		  }
		}
		if (input.next == _e || input.next == _E) {
		  isFloat = true;
		  input.advance();
		  if (input.next == Plus || input.next == Minus) input.advance();
		  if (!isNum_(input.next)) return
		  do { input.advance(); } while (isNum_(input.next))
		}
		if (input.next == _f) {
		  let after = input.peek(1);
		  if (after == Zero + 3 && input.peek(2) == Zero + 2 ||
			  after == Zero + 6 && input.peek(2) == Zero + 4) {
			input.advance(3);
			isFloat = true;
		  } else {
			return
		  }
		}
		if (isFloat) input.acceptToken(Float);
	  } else if (input.next == _b || input.next == _r) {
		if (input.next == _b) input.advance();
		if (input.next != _r) return
		input.advance();
		let count = 0;
		while (input.next == Hash) { count++; input.advance(); }
		if (input.next != Quote) return
		input.advance();
		content: for (;;) {
		  if (input.next < 0) return
		  let isQuote = input.next == Quote;
		  input.advance();
		  if (isQuote) {
			for (let i = 0; i < count; i++) {
			  if (input.next != Hash) continue content
			  input.advance();
			}
			input.acceptToken(RawString);
			return
		  }
		}
	  }
	});
	
	const closureParam = new lr.ExternalTokenizer(input => {
	  if (input.next == Pipe) input.acceptToken(closureParamDelim, 1);
	});
	
	const tpDelim = new lr.ExternalTokenizer(input => {
	  if (input.next == LessThan) input.acceptToken(tpOpen, 1);
	  else if (input.next == GreaterThan) input.acceptToken(tpClose, 1);
	});
	
	const rustHighlighting = highlight.styleTags({
	  "const macro_rules struct union enum type fn impl trait let static": highlight.tags.definitionKeyword,
	  "mod use crate": highlight.tags.moduleKeyword,
	  "pub unsafe async mut extern default move": highlight.tags.modifier,
	  "for if else loop while match continue break return await": highlight.tags.controlKeyword,
	  "as in ref": highlight.tags.operatorKeyword,
	  "where _ crate super dyn": highlight.tags.keyword,
	  "self": highlight.tags.self,
	  String: highlight.tags.string,
	  Char: highlight.tags.character,
	  RawString: highlight.tags.special(highlight.tags.string),
	  Boolean: highlight.tags.bool,
	  Identifier: highlight.tags.variableName,
	  "CallExpression/Identifier": highlight.tags.function(highlight.tags.variableName),
	  BoundIdentifier: highlight.tags.definition(highlight.tags.variableName),
	  "FunctionItem/BoundIdentifier": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
	  LoopLabel: highlight.tags.labelName,
	  FieldIdentifier: highlight.tags.propertyName,
	  "CallExpression/FieldExpression/FieldIdentifier": highlight.tags.function(highlight.tags.propertyName),
	  Lifetime: highlight.tags.special(highlight.tags.variableName),
	  ScopeIdentifier: highlight.tags.namespace,
	  TypeIdentifier: highlight.tags.typeName,
	  "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": highlight.tags.macroName,
	  "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": highlight.tags.macroName,
	  "\"!\"": highlight.tags.macroName,
	  UpdateOp: highlight.tags.updateOperator,
	  LineComment: highlight.tags.lineComment,
	  BlockComment: highlight.tags.blockComment,
	  Integer: highlight.tags.integer,
	  Float: highlight.tags.float,
	  ArithOp: highlight.tags.arithmeticOperator,
	  LogicOp: highlight.tags.logicOperator,
	  BitOp: highlight.tags.bitwiseOperator,
	  CompareOp: highlight.tags.compareOperator,
	  "=": highlight.tags.definitionOperator,
	  ".. ... => ->": highlight.tags.punctuation,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace,
	  ". DerefOp": highlight.tags.derefOperator,
	  "&": highlight.tags.operator,
	  ", ; ::": highlight.tags.separator,
	  "Attribute/...": highlight.tags.meta,
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,self:28, super:32, crate:34, impl:46, true:72, false:72, pub:88, in:92, const:96, unsafe:104, async:108, move:110, if:114, let:118, ref:142, mut:144, _:198, else:200, match:204, as:248, return:252, await:262, break:270, continue:276, while:312, loop:316, for:320, macro_rules:327, mod:334, extern:342, struct:346, where:364, union:379, enum:382, type:390, default:395, fn:396, trait:412, use:420, static:438, dyn:476};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "$2xQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#I`OOQP'#I`'#I`OOQQ'#Ie'#IeO)hO`O'#C}OOQR'#Ih'#IhO)sQWO'#IuOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Iw'#IwO)xQWO'#DpO*ZQWO'#DpOOQO'#Iv'#IvO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Io'#IoOA]Q_O'#InOEPQWO'#InOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#Im'#ImOOQV'#Il'#IlOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I_'#I_OOQV'#Hg'#HgQ]Q_OOOLuQWO'#I`ONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CC})CC}OOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?aOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?kO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7xQXO'#I`O!9SQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9eQWO'#FsOOQV,5<g,5<gO!9SQWO'#CoO!9jQWO'#CoO!9oQWO'#I`O! yQWO'#JuO!9yQWO'#J`O!:aQWO,5;VOOQO'#In'#InO!0zQWO'#DaO!<aQWO'#DcO!<iQWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!=PQ_O,5;kO!@gQ_O'#FROOQO,5;l,5;lO!BrQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!D_QWO,5;kO!EOQWO,5;xOOQO,5;x,5;xO!E]QWO,5;xO!EbQ_O,5;xO!GmQWO'#CfO!GrQWO,5<QO!G|Q_O,5<QOOQO,5;{,5;{O!JjQXO'#CnO!K{QXO'#I`OOQS'#Dk'#DkOOQP'#Ir'#IrO!LuQ[O'#IrO!L}QXO'#DjO!M{QWO'#DnO!M{QWO'#DnO!N^QWO'#DnOOQP'#It'#ItO!NcQXO'#ItO# ^Q^O'#DoO# hQWO'#DrO# pQ^O'#DzO# zQ^O'#D|O#!RQWO'#EPO#!^QXO'#FdOOQP'#ES'#ESOOQP'#Iq'#IqO#!lQXO'#JfOOQP'#Je'#JeO#!tQXO,5;}O#!yQXO'#I`O!1PQ^O'#DyO!1PQ^O'#FdO##sQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O#$ZQWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&`QYO'#FzOOQV,5<h,5<hO#&gQWO,5<hO#&nQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&uQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&|QWO,5=]O#'TQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#']QWO,5=jOOQO-E;|-E;|O#'hQWO'#JjOOQV-E;h-E;hO#(PQWO'#HRO#(WQ_O,59pOOQV,59p,59pO#(_QWO,59pO#(dQ_O,59pO#)SQZO'#CuO#+[QZO'#CvOOQV'#C|'#C|O#-wQWO'#HTO#.OQYO'#IdOOQO'#Hh'#HhO#.WQWO'#CwO#.WQWO'#CwO#.iQWO'#CwOOQR'#Ic'#IcO#.nQZO'#IbO#1TQYO'#HTO#1qQYO'#H[O#2}QYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#4ZQWO'#HeO#4`QYO,59]OOQR'#Ib'#IbO#5PQZO'#CtO#7[QYO'#HUO#7aQWO'#HTO#7fQYO'#CrO#8VQWO'#H]O#7fQYO'#HcOOQV-E;e-E;eO#8_QWO,59sOOQV,59{,59{O#8mQYO,5=[OOQV,59},59}O!0zQWO,59}O#;aQWO'#IpOOQO'#Ip'#IpO!1PQ^O'#DhO!0zQWO,5:QO#;hQWO,5;iO#<OQWO,5;rO#<fQ_O,5;rOOQO,5;u,5;uO#@PQ_O,5;|O#BXQWO,5;PO!0zQWO,5<XO#B`QWO,5<ZOOQV,5<Z,5<ZO#BkQWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BsQWO,59rO#BxQWO,5<`O#B}QWO,5<dOOQO,5@U,5@UO#CVQWO,5=iOOQQ'#Cv'#CvO#C[QYO,5<jO#CmQYO,5<zO#CxQYO,5<|O#DTQYO,5=_O#DcQYO,5=SO#E{QYO'#GQO#FYQYO,5=[O#FmQWO,5=[O#F{QYO,5=[O#HUQYO,5=]O#HdQWO,5=`O!1PQ^O,5=`O#HrQWO'#CnO#ITQWO'#I`OOQO'#Jy'#JyO#IfQWO'#IQO#IkQWO'#GwOOQO'#Jz'#JzO#JSQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#IkQWO'#GwO#JZQWO'#GxO#J`QWO,5=aO#JeQWO,5=jO!1dQWO,5=jO#'`QWO,5=jPOOO'#Hf'#HfP#JjOpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JuQWO1G4{O#JzQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#NTQ!fO'#ETO#N[Q!fO'#EaO#NcQ!fO'#EbO$ kQWO1G1yO$!_Q_O1G1yOOQP1G5V1G5VOOQO1G1]1G1]O$&RQWO1G0oO$&WQWO'#CiO!7xQXO'#I`O!6PQYO1G.lO!5oQWO,5<_O!9SQWO,59ZO!9SQWO,59ZO!5oQWO,5?kO$&iQWO1G0uO$(vQWO1G0wO$*nQWO1G0wO$+UQWO1G0wO$-YQWO1G0wO$-aQWO1G0wO$/bQWO1G0wO$/iQWO1G0wO$1jQWO1G0wO$1qQWO1G0wO$3YQWO1G1QO$5ZQWO1G1VO$5zQ_O'#JcO$8SQWO'#JcOOQO'#Jb'#JbO$8^QWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8cQWO1G1cOOQO1G1R1G1RO$8jQ_O'#HrO$:xQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$;QQWO1G1dO$;_QWO1G1dO$;dQWO1G1eOOQO1G1l1G1lO$;lQWO1G1lOOQP,5?^,5?^O$;vQ^O,5:kO$<aQXO,5:YO!M{QWO,5:YO!M{QWO,5:YO!1PQ^O,5:gO$=bQWO'#IyOOQO'#Ix'#IxO$=pQWO,5:ZO# ^Q^O,5:ZO$=uQWO'#DsOOQP,5:^,5:^O$>WQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>]QYO,5<OO$>gQ_O'#HsO$>tQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>|QXO,5<OO$?[QWO1G1hO$?dQWO'#CnO$?oQWO'#FiOOQO'#Fi'#FiO$?wQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?|QWO'#JhOOQO'#Jg'#JgO$@UQWO,5<SOOQQ'#Hv'#HvO$@ZQYO,5<fOOQV,5<f,5<fO$@bQYO,5<fOOQV1G2S1G2SO$@iQWO1G2nO$@qQWO1G/^O$@vQWO1G2OO#CVQWO1G3TO$AOQYO1G2UO#CmQYO1G2fO#CxQYO1G2hO$AaQYO1G2lO!2_QWO1G2wO#DcQYO1G2nO#HUQYO1G2wO$AiQWO1G2{O$AnQWO1G3UO!1dQWO1G3UO$AsQWO1G3UOOQV1G/[1G/[O$A{QWO1G/[O$BQQ_O1G/[O#7aQWO,5=oO$BXQYO,5?OO$BmQWO,5?OO$BrQZO'#IeOOQO-E;f-E;fOOQR,59c,59cO#.WQWO,59cO#.WQWO,59cOOQR,5=n,5=nO$E_QYO'#HVO$FwQZO,5=oO!5oQWO,5={O$IZQWO,5=oO$IbQZO,5=vO$KqQYO,5=vO$>]QYO,5=vO$LRQWO'#KRO$L^QWO,5=xOOQR,5=y,5=yO$LcQWO,5=zO$>]QYO,5>PO$>]QYO,5>POOQO1G.w1G.wO$>]QYO1G.wO$LnQYO,5=pO$LvQZO,59^OOQR,59^,59^O$>]QYO,5=wO% YQZO,5=}OOQR,5=},5=}O%#lQWO1G/_O!6PQYO1G/_O#FYQYO1G2vO%#qQWO1G2vO%$PQYO1G2vOOQV1G/i1G/iO%%YQWO,5:SO%%bQ_O1G/lO%*kQWO1G1^O%+RQWO1G1hOOQO1G1h1G1hO$>]QYO1G1hO%+iQ^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>]QYO1G/^OOQO'#Cn'#CnO%+vQWO1G1zOOQV1G2O1G2OO%,OQWO'#CnO%,WQWO1G3TO%,]QWO1G3TO%,bQYO'#GQO%,sQWO'#G]O%-UQYO'#G_O%.hQYO'#GXOOQV1G2U1G2UO%/wQWO1G2UO%/|QWO1G2UO$ARQWO1G2UOOQV1G2f1G2fO%/wQWO1G2fO#CpQWO1G2fO%0UQWO'#GdOOQV1G2h1G2hO%0gQWO1G2hO#C{QWO1G2hO%0lQYO'#GSO$>]QYO1G2lO$AdQWO1G2lOOQV1G2y1G2yO%1xQWO1G2yO%3hQ^O'#GkO%3rQWO1G2nO#DfQWO1G2nO%4QQYO,5<lO%4[QYO,5<lO%4jQYO,5<lO%5XQYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5dQYO,5<lO%5lQWO1G2vOOQV1G2v1G2vO%5tQWO1G2vO$>]QYO1G2vOOQV1G2w1G2wO%5tQWO1G2wO%5yQWO1G2wO#HXQWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>]QYO1G2zO%6RQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6aQWO'#J|OOQO'#J{'#J{O%6iQWO,5=fO%6nQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>]QYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*g7+*gO%7VQYO'#IcO%7nQYO'#IfO%7yQYO'#IfO%8RQYO'#IfO%8^QYO,59eOOQO7+%b7+%bOOQP7+$a7+$aO%8cQ!fO'#JTOOQS'#EX'#EXOOQS'#EY'#EYOOQS'#EZ'#EZOOQS'#JT'#JTO%;UQWO'#EWOOQS'#E`'#E`OOQS'#JR'#JROOQS'#Hn'#HnO%;ZQ!fO,5:oOOQV,5:o,5:oOOQV'#JQ'#JQO%;bQ!fO,5:{OOQV,5:{,5:{O%;iQ!fO,5:|OOQV,5:|,5:|OOQV7+'e7+'eOOQV7+&Z7+&ZO%;pQ!fO,59TOOQO,59T,59TO%>YQWO7+$WO%>_QWO1G1yOOQV1G1y1G1yO!9SQWO1G.uO%>dQWO,5?}O%>nQ_O'#HqO%@|QWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%AUQWO,5>^OOQO-E;p-E;pO%AcQWO7+'OO.YQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%AjQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%ArQXO1G/tO!M{QWO1G/tO%BsQXO1G0RO%CkQ^O'#HlO%C{QWO,5?eOOQP1G/u1G/uO%DWQWO1G/uO%D]QWO'#D_OOQO'#Dt'#DtO%DhQWO'#DtO%DmQWO'#I{OOQO'#Iz'#IzO%DuQWO,5:_O%DzQWO'#DtO%EPQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EXQXO1G1jO%EdQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>]QYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%ErQWO,5<UO.YQ_O,5<UO%EwQWO,5<VO%FRQWO'#HtO%FdQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FlQYO1G2QO#DcQYO7+(YO$>]QYO7+$xOOQV7+'j7+'jO%FsQWO7+(oO%FxQWO7+(oOOQV7+'p7+'pO%/wQWO7+'pO%F}QWO7+'pO%GVQWO7+'pOOQV7+(Q7+(QO%/wQWO7+(QO#CpQWO7+(QOOQV7+(S7+(SO%0gQWO7+(SO#C{QWO7+(SO$>]QYO7+(WO%GeQWO7+(WO#HUQYO7+(cO%GjQWO7+(YO#DfQWO7+(YOOQV7+(c7+(cO%5tQWO7+(cO%5yQWO7+(cO#HXQWO7+(cOOQV7+(g7+(gO$>]QYO7+(pO%GxQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%G}QWO7+$vO%HSQZO1G3ZO%JfQWO1G4jOOQO1G4j1G4jOOQR1G.}1G.}O#.WQWO1G.}O%JkQWO'#KQOOQO'#HW'#HWO%J|QWO'#HXO%KXQWO'#KQOOQO'#KP'#KPO%KaQWO,5=qO%KfQYO'#H[O%LrQWO'#GmO%L}QYO'#CtO%MXQWO'#GmO$>]QYO1G3ZOOQR1G3g1G3gO#7aQWO1G3ZO%M^QZO1G3bO$>]QYO1G3bO& mQYO'#IVO& }QWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO.YQ_O1G3fOOQR1G3k1G3kO&!VQYO7+$cO&!_QYO'#KOOOQQ'#J}'#J}O&!gQYO1G3[O&!lQZO1G3cOOQQ7+$y7+$yO&${QWO7+$yO&%QQWO7+(bOOQV7+(b7+(bO%5tQWO7+(bO$>]QYO7+(bO#FYQYO7+(bO&%YQWO7+(bO!.cQ_O1G/nO&%hQWO7+%WO$?[QWO7+'SO&%pQWO'#EhO&%{Q^O'#EhOOQU'#Ho'#HoO&%{Q^O,5;ROOQV,5;R,5;RO&&VQWO,5;RO&&[Q^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&iQWO7+'cO&&qQWO7+'cO&&xQWO7+$xO&'TQ!fO7+'fO&'[Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&'cQYO,5<lO&'nQYO,5<lO!1dQWO'#GWO&'|QWO'#JpO&([QWO'#G^O!BxQWO'#G^O&(aQWO'#JpOOQO'#Jo'#JoO&(iQWO,5<wOOQO'#DX'#DXO&(nQYO'#JrO&)}QWO'#JrO$>]QYO'#JrOOQO'#Jq'#JqO&*YQWO,5<yO&*_QWO'#GZO#D^QWO'#G[O&*gQWO'#G[O&*oQWO'#JmOOQO'#Jl'#JlO&*zQYO'#GTOOQO,5<s,5<sO&+PQWO7+'pO&+UQWO'#JtO&+dQWO'#GeO#BxQWO'#GeO&+uQWO'#JtOOQO'#Js'#JsO&+}QWO,5=OO$>]QYO'#GUO&,SQYO'#JkOOQQ,5<n,5<nO&,kQWO7+(WOOQV7+(e7+(eO&.TQ^O'#D|O&._QWO'#GlO&.gQ^O'#JwOOQO'#Gn'#GnO&.nQWO'#JwOOQO'#Jv'#JvO&.vQWO,5=VO&.{QWO'#I`O&/]Q^O'#GmO&/dQWO'#IqO&/rQWO'#GmOOQV7+(Y7+(YO&/zQWO7+(YO$>]QYO7+(YO&0SQYO'#HxO&0hQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>]QYO,5<qO&0pQWO,5<rO&0uQWO7+(bO&1QQWO7+(fO&1XQWO7+(fOOQV7+(f7+(fO.YQ_O7+(fO$>]QYO7+(fO&1dQWO'#IRO&1nQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&1vQWO7+(pO$>]QYO,59fO&2RQ^O'#ISO&2xQYO,5?QOOQR1G/P1G/PO&3QQ!bO,5:pO&3VQ!fO,5:rOOQS-E;l-E;lOOQV1G0Z1G0ZOOQV1G0g1G0gOOQV1G0h1G0hO&3^QWO'#JTOOQO1G.o1G.oOOQV<<Gr<<GrO&3iQWO1G5iO$5zQ_O,5>]O&3qQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&3{QWO<<JjOOQO<<Jk<<JkO&4SQXO7+%`O&5TQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&5cQWO'#HmO&5wQWO,5?gOOQP1G/y1G/yOOQO,5:`,5:`O&6PQWO,5:`O%DzQWO,5:`O$>]QYO,5<PO&6UQXO,5<PO&6dQXO7+'UO.YQ_O1G1pO&6oQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&6yQWO<<KtO#DfQWO<<KtO&7XQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&7dQWO<<K[O%/wQWO<<K[O&7iQWO<<K[OOQV<<Kl<<KlO%/wQWO<<KlOOQV<<Kn<<KnO%0gQWO<<KnO&7qQWO<<KrO$>]QYO<<KrOOQV<<K}<<K}O%5tQWO<<K}O%5yQWO<<K}O#HXQWO<<K}OOQV<<Kt<<KtO&7yQWO<<KtO$>]QYO<<KtO&8RQWO<<L[O$>]QYO<<L[O&8^QWO<<L[OOQV<<Hb<<HbO$>]QYO7+(uOOQO7+*U7+*UOOQR7+$i7+$iO&8cQWO,5@lOOQO'#Gm'#GmO&8kQWO'#GmO&8vQYO'#IUO&8cQWO,5@lOOQR1G3]1G3]O&:cQYO,5=vO&;rQYO,5=XO&;|QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&<RQZO7+(uO&>eQZO7+(|O&@tQWO,5>qOOQO-E<T-E<TO&APQWO7+)QOOQO<<G}<<G}O&AWQYO'#ITO&AcQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>]QYO<<K|OOQV<<K|<<K|O&0uQWO<<K|O&AkQWO<<K|O%5tQWO<<K|O&AsQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO.YQ_O,5;SO&AzQWO,5;SO.YQ_O'#EjO&BPQWO,5;SOOQU-E;m-E;mO&B[QWO1G0mOOQV1G0m1G0mO&%{Q^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO.YQ_O<<HdO&BaQWO'#FvO&BfQWO<<KQO&BnQ!fO<<KQO&BuQWO<<KQO&BzQWO<<KQO&CSQ!fO<<KQOOQV<<KQ<<KQO&CZQWO<<LZO&C`QWO,5@[O$>]QYO,5<xO&ChQWO,5<xO&CmQWO'#H{O&C`QWO,5@[OOQV1G2c1G2cO&DRQWO,5@^O$>]QYO,5@^O&D^QYO'#H|O&EsQWO,5@^OOQO1G2e1G2eO%,nQWO,5<uOOQO,5<v,5<vO&E{QYO'#HzO&G_QWO,5@XO%,bQYO,5=pO$>]QYO,5<oO&GjQWO,5@`O.YQ_O,5=PO&GrQWO,5=PO&G}QWO,5=PO&H`QWO'#H}O&GjQWO,5@`OOQV1G2j1G2jO&HtQYO,5<pO%0lQYO,5>PO&I]QYO,5@VOOQV<<Kr<<KrO&ItQWO,5=XO&KfQ^O,5:hO&KmQWO,5=XO$>]QYO,5=WO&KuQWO,5@cO&K}QWO,5@cO&MvQ^O'#IPO&KuQWO,5@cOOQO1G2q1G2qO&NTQWO,5=WO&N]QWO<<KtO&NkQYO,5>oO&NvQYO,5>dO' UQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO' aQYO1G2]O$>]QYO1G2^OOQV<<LQ<<LQO.YQ_O<<LQO' lQWO<<LQO' sQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O.YQ_O<<L[O'!OQYO1G/QO'!ZQYO,5>nOOQQ,5>n,5>nO'!fQYO,5>nOOQQ-E<Q-E<QOOQS1G0[1G0[O'$tQ!fO1G0^O'%RQ!fO1G0^O'%YQWO1G3wOOQOAN@UAN@UO'%dQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'%oQWO1G/zO'%tQXO1G1kO$>]QYO1G1kO'&PQWO7+'[OOQVANA`ANA`O'&ZQWOANA`O$>]QYOANA`O'&cQWOANA`OOQVAN>OAN>OO.YQ_OAN>OO'&qQWOANAuOOQVAN@vAN@vO'&vQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O'&{QWOANA^OOQVANAiANAiO%5tQWOANAiO%5yQWOANAiO''TQWOANA`OOQVANAvANAvO.YQ_OANAvO''cQWOANAvO$>]QYOANAvOOQR<<La<<LaO''nQWO1G6WO%JkQWO,5>pOOQO'#HY'#HYO''vQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'(RQYO1G2sO'(]QWO1G2sOOQO1G2s1G2sO$>]QYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&0uQWOANAhOOQVANAhANAhO%5tQWOANAhO$>]QYOANAhO'(bQWO1G1rO')UQ^O1G0nO.YQ_O1G0nO'*zQWO,5;UO'+RQWO1G0nP'+WQWO'#ERP&%{Q^O'#HpOOQV7+&X7+&XO'+cQWO7+&XO&&qQWOAN@iO'+hQWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'+oQWOAN@lO'+tQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'+|QWOAN@lOOQVANAuANAuO',UQWO1G5vO',^QWO1G2dO$>]QYO1G2dO&'|QWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO',iQWO1G5xO',qQWO1G5xO&(nQYO,5>hO',|QWO,5>hO$>]QYO,5>hOOQO-E;z-E;zO'-XQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&'cQYO,5<lO'-gQYO1G2ZO'.RQWO1G5zO'.ZQWO1G2kO.YQ_O1G2kO'.eQWO1G2kO&+UQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'.pQWO1G2sO'/QQWO1G2rO'/]QWO1G5}O'/eQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'/lQWO,5>kOOQO-E;}-E;}O$>]QYO1G2rO'/zQYO7+'xO'0VQWOANAlOOQVANAlANAlO.YQ_OANAlO'0^QWOANAvOOQS7+%x7+%xO'0eQWO7+%xO'0pQ!fO7+%xO'0}QWO7+%fO!1PQ^O7+%fO'1YQXO7+'VOOQVG26zG26zO'1eQWOG26zO'1sQWOG26zO$>]QYOG26zO'1{QWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5tQWOG27TO'2SQWOG27bOOQVG27bG27bO.YQ_OG27bO'2ZQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5tQWOG27SO&0uQWOG27SO'2fQ^O7+&YO'4PQWO7+'^O'4sQ^O7+&YO.YQ_O7+&YP.YQ_O,5;SP'6PQWO,5;SP'6UQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'6aQWOG26WP&B}QWO'#HuO'6fQWO7+(OOOQO1G4R1G4RO'6qQWO7++dO'6yQWO1G4SO$>]QYO1G4SO%,nQWO'#HyO'7UQWO,5@YO'7dQWO7+(VO.YQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'7nQWO1G4VO'7|QWO7+(^OOQVG27WG27WO'8XQWOG27WOOQS<<Id<<IdO'8`QWO<<IdO'8kQWO<<IQOOQVLD,fLD,fO'8vQWOLD,fO'9OQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'9^QWOLD,|O.YQ_OLD,|OOQVLD,nLD,nO%5tQWOLD,nO'9eQ^O<<ItO';OQWO<<JxO';rQ^O<<ItP'=OQWO1G0nP'=oQ^O1G0nP.YQ_O1G0nP'?bQWO1G0nOOQVLD+rLD+rO'?gQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'?rQWO<<KqOOQVLD,rLD,rOOQSAN?OAN?OOOQV!$(!Q!$(!QO'?|QWO!$(!QOOQV!$(!h!$(!hO'@UQWO!$(!hOOQV!$(!Y!$(!YO'@]Q^OAN?`POQU7+&Y7+&YP'AvQWO7+&YP'BgQ^O7+&YP.YQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'DYQWO<<ItP'DyQ^O<<ItPOQUAN?`AN?`O'FlQWO'#CnO'FsQXO'#CnO'GlQWO'#I`O'IRQXO'#I`O'IxQWO'#DpO'IxQWO'#DpO!.cQ_O'#EkO'JZQ_O'#EoO'JbQ_O'#FPO'MfQ_O'#FbO'MmQXO'#I`O'NdQ_O'#E}O( gQ_O'#FWO'IxQWO,5:[O'IxQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO(!jQ_O,5;kO(%nQWO,5;kO(&OQWO,5;|O(&VQYO'#CuO(&bQYO'#CvO(&mQWO'#CwO(&mQWO'#CwO('OQYO'#CtO('ZQWO,5;iO('bQWO,5;rO('iQ_O,5;rO((oQ_O,5;|O'IxQWO1G/vO((vQWO1G0uO(*eQWO1G0wO(*oQWO1G0wO(,dQWO1G0wO(,kQWO1G0wO(.]QWO1G0wO(.dQWO1G0wO(0UQWO1G0wO(0]QWO1G0wO(0dQWO1G1QO(0tQWO1G1VO(1UQYO'#IeO(&mQWO,59cO(&mQWO,59cO(1aQWO1G1^O(1hQWO1G1hO(&mQWO1G.}O(1oQWO'#DpO!.^QXO'#FbO(1tQWO,5;ZO(1{QWO'#Cw",
	  stateData: "(2_~O&|OSUOS&}PQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'TQO'ZkO'^UO'gcO'qiO(QdO~O&}!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#ObX#PbX#pbX'gbX'qbX'rbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#RbX~P$|OZ'SX['SXd'SXd'XXo'SXw'kXy'SX}'SX!l'SX!q'SX!t'SX#O'SX#P'SX#p'SX'g'SX'q'SX'r'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SXv'SX~OX'SX!e'SX!P'SX#R'SX~P'ZOr!uO']!wO'_!uO~Od!xO~O^RO_RO`ROaRO'TQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#O(SX#P(SX#p(SX'g(SX'q(SX'r(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'T#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#O#xO#P#uO#p$OO'g#gO'q#yO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#R#sX~P)xOX(SX!e(SX!P(SXw(SX#R(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw$vO~Oo'bX#O'bX#P'bX#p'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(R'bX(T'bX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&z%tX'Q%tX'T%tX'Z%tX'^%tX'g%tX'q%tX(Q%tXv%tX~P@[Oy$xO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bXv'bX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'TQO'ZkO'^UO'gcO'qiO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'T{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'Z{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!]&UO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#qXy#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#R#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zXy#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#R#zX~P)xO'ZkO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#O#}X#P#}X#p#}X'g#}X'q#}X'r#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#R#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'T&cO~PEvOZ&eO~O'T&cO~O'^UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'T&iO~O_&nO'T&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'T&vO(Q&}O~O!i'UO!j'TO'T&cO~O&}!sO'O'VO'P'XO~Or!uO']'ZO'_!uO~OQ']O^'ia_'ia`'iaa'ia'T'ia~O['cOw'dO}'bO~OQ']O~OQ!QO^#TO_#TO`#TOa'kOd#ZO'T#SO~O['lO~OZbXdlXXbXobXPbX!SbX!ebX'rbX!PbX!ObXybX!ZbX#RbXvbX~O[bXwbX}bX~P!6mOZ'SXd'XXX'SX['SXo'SXw'SX}'SX#p'SXP'SX!S'SX!e'SX'r'SX!P'SX!O'SXy'SX!Z'SX#R'SXv'SX~O^#TO_#TO`#TOa'kO'T#SO~OZ'mO~Od'oO~OZ'SXd'XX~PMuOZ'pOX(SX!e(SX!P(SXw(SX#R(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#O#_a#P#_a#p#_a'g#_a'q#_a'r#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#R#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#R#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#R#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P(UP~P)xOu(SO#w(TO'T(RO~O[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'q#sa~Oo#xO#O#xO#P#uOy#saX#sa!e#sa!P#sav#sa#R#sa~P!B}Oy(YO!e(WOX(WX~P2gOX(ZO~OPoOQ!QOSVOTVOX(ZOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZ#RO~O!P(_O!e(WO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZbXdlXwjX}jX!tbX'qbX~OP!RX!S!RX!e!RX'p!RX'r!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#R!RXv!RX~P!JUOZ'SXd'XXw'kX}'kX!t'SX'q'SX~OP!`X!S!`X!e!`X'r!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#R!`Xv!`X~P!KgOT(aOu(aO~O!t(bO'q(bOP!^X!S!^X!e!^X'r!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#R!^Xv!^X~O^9rO_9rO`9yOa9yO'T9pO~Od(eO~O'p(fOP'hX!S'hX!e'hX'r'hX!O'hXo'hXy'hX!P'hXX'hX!Z'hX#R'hXv'hX~O!j&bO!P'lP~P<cOw(kO}(jO~O!j&bOX'lP~P<cO!j(oO~P<cOZ'pO!t(bO'q(bO~O!S(qO'r(pOP$WX!e$WX~O!e(rOP(YX~OP(tO~OP!aX!S!aX!e!aX'r!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#R!aXv!aX~P!KgOy$UaX$Ua!e$Ua!P$Uav$Ua#R$Ua~P2gO!l(|O'Q#VO'T(xOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'T#SO~Ov)TO~P#$iOy)VO~PEsO%^)WO~PGaOa)ZO~P!1iO%f)`O~PEvO_)aO'T&cO~O!i)fO!j)eO'T&cO~O'^UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)gO~PGyOv)gO~Ov)gO~P]OQiXQ'XXZiXd'XX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#OiX#PiX'giX'qiX'riX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#RiX~P#(kOQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#OjX#PjX'gjX'qjX'rjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#RjX~O%^)jO~PGaOQ']Od)kO~O^)mO_)mO`)mOa)mO'T%dO~Od)qO~OQ']OZ)uO})sOR'UX#p'UX(P'UXw'UX$f'UX$|'UX['UXo'UXy'UX!l'UX!q'UX!t'UX#O'UX#P'UX'g'UX'q'UX'r'UX'x'UX'y'UX'z'UX'{'UX'|'UX'}'UX(O'UX(Q'UX(R'UX(T'UX!P'UX!e'UXX'UXP'UXv'UX!S'UX#R'UX~OQ!QO^:bO_:^O`TOaTOd:aO%^)jO'T:_O~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)yO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P)|O!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO(P*OO~OR*QO#p*RO(P*PO~OQhXQ'XXZhXd'XX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#OhX#PhX'ghX'qhX'rhX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#RhX~P#4kOQ*SO~O})sO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'T%dO~PGaO!Q*VO!j*VO~O^*YO`*YOa*YO!O*ZO~OQ&oOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO[#}Oo:YO}#zO!l:ZO!q#jO!t:ZO#O:YO#P:VO#p$OO'g#gO'q:ZO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'dX~P#9vOy#qaX#qa!e#qa!P#qav#qa#R#qa~P2gOy#zaX#za!e#za!P#zav#za#R#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zay#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#R#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q*eO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw*fO~P#9vO$b*iO$d*jO$f*kO~O!O*lO'r(pO~O!S*nO~O'T*oO~Ow$yOy*qO~O'T*rO~OQ*uOw*vOy*yO}*wO$|*xO~OQ*uOw*vO$|*xO~OQ*uOw+QO$|*xO~OQ*uOo+VOy+XO!S+UO~OQ*uO}+ZO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'T%dO'Z%eO(Q%zO~OR+bO_+^O!Q+cO~P#DkO_%cO!Q!lOw&UX$|&UX(P&UX~P#DkOw$yO$f+hO$|*xO(P*PO~OQ!QOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ*uOw$yO!S+UO$|*xO~Oo+nOy+mO!S+oO'r(pO~OdlXy!RX#pbXv!RX!e!RX~Od'XXy(mX#p'SXv(mX!e(mX~Od+qO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q+vO~Ov(oP~P!3|O#p+{O~Oy+|O~O!S+}O~O&}!sO'O'VO'P,PO~Od,QO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UO~P#DkOS,^OT,^OZ,^O['cO_,YOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~O!P,dO~P#KkOX,gO~P#KkOv,iO~P#KkOo'tX#O'tX#P'tX#p'tX'r'tX'x'tX'y'tX'z'tX'{'tX'|'tX'}'tX(O'tX(P'tX(R'tX(T'tX~Oy,jO['tX}'tX!l'tX!q'tX!t'tX'g'tX'q'tX(Q'tXv'tX~P#NjOP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&z$gi'Q$gi'T$gi'Z$gi'^$gi'g$gi'q$gi(Q$giv$gi~P#NjOX,kO~O['cOo,lOw'dO}'bOX]X~Oy#ciX#ci!e#ci!P#civ#ci#R#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei(P#ei~P$'PO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$)QO'g#gO(P#gO~P$'PO[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O!q#ei~P$+`O!q#jO~P$+`O[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'r#ei~P$-hO'r#lO~P$-hO[#}O}#zO!q#jO#P#uO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#eiX#ei!e#ei!P#eiv#ei#R#ei~O'}#ei~P$/pO'}#mO~P$/pO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'q#ni~Oo#xO#O#xO#P#uOy#niX#ni!e#ni!P#niv#ni#R#ni~P$1xO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'q#si~Oo#xO#O#xO#P#uOy#siX#si!e#si!P#siv#si#R#si~P$3yOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO~P)xO!e,sO!P(VX~P2gO!P,uO~OX,vO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOX&fX!e&fX!P&fX~P)xO!e(WOX(Wa~Oy,zO!e(WOX(WX~P2gOX,{O~O!P,|O!e(WO~O!P-OO!e(WO~P2gOSVOTVOsVOtVOuVO'^UO'g$[O~P!6POP!baZca!S!ba!e!ba!tca'qca'r!ba!O!bao!bay!ba!P!baX!ba!Z!ba#R!bav!ba~O!e-TO'r(pO!P'mXX'mX~O!P-VO~O!i-`O!j-_O!l-[O'T-XOv'nP~OX-aO~O_%cO!Q!lO~P#DkO!j-gOP&gX!e&gX~P<cO!e(rOP(Ya~O!S-iO'r(pOP$Wa!e$Wa~Ow!PO(P*PO~OvbX!S!kX!ebX~O'Q#VO'T(xO~O!S-mO~O!e-oOv([X~Ov-qO~Ov-sO~P,cOv-sO~P#$iO_-uO'T&cO~O!S-vO~Ow$yOy-wO~OQ*uOw*vOy-zO}*wO$|*xO~OQ*uOo.UO~Oy._O~O!S.`O~O!j.bO'T&cO~Ov.cO~Ov.cO~PGyOQ']O^'Wa_'Wa`'Waa'Wa'T'Wa~Od.gO~OQ'XXQ'kXR'kXZ'kXd'XX}'kX#p'kX(P'kXw'kX$f'kX$|'kX['kXo'kXy'kX!l'kX!q'kX!t'kX#O'kX#P'kX'g'kX'q'kX'r'kX'x'kX'y'kX'z'kX'{'kX'|'kX'}'kX(O'kX(Q'kX(R'kX(T'kX!P'kX!e'kXX'kXP'kXv'kX!S'kX#R'kX~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t.kO#V.mO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(sP~PGaO#Q.tOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#O%wa#P%wa'g%wa'q%wa'r%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#R%wa~O%^.vO~PGaO(P*POR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#O&Oa#P&Oa'g&Oa'q&Oa'r&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#R&Oa~O_%cO!Q!lO!j.xO(P*OO~P#DkO!e.yO(P*PO!P(uX~O!P.{O~OX.|Oy.}O(P*PO~O'Z%eOR(qP~OQ']O})sORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Ofa#Pfa'gfa'qfa'rfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Rfa~OQ']O})sOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#O&Va#P&Va'g&Va'q&Va'r&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#R&Va~O!P/UO~Ow$yO$f/ZO$|*xO(P*PO~OQ!QOZ/[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOo/^O'r(pO~O#W/_OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#O!Yi#P!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&z!Yi'Q!Yi'T!Yi'Z!Yi'^!Yi'g!Yi'q!Yi'r!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#R!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#R#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#R$Ui~P2gOv/eO!j&bO'Q`O~P<cOw/nO}/mO~Oy!RX#pbX~Oy/oO~O#p/pO~OR+bO_+dO!Q/sO'T&iO'Z%eO~Oa/zO|!VO'Q#VO'T(ROv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw(`Py(`P~PGaOw*vO~Oy-zO$|*xO~Oa/zO|!VO'Q#VO'T*oOv(gP~Ow+QO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zO(R0`O~PGaOy0dO~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t0hO'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V0nO!P(jP~P%1}Ow!POy0pO#Q0rO$|*xO~OR0uO!e0sO~P#(kOR0uO!S+UO!e0sO(P*OO~OR0uOo0wO!S+UO!e0sOQ'VXZ'VX}'VX#p'VX(P'VX~OR0uOo0wO!e0sO~OR0uO!e0sO~O$f/ZO(P*PO~Ow$yO~Ow$yO$|*xO~Oo0}Oy0|O!S1OO'r(pO~O!e1POv(pX~Ov1RO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q1VO~Oo1YOQ'VXR'VXZ'VX}'VX!e'VX(P'VX~O!e1ZO(P*POR'YX~O!e1ZOR'YX~O!e1ZO(P*OOR'YX~OR1]O~O!S1^OS'wXT'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!P'wX!e'wX!l'wX!q'wX!t'wX!y'wX#O'wX#P'wX#Q'wX#R'wX'Q'wX'Z'wX'^'wX'g'wX'r'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXX'wXv'wX~O}1_O~O!P1aO~P#KkOX1bO~P#KkOv1cO~P#KkOS,^OT,^OZ,^O['cO_1dOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~OX1fO~Oy,jO~O!e,sO!P(Va~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P&eX!e&eX~P)xO!e,sO!P(Va~OX&fa!e&fa!P&fa~P2gOX1kO~P2gO!P1mO!e(WO~OP!biZci!S!bi!e!bi!tci'qci'r!bi!O!bio!biy!bi!P!biX!bi!Z!bi#R!biv!bi~O'r(pOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#R!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-TO!P'maX'ma~O!P1qO~Ov!RX!S!kX!e!RX~O!S1rO~O!e1sOv'oX~Ov1uO~O'T-XO~O!j1xO'T-XO~O(P*POP$Wi!e$Wi~O!S1yO'r(pOP$XX!e$XX~O!S1|O~Ov$_a!e$_a~P2gO!l(|O'Q#VO'T(xOv&hX!e&hX~O!e-oOv([a~Ov2QO~P,cOy2UO~O#p2VO~Oy2WO$|*xO~Ow*vOy2WO}*wO$|*xO~Oo2aO~Ow!POy2fO#Q2hO$|*xO~O!S2jO~Ov2lO~O#Q2mOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#O%wi#P%wi'g%wi'q%wi'r%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#R%wi~Od2nO~O^2qO!j.sO!q2rO'Q#VO'Z%eO~O(P*PO!P%{X!e%{X~O!e2sO!P(tX~O!P2uO~OQ!QOZ%rO[%qO^2wO_%cO`TOaTOd%jOg%yO}%pO!j2xO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO^2yO!j2xO(P*OO~O!P%aX!e%aX~P#4kO^2yO~O(P*POR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#O&Oi#P&Oi'g&Oi'q&Oi'r&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#R&Oi~O_%cO!Q!lO!P&yX!e&yX~P#DkO!e.yO!P(ua~OR3QO(P*PO~O!e3ROR(rX~OR3TO~O(P*POR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#O&Pi#P&Pi'g&Pi'q&Pi'r&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#R&Pi~O!P3UO~O$f3VO(P*PO~Ow$yO$f3VO$|*xO(P*PO~Ow!PO!Z!YO~O!Z3aO#R3_O'r(pO~O!j&bO'Q#VO~P<cOv3eO~Ov3eO!j&bO'Q`O~P<cO!O3hO'r(pO~Ow!PO~P#9vOo3kOy3jO(P*PO~O!P3oO~P%;pOv3rO~P%;pOR0uO!S+UO!e0sO~OR0uOo0wO!S+UO!e0sO~Oa/zO|!VO'Q#VO'T(RO~O!S3uO~O!e3wOv(dX~Ov3yO~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO~PGaO!e3|O(P*PO!P(fX~O!P4OO~O!S4PO(P*OO~O!S+UO(P*PO~O!e4ROw(aXy(aX~OQ4TO~Oy2WO~Oa/zO|!VO'Q#VO'T*oO~Oo4WOw*vO}*wOv%XX!e%XX~O!e4ZOv(hX~Ov4]O~O(P4_Oy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4aO(P*PO~OQ!QOSVOTVO[$gO^4bO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j4cO'Z%eO~P&,sO!S4eO'r(pO~O#V4gO~P%1}O!e4hO!P(kX~O!P4jO~O!P%aX!S!aX!e%aX'r!aX~P!KgO!j&bO~P&,sO!e4hO!P(kX!S'eX'r'eX~O^2yO!j2xO~Ow!POy2fO~O_4pO!Q/sO'T&iO'Z%eOR&lX!e&lX~OR4rO!e0sO~O!S4tO~Ow$yO$|*xO(P*PO~Oy4uO~P2gOo4vOy4uO(P*PO~Ov&uX!e&uX~P!3|O!e1POv(pa~Oo4|Oy4{O(P*PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UOR&vX!e&vX~P#DkO!e1ZOR'Ya~O!y5SO~O!P5TO~P#KkO!S1^OX'wX#R'wX~O!e,sO!P(Vi~O!P&ea!e&ea~P2gOX5WO~P2gOP!bqZcq!S!bq!e!bq!tcq'qcq'r!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#R!bqv!bq~O'r(pO!P&`a!e&`aX&`a~O!i-`O!j-_O!l5YO'T-XOv&aX!e&aX~O!e1sOv'oa~O!S5[O~O!S5`O'r(pOP$Xa!e$Xa~O(P*POP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5bO#Q5dO$|*xO~Oo5gOy5fO(P*PO~Oy5iO~Oy5iO$|*xO~Oy5mO(P*PO~Ow!POy5bO~Oo5tOy5sO(P*PO~O!S5vO~O!e2sO!P(ta~O^2yO!j2xO'Z%eO~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t5zO#V5|O$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6OO_%cO`TOaTOd%jOg%yO}%pO!j6PO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(P*OO(Q%zO~PGaO!P%aa!e%aa~P#4kO^6QO~O#Q6ROR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#O%wq#P%wq'g%wq'q%wq'r%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#R%wq~O(P*POR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#O&Oq#P&Oq'g&Oq'q&Oq'r&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#R&Oq~O(P*PO!P&ya!e&ya~OX6SO~P2gO'Z%eOR&wX!e&wX~O!e3ROR(ra~O$f6YO(P*PO~Ow![q~P#9vO#R6]O~O!Z3aO#R6]O'r(pO~Ov6bO~O#R6fO~Oy6gO!P6hO~O!P6hO~P%;pOy6kO~Ov6kOy6gO~Ov6kO~P%;pOy6mO~O!e3wOv(da~O!S6pO~Oa/zO|!VO'Q#VO'T(ROv&oX!e&oX~O!e3|O(P*PO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&pX!e&pX~PGaO!e3|O!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4ROw(aay(aa~O!e4ZOv(ha~Oo7SOv%Xa!e%Xa~Oo7SOw*vO}*wOv%Xa!e%Xa~Oa/zO|!VO'Q#VO'T*oOv&qX!e&qX~O(P*POy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4_Oy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa'r!aX~P!KgOQ!QOSVOTVO[$gO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O^7ZO~P&JUO^6QO!j6PO~O!e4hO!P(ka~O!e4hO!P(ka!S'eX'r'eX~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t7_O'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V7aO!P&sX!e&sX~P&L]O!S7cO'r(pO~Ow!POy5bO$|*xO(P*PO~O!S+UOR&la!e&la~Oo0wO!S+UOR&la!e&la~Oo0wOR&la!e&la~O(P*POR$yi!e$yi~Oy7fO~P2gOo7gOy7fO(P*PO~O(P*PORni!eni~O(P*POR&va!e&va~O(P*OOR&va!e&va~OS,^OT,^OZ,^O_,^Od,^Oo,^Os,^Ou,^Oy,^O!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O~O(P7iO(Q7iO(R7iO~P'!qO!P7kO~P#KkO!P&ei!e&ei~P2gO'r(pOv!hi!e!hi~O!S7mO~O(P*POP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7oO~Ow!POy7oO#Q7rO$|*xO~Oy7tO~Oy7uO~Oy7vO(P*PO~Ow!POy7oO$|*xO(P*PO~Oo7{Oy7zO(P*PO~O!e2sO!P(ti~O(P*PO!P%}X!e%}X~O!P%ai!e%ai~P#4kO^8OO~O!e8TO['bXv$`i}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R#^a~P2gO#R8WO~O!Z3aO#R8XO'r(pO~Ov8[O~Oy8^O~P2gOy8`O~Oy6gO!P8aO~Ov8`Oy6gO~O!e3wOv(di~O(P*POv%Qi!e%Qi~O!e3|O!P(fi~O!e3|O(P*PO!P(fi~O(P*PO!P&pa!e&pa~O(P8hOw(bX!e(bXy(bX~O(P*PO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4ZOv(hi~Ov%Xi!e%Xi~P2gOo8kOv%Xi!e%Xi~O!P%ai!S!aX!e%ai'r!aX~P!KgO(P*PO!P%`i!e%`i~O!e4hO!P(ki~O#V8nO~P&L]O!P&sa!S'eX!e&sa'r'eX~O(P*POR$zq!e$zq~Oy8pO~P2gOy7zO~P2gO(P8rO(Q8rO(R8rO~O(P8rO(Q8rO(R8rO~P'!qO'r(pOv!hq!e!hq~O(P*POP$Xq!e$Xq~Ow!POy8uO$|*xO(P*PO~Ow!POy8uO~Oy8xO~P2gOy8zO~P2gOo8|Oy8zO(P*PO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'Q#[q'T#[q'^#[q'g#[q~O!e9PO['bXv$`q}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'2fO#R9UO~O!Z3aO#R9UO'r(pO~Oy9WO~O(P*POv%Qq!e%Qq~O!e3|O!P(fq~O(P*PO!P&pi!e&pi~O(P8hOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'eX!e&si'r'eX~O(P*PO!P%`q!e%`q~Oy9]O~P2gO(P9^O(Q9^O(R9^O~O'r(pOv!hy!e!hy~Ow!POy9_O~Ow!POy9_O$|*xO(P*PO~Oy9aO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'Q#[y'T#[y'^#[y'g#[y~O!e9dO['bXv$`y}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'9eO!e9eO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R9hO~O(P*PO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9iO~Oy9jO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'Q#[!R'T#[!R'^#[!R'g#[!R~O!e9kO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'bX#V#[q'Q#[q'T#[q'^#[q'g#[q'q'bX(Q'bX~P@[O!e9nO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'bX#V#[y'Q#[y'T#[y'^#[y'g#[y'q'bX(Q'bX~P@[OwbX~P$|OwjX}jX!tbX'qbX~P!6mOZ'SXd'XXo'SXw'kX!t'SX'q'SX'r'SX~O['SXd'SXw'SX}'SX!l'SX!q'SX#O'SX#P'SX#p'SX'g'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SX~P'GTOP'SX}'kX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTO^9qO_9qO`9qOa9qO'T9oO~O!j:OO~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P'IxO#Q$uO~P!.cO}'kXP'SX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTOo#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P'IxOo:YO#O:YO#P:VOw#sa~P!B}Ow$Ua~P#9vOQ'XXd'XX}iX~OQlXdlX}jX~O^:sO_:sO`:sOa:sO'T:_O~OQ'XXd'XX}hX~Ow#qa~P#9vOw#za~P#9vO!S&_Oo#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#Q*eO~P!.cOw#ci~P#9vO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'g#ei(P#ei~P((}O'g#gO(P#gO~P((}O[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#ei~O!q#ei~P(*yO!q#jO~P(*yO[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#ei~O'r#ei~P(,rO'r#lO~P(,rO[#}O}#zO!q#jO#P:VO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#ei~O'}#ei~P(.kO'}#mO~P(.kOo:YO#O:YO#P:VOw#ni~P$1xOo:YO#O:YO#P:VOw#si~P$3yOQ'XXd'XX}'kX~Ow#zi~P#9vOw$Ui~P#9vOd9}O~Ow#ca~P#9vOd:uO~OU'x_'v'P'O'^s!y'^'T'Z~",
	  goto: "$Ku(vPPPPPPP(wPP)OPP)^PPPP)d-hP0f5aP7R7R8v7R>wD_DpPDvHQPPPPPPK`P! P! _PPPPP!!VP!$oP!$oPP!&oP!(rP!(w!)n!*f!*f!*f!(w!+]P!(w!.Q!.TPP!.ZP!(w!(w!(w!(wP!(w!(wP!(w!(w!.y!/dP!/dJ}J}J}PPPP!/d!.y!/sPP!$oP!0^!0a!0g!1h!1t!3t!3t!5r!7t!1t!1t!9p!;_!=O!>k!@U!Am!CS!De!1t!1tP!1tP!1t!1t!Et!1tP!Ge!1t!1tP!Ie!1tP!1t!7t!7t!1t!7t!1t!Kl!Mt!Mw!7t!1t!Mz!M}!M}!M}!NR!$oP!$oP!$oP! P! PP!N]! P! PP!Ni# }! PP! PP#!^##c##k#$Z#$_#$e#$e#$mP#&s#&s#&y#'o#'{! PP! PP#(]#(l! PP! PPP#(x#)W#)d#)|#)^! P! PP! P! P! PP#*S#*S#*Y#*`#*S#*S! P! PP#*m#*v#+Q#+Q#,x#.l#.x#.x#.{#.{5a5a5a5a5a5a5a5aP5a#/O#/U#/p#1{#2R#2b#6^#6d#6j#6|#7W#8w#9R#9b#9h#9n#9x#:S#:Y#:g#:m#:s#:}#;]#;g#=u#>R#>`#>f#>n#>u#?PPPPPPPP#?V#BaP#F^#Jx#Ls#Nr$&^P$&aPPP$)_$)h$)z$/U$1d$1m$3fP!(w$4`$7r$:i$>T$>^$>c$>fPPP$>i$A`$A|P$BaPPPPPPPPPP$BvP$EU$EX$E[$Eb$Ee$Eh$Ek$En$Et$HO$HR$HU$HX$H[$H_$Hb$He$Hh$Hk$Hn$Jt$Jw$Jz#*S$KW$K^$Ka$Kd$Kh$Kl$Ko$KrQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)U*f/gQ'i#QR,n'l(OSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n+z,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1P1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:gS(z$v-oQ*p&eQ*t&hQ-k(yQ-y)ZW0Z+Q0Y4Z7UR4Y0[&w!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hb#[b#Q$y'l(b)S)U*Z-t!h$bo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g!W:y!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:|%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'}(W(Y(d(e(f(j(o(p(r(|)i)p)q*f*i*k*l+Z+n,s,z-R-T-g-m.i.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:x$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)[%QQ)]%RQ)^%SQ)_%TQ)b%WQ+`&oS,R']1ZQ.W)`S/r*u4TR4n0s+yTOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(q(r(|)S)U)i)p)q)s)x)y*O*P*R*V*Z*[*^*e*f*i*k*l*n*w*x+U+V+Z+h+n+o+z+},q,s,z-R-T-g-i-m-t-v.U.`.i.p.t.x.y.}/Z/[/^/b/d/g/{/}0`0e0g0m0r0w0}1O1P1Y1Z1h1r1y1|2a2h2j2m2s2v3V3_3a3f3h3k3u3{3|4R4U4W4_4c4e4h4t4v4|5[5`5d5g5t5v6R6Y6]6a6p6v6x7S7^7c7g7m7r7{8W8X8g8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:xQ'[!xQ'h#PQ)l%gU)r%m*T*WR.f)kQ,T']R5P1Z#t%s!Q!n$O$u%p%q&P&p&r(q)x)y*O*R*V*[*^*e*n*w+V+h+o+}-i-v.U.`.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2v3V3u3{3|4U4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)x%oQ+_&oQ,U']n,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7kS.q)s2sQ/O*PQ/Q*SQ/q*uS0Q*x4RQ0a+U[0o+Z.j0g4h5y7^Q2v.pS4d0e2rQ4m0sQ5Q1ZQ6T3RQ6z4PQ7O4TQ7X4_R9Y8h&jVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'}(W(Y(b(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1Z1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fU&g!g%P%[o,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7k$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9z9{:O:P:Q:R:S:T:U:V:W:X:Y:eS$tp9xS&O!W#bS&Q!X#cQ&`!bQ*_&RQ*a&VS*d&[:fQ*h&^Q,T']Q-j(wQ/i*jQ0p+[S2f.X0qQ3]/_Q3^/`Q3g/hQ3i/kQ5P1ZU5b2R2g4lU7o5c5e5rQ8]6dS8u7p7qS9_8v8wR9i9`i{Ob!O!P!T$y%_%b)S)U)i-thxOb!O!P!T$y%_%b)S)U)i-tW/v*v/t3w6qQ/}*wW0[+Q0Y4Z7UQ3{/{Q6x3|R8g6v!h$do!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ&d!dQ&f!fQ&n!mW&x!q%X&|1PQ'S!rQ)X$}Q)Y%OQ)a%VU)d%Y'T'UQ*s&hS+s&z'PS-Y(k1sQ-u)WQ-x)ZS.a)e)fS0x+c/sQ1S+zQ1W+{S1v-_-`Q2k.bQ3s/pQ5]1xR5h2V${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR3]/_V&T!Y!`*i!i$lo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!k$^o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!i$co!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR(l$fQ-[(kR5Y1sQ(S#|S({$v-oS-Z(k1sQ-l(yW/u*v/t3w6qS1w-_-`Q3v/vR5^1xQ'e#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,o'mk,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ'f#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,p'mR*g&]X/c*f/d/g3f!}aOb!O!P!T#z$v$y%_%b'}(y)S)U)i)s*f*v*w+Q+Z,s-o-t.j/b/d/g/t/{0Y0g1h2s3f3w3|4Z4h5y6a6q6v7U7^Q3`/aQ6_3bQ8Y6`R9V8Z${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!T9u!Y!_!`*i*l/^3h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!X9u!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#U#oh#d$P$Q$V$s%^&W&X'q't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b}:P&S&]/k3[6d:[:]:c:d:h:j:k:l:m:n:o:p:q:r:v:w:{#W#ph#d$P$Q$V$s%^&W&X'q'r't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b!P:Q&S&]/k3[6d:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{#S#qh#d$P$Q$V$s%^&W&X'q'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b{:R&S&]/k3[6d:[:]:c:d:h:k:l:m:n:o:p:q:r:v:w:{#Q#rh#d$P$Q$V$s%^&W&X'q'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9by:S&S&]/k3[6d:[:]:c:d:h:l:m:n:o:p:q:r:v:w:{#O#sh#d$P$Q$V$s%^&W&X'q'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bw:T&S&]/k3[6d:[:]:c:d:h:m:n:o:p:q:r:v:w:{!|#th#d$P$Q$V$s%^&W&X'q'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bu:U&S&]/k3[6d:[:]:c:d:h:n:o:p:q:r:v:w:{!x#vh#d$P$Q$V$s%^&W&X'q'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bq:W&S&]/k3[6d:[:]:c:d:h:p:q:r:v:w:{!v#wh#d$P$Q$V$s%^&W&X'q'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bo:X&S&]/k3[6d:[:]:c:d:h:q:r:v:w:{$]#{h#`#d$P$Q$V$s%^&S&W&X&]'q'r's't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n/k0z1i1l1}3P3[4w5V5a6^6d6e7R7e7h7s7y8j8q8{9[9b:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ&Y![Q&Z!]R:e9{#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hQ&[!^!W9x!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:f:zR$moR-f(rR$wqT(}$v-oQ/f*fS3d/d/gR6c3fQ3m/mQ3p/nQ6i3nR6l3qQ$zwQ)V${Q*q&fQ+f&qQ+i&sQ-w)YW.Z)b+j+k+lS/X*]+gW2b.W.[.].^U3W/Y/]0yU5o2c2d2eS6W3X3ZS7w5p5qS8Q6V6XQ8y7xS8}8R8SR9c9O^|O!O!P!T%_%b)iX)R$y)S)U-tQ&r!nQ*^&PQ*|&jQ+P&kQ+T&lQ+W&mQ+]&nQ+l&sQ-})[Q.Q)]Q.T)^Q.V)_Q.Y)aQ.^)bQ2S-uQ2e.WR4U0VU+a&o*u4TR4o0sQ+Y&mQ+k&sS.])b+l^0v+_+`/q/r4m4n7OS2d.W.^S4Q0R0SR5q2eS0R*x4RQ0a+UR7X4_U+d&o*u4TR4p0sQ*z&jQ+O&kQ+S&lQ+g&qQ+j&sS-{)[*|S.P)]+PS.S)^+TU.[)b+k+lQ/Y*]Q0X*{Q0q+[Q2X-|Q2Y-}Q2].QQ2_.TU2c.W.].^Q2g.XS3Z/]0yS5c2R4lQ5j2ZS5p2d2eQ6X3XS7q5e5rQ7x5qQ8R6VQ8v7pQ9O8SR9`8wQ0T*xR6|4RQ*y&jQ*}&kU-z)[*z*|U.O)]+O+PS2W-{-}S2[.P.QQ4X0ZQ5i2YQ5k2]R7T4YQ/w*vQ3t/tQ6r3wR8d6qQ*{&jS-|)[*|Q2Z-}Q4X0ZR7T4YQ+R&lU.R)^+S+TS2^.S.TR5l2_Q0]+QQ4V0YQ7V4ZR8l7UQ+[&nS.X)a+]S2R-u.YR5e2SQ0i+ZQ4f0gQ7`4hR8m7^Q.m)sQ0i+ZQ2p.jQ4f0gQ5|2sQ7`4hQ7}5yR8m7^Q0i+ZR4f0gX'O!q%X&|1PX&{!q%X&|1PW'O!q%X&|1PS+u&z'PR1U+z_|O!O!P!T%_%b)iQ%a!PS)h%_%bR.d)i$^%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ*U%yR*X%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gW)t%m%x*T*WQ.e)jR2{.vR.m)sR5|2sQ'W!sR,O'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)U/gQ)U$yR/g*f$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g[)n%i)p.i:`:t:xQ)p%jQ.i)qQ:`%nQ:t:aR:x:uQ!vUR'Y!vS!OO!TU%]!O%_)iQ%_!PR)i%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hh!yY!|#U$`'a'n(d,q-R9s9|:gQ!|[b#Ub#Q$y'l(b)S)U*Z-t!h$`o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ'a!}Q'n#ZQ(d$aQ,q'oQ-R(e!W9s!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ9|9tR:g9}Q-U(gR1p-UQ1t-[R5Z1tQ,c'bQ,f'cQ,h'dW1`,c,f,h5UR5U1_Q/d*fS3c/d3fR3f/gfbO!O!P!T$y%_%b)S)U)i-tp#Wb'}(y.j/b/t/{0Y0g1h5y6a6q6v7U7^Q'}#zS(y$v-oQ.j)sW/b*f/d/g3fQ/t*vQ/{*wQ0Y+QQ0g+ZQ1h,sQ5y2sQ6q3wQ6v3|Q7U4ZR7^4hQ,t(OQ1g,rT1j,t1gS(X$Q([Q(^$VU,x(X(^,}R,}(`Q(s$mR-h(sQ-p)OR2P-pQ3n/mQ3q/nT6j3n3qQ)S$yS-r)S-tR-t)UQ4`0aR7Y4``0t+^+_+`+a+d/q/r7OR4q0tQ8i6zR9Z8iQ4S0TR6}4SQ3x/wQ6n3tT6s3x6nQ3}/|Q6t3zU6y3}6t8eR8e6uQ4[0]Q7Q4VT7W4[7QhzOb!O!P!T$y%_%b)S)U)i-tQ$|xW%Zz$|%f)v$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR)v%nS4i0i0nS7]4f4gT7b4i7]W&z!q%X&|1PS+r&z+zR+z'PQ1Q+wR4z1QU1[,S,T,UR5R1[S3S/Q7OR6U3SQ2t.mQ5x2pT5}2t5xQ.z)zR3O.z^_O!O!P!T%_%b)iY#Xb$y)S)U-t$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!h$io!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'j#Q'lQ-P(bR/V*Z&v!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!{Y[#U#Z9s9tW&{!q%X&|1P['`!|!}'n'o9|9}S(c$`$aS+t&z'PU,X'a,q:gS-Q(d(eQ1T+zR1n-RS%t!Q&oQ&q!nQ(V$OQ(w$uS)w%o.pQ)z%pQ)}%qS*]&P&rQ+e&pQ,S']Q-d(qQ.l)sU.w)x)y2vS/O*O*PQ/P*RQ/T*VQ/W*[Q/]*^Q/`*eQ/l*nQ/|*wS0S*x4RQ0a+UQ0c+VQ0y+hQ0{+oQ1X+}Q1{-iQ2T-vQ2`.UQ2i.`Q2z.tQ2|.xQ2}.yQ3X/ZQ3Y/[S3z/{/}Q4^0`Q4l0rQ4s0wQ4x1OQ4}1YQ5O1ZQ5_1yQ5n2aQ5r2hQ5u2jQ5w2mQ5{2sQ6V3VQ6o3uQ6u3{Q6w3|Q7P4UQ7X4_Q7[4eQ7d4tQ7n5`Q7p5dQ7|5vQ8P6RQ8S6YQ8c6pS8f6v6xQ8o7cQ8w7rR9X8g$^%m!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)j%nQ*T%yR*W%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x'pWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x_&y!q%X&z&|'P+z1PR,V']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!j$]o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ,T']R5P1Z_}O!O!P!T%_%b)i^|O!O!P!T%_%b)iQ#YbX)R$y)S)U-tbhO!O!T3_6]8W8X9U9hS#`f9uQ#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)iU&S!Y!`*iQ&W!ZQ&X![Q&]!_Q'q#eQ'r#oS's#p:QQ't#qQ'u#rQ'v#sQ'w#tQ'x#uQ'y#vQ'z#wQ'{#xQ'|#yQ(O#zQ(U#}Q([$TQ(`$WQ*b&YQ*c&[Q,r'}Q,w(WQ,y(YQ-n(|Q/k*lQ0z+nQ1i,sQ1l,zQ1}-mQ3P.}Q3[/^Q4w0}Q5V1hQ5a1|Q6^3aQ6d3hQ6e3kQ7R4WQ7e4vQ7h4|Q7s5gQ7y5tQ8j7SQ8q7gQ8{7{Q9[8kQ9b8|Q:[9wQ:]9xQ:c9zQ:d9{Q:h:OQ:i:PQ:j:RQ:k:SQ:l:TQ:m:UQ:n:VQ:o:WQ:p:XQ:q:YQ:r:ZQ:v:eQ:w:fR:{9v^tO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6[3_Q8V6]Q9R8WQ9T8XQ9g9UR9m9hQ&V!YQ&^!`R/h*iQ$joQ&a!cQ&t!pU(g$e$g(jS(n$h0eQ(u$qQ(v$rQ*`&UQ*m&bQ+p&uQ-S(fS-b(o4cQ-c(pQ-e(rW/a*f/d/g3fQ/j*kW0f+Z0g4h7^Q1o-TQ1z-gQ3b/bQ4k0mQ5X1rQ7l5[Q8Z6aR8t7m!h$_o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mR-P(b'qXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$fo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!zY[$`$a9s9t['_!|!}(d(e9|9}W)o%i%j:`:aU,W'a-R:gW.h)p)q:t:uT2o.i:xQ(i$eQ(m$gR-W(jV(h$e$g(jR-^(kR-](k$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$ko!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'g#O'pj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ,m'jQ.u)uR8_6f`,b'b'c'd,c,f,h1_5UQ1e,lX3l/m/n3n3qj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ7j5TR8s7k^uO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6Z3_Q8U6]Q9Q8WQ9S8XQ9f9UR9l9hR(Q#zR(P#zQ$SlR(]$TR$ooR$noR)Q$vR)P$vQ)O$vR2O-ohwOb!O!P!T$y%_%b)S)U)i-t$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](q)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR${xR0b+UR0W*xR0U*xR6{4PR/y*vR/x*vR0P*wR0O*wR0_+QR0^+Q%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](q)S)U)i)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-t-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR0k+ZR0j+ZQ'R!qQ)c%XQ+w&|R4y1PX'Q!q%X&|1PR+y&|R+x&|T/S*S4TT/R*S4TR.o)sR.n)sR){%p",
	  nodeNames: "⚠ | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp BracketedTokens BracedTokens _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
	  maxTerm: 359,
	  nodeProps: [
		["group", -42,4,5,14,15,16,17,18,19,33,35,36,37,40,51,53,56,101,107,111,112,113,122,123,125,127,128,130,132,133,134,137,139,140,141,142,143,144,148,149,155,157,159,"Expression",-16,22,24,25,26,27,222,223,230,231,232,233,234,235,236,237,239,"Type",-20,42,161,162,165,166,169,170,172,188,190,194,196,204,205,207,208,209,217,218,220,"Statement",-17,49,60,62,63,64,65,68,74,75,76,77,78,80,81,83,84,99,"Pattern"],
		["openedBy", 9,"[",38,"{",47,"("],
		["closedBy", 12,"]",39,"}",45,")"]
	  ],
	  propSources: [rustHighlighting],
	  skippedNodes: [0,6,7,240],
	  repeatNodeCount: 32,
	  tokenData: "$%h_R!XOX$nXY5gYZ6iZ]$n]^5g^p$npq5gqr7Xrs9cst:Rtu;Tuv>vvwAQwxCbxy!+Tyz!,Vz{!-X{|!/_|}!0g}!O!1i!O!P!3v!P!Q!8[!Q!R!Bw!R![!Dr![!]#+q!]!^#-{!^!_#.}!_!`#1b!`!a#3o!a!b#6S!b!c#7U!c!}#8W!}#O#:T#O#P#;V#P#Q#Cb#Q#R#Dd#R#S#8W#S#T$n#T#U#8W#U#V#El#V#f#8W#f#g#Ic#g#o#8W#o#p$ S#p#q$!U#q#r$$f#r${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nU$u]'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU%uV'_Q'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&aV'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&yVOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`S'cVOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S'{UOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`S(bUOz(t{!P(t!P!Q(_!Q;'S(t;'S;=`*a<%lO(tS(wVOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)eV'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)}UOz(tz{)z{!P(t!Q;'S(t;'S;=`*a<%lO(tS*dP;=`<%l(tS*jP;=`<%l)^S*pP;=`<%l'`S*vP;=`<%l&[S+OO'PSU+T]'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U,R]'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU-P]'_QOY+|YZ-xZr+|rs'`sz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U-}V'_QOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[Q.iV'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.dQ/TO'_QQ/WP;=`<%l.dU/`]'_QOY0XYZ3uZr0Xrs(tsz0Xz{.d{!P0X!P!Q/Z!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU0^]'_QOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU1`]'_Q'PS'OSOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU2bV'_Q'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U2|]'_QOY0XYZ3uZr0Xrs(tsz0Xz{2w{!P0X!P!Q.d!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU3zV'_QOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U4dP;=`<%l0XU4jP;=`<%l1VU4pP;=`<%l+|U4vP;=`<%l$nU5QV'_Q'PSOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_5p]'_Q&|X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_6rV'_Q&|X'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_7b_ZX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_8j]#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_9lV']Q'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_:[]'QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_;^i'_Q'vW'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_=Uj'_Q_X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![<{![!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_?P_(TP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_@X]#OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_AZa!qX'_Q'OSOY$nYZ%nZr$nrs&[sv$nvwB`wz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Bi]'}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Cik'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q!cE^!c!}Lp!}#OE^#O#P!!l#P#RE^#R#SLp#S#TE^#T#oLp#o${E^${$|Lp$|4wE^4w5bLp5b5iE^5i6SLp6S;'SE^;'S;=`!*}<%lOE^_Ee_'_Q'OSOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Fm]'_Q'OSsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_GmX'_Q'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]HaV'OSsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]H{X'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_Im_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Js]'_QsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Kq_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Lyl'_Q'OS'ZXOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n_Nzj'_Q'OS'ZXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n]!!qZ'OSOzHvz{!#d{!PHv!P!Q!$n!Q#iHv#i#j!%Z#j#lHv#l#m!'V#m;'SHv;'S;=`!*w<%lOHv]!#gXOw'`wx!$Sxz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`]!$XVsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]!$qWOw'`wx!$Sxz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`]!%`^'OSOz&[z{&v{!P&[!P!Q'x!Q![!&[![!c&[!c!i!&[!i#T&[#T#Z!&[#Z#o&[#o#p!({#p;'S&[;'S;=`*s<%lO&[]!&a['OSOz&[z{&v{!P&[!P!Q'x!Q![!'V![!c&[!c!i!'V!i#T&[#T#Z!'V#Z;'S&[;'S;=`*s<%lO&[]!'[['OSOz&[z{&v{!P&[!P!Q'x!Q![!(Q![!c&[!c!i!(Q!i#T&[#T#Z!(Q#Z;'S&[;'S;=`*s<%lO&[]!(V['OSOz&[z{&v{!P&[!P!Q'x!Q![Hv![!c&[!c!iHv!i#T&[#T#ZHv#Z;'S&[;'S;=`*s<%lO&[]!)Q['OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z;'S&[;'S;=`*s<%lO&[]!){^'OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z#q&[#q#rHv#r;'S&[;'S;=`*s<%lO&[]!*zP;=`<%lHv_!+QP;=`<%lE^_!+^]}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!,`]!PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!-`_(QX'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!.f]#OX'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!/h_(PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!0p]!eX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!1r`'gX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`!a!2t!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!2}]#QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!4P^(OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!4{!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!5U`!lX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!6W!P!Q,z!Q!_$n!_!`!7Y!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!6a]!tX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV!7c]'qP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!8c_'_Q'xXOY+|YZ-xZr+|rs'`sz+|z{!9b{!P+|!P!Q!:O!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!9iV&}]'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_!:V]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!Aq{!P!;O!P!Q!:O!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;O_!;V]'_QUXOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O_!<Z]'_QUX'PS'OSOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O]!=]XUX'PS'OSOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!=}XUXOY!>jYZ(tZz!>jz{!=x{!P!>j!P!Q!?|!Q;'S!>j;'S;=`!@e<%lO!>j]!>oXUXOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!?aXUXOY!>jYZ(tZz!>jz{!?|{!P!>j!P!Q!?[!Q;'S!>j;'S;=`!@e<%lO!>jX!@RSUXOY!?|Z;'S!?|;'S;=`!@_<%lO!?|X!@bP;=`<%l!?|]!@hP;=`<%l!>j]!@nP;=`<%l!=S_!@x]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!@q{!P!;O!P!Q!Aq!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;OZ!AxX'_QUXOY!AqYZ/OZr!Aqrs!?|s#O!Aq#O#P!?|#P;'S!Aq;'S;=`!Be<%lO!AqZ!BhP;=`<%l!Aq_!BnP;=`<%l!;O_!BtP;=`<%l!<O_!CQjuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#U$n#U#V#!}#V#]$n#]#^!FZ#^#c$n#c#d#%u#d#i$n#i#j!FZ#j#l$n#l#m#(g#m;'S$n;'S;=`4s<%lO$n_!D{duX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_!Fbg'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R$n!R!S!Gy!S!T$n!T!U!K_!U!W$n!W!X!Le!X!Y$n!Y!Z!J]!Z#O$n#O#P&[#P#g$n#g#h!Mk#h;'S$n;'S;=`4s<%lO$n_!HQa'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!IV!T!W$n!W!X!J]!X#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!I^_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y$n!Y!Z!J]!Z#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Jf]uX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Kf_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!J]!T#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Ll_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!U$n!U!V!J]!V#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Mr_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#]$n#]#^!Nq#^;'S$n;'S;=`4s<%lO$n_!Nx_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#n$n#n#o# w#o;'S$n;'S;=`4s<%lO$n_#!O_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#X$n#X#Y!J]#Y;'S$n;'S;=`4s<%lO$n_##Ua'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S;'S$n;'S;=`4s<%lO$n_#$deuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#%|`'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S;'S$n;'S;=`4s<%lO$n_#'XduX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#(nd'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z;'S$n;'S;=`4s<%lO$n_#*VhuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#+z_!SX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![$n![!]#,y!]#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#-S]dX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#.U]yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#/W`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!^$n!^!_#0Y!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#0c_'yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#1k`oX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#2m!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#2v]#RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#3x`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#4z!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#5T_'zX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#6]](RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV#7_]'pP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#8cj'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n_#:^][X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU#;[Z'OSOz#;}z{#<k{!P#;}!P!Q#=V!Q#i#;}#i#j#=n#j#l#;}#l#m#?j#m;'S#;};'S;=`#C[<%lO#;}U#<UVrQ'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[U#<pVrQOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`U#=[UrQOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`U#=s^'OSOz&[z{&v{!P&[!P!Q'x!Q![#>o![!c&[!c!i#>o!i#T&[#T#Z#>o#Z#o&[#o#p#A`#p;'S&[;'S;=`*s<%lO&[U#>t['OSOz&[z{&v{!P&[!P!Q'x!Q![#?j![!c&[!c!i#?j!i#T&[#T#Z#?j#Z;'S&[;'S;=`*s<%lO&[U#?o['OSOz&[z{&v{!P&[!P!Q'x!Q![#@e![!c&[!c!i#@e!i#T&[#T#Z#@e#Z;'S&[;'S;=`*s<%lO&[U#@j['OSOz&[z{&v{!P&[!P!Q'x!Q![#;}![!c&[!c!i#;}!i#T&[#T#Z#;}#Z;'S&[;'S;=`*s<%lO&[U#Ae['OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z;'S&[;'S;=`*s<%lO&[U#B`^'OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z#q&[#q#r#;}#r;'S&[;'S;=`*s<%lO&[U#C_P;=`<%l#;}_#Ck]XX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Dm_'{X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Ewl'_Q'OS!yW'TPOY$nYZ%nZr$nrs#Gosw$nwx#H]xz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n]#GvV'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_#Hd_'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q#OE^#O#P!!l#P;'SE^;'S;=`!*}<%lOE^_#Ink'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[st#Kctz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nV#Kji'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$nV#Mbj'_Q'OS'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#MX![!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$n_$ ]]wX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$!_a'rX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P#p$n#p#q$#d#q;'S$n;'S;=`4s<%lO$n_$#m]'|X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$$o]vX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n",
	  tokenizers: [closureParam, tpDelim, literalTokens, 0, 1, 2, 3],
	  topRules: {"SourceFile":[0,8]},
	  specialized: [{term: 281, get: value => spec_identifier[value] || -1}],
	  tokenPrec: 15596
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/sass/dist/index.cjs":
	/*!*********************************************************!*\
	  !*** ../editor/node_modules/@lezer/sass/dist/index.cjs ***!
	  \*********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const indent = 148,
	  dedent = 149,
	  descendantOp = 150,
	  InterpolationEnd = 1,
	  InterpolationContinue = 2,
	  Unit = 3,
	  callee = 151,
	  identifier = 152,
	  VariableName = 4,
	  InterpolationStart = 5,
	  newline = 153,
	  blankLineStart = 154,
	  eof = 155,
	  whitespace = 156,
	  LineComment = 6,
	  Comment = 7,
	  IndentedMixin = 8,
	  IndentedInclude = 9,
	  Dialect_indented = 0;
	
	/* Hand-written tokenizers for CSS tokens that can't be
	   expressed by Lezer's built-in tokenizer. */
	
	const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
				   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
	const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
		  hash = 35, percent = 37, braceL = 123, braceR = 125, slash = 47, asterisk = 42,
		  newlineChar = 10, equals = 61, plus = 43, and = 38;
	
	function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }
	
	function isDigit(ch) { return ch >= 48 && ch <= 57 }
	
	function startOfComment(input) {
	  let next;
	  return input.next == slash && ((next = input.peek(1)) == slash || next == asterisk)
	}
	
	const spaces = new lr.ExternalTokenizer((input, stack) => {
	  if (stack.dialectEnabled(Dialect_indented)) {
		let prev;
		if (input.next < 0 && stack.canShift(eof)) {
		  input.acceptToken(eof);
		} else if (((prev = input.peek(-1)) == newlineChar || prev < 0) && stack.canShift(blankLineStart)) {
		  let spaces = 0;
		  while (input.next != newlineChar && space.includes(input.next)) { input.advance(); spaces++; }
		  if (input.next == newlineChar || startOfComment(input))
			input.acceptToken(blankLineStart, -spaces);
		  else if (spaces)
			input.acceptToken(whitespace);
		} else if (input.next == newlineChar) {
		  input.acceptToken(newline, 1);
		} else if (space.includes(input.next)) {
		  input.advance();
		  while (input.next != newlineChar && space.includes(input.next)) input.advance();
		  input.acceptToken(whitespace);
		}
	  } else {
		let length = 0;
		while (space.includes(input.next)) {
		  input.advance();
		  length++;
		}
		if (length) input.acceptToken(whitespace);
	  }
	}, {contextual: true});
	
	const comments = new lr.ExternalTokenizer((input, stack) => {
	  if (!startOfComment(input)) return
	  input.advance();
	  if (stack.dialectEnabled(Dialect_indented)) {
		let indentedComment = -1;
		for (let off = 1;; off++) {
		  let prev = input.peek(-off - 1);
		  if (prev == newlineChar || prev < 0) {
			indentedComment = off + 1;
			break
		  } else if (!space.includes(prev)) {
			break
		  }
		}
		if (indentedComment > -1) { // Weird indented-style comment
		  let block = input.next == asterisk, end = 0;
		  input.advance();
		  while (input.next >= 0) {
			if (input.next == newlineChar) {
			  input.advance();
			  let indented = 0;
			  while (input.next != newlineChar && space.includes(input.next)) {
				indented++;
				input.advance();
			  }
			  if (indented < indentedComment) {
				end = -indented - 1;
				break
			  }
			} else if (block && input.next == asterisk && input.peek(1) == slash) {
			  end = 2;
			  break
			} else {
			  input.advance();
			}
		  }
		  input.acceptToken(block ? Comment : LineComment, end);
		  return
		}
	  }
	  if (input.next == slash) {
		while (input.next != newlineChar && input.next >= 0) input.advance();
		input.acceptToken(LineComment);
	  } else {
		input.advance();
		while (input.next >= 0) {
		  let {next} = input;
		  input.advance();
		  if (next == asterisk && input.next == slash) {
			input.advance();
			break
		  }
		}
		input.acceptToken(Comment);
	  }
	});
	
	const indentedMixins = new lr.ExternalTokenizer((input, stack) => {
	  if ((input.next == plus || input.next == equals) && stack.dialectEnabled(Dialect_indented))
		input.acceptToken(input.next == equals ? IndentedMixin : IndentedInclude, 1);
	});
	
	const indentation = new lr.ExternalTokenizer((input, stack) => {
	  if (!stack.dialectEnabled(Dialect_indented)) return
	  let cDepth = stack.context.depth;
	  if (input.next < 0 && cDepth) {
		input.acceptToken(dedent);
		return
	  }
	  let prev = input.peek(-1);
	  if (prev == newlineChar) {
		let depth = 0;
		while (input.next != newlineChar && space.includes(input.next)) {
		  input.advance();
		  depth++;
		}
		if (depth != cDepth &&
			input.next != newlineChar && !startOfComment(input)) {
		  if (depth < cDepth) input.acceptToken(dedent, -depth);
		  else input.acceptToken(indent);
		}
	  }
	});
	
	const identifiers = new lr.ExternalTokenizer((input, stack) => {
	  for (let inside = false, dashes = 0, i = 0;; i++) {
		let {next} = input;
		if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
		  if (!inside && (next != dash || i > 0)) inside = true;
		  if (dashes === i && next == dash) dashes++;
		  input.advance();
		} else if (next == hash && input.peek(1) == braceL) {
		  input.acceptToken(InterpolationStart, 2);
		  break
		} else {
		  if (inside)
			input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
		  break
		}
	  }
	});
	
	const interpolationEnd = new lr.ExternalTokenizer(input => {
	  if (input.next == braceR) {
		input.advance();
		while (isAlpha(input.next) || input.next == dash || input.next == underscore || isDigit(input.next))
		  input.advance();
		if (input.next == hash && input.peek(1) == braceL)
		  input.acceptToken(InterpolationContinue, 2);
		else
		  input.acceptToken(InterpolationEnd);
	  }
	});
	
	const descendant = new lr.ExternalTokenizer(input => {
	  if (space.includes(input.peek(-1))) {
		let {next} = input;
		if (isAlpha(next) || next == underscore || next == hash || next == period ||
			next == bracketL || next == colon || next == dash || next == and)
		  input.acceptToken(descendantOp);
	  }
	});
	
	const unitToken = new lr.ExternalTokenizer(input => {
	  if (!space.includes(input.peek(-1))) {
		let {next} = input;
		if (next == percent) { input.advance(); input.acceptToken(Unit); }
		if (isAlpha(next)) {
		  do { input.advance(); } while (isAlpha(input.next))
		  input.acceptToken(Unit);
		}
	  }
	});
	
	function IndentLevel(parent, depth) {
	  this.parent = parent;
	  this.depth = depth;
	  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
	}
	
	const topIndent = new IndentLevel(null, 0);
	
	const trackIndent = new lr.ContextTracker({
	  start: topIndent,
	  shift(context, term, stack, input) {
		if (term == indent) return new IndentLevel(context, stack.pos - input.pos)
		if (term == dedent) return context.parent
		return context
	  },
	  hash(context) { return context.hash }
	});
	
	const cssHighlighting = highlight.styleTags({
	  "AtKeyword import charset namespace keyframes media supports include mixin use forward extend at-root": highlight.tags.definitionKeyword,
	  "Keyword selector": highlight.tags.keyword,
	  "ControlKeyword": highlight.tags.controlKeyword,
	  NamespaceName: highlight.tags.namespace,
	  KeyframeName: highlight.tags.labelName,
	  TagName: highlight.tags.tagName,
	  "ClassName Suffix": highlight.tags.className,
	  PseudoClassName: highlight.tags.constant(highlight.tags.className),
	  IdName: highlight.tags.labelName,
	  "FeatureName PropertyName": highlight.tags.propertyName,
	  AttributeName: highlight.tags.attributeName,
	  NumberLiteral: highlight.tags.number,
	  KeywordQuery: highlight.tags.keyword,
	  UnaryQueryOp: highlight.tags.operatorKeyword,
	  "CallTag ValueName": highlight.tags.atom,
	  VariableName: highlight.tags.variableName,
	  SassVariableName: highlight.tags.special(highlight.tags.variableName),
	  Callee: highlight.tags.operatorKeyword,
	  Unit: highlight.tags.unit,
	  "UniversalSelector NestingSelector IndentedMixin IndentedInclude": highlight.tags.definitionOperator,
	  MatchOp: highlight.tags.compareOperator,
	  "ChildOp SiblingOp, LogicOp": highlight.tags.logicOperator,
	  BinOp: highlight.tags.arithmeticOperator,
	  "Important Global Default": highlight.tags.modifier,
	  Comment: highlight.tags.blockComment,
	  LineComment: highlight.tags.lineComment,
	  ColorLiteral: highlight.tags.color,
	  "ParenthesizedContent StringLiteral": highlight.tags.string,
	  "InterpolationStart InterpolationContinue InterpolationEnd": highlight.tags.meta,
	  ": \"...\"": highlight.tags.punctuation,
	  "PseudoOp #": highlight.tags.derefOperator,
	  "; ,": highlight.tags.separator,
	  "( )": highlight.tags.paren,
	  "[ ]": highlight.tags.squareBracket,
	  "{ }": highlight.tags.brace
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,not:62, only:62, using:173, with:183, without:183, hide:197, show:197, from:220, to:222, if:235, through:241, in:247};
	const spec_callee = {__proto__:null,url:80, "url-prefix":80, domain:80, regexp:80, lang:94, "nth-child":94, "nth-last-child":94, "nth-of-type":94, "nth-last-of-type":94, dir:94, "host-context":94, selector:166};
	const spec_AtKeyword = {__proto__:null,"@import":150, "@include":170, "@mixin":176, "@function":176, "@use":180, "@extend":186, "@at-root":190, "@forward":194, "@media":200, "@charset":204, "@namespace":208, "@keyframes":214, "@supports":226, "@if":230, "@else":232, "@for":238, "@each":244, "@while":250, "@debug":254, "@warn":254, "@error":254, "@return":254};
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: "I^Q`Q+tOOO#cQ+tOOP#jOpOOO#oQ(pO'#CjOOQ#U'#Ci'#CiO%[Q)QO'#FrO%oQ.jO'#CnO&gQ#dO'#DWO'^Q(pO'#CgO'eQ)OO'#DYO'pQ#dO'#DaO'uQ#dO'#DeOOQ#U'#Fr'#FrO'zQ(pO'#FrO(RQ(nO'#DpO%oQ.jO'#DwO%oQ.jO'#ESO%oQ.jO'#EVO%oQ.jO'#EXO(WQ)OO'#E[O(uQ)OO'#E^O%oQ.jO'#E`O)SQ)OO'#EcO%oQ.jO'#EeO)nQ)OO'#EgO)yQ#dO'#EjO*OQ)OO'#EpO*dQ)OO'#FQOOQ&Z'#Fq'#FqOOQ&Y'#FT'#FTO*nQ(nO'#FTQ`Q+tOOO%oQ.jO'#ErO*yQ(nO'#EvO+OQ)OO'#EyO%oQ.jO'#E|O%oQ.jO'#FOOOQ&Z'#F['#F[O+WQ+uO'#FyO+eQ(oO'#FyQOQ#SOOP+yO#SO'#FpPOOO)CAe)CAeOOQ#U'#Cm'#CmOOQ#U,59W,59WOOQ#i'#Cp'#CpO%oQ.jO'#CsO,XQ.wO'#CuO.qQ.^O,59YO%oQ.jO'#CzOOQ#S'#DO'#DOO/SQ(nO'#DTOOQ#i'#Fs'#FsO/XQ(nO'#C}OOQ#U'#DX'#DXOOQ#U,59r,59rO&gQ#dO,59rO/^Q)OO,59tO'pQ#dO,59{O'uQ#dO,5:PO(WQ)OO,5:TO(WQ)OO,5:VO(WQ)OO,5:WO(WQ)OO'#FZO/iQ(nO,59RO/tQ+tO'#DnO/{Q#TO'#DnOOQ&Z,59R,59ROOQ#U'#D['#D[OOQ#S'#D_'#D_OOQ#U,59t,59tO0QQ(nO,59tO0VQ(nO,59tOOQ#U'#Dc'#DcOOQ#U,59{,59{OOQ#S'#Dg'#DgO0[Q9`O,5:PO0dQ.jO,5:[O0nQ.jO,5:cO1gQ.jO,5:nO1tQ.YO,5:qO2VQ.jO,5:sOOQ#U'#Cj'#CjO2{Q(pO,5:vO3YQ(pO,5:xOOQ&Z,5:x,5:xO3aQ)OO,5:xO3fQ.jO,5:zOOQ#S'#Dz'#DzO4RQ)OO'#EPO4YQ(nO'#F{O*OQ)OO'#EOO4nQ(nO'#EQOOQ#S'#F|'#F|O/lQ(nO,5:}O2YQ.YO,5;POOQ#d'#Ei'#EiO*nQ(nO,5;RO4sQ)OO,5;ROOQ#S'#El'#ElO4{Q(nO,5;UO5QQ(nO,5;[O5]Q(nO,5;lOOQ&Z'#Fz'#FzOOQ&Y,5;o,5;oOOQ&Y-E9R-E9RO1tQ.YO,5;^O5kQ)OO,5;bO5pQ)OO'#GOO5xQ)OO,5;eO1tQ.YO,5;hO2YQ.YO,5;jOOQ&Z-E9Y-E9YO5}Q(oO,5<eO6cQ+uO'#F^O5}Q(oO,5<ePOO#S'#FS'#FSP6yO#SO,5<[POOO,5<[,5<[O7XQ.YO,59_OOQ#i,59a,59aO%oQ.jO,59cO%oQ.jO,59hO%oQ.jO'#FWO7gQ#WO1G.tOOQ#k1G.t1G.tO7oQ.oO,59fO:UQ! lO,59oO;RQ.jO'#DPOOQ#i,59i,59iOOQ#U1G/^1G/^OOQ#U1G/`1G/`O0QQ(nO1G/`O0VQ(nO1G/`OOQ#U1G/g1G/gO;]Q9`O1G/kO;vQ(pO1G/oO<jQ(pO1G/qO=^Q(pO1G/rO>QQ(pO,5;uOOQ#S-E9X-E9XOOQ&Z1G.m1G.mO>_Q(nO,5:YO>dQ+uO,5:YO>kQ)OO'#D`O>rQ.jO'#D^OOQ#U1G/k1G/kO%oQ.jO1G/kO>yQ.kO1G/vOOQ#T1G/v1G/vO*nQ(nO1G/}O?vQ+uO'#FzOOQ&Z1G0Y1G0YO/XQ(nO1G0YOOQ&Z1G0]1G0]OOQ&Z1G0_1G0_O/XQ(nO1G0_OOQ&Z1G0b1G0bOOQ&Z1G0d1G0dOB`Q)OO1G0dOBeQ(nO1G0dOBjQ)OO1G0fOOQ&Z1G0f1G0fOBxQ.jO'#F`OCYQ(nO'#DzOCeQ(nO,5:gOCjQ(nO,5:kO*OQ)OO,5:iOCrQ)OO'#F_ODVQ(nO,5<gODhQ(nO,5:jO(WQ)OO,5:lOOQ&Z1G0i1G0iOOQ&Z1G0k1G0kOOQ&Z1G0m1G0mO*nQ(nO1G0mOEPQ)OO'#EmOOQ&Z1G0p1G0pOOQ&Z1G0v1G0vOOQ&Z1G1W1G1WOE_Q+uO1G0xO%oQ.jO1G0|OGwQ)OO'#FdOHSQ)OO,5<jO%oQ.jO1G1POOQ&Z1G1S1G1SOOQ&Z1G1U1G1UOH[Q(oO1G2POHpQ+uO,5;xOOQ#T,5;x,5;xOOQ#T-E9[-E9[POO#S-E9Q-E9QPOOO1G1v1G1vOOQ#i1G.y1G.yOIWQ.oO1G.}OOQ#i1G/S1G/SOKmQ.^O,5;rOOQ#W-E9U-E9UOOQ#k7+$`7+$`OLOQ(nO1G/ZOLTQ.jO'#FUOM_Q.jO'#FvONvQ.jO'#FsON}Q(nO,59kOOQ#U7+$z7+$zOOQ#U7+%V7+%VO%oQ.jO7+%VOOQ&Z1G/t1G/tO! SQ#TO1G/tO! XQ(pO'#FxO! cQ(nO,59zO! hQ.jO'#FwO! rQ(nO,59xO! wQ.YO7+%VO!!VQ.kO'#F]O%oQ.jO'#F]O!#vQ.kO7+%bOOQ#T7+%b7+%bOOQ&Z7+%i7+%iO5]Q(nO7+%tO*nQ(nO7+%yO!$jQ(nO7+&OO*OQ)OO7+&OOOQ#d-E9^-E9^OOQ&Z7+&Q7+&QO!$oQ.jO'#F}OOQ#d,5;z,5;zO%oQ.jO1G0ROOQ#S1G0V1G0VOOQ#S1G0T1G0TO!%ZQ(nO,5;yOOQ#S-E9]-E9]O!%oQ(pO1G0WOOQ&Z7+&X7+&XO!%vQ(vO'#CuO/lQ(nO'#FbO!&RQ)OO,5;XOOQ&Z,5;X,5;XO!&aQ+uO7+&dO!(yQ)OO7+&dO!)UQ.jO7+&hOOQ#d,5<O,5<OOOQ#d-E9b-E9bO1tQ.YO7+&kOOQ#T1G1d1G1dOOQ#i7+$u7+$uOOQ#d-E9S-E9SO!)gQ.jO'#FVO!)tQ(nO,5<bO!)tQ(nO,5<bO%oQ.jO,5<bOOQ#i1G/V1G/VO!)|Q.YO<<HqOOQ&Z7+%`7+%`O!*[Q)OO'#FYO!*fQ(nO,5<dOOQ#U1G/f1G/fO!*nQ.jO'#FXO!*xQ(nO,5<cOOQ#U1G/d1G/dOOQ#U<<Hq<<HqO!+QQ.kO,5;wOOQ#e-E9Z-E9ZOOQ#T<<H|<<H|OOQ&Z<<I`<<I`OOQ&Z<<Ie<<IeO*OQ)OO<<IjO!,qQ(nO<<IjO!,yQ.jO'#FaO!-^Q)OO,5<iO!-oQ.jO7+%mOOQ#S7+%r7+%rOOQ#d,5;|,5;|OOQ#d-E9`-E9`OOQ&Z1G0s1G0sOOQ&Z-E9a-E9aO!(yQ)OO<<JOO%oQ.jO,5;}OOQ&Z<<JO<<JOO%oQ.jO<<JSOOQ&Z<<JV<<JVO!-vQ.jO,5;qO!.TQ.jO,5;qOOQ#S-E9T-E9TO!.[Q(nO1G1|O!.dQ.jO1G1|OOQ#UAN>]AN>]O!.nQ(pO,5;tOOQ#S-E9W-E9WO!.xQ.jO,5;sOOQ#S-E9V-E9VO!/SQ(nOAN?UO/lQ(nOAN?UO!/[Q.jO,5;{OOQ#d-E9_-E9_OOQ#S<<IX<<IXP!/vQ)OO'#FcOOQ&ZAN?jAN?jO1tQ.YO1G1iO1tQ.YOAN?nOOQ#S1G1]1G1]O%oQ.jO1G1]O!/{Q(nO7+'hO/lQ(nOG24pOOQ&ZG24pG24pOOQ&Z7+'T7+'TOOQ&ZG25YG25YO!0TQ.jO7+&wOOQ&ZLD*[LD*[",
	  stateData: "!0e~O$bOSVOSUOS$`QQ~OS^OTUOWaOX`O[[O_TOc^OtXO}XO!UYO!YZO!lkO!m_O!w`O!zaO!|bO#PcO#RdO#TeO#WfO#YgO#[hO#_iO#ejO#gpO#kqO#nrO#qsO#stO$^RO$iVO~O$X$mP~P`O$`yO~Ot^Xt!eXv^X}^X!U^X!Y^X!^^X!a^X!c^X$[^X$_^X$i^X~Ot$fXv$fX}$fX!U$fX!Y$fX!^$fX!a$fX!c$fX$[$fX$_$fX$i$fX~O$^{O!i$fX$a$fXf$fXe$fX~P$gOS!UOTUO_!UOc!UOf!OOh!UOj!UOo!ROx!TO$]!SO$^}O$h!PO~O$^!WO~Ot!ZO}!ZO!U![O!Y!]O!^!^O!a!`O!c!cO$[!_O$_!dO$i!YO~Ov!aO~P&lO!P!jO$]!gO$^!fO~O$^!kO~O$^!mO~Ot!oO~P$gOt!oO~OTUO[[O_TOtXO}XO!UYO!YZO$^!tO$iVO~Of!xO!c!cO$_!dO~P(WOTUOc#POf!{Oo!}O!u#OO$^!zO!c$oP$_$oP~Oj#TOx!TO$^#SO~O$^#VO~OTUOc#POf!{Oo!}O!u#OO$^!zO~O!i$oP$a$oP~P)SO!i#ZO$_#ZO$a#ZO~Oc#_O~Oc#`O#o$rP~O$X$mX!j$mX$Z$mX~P`O!i#ZO$_#ZO$a#ZO$X$mX!j$mX$Z$mX~OU#hOV#hO$_#jO$b#hO~OR#lOPiXQiXliXmiX$iiXTiXciXfiXoiX!iiX!uiX$^iX$_iX$aiX!ciX!xiX!}iX#UiXeiXSiX_iXhiXjiXviXxiX!fiX!giX!hiX$]iX$hiX$XiXuiX!WiX#ciX#liX!jiX$ZiX~OP#qOQ#oOl#mOm#mO$i#nO~Of#sO~Of#tO~O!P#yO$]!gO$^!fO~Ov!aO!c!cO$_!dO~O!j$mP~P`O$Y$TO~Of$UO~Of$VO~O!W$WO![$XO~O!c!cO$_!dO~P%oOl#mOm#mO$i#nO!i$oP$_$oP$a$oP~P*OOl#mOm#mO!i#ZO$a#ZO$i#nO~O!c!cO!x$_O$_$]O~P1UOl#mOm#mO!c!cO$_!dO$i#nO~O!}$bO$_#ZO~P1UOt!ZO}!ZO!U![O!Y!]O!^!^O!a!`O$[!_O$i!YO~O!i#ZO$_#ZO$a#ZO~P2aOf$eO~P&lO!}$fO~O#U$iO$_#ZO~P1UOTUOc#POf!{Oo!}O!u#OO~O$^$jO~P3pOm$mOv$nO!c$oX$_$oX!i$oX$a$oX~Of$qO~Oj$uOx!TO~O!c$vO~Om$mO!c!cO$_!dO~O!c!cO!i#ZO$_$]O$a#ZO~O#b${O~Ov$|O#o$rX~O#o%OO~O!i#ZO$_#ZO$a#ZO$X$ma!j$ma$Z$ma~O!i$QX$X$QX$_$QX$a$QX!j$QX$Z$QX~P`OU#hOV#hO$_%WO$b#hO~Oe%XOl#mOm#mO$i#nO~OP%^OQ#oO~Ol#mOm#mO$i#nOPnaQnaTnacnafnaona!ina!una$^na$_na$ana!cna!xna!}na#UnaenaSna_nahnajnavnaxna!fna!gna!hna$]na$hna$Xnauna!Wna#cna#lna!jna$Zna~Oj%_Oy%_O~OS!UOTUO_!UOf!OOh!UOj!UOo!ROx!TO$]!SO$^}O$h!PO~Oc%bOe$jP~P:^O!W%eO![%fO~Ot!ZO}!ZO!U![O!Y!]O$i!YO~Ov!]i!^!]i!a!]i!c!]i$[!]i$_!]i!i!]i$a!]if!]ie!]i~P;eOv!_i!^!_i!a!_i!c!_i$[!_i$_!_i!i!_i$a!_if!_ie!_i~P;eOv!`i!^!`i!a!`i!c!`i$[!`i$_!`i!i!`i$a!`if!`ie!`i~P;eOv#}a!c#}a$_#}a~P2aO!j%gO~O$Z$mP~P`Oe$lP~P(WOe$kP~P%oOl#mOm#mOv%oO!f%qO!g%qO!h%qO$i#nO!i!di$_!di$a!di$X!di!j!di$Z!di~P%oO$Y$TOS$nXT$nXW$nXX$nX[$nX_$nXc$nXt$nX}$nX!U$nX!Y$nX!l$nX!m$nX!w$nX!z$nX!|$nX#P$nX#R$nX#T$nX#W$nX#Y$nX#[$nX#_$nX#e$nX#g$nX#k$nX#n$nX#q$nX#s$nX$X$nX$^$nX$i$nX!j$nX!i$nX$_$nX$a$nX$Z$nX~O!}%uO~Ot%vO~O!i#ZO#U$iO$_#ZO$a#ZO~O!i$qP#U$qP$_$qP$a$qP~P%oOe!nXm!nXt!pX~Ot%{O~Oe%|Om$mO~Ov$RX!c$RX$_$RX!i$RX$a$RX~P*OOv$nO!c$oa$_$oa!i$oa$a$oa~Om$mOv!ra!c!ra$_!ra!i!ra$a!rae!ra~O!j&VO#b&TO#c&TO$h&SO~O#h&XOS#fiT#fiW#fiX#fi[#fi_#fic#fit#fi}#fi!U#fi!Y#fi!l#fi!m#fi!w#fi!z#fi!|#fi#P#fi#R#fi#T#fi#W#fi#Y#fi#[#fi#_#fi#e#fi#g#fi#k#fi#n#fi#q#fi#s#fi$X#fi$^#fi$i#fi!j#fi!i#fi$_#fi$a#fi$Z#fi~Oc&ZOv$WX#o$WX~Ov$|O#o$ra~O!i#ZO$_#ZO$a#ZO$X$mi!j$mi$Z$mi~O!i$Qa$X$Qa$_$Qa$a$Qa!j$Qa$Z$Qa~P`O$i#nOPkiQkilkimkiTkickifkioki!iki!uki$^ki$_ki$aki!cki!xki!}ki#UkiekiSki_kihkijkivkixki!fki!gki!hki$]ki$hki$Xkiuki!Wki#cki#lki!jki$Zki~Ol#mOm#mO$i#nOP#zaQ#za~Oe&_O~Ol#mOm#mO$i#nOS#xXT#xX_#xXc#xXe#xXf#xXh#xXj#xXo#xXu#xXv#xXx#xX$]#xX$^#xX$h#xX~Ou&cOv&aOe$jX~P%oOS$gXT$gX_$gXc$gXe$gXf$gXh$gXj$gXl$gXm$gXo$gXu$gXv$gXx$gX$]$gX$^$gX$h$gX$i$gX~Ot&dO~PMlOe&eO~O$Z&gO~Ov&hOe$lX~P2aOe&jO~Ov&kOe$kX~P%oOe&mO~Ol#mOm#mO!W&nO$i#nO~Ol#mOm#mO$i#nOS$PXT$PX_$PXc$PXf$PXh$PXj$PXo$PXv$PXx$PX!f$PX!g$PX!h$PX!i$PX$]$PX$^$PX$_$PX$a$PX$h$PX$X$PX!j$PX$Z$PX~Ov%oO!f&qO!g&qO!h&qO!i!dq$_!dq$a!dq$X!dq!j!dq$Z!dq~P%oOt&tO~Ol#mOm#mOv&vO$i#nO!i$qX#U$qX$_$qX$a$qX~Om$mOv$Ra!c$Ra$_$Ra!i$Ra$a$Ra~Oe&yO~P2aOR#lO!ciX$_iX~O!j&|O#b&TO#c&TO$h&SO~O#h'OOS#fqT#fqW#fqX#fq[#fq_#fqc#fqt#fq}#fq!U#fq!Y#fq!l#fq!m#fq!w#fq!z#fq!|#fq#P#fq#R#fq#T#fq#W#fq#Y#fq#[#fq#_#fq#e#fq#g#fq#k#fq#n#fq#q#fq#s#fq$X#fq$^#fq$i#fq!j#fq!i#fq$_#fq$a#fq$Z#fq~O!c!cO#i'PO$_!dO~Ol#mOm#mO#c'RO#l'RO$i#nO~Oc'UOe#yXv#yX~P:^Ov&aOe$ja~Ol#mOm#mO!W'YO$i#nO~Oe#|Xv#|X~P(WOv&hOe$la~Oe#{Xv#{X~P%oOv&kOe$ka~Ol#mOm#mO$i#nOS$PaT$Pa_$Pac$Paf$Pah$Paj$Pao$Pav$Pax$Pa!f$Pa!g$Pa!h$Pa!i$Pa$]$Pa$^$Pa$_$Pa$a$Pa$h$Pa$X$Pa!j$Pa$Z$Pa~Oe'`Om$mO~Ov$TX!i$TX#U$TX$_$TX$a$TX~P%oOv&vO!i$qa#U$qa$_$qa$a$qa~Oe'cO~P%oOu'hOe#yav#ya~P%oOt'iO~PMlOv&aOe$ji~Ov&aOe$ji~P%oOe#|av#|a~P2aOe#{av#{a~P%oOe'kOm$mO~Ol#mOm#mO$i#nOv$Ta!i$Ta#U$Ta$_$Ta$a$Ta~O#i'PO~Ov&aOe$jq~Oe#yqv#yq~P%oO$h$il!al~",
	  goto: "7g$sPPPPPPPPPPP$tP%O%cP%O%v%yP'iPP'iP(fP'iPP'iP'i'i)g*dPPP*mPP%O+p%OP+vP+|,S,Y%OP,`P%OP,fP%OP%O%OP,lP-}.aPPPPP$tPP']'].k']']']']P$tPP$tP$tPP$tP$tP$tPP$tP$tP$tP.n$tP.q.tPP$tP$tPPP$tPP$tPP$tP$tP$tP.w.}/T/s0R0X0_0e0k0w0}1X1_1e1k1q1wPPPPPPPPPPP1}2Q2^3TPP5W5Z5^5a5j6l6u7a7dalOPov!c#f$T%Ss[OPcdov!^!_!`!a!c#f$T$U$q%S&hsSOPcdov!^!_!`!a!c#f$T$U$q%S&hR|Tb[cd!^!_!`!a$U$q&h`]OPov!c#f$T%S!t!UU_`abegpst!O!R!o#m#n#o#t$V$X$Y$i${%O%a%f%k%o%p%{&a&d&k&v&x'P'R'T'X']'i'oe#Pfjk!p!{!}$m$n%v&t!u!UU_`abegpst!O!R!o#m#n#o#t$V$X$Y$i${%O%a%f%k%o%p%{&a&d&k&v&x'P'R'T'X']'i'o!t!UU_`abegpst!O!R!o#m#n#o#t$V$X$Y$i${%O%a%f%k%o%p%{&a&d&k&v&x'P'R'T'X']'i'oT&T$v&U!u!VU_`abegpst!O!R!o#m#n#o#t$V$X$Y$i${%O%a%f%k%o%p%{&a&d&k&v&x'P'R'T'X']'i'oQ#u!VQ%s$_R%t$b!t!UU_`abegpst!O!R!o#m#n#o#t$V$X$Y$i${%O%a%f%k%o%p%{&a&d&k&v&x'P'R'T'X']'i'oQ#ThR$u#UQ!XVR#v!YQ!hXR#w!ZQ#w!jR%d#yQ!iXR#x!ZQ#w!iR%d#xQ!lYR#z![Q!nZR#{!]Q!eWQ!wdQ$R!bQ$Z!oQ$^!qQ$`!rQ$d!vQ$r#QQ$x#XQ$y#YQ$z#^Q%P#bQ&r%sQ&z&TQ'Q&XQ'S&]Q'e'OQ'l'`Q'm'fQ'n'gR'p'kSnOoUwP!c$TQ#evQ%T#fR&^%Sa^OPov!c#f$T%SR$k!{R#UhR#WiR$w#WQ#iyR%V#iQoOR#]oQ%a#tQ%k$V^&`%a%k&x'T'X']'oQ&x%{Q'T&aQ'X&dQ']&kR'o'iQ&b%aU'V&b'W'jQ'W&cR'j'XQ#p!QR%]#pQ&l%kR'^&lQ&i%iR'[&iQ!bWR$Q!bUvP!c$TS#dv%SR%S#fQ%p$YR&p%pQ#gwQ%R#eT%U#g%RQ$o!|R&P$oQ$g!yR%w$gQ&w%yR'b&wQ&U$vR&{&UQ&W$zR&}&WQ$}#`R&[$}RzQSmOo]uPv!c#f$T%S`WOPov!c#f$T%SQ!ucQ!vdQ#|!^Q#}!_Q$O!`Q$P!aQ%i$UQ&Q$qR'Z&hQ!QUQ!p_Q!q`Q!raQ!sbQ!yeQ#RgQ#^pQ#bsQ#ctQ#k!OQ#r!RQ$Y!oQ%Y#mQ%Z#nQ%[#ol%`#t$V%a%k%{&a&d&k&x'T'X']'i'oQ%m$XS%n$Y%pQ%y$iQ&Y${Q&]%OQ&f%fQ&o%oQ'a&vQ'f'PR'g'RR%c#tR%l$VR%j$UQxPQ$S!cR%h$TQ#[nW#fw#e#g%RQ$^!qQ$a!sQ$c!uQ$h!yQ$s#RQ$t#TQ$y#YQ%Q#cQ%r$[Q%x$gQ&R$uQ&r%sR&s%tQ#QfQ#YkR$[!pU!|fk!pQ#XjQ$l!{Q$p!}Q%}$mQ&O$nQ&u%vR'_&tR%z$iR#ar",
	  nodeNames: "⚠ InterpolationEnd InterpolationContinue Unit VariableName InterpolationStart LineComment Comment IndentedMixin IndentedInclude StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector SuffixedSelector Suffix Interpolation SassVariableName ValueName ) ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp LogicOp UnaryExpression LogicOp NamespacedValue CallExpression Callee ArgList : ... , CallLiteral CallTag ParenthesizedContent ClassSelector ClassName PseudoClassSelector :: PseudoClassName PseudoClassName ArgList PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp Block { Declaration PropertyName Important Global Default ; } ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector IncludeStatement include Keyword MixinStatement mixin UseStatement use Keyword ExtendStatement extend RootStatement at-root ForwardStatement forward Keyword MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList Keyword Keyword SupportsStatement supports IfStatement ControlKeyword ControlKeyword Keyword ForStatement ControlKeyword Keyword EachStatement ControlKeyword Keyword WhileStatement ControlKeyword OutputStatement ControlKeyword AtRule Styles",
	  maxTerm: 172,
	  context: trackIndent,
	  nodeProps: [
		["openedBy", 1,"InterpolationStart",5,"InterpolationEnd",21,"(",72,"{"],
		["closedBy", 22,")",65,"}"]
	  ],
	  propSources: [cssHighlighting],
	  skippedNodes: [0,6,7,130],
	  repeatNodeCount: 17,
	  tokenData: "!!]~RyOq#rqr$jrs0jst2^tu8{uv;hvw;ywx<[xy=yyz>[z{>a{|>z|}Cm}!ODO!O!PDm!P!Q;h!Q![FW![!]GR!]!^G}!^!_H`!_!`Hw!`!aI`!a!b#r!b!cJa!c!}#r!}#OKy#O#P#r#P#QL[#Q#RLm#R#T#r#T#UMS#U#c#r#c#dNe#d#o#r#o#pNz#p#qLm#q#r! ]#r#s! n#s;'S#r;'S;=`!!V<%lO#rW#uSOy$Rz;'S$R;'S;=`$d<%lO$RW$WSyWOy$Rz;'S$R;'S;=`$d<%lO$RW$gP;=`<%l$RY$m[Oy$Rz!_$R!_!`%c!`#W$R#W#X%v#X#Z$R#Z#[)Z#[#]$R#]#^,V#^;'S$R;'S;=`$d<%lO$RY%jSyWlQOy$Rz;'S$R;'S;=`$d<%lO$RY%{UyWOy$Rz#X$R#X#Y&_#Y;'S$R;'S;=`$d<%lO$RY&dUyWOy$Rz#Y$R#Y#Z&v#Z;'S$R;'S;=`$d<%lO$RY&{UyWOy$Rz#T$R#T#U'_#U;'S$R;'S;=`$d<%lO$RY'dUyWOy$Rz#i$R#i#j'v#j;'S$R;'S;=`$d<%lO$RY'{UyWOy$Rz#`$R#`#a(_#a;'S$R;'S;=`$d<%lO$RY(dUyWOy$Rz#h$R#h#i(v#i;'S$R;'S;=`$d<%lO$RY(}S!hQyWOy$Rz;'S$R;'S;=`$d<%lO$RY)`UyWOy$Rz#`$R#`#a)r#a;'S$R;'S;=`$d<%lO$RY)wUyWOy$Rz#c$R#c#d*Z#d;'S$R;'S;=`$d<%lO$RY*`UyWOy$Rz#U$R#U#V*r#V;'S$R;'S;=`$d<%lO$RY*wUyWOy$Rz#T$R#T#U+Z#U;'S$R;'S;=`$d<%lO$RY+`UyWOy$Rz#`$R#`#a+r#a;'S$R;'S;=`$d<%lO$RY+yS!gQyWOy$Rz;'S$R;'S;=`$d<%lO$RY,[UyWOy$Rz#a$R#a#b,n#b;'S$R;'S;=`$d<%lO$RY,sUyWOy$Rz#d$R#d#e-V#e;'S$R;'S;=`$d<%lO$RY-[UyWOy$Rz#c$R#c#d-n#d;'S$R;'S;=`$d<%lO$RY-sUyWOy$Rz#f$R#f#g.V#g;'S$R;'S;=`$d<%lO$RY.[UyWOy$Rz#h$R#h#i.n#i;'S$R;'S;=`$d<%lO$RY.sUyWOy$Rz#T$R#T#U/V#U;'S$R;'S;=`$d<%lO$RY/[UyWOy$Rz#b$R#b#c/n#c;'S$R;'S;=`$d<%lO$RY/sUyWOy$Rz#h$R#h#i0V#i;'S$R;'S;=`$d<%lO$RY0^S!fQyWOy$Rz;'S$R;'S;=`$d<%lO$R~0mWOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W<%lO0j~1[Oj~~1_RO;'S0j;'S;=`1h;=`O0j~1kXOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W;=`<%l0j<%lO0j~2ZP;=`<%l0jZ2cY!UPOy$Rz!Q$R!Q![3R![!c$R!c!i3R!i#T$R#T#Z3R#Z;'S$R;'S;=`$d<%lO$RY3WYyWOy$Rz!Q$R!Q![3v![!c$R!c!i3v!i#T$R#T#Z3v#Z;'S$R;'S;=`$d<%lO$RY3{YyWOy$Rz!Q$R!Q![4k![!c$R!c!i4k!i#T$R#T#Z4k#Z;'S$R;'S;=`$d<%lO$RY4rYhQyWOy$Rz!Q$R!Q![5b![!c$R!c!i5b!i#T$R#T#Z5b#Z;'S$R;'S;=`$d<%lO$RY5iYhQyWOy$Rz!Q$R!Q![6X![!c$R!c!i6X!i#T$R#T#Z6X#Z;'S$R;'S;=`$d<%lO$RY6^YyWOy$Rz!Q$R!Q![6|![!c$R!c!i6|!i#T$R#T#Z6|#Z;'S$R;'S;=`$d<%lO$RY7TYhQyWOy$Rz!Q$R!Q![7s![!c$R!c!i7s!i#T$R#T#Z7s#Z;'S$R;'S;=`$d<%lO$RY7xYyWOy$Rz!Q$R!Q![8h![!c$R!c!i8h!i#T$R#T#Z8h#Z;'S$R;'S;=`$d<%lO$RY8oShQyWOy$Rz;'S$R;'S;=`$d<%lO$R_9O`Oy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!_$R!_!`;T!`!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$RZ:X^yWcROy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$R[;[S![SyWOy$Rz;'S$R;'S;=`$d<%lO$RY;mSlQOy$Rz;'S$R;'S;=`$d<%lO$RZ<OS_ROy$Rz;'S$R;'S;=`$d<%lO$R~<_WOY<[Zw<[wx1Vx#O<[#O#P<w#P;'S<[;'S;=`=s<%lO<[~<zRO;'S<[;'S;=`=T;=`O<[~=WXOY<[Zw<[wx1Vx#O<[#O#P<w#P;'S<[;'S;=`=s;=`<%l<[<%lO<[~=vP;=`<%l<[Z>OSfROy$Rz;'S$R;'S;=`$d<%lO$R~>aOe~_>hU[PlQOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZ?RWlQ!aPOy$Rz!O$R!O!P?k!P!Q$R!Q![Bp![;'S$R;'S;=`$d<%lO$RZ?pUyWOy$Rz!Q$R!Q![@S![;'S$R;'S;=`$d<%lO$RZ@ZYyW$hROy$Rz!Q$R!Q![@S![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZAOYyWOy$Rz{$R{|An|}$R}!OAn!O!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZAsUyWOy$Rz!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZB^UyW$hROy$Rz!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZBw[yW$hROy$Rz!O$R!O!P@S!P!Q$R!Q![Bp![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZCrSvROy$Rz;'S$R;'S;=`$d<%lO$RZDTWlQOy$Rz!O$R!O!P?k!P!Q$R!Q![Bp![;'S$R;'S;=`$d<%lO$RZDrW$iROy$Rz!O$R!O!PE[!P!Q$R!Q![@S![;'S$R;'S;=`$d<%lO$RYEaUyWOy$Rz!O$R!O!PEs!P;'S$R;'S;=`$d<%lO$RYEzSuQyWOy$Rz;'S$R;'S;=`$d<%lO$RZF][$hROy$Rz!O$R!O!P@S!P!Q$R!Q![Bp![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZGWUtROy$Rz![$R![!]Gj!];'S$R;'S;=`$d<%lO$RXGqS}PyWOy$Rz;'S$R;'S;=`$d<%lO$RZHSS!iROy$Rz;'S$R;'S;=`$d<%lO$RYHeUlQOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$R^H|U![SOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$RZIgV!^PlQOy$Rz!_$R!_!`%c!`!aI|!a;'S$R;'S;=`$d<%lO$RXJTS!^PyWOy$Rz;'S$R;'S;=`$d<%lO$RXJdWOy$Rz!c$R!c!}J|!}#T$R#T#oJ|#o;'S$R;'S;=`$d<%lO$RXKT[!lPyWOy$Rz}$R}!OJ|!O!Q$R!Q![J|![!c$R!c!}J|!}#T$R#T#oJ|#o;'S$R;'S;=`$d<%lO$RXLOS!YPOy$Rz;'S$R;'S;=`$d<%lO$R^LaS!WUOy$Rz;'S$R;'S;=`$d<%lO$R[LpUOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZMVUOy$Rz#b$R#b#cMi#c;'S$R;'S;=`$d<%lO$RZMnUyWOy$Rz#W$R#W#XNQ#X;'S$R;'S;=`$d<%lO$RZNXSmRyWOy$Rz;'S$R;'S;=`$d<%lO$RZNhUOy$Rz#f$R#f#gNQ#g;'S$R;'S;=`$d<%lO$RZ! PS!cROy$Rz;'S$R;'S;=`$d<%lO$RZ! bS!jROy$Rz;'S$R;'S;=`$d<%lO$R]! sU!aPOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RW!!YP;=`<%l#r",
	  tokenizers: [indentation, descendant, interpolationEnd, unitToken, identifiers, spaces, comments, indentedMixins, 0, 1, 2, 3],
	  topRules: {"StyleSheet":[0,10],"Styles":[1,129]},
	  dialects: {indented: 0},
	  specialized: [{term: 152, get: value => spec_identifier[value] || -1},{term: 151, get: value => spec_callee[value] || -1},{term: 74, get: value => spec_AtKeyword[value] || -1}],
	  tokenPrec: 2821
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/@lezer/xml/dist/index.cjs":
	/*!********************************************************!*\
	  !*** ../editor/node_modules/@lezer/xml/dist/index.cjs ***!
	  \********************************************************/
	/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var lr = __webpack_require__(/*! @lezer/lr */ "../editor/node_modules/@lezer/lr/dist/index.cjs");
	var highlight = __webpack_require__(/*! @lezer/highlight */ "../editor/node_modules/@lezer/highlight/dist/index.cjs");
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const StartTag = 1,
	  StartCloseTag = 2,
	  MissingCloseTag = 3,
	  mismatchedStartCloseTag = 4,
	  incompleteStartCloseTag = 5,
	  commentContent$1 = 35,
	  piContent$1 = 36,
	  cdataContent$1 = 37,
	  Element = 11,
	  OpenTag = 13;
	
	/* Hand-written tokenizer for XML tag matching. */
	
	function nameChar(ch) {
	  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
	}
	
	function isSpace(ch) {
	  return ch == 9 || ch == 10 || ch == 13 || ch == 32
	}
	
	let cachedName = null, cachedInput = null, cachedPos = 0;
	function tagNameAfter(input, offset) {
	  let pos = input.pos + offset;
	  if (cachedInput == input && cachedPos == pos) return cachedName
	  while (isSpace(input.peek(offset))) offset++;
	  let name = "";
	  for (;;) {
		let next = input.peek(offset);
		if (!nameChar(next)) break
		name += String.fromCharCode(next);
		offset++;
	  }
	  cachedInput = input; cachedPos = pos;
	  return cachedName = name || null
	}
	
	function ElementContext(name, parent) {
	  this.name = name;
	  this.parent = parent;
	  this.hash = parent ? parent.hash : 0;
	  for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
	}
	
	const elementContext = new lr.ContextTracker({
	  start: null,
	  shift(context, term, stack, input) {
		return term == StartTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
	  },
	  reduce(context, term) {
		return term == Element && context ? context.parent : context
	  },
	  reuse(context, node, _stack, input) {
		let type = node.type.id;
		return type == StartTag || type == OpenTag
		  ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
	  },
	  hash(context) { return context ? context.hash : 0 },
	  strict: false
	});
	
	const startTag = new lr.ExternalTokenizer((input, stack) => {
	  if (input.next != 60 /* '<' */) return
	  input.advance();
	  if (input.next == 47 /* '/' */) {
		input.advance();
		let name = tagNameAfter(input, 0);
		if (!name) return input.acceptToken(incompleteStartCloseTag)
		if (stack.context && name == stack.context.name) return input.acceptToken(StartCloseTag)
		for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return input.acceptToken(MissingCloseTag, -2)
		input.acceptToken(mismatchedStartCloseTag);
	  } else if (input.next != 33 /* '!' */ && input.next != 63 /* '?' */) {
		return input.acceptToken(StartTag)
	  }
	}, {contextual: true});
	
	function scanTo(type, end) {
	  return new lr.ExternalTokenizer(input => {
		let len = 0, first = end.charCodeAt(0);
		scan: for (;; input.advance(), len++) {
		  if (input.next < 0) break
		  if (input.next == first) {
			for (let i = 1; i < end.length; i++)
			  if (input.peek(i) != end.charCodeAt(i)) continue scan
			break
		  }
		}
		if (len) input.acceptToken(type);
	  })
	}
	
	const commentContent = scanTo(commentContent$1, "-->");
	const piContent = scanTo(piContent$1, "?>");
	const cdataContent = scanTo(cdataContent$1, "]]>");
	
	const xmlHighlighting = highlight.styleTags({
	  Text: highlight.tags.content,
	  "StartTag StartCloseTag EndTag SelfCloseEndTag": highlight.tags.angleBracket,
	  TagName: highlight.tags.tagName,
	  "MismatchedCloseTag/Tagname": [highlight.tags.tagName, highlight.tags.invalid],
	  AttributeName: highlight.tags.attributeName,
	  AttributeValue: highlight.tags.attributeValue,
	  Is: highlight.tags.definitionOperator,
	  "EntityReference CharacterReference": highlight.tags.character,
	  Comment: highlight.tags.blockComment,
	  ProcessingInst: highlight.tags.processingInstruction,
	  DoctypeDecl: highlight.tags.documentMeta,
	  Cdata: highlight.tags.special(highlight.tags.string)
	});
	
	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const parser = lr.LRParser.deserialize({
	  version: 14,
	  states: ",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t",
	  stateData: ")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O",
	  goto: "%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb",
	  nodeNames: "⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
	  maxTerm: 47,
	  context: elementContext,
	  nodeProps: [
		["closedBy", 1,"SelfCloseEndTag EndTag",13,"CloseTag MissingCloseTag"],
		["openedBy", 12,"StartTag StartCloseTag",19,"OpenTag",20,"StartTag"]
	  ],
	  propSources: [xmlHighlighting],
	  skippedNodes: [0],
	  repeatNodeCount: 8,
	  tokenData: "Jy~R!XOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs'ssv$nvw(Zw}$n}!O,^!O!P$n!P!Q.m!Q![$n![!]0V!]!^$n!^!_3h!_!`El!`!aF_!a!bGQ!b!c$n!c!}0V!}#P$n#P#QHj#Q#R$n#R#S0V#S#T$n#T#o0V#o%W$n%W%o0V%o%p$n%p&a0V&a&b$n&b1p0V1p4U$n4U4d0V4d4e$n4e$IS0V$IS$I`$n$I`$Ib0V$Ib$Kh$n$Kh%#t0V%#t&/x$n&/x&Et0V&Et&FV$n&FV;'S0V;'S;:j3b;:j;=`&e<%l?&r$n?&r?Ah0V?Ah?BY$n?BY?Mn0V?MnO$nX$uWVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nP%dTVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_P%vP;=`<%l%_W&OT{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yW&bP;=`<%l%yX&hP;=`<%l$n_&t_VP{WyUOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ'zTzYVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_~(^ast)c![!]*g!c!}*g#R#S*g#T#o*g%W%o*g%p&a*g&b1p*g4U4d*g4e$IS*g$I`$Ib*g$Kh%#t*g&/x&Et*g&FV;'S*g;'S;:j,W?&r?Ah*g?BY?Mn*g~)fQ!Q![)l#l#m)z~)oQ!Q![)l!]!^)u~)zOX~~)}R!Q![*W!c!i*W#T#Z*W~*ZS!Q![*W!]!^)u!c!i*W#T#Z*W~*jg}!O*g!O!P*g!Q![*g![!]*g!]!^,R!c!}*g#R#S*g#T#o*g$}%O*g%W%o*g%p&a*g&b1p*g1p4U*g4U4d*g4e$IS*g$I`$Ib*g$Je$Jg*g$Kh%#t*g&/x&Et*g&FV;'S*g;'S;:j,W?&r?Ah*g?BY?Mn*g~,WOW~~,ZP;=`<%l*gZ,eYVP{WOr$nrs%_sv$nw}$n}!O-T!O!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ-[YVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a-z!a;'S$n;'S;=`&e<%lO$nZ.TW|QVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n].tYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a/d!a;'S$n;'S;=`&e<%lO$n]/mWdSVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_0b!O`S^QVP{WOr$nrs%_sv$nw}$n}!O0V!O!P0V!P!Q$n!Q![0V![!]0V!]!^$n!^!_%y!_!c$n!c!}0V!}#R$n#R#S0V#S#T$n#T#o0V#o$}$n$}%O0V%O%W$n%W%o0V%o%p$n%p&a0V&a&b$n&b1p0V1p4U0V4U4d0V4d4e$n4e$IS0V$IS$I`$n$I`$Ib0V$Ib$Je$n$Je$Jg0V$Jg$Kh$n$Kh%#t0V%#t&/x$n&/x&Et0V&Et&FV$n&FV;'S0V;'S;:j3b;:j;=`&e<%l?&r$n?&r?Ah0V?Ah?BY$n?BY?Mn0V?MnO$n_3eP;=`<%l0VX3mW{WOq%yqr4Vsv%yw!a%y!a!bEU!b;'S%y;'S;=`&_<%lO%yX4[]{WOr%ysv%yw}%y}!O5T!O!f%y!f!g6V!g!}%y!}#O;f#O#W%y#W#XAr#X;'S%y;'S;=`&_<%lO%yX5YV{WOr%ysv%yw}%y}!O5o!O;'S%y;'S;=`&_<%lO%yX5vT}P{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX6[V{WOr%ysv%yw!q%y!q!r6q!r;'S%y;'S;=`&_<%lO%yX6vV{WOr%ysv%yw!e%y!e!f7]!f;'S%y;'S;=`&_<%lO%yX7bV{WOr%ysv%yw!v%y!v!w7w!w;'S%y;'S;=`&_<%lO%yX7|V{WOr%ysv%yw!{%y!{!|8c!|;'S%y;'S;=`&_<%lO%yX8hV{WOr%ysv%yw!r%y!r!s8}!s;'S%y;'S;=`&_<%lO%yX9SV{WOr%ysv%yw!g%y!g!h9i!h;'S%y;'S;=`&_<%lO%yX9nX{WOr9irs:Zsv9ivw:Zw!`9i!`!a:x!a;'S9i;'S;=`;`<%lO9iP:^TO!`:Z!`!a:m!a;'S:Z;'S;=`:r<%lO:ZP:rOiPP:uP;=`<%l:ZX;PTiP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX;cP;=`<%l9iX;kX{WOr%ysv%yw!e%y!e!f<W!f#V%y#V#W?f#W;'S%y;'S;=`&_<%lO%yX<]V{WOr%ysv%yw!f%y!f!g<r!g;'S%y;'S;=`&_<%lO%yX<wV{WOr%ysv%yw!c%y!c!d=^!d;'S%y;'S;=`&_<%lO%yX=cV{WOr%ysv%yw!v%y!v!w=x!w;'S%y;'S;=`&_<%lO%yX=}V{WOr%ysv%yw!c%y!c!d>d!d;'S%y;'S;=`&_<%lO%yX>iV{WOr%ysv%yw!}%y!}#O?O#O;'S%y;'S;=`&_<%lO%yX?VT{WxPOr%ysv%yw;'S%y;'S;=`&_<%lO%yX?kV{WOr%ysv%yw#W%y#W#X@Q#X;'S%y;'S;=`&_<%lO%yX@VV{WOr%ysv%yw#T%y#T#U@l#U;'S%y;'S;=`&_<%lO%yX@qV{WOr%ysv%yw#h%y#h#iAW#i;'S%y;'S;=`&_<%lO%yXA]V{WOr%ysv%yw#T%y#T#U>d#U;'S%y;'S;=`&_<%lO%yXAwV{WOr%ysv%yw#c%y#c#dB^#d;'S%y;'S;=`&_<%lO%yXBcV{WOr%ysv%yw#V%y#V#WBx#W;'S%y;'S;=`&_<%lO%yXB}V{WOr%ysv%yw#h%y#h#iCd#i;'S%y;'S;=`&_<%lO%yXCiV{WOr%ysv%yw#m%y#m#nDO#n;'S%y;'S;=`&_<%lO%yXDTV{WOr%ysv%yw#d%y#d#eDj#e;'S%y;'S;=`&_<%lO%yXDoV{WOr%ysv%yw#X%y#X#Y9i#Y;'S%y;'S;=`&_<%lO%yXE]T!PP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yZEuWaQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_FhW[UVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZGXYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aGw!a;'S$n;'S;=`&e<%lO$nZHQW!OQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZHqYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_#P$n#P#QIa#Q;'S$n;'S;=`&e<%lO$nZIhYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aJW!a;'S$n;'S;=`&e<%lO$nZJaWwQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n",
	  tokenizers: [startTag, commentContent, piContent, cdataContent, 0, 1, 2, 3],
	  topRules: {"Document":[0,6]},
	  tokenPrec: 0
	});
	
	exports.parser = parser;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/crelt/dist/index.cjs":
	/*!***************************************************!*\
	  !*** ../editor/node_modules/crelt/dist/index.cjs ***!
	  \***************************************************/
	/***/ (function(module) {
	
	"use strict";
	
	
	function crelt() {
	  var elt = arguments[0];
	  if (typeof elt == "string") elt = document.createElement(elt);
	  var i = 1, next = arguments[1];
	  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
		for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
		  var value = next[name];
		  if (typeof value == "string") elt.setAttribute(name, value);
		  else if (value != null) elt[name] = value;
		}
		i++;
	  }
	  for (; i < arguments.length; i++) add(elt, arguments[i]);
	  return elt
	}
	
	function add(elt, child) {
	  if (typeof child == "string") {
		elt.appendChild(document.createTextNode(child));
	  } else if (child == null) ; else if (child.nodeType != null) {
		elt.appendChild(child);
	  } else if (Array.isArray(child)) {
		for (var i = 0; i < child.length; i++) add(elt, child[i]);
	  } else {
		throw new RangeError("Unsupported child node: " + child)
	  }
	}
	
	module.exports = crelt;
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/style-mod/dist/style-mod.cjs":
	/*!***********************************************************!*\
	  !*** ../editor/node_modules/style-mod/dist/style-mod.cjs ***!
	  \***********************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	var C = "\u037c"
	var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C)
	var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet")
	var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {}
	
	// :: - Style modules encapsulate a set of CSS rules defined from
	// JavaScript. Their definitions are only available in a given DOM
	// root after it has been _mounted_ there with `StyleModule.mount`.
	//
	// Style modules should be created once and stored somewhere, as
	// opposed to re-creating them every time you need them. The amount of
	// CSS rules generated for a given DOM root is bounded by the amount
	// of style modules that were used. So to avoid leaking rules, don't
	// create these dynamically, but treat them as one-time allocations.
	var StyleModule = exports.StyleModule = function StyleModule(spec, options) {
	  this.rules = []
	  var ref = options || {};
	  var finish = ref.finish;
	
	  function splitSelector(selector) {
		return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
	  }
	
	  function render(selectors, spec, target, isKeyframes) {
		var local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes"
		if (isAt && spec == null) { return target.push(selectors[0] + ";") }
		for (var prop in spec) {
		  var value = spec[prop]
		  if (/&/.test(prop)) {
			render(prop.split(/,\s*/).map(function (part) { return selectors.map(function (sel) { return part.replace(/&/, sel); }); }).reduce(function (a, b) { return a.concat(b); }),
				   value, target)
		  } else if (value && typeof value == "object") {
			if (!isAt) { throw new RangeError("The value of a property (" + prop + ") should be a primitive value.") }
			render(splitSelector(prop), value, local, keyframes)
		  } else if (value != null) {
			local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) { return "-" + l.toLowerCase(); }) + ": " + value + ";")
		  }
		}
		if (local.length || keyframes) {
		  target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
					  " {" + local.join(" ") + "}")
		}
	  }
	
	  for (var prop in spec) { render(splitSelector(prop), spec[prop], this.rules) }
	};
	
	// :: () → string
	// Returns a string containing the module's CSS rules.
	StyleModule.prototype.getRules = function getRules () { return this.rules.join("\n") };
	
	// :: () → string
	// Generate a new unique CSS class name.
	StyleModule.newName = function newName () {
	  var id = top[COUNT] || 1
	  top[COUNT] = id + 1
	  return C + id.toString(36)
	};
	
	// :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
	//
	// Mount the given set of modules in the given DOM root, which ensures
	// that the CSS rules defined by the module are available in that
	// context.
	//
	// Rules are only added to the document once per root.
	//
	// Rule order will follow the order of the modules, so that rules from
	// modules later in the array take precedence of those from earlier
	// modules. If you call this function multiple times for the same root
	// in a way that changes the order of already mounted modules, the old
	// order will be changed.
	//
	// If a Content Security Policy nonce is provided, it is added to
	// the `<style>` tag generated by the library.
	StyleModule.mount = function mount (root, modules, options) {
	  var set = root[SET], nonce = options && options.nonce
	  if (!set) { set = new StyleSet(root, nonce) }
	  else if (nonce) { set.setNonce(nonce) }
	  set.mount(Array.isArray(modules) ? modules : [modules])
	};
	
	var adoptedSet = new Map //<Document, StyleSet>
	
	var StyleSet = function StyleSet(root, nonce) {
	  var doc = root.ownerDocument || root, win = doc.defaultView
	  if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
		var adopted = adoptedSet.get(doc)
		if (adopted) {
		  root.adoptedStyleSheets = [adopted.sheet ].concat( root.adoptedStyleSheets)
		  return root[SET] = adopted
		}
		this.sheet = new win.CSSStyleSheet
		root.adoptedStyleSheets = [this.sheet ].concat( root.adoptedStyleSheets)
		adoptedSet.set(doc, this)
	  } else {
		this.styleTag = doc.createElement("style")
		if (nonce) { this.styleTag.setAttribute("nonce", nonce) }
		var target = root.head || root
		target.insertBefore(this.styleTag, target.firstChild)
	  }
	  this.modules = []
	  root[SET] = this
	};
	
	StyleSet.prototype.mount = function mount (modules) {
	  var sheet = this.sheet
	  var pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */
	  for (var i = 0; i < modules.length; i++) {
		var mod = modules[i], index = this.modules.indexOf(mod)
		if (index < j && index > -1) { // Ordering conflict
		  this.modules.splice(index, 1)
		  j--
		  index = -1
		}
		if (index == -1) {
		  this.modules.splice(j++, 0, mod)
		  if (sheet) { for (var k = 0; k < mod.rules.length; k++)
			{ sheet.insertRule(mod.rules[k], pos++) } }
		} else {
		  while (j < index) { pos += this.modules[j++].rules.length }
		  pos += mod.rules.length
		  j++
		}
	  }
	
	  if (!sheet) {
		var text = ""
		for (var i$1 = 0; i$1 < this.modules.length; i$1++)
		  { text += this.modules[i$1].getRules() + "\n" }
		this.styleTag.textContent = text
	  }
	};
	
	StyleSet.prototype.setNonce = function setNonce (nonce) {
	  if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
		{ this.styleTag.setAttribute("nonce", nonce) }
	};
	
	// Style::Object<union<Style,string>>
	//
	// A style is an object that, in the simple case, maps CSS property
	// names to strings holding their values, as in `{color: "red",
	// fontWeight: "bold"}`. The property names can be given in
	// camel-case—the library will insert a dash before capital letters
	// when converting them to CSS.
	//
	// If you include an underscore in a property name, it and everything
	// after it will be removed from the output, which can be useful when
	// providing a property multiple times, for browser compatibility
	// reasons.
	//
	// A property in a style object can also be a sub-selector, which
	// extends the current context to add a pseudo-selector or a child
	// selector. Such a property should contain a `&` character, which
	// will be replaced by the current selector. For example `{"&:before":
	// {content: '"hi"'}}`. Sub-selectors and regular properties can
	// freely be mixed in a given object. Any property containing a `&` is
	// assumed to be a sub-selector.
	//
	// Finally, a property can specify an @-block to be wrapped around the
	// styles defined inside the object that's the property's value. For
	// example to create a media query you can do `{"@media screen and
	// (min-width: 400px)": {...}}`.
	
	
	
	/***/ }),
	
	/***/ "../editor/node_modules/w3c-keyname/index.cjs":
	/*!****************************************************!*\
	  !*** ../editor/node_modules/w3c-keyname/index.cjs ***!
	  \****************************************************/
	/***/ (function(__unused_webpack_module, exports) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	
	var base = {
	  8: "Backspace",
	  9: "Tab",
	  10: "Enter",
	  12: "NumLock",
	  13: "Enter",
	  16: "Shift",
	  17: "Control",
	  18: "Alt",
	  20: "CapsLock",
	  27: "Escape",
	  32: " ",
	  33: "PageUp",
	  34: "PageDown",
	  35: "End",
	  36: "Home",
	  37: "ArrowLeft",
	  38: "ArrowUp",
	  39: "ArrowRight",
	  40: "ArrowDown",
	  44: "PrintScreen",
	  45: "Insert",
	  46: "Delete",
	  59: ";",
	  61: "=",
	  91: "Meta",
	  92: "Meta",
	  106: "*",
	  107: "+",
	  108: ",",
	  109: "-",
	  110: ".",
	  111: "/",
	  144: "NumLock",
	  145: "ScrollLock",
	  160: "Shift",
	  161: "Shift",
	  162: "Control",
	  163: "Control",
	  164: "Alt",
	  165: "Alt",
	  173: "-",
	  186: ";",
	  187: "=",
	  188: ",",
	  189: "-",
	  190: ".",
	  191: "/",
	  192: "`",
	  219: "[",
	  220: "\\",
	  221: "]",
	  222: "'",
	  229: "q"
	};
	
	var shift = {
	  48: ")",
	  49: "!",
	  50: "@",
	  51: "#",
	  52: "$",
	  53: "%",
	  54: "^",
	  55: "&",
	  56: "*",
	  57: "(",
	  59: ":",
	  61: "+",
	  173: "_",
	  186: ":",
	  187: "+",
	  188: "<",
	  189: "_",
	  190: ">",
	  191: "?",
	  192: "~",
	  219: "{",
	  220: "|",
	  221: "}",
	  222: "\"",
	  229: "Q"
	};
	
	var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
	var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
	var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
	var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
	var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
	var brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac;
	
	// Fill in the digit keys
	for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);
	
	// The function keys
	for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;
	
	// And the alphabetic keys
	for (var i = 65; i <= 90; i++) {
	  base[i] = String.fromCharCode(i + 32);
	  shift[i] = String.fromCharCode(i);
	}
	
	// For each code that doesn't have a shift-equivalent, copy the base name
	for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
	
	function keyName(event) {
	  // Don't trust event.key in Chrome when there are modifiers until
	  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
	  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
		(safari || ie) && event.shiftKey && event.key && event.key.length == 1;
	  var name = (!ignoreKey && event.key) ||
		(event.shiftKey ? shift : base)[event.keyCode] ||
		event.key || "Unidentified";
	  // Edge sometimes produces wrong names (Issue #3)
	  if (name == "Esc") name = "Escape";
	  if (name == "Del") name = "Delete";
	  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
	  if (name == "Left") name = "ArrowLeft";
	  if (name == "Up") name = "ArrowUp";
	  if (name == "Right") name = "ArrowRight";
	  if (name == "Down") name = "ArrowDown";
	  return name
	}
	
	exports.base = base;
	exports.keyName = keyName;
	exports.shift = shift;
	
	
	/***/ })
	
	/******/ 	});
	/************************************************************************/
	/******/ 	// The module cache
	/******/ 	var __webpack_module_cache__ = {};
	/******/ 	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/ 		// Check if module is in cache
	/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
	/******/ 		if (cachedModule !== undefined) {
	/******/ 			return cachedModule.exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = __webpack_module_cache__[moduleId] = {
	/******/ 			// no module.id needed
	/******/ 			// no module.loaded needed
	/******/ 			exports: {}
	/******/ 		};
	/******/ 	
	/******/ 		// Execute the module function
	/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/ 	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/ 	
	/************************************************************************/
	var __webpack_exports__ = {};
	// This entry need to be wrapped in an IIFE because it need to be in strict mode.
	!function() {
	"use strict";
	var exports = __webpack_exports__;
	/*!********************************************************!*\
	  !*** ./components/NoteEditor/CodeMirror/CodeMirror.ts ***!
	  \********************************************************/
	
	/* eslint-disable import/prefer-default-export */
	Object.defineProperty(exports, "__esModule", ({ value: true }));
	exports.initCodeMirror = void 0;
	const createEditor_1 = __webpack_require__(/*! @joplin/editor/CodeMirror/createEditor */ "../editor/CodeMirror/createEditor.ts");
	const webviewLogger_1 = __webpack_require__(/*! ./webviewLogger */ "./components/NoteEditor/CodeMirror/webviewLogger.ts");
	function initCodeMirror(parentElement, initialText, settings) {
		return (0, createEditor_1.default)(parentElement, {
			initialText,
			settings,
			onLogMessage: message => {
				(0, webviewLogger_1.logMessage)(message);
			},
			onEvent: (event) => {
				(0, webviewLogger_1.postMessage)('onEditorEvent', event);
			},
		});
	}
	exports.initCodeMirror = initCodeMirror;
	
	}();
	window.codeMirrorBundle = __webpack_exports__;
	/******/ })()
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,